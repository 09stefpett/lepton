#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.313264,-0.372975,0.565878,0.175552,-0.796468,0.55606 };
  static const float weights1[][6] = { {-0.177312,-0.123108,-1.62641,-0.802981,-0.325604,-1.19534}
,
{-0.165611,-0.231266,0.0729819,-0.125915,0.134539,0.0948866}
,
{-0.418761,-0.494894,0.0413281,-0.021373,-0.228615,-0.0875512}
,
{-0.512261,-0.283008,1.19813,0.693621,-0.622778,0.824932}
,
{-0.415099,-0.367541,0.389518,0.113425,-0.890513,0.522974}
,
{-0.205335,-0.428563,0.539812,0.0250261,-0.694159,0.712179}
,
{-0.344284,-0.162278,0.455054,0.234249,-0.673051,0.443285}
,
{-0.0693575,-0.0660994,0.0762287,0.0359776,-0.0413639,-0.143895}
,
{-0.0717335,-0.07108,0.15539,0.147087,-0.138865,0.0249771}
,
{0.163518,0.0842315,-0.0336718,-0.0183665,-0.00777549,0.23332}
,
{0.0931823,0.229491,-0.0426696,-0.119403,0.0720836,-0.125113}
,
{-0.0223306,-0.00984996,0.113287,0.0571841,0.118595,-0.0842138}
,
{-0.0512254,0.126848,-0.0490025,0.0625923,0.0257042,0.0493768}
,
{-0.0850719,-0.0232304,0.00951024,0.0282842,-0.103034,-0.0123318}
,
{-0.0207352,-0.134864,-0.0471056,-0.0208296,0.0147606,0.0390213}
,
{0.168715,-0.0278472,-0.173022,0.125419,-0.125171,-0.0570362}
,
{0.115559,0.156842,-0.0079318,-0.133077,-0.00288487,-0.0763121}
,
{-0.0561279,-0.0108191,-0.213456,0.202097,-0.134926,0.00481388}
,
{-0.529884,-0.185848,-1.07074,-0.276468,-0.0790701,-0.782254}
,
{-0.144668,0.160786,0.213343,0.207441,0.04651,-0.0290113}
,
{0.12955,-0.0390547,0.33298,0.172417,-0.0178562,0.102811}
,
{0.121344,-0.0379808,0.200613,-0.0249962,0.260952,0.222671}
,
{-0.227018,0.125051,-0.131492,-0.037544,-0.0776203,0.0548434}
,
{-0.0674151,0.0990722,-0.0234852,0.178573,0.105706,0.0787182}
,
{-0.183576,-0.0510358,0.00869563,0.100477,-0.200268,0.0148175}
,
{-0.200441,-0.264647,0.0869028,-0.133187,-0.27878,-0.0606513}
,
{-0.0236293,-0.179113,0.0208618,-0.0167969,0.00854489,0.0175824}
,
{-0.0216589,-0.120464,0.0384439,0.0537262,-0.0147048,-0.0396314}
,
{0.0688493,0.0851645,0.892061,0.708523,-0.349264,0.437099}
,
{-0.0632416,0.0608774,-0.0621002,-0.108482,-0.0862261,0.124099}
,
{0.193207,0.221253,0.143544,-0.0579556,-0.00807884,-0.0841691}
,
{-0.0522743,-0.15469,0.0165212,-0.0018204,-0.239514,0.129245}
,
{0.0850346,-0.0845492,0.0950812,0.0276329,-0.160453,-0.145685}
,
{-0.0820517,0.180098,-0.0770794,0.0257515,0.0133791,0.140924}
,
{-0.0661887,-0.0648129,-0.0179165,0.00939487,0.00298439,-0.0125531}
,
{0.00833799,-0.095115,0.0243942,-0.0756778,-0.017048,-0.00354517}
,
{0.102019,-0.0176013,0.126639,-0.135114,-0.0725343,-0.0974535}
,
{-0.0563187,0.0172655,-0.0229171,-0.0244785,-0.0298052,0.0034795}
,
{0.0565479,0.126751,0.00447875,0.0259813,-0.00734255,0.0477862}
,
{-0.102184,-0.1534,-0.0565159,-0.0372428,-0.101925,-0.0433438}
,
{0.00800748,-0.0625411,0.00877954,-0.0189321,0.0385593,0.0143135}
,
{0.0889492,0.0490965,0.0209264,0.0537402,0.0481698,0.0267108}
,
{-0.0686166,-0.00414484,-0.038839,-0.0331331,0.0226383,0.0556969}
,
{0.112413,-0.116191,0.114131,-0.21841,-0.159769,-0.111046}
,
{-0.0255377,-0.0872608,0.000112784,-0.072834,-0.0258831,0.0197216}
,
{-0.0409865,0.0763454,-0.0164976,0.0180645,0.0274939,0.0184005}
,
{-0.114512,-0.172782,-0.0591576,-0.0609035,0.0102388,0.0364872}
,
{-0.0169112,0.0748529,-0.00354064,0.0477826,0.0740278,0.0272464}
,
{0.0123544,0.206866,0.0257771,0.0434547,-0.0301275,-0.0407006}
,
{-0.0632027,-0.163124,-0.0319854,-0.063308,0.0905604,0.0780048}
,
{-0.0535513,-0.0384526,-0.0240771,-0.00686052,-0.0262685,0.00612931}
,
{0.0175946,-0.159537,0.0065992,-0.0403438,0.00895336,0.0294617}
,
{-0.0311594,0.0282673,-0.0245931,0.029284,0.0341984,0.0235323}
,
{0.087949,0.114338,0.0770051,0.0459019,-9.95131e-05,-0.097543}
,
{-0.0545424,0.0131722,0.025795,-0.0536532,-0.103821,0.00583991}
,
{-0.014902,-0.0654616,0.00346575,0.0574525,0.0839977,-0.0199201}
,
{0.162748,0.253181,0.0990351,-0.0201902,-0.0474037,-0.101788}
,
{-0.497975,6.33481e-05,0.0306302,0.114665,-0.214147,0.369814}
,
{-0.144102,0.0573123,0.0441636,-0.21652,0.00511572,0.0226973}
,
{-0.040015,0.0652491,0.00359116,0.139096,0.101074,-0.0527065}
,
{0.00578691,0.113767,0.003922,-0.0965031,-0.112035,0.0215412}
,
{-0.133928,0.025425,0.0383409,0.0150231,0.386188,0.0571484}
,
{-0.554802,0.0574722,-0.379015,0.158849,-0.802377,0.663458}
,
{0.0953191,-0.0666489,-0.0192508,-0.0801445,-0.0692462,0.0901019}
,
{0.0211616,-0.0656652,0.00276037,-0.00429825,0.0542079,-0.0475302}
,
{-0.0855996,0.116262,0.0474926,-0.0216326,0.0332401,-0.107694}
,
{-0.166166,-0.0314934,0.0393047,0.0522736,0.0291041,-0.179305}
,
{0.165821,-0.699026,0.289439,0.346397,-0.1171,-0.234668}
,
{0.03751,0.144905,-0.0108295,0.0723193,-0.022942,-0.062336}
,
{0.0868758,-0.132138,-0.0105745,0.105566,0.101425,-0.0557018}
,
{0.106181,-0.0692022,-0.0323411,0.0399806,0.00681778,0.100609}
,
{0.116646,0.00300583,-0.0184723,0.106676,0.201339,0.134149}
,
{0.268699,-0.178368,-0.0726724,-0.275964,0.129037,0.158672}
,
{0.0938788,0.226946,0.023435,0.0101031,-0.375909,-0.0892938}
,
{-0.251451,-0.205899,-0.0338252,0.584368,0.0191456,0.132581}
,
{0.486426,-0.327876,0.0498519,0.00561453,0.124207,0.0512655}
,
{-0.061492,0.0844041,0.121044,-0.121358,1.08125,0.0147809}
,
{-0.0408929,-0.569133,0.682886,-0.026608,0.0550665,0.267606}
,
{-0.140373,-0.223371,0.178945,-0.134614,-0.718304,0.314129}
 };
  static const float bias2[1] = { 0.315351 };
  static const float weights2[][1] = { {-0.0191116}
,
{-0.0101386}
,
{0.0405568}
,
{0.0203227}
,
{-0.0240142}
,
{0.0314296}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_0_0(v, index);
}
static int assign_gen_lepton_prior_0_0_0() {
  global_gen_lepton_prior.at(0,0,0) = &specialized_gen_lepton_prior_0_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_0_0 = assign_gen_lepton_prior_0_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0477562,-0.148006,0.233381,0.208983,-0.152939,0.229359 };
  static const float weights1[][6] = { {-0.0675966,-0.0804666,0.169646,0.200277,0.018863,0.0107056}
,
{0.0831759,-0.0280591,0.0778777,-0.106736,-0.0146706,0.00547653}
,
{-0.00979965,-0.152954,-0.163309,-0.0170922,0.178379,-0.0199214}
,
{0.215341,0.21534,0.164078,0.527003,-0.139198,0.569294}
,
{0.00875534,-0.217218,0.0852901,0.116994,-0.05256,0.195083}
,
{-0.119068,-0.133726,0.220672,0.190709,-0.192638,0.132448}
,
{0.0673207,-0.0625673,0.150942,0.0868516,-0.0697884,0.250212}
,
{0.0425717,0.0119027,0.180283,-0.0373901,0.00451228,0.022157}
,
{-0.122589,0.0886442,0.231613,0.0370002,0.074788,-0.206986}
,
{0.00918875,0.0495888,-0.17637,0.134549,0.0487015,0.00453637}
,
{-0.0169002,-0.012932,-0.209457,0.00500998,0.2353,0.0164004}
,
{0.0709581,0.0790306,-0.0163165,0.132752,0.0902278,0.0224506}
,
{0.137379,0.0593471,0.0713738,0.155344,-0.122288,0.0499973}
,
{0.0173841,-0.0184141,-0.0172499,0.0244649,-0.080035,-0.0558777}
,
{-0.0417666,-0.0136844,-0.0784192,-0.0177176,0.126455,-0.126932}
,
{0.066315,0.113532,-0.0665524,-0.1914,0.1845,0.1904}
,
{-0.191543,-0.272538,0.192728,0.27381,-0.25724,0.242274}
,
{-0.10705,-0.0711267,-0.201003,0.0284147,0.0725478,0.0499988}
,
{0.237452,-0.0660454,0.0556948,-0.0980723,-0.0460031,0.197602}
,
{-0.028372,0.154352,0.145177,0.0259508,0.152585,0.0335858}
,
{-0.0202217,-0.0245741,-0.00915843,0.0273691,0.0830487,-0.0643461}
,
{0.0463825,0.142105,0.0708093,-0.0607719,0.0113053,0.209214}
,
{0.023854,0.216606,-0.00992584,-0.00889132,-0.165904,0.10012}
,
{0.0605157,0.125214,0.0630066,0.152347,0.0246278,-0.0115028}
,
{-0.0548594,-0.182191,0.178164,0.0930875,0.155106,-0.139795}
,
{0.14827,0.0341371,-0.00993595,0.0378406,0.207869,-0.0509429}
,
{-0.0481693,-0.227381,-0.085223,0.0515337,0.0860732,-0.0941292}
,
{-0.297354,0.103101,-0.044998,0.0099561,-0.152889,0.0764344}
,
{0.018932,0.019239,-0.0232333,0.0705256,0.41539,0.134897}
,
{-0.167353,-0.108814,0.00753795,-0.0546835,-0.0496987,-0.00926884}
,
{-0.0126226,-0.0290843,-0.105112,0.047858,0.0151967,0.0278219}
,
{-0.0750462,-0.0471605,-0.180849,0.0157179,-0.0418481,0.0724775}
,
{-0.0186342,-0.0591545,-0.0989567,0.05752,0.128645,-0.0018903}
,
{0.00278761,-0.0282239,0.0727255,0.138855,0.100195,-0.0735902}
,
{-0.117058,-0.121517,-0.297431,-0.0637926,-0.151434,0.090363}
,
{0.0543605,0.045582,0.164954,0.000854552,-0.0133972,-0.0870418}
,
{0.321426,-0.156445,-0.146622,0.0331682,-0.115116,-0.0348447}
,
{-0.0225374,0.0657151,0.0905051,-0.0671722,0.0295516,0.0795737}
,
{-0.139828,-0.108575,-0.122737,-0.129975,0.0114898,0.0539371}
,
{0.0579905,0.0644595,0.0694464,-0.119328,-0.04354,0.160814}
,
{0.0145044,-0.0995576,-0.100441,0.0318402,-0.029102,-0.0785391}
,
{0.0735786,-0.0924164,-0.0876153,0.0565107,0.0123522,-0.157115}
,
{-0.0189026,0.0411496,0.12845,0.0851344,0.0419119,-0.154097}
,
{0.223082,0.0703898,0.183601,0.186437,0.00132558,-0.153906}
,
{0.118702,0.120513,0.112746,0.101999,-0.0137593,0.0413902}
,
{0.00458856,-0.0869679,-0.0677988,0.000205753,-0.00261367,-0.0643492}
,
{-0.226628,0.0673447,-0.0110808,-0.0136338,0.134745,0.138846}
,
{-0.0530449,-0.0555784,-0.136028,0.0424946,-0.121968,-0.0238676}
,
{-0.114632,-0.0307504,-0.1029,0.0130971,-0.121121,-0.0676566}
,
{0.0977206,0.0864898,0.0676949,0.175207,-0.122868,-0.113644}
,
{-0.046888,-0.0385394,-0.0845746,-0.0434066,-0.0248348,0.0476229}
,
{-0.326228,-0.0539525,0.0719665,-0.28002,-0.171719,-0.0154294}
,
{-0.00725038,0.0149045,-0.0587547,0.0321989,0.0990372,0.0754839}
,
{0.0162689,-0.0926387,-0.021742,-0.0186131,-0.0908807,-0.202192}
,
{-0.44423,0.250262,-0.120647,0.0291948,-0.192698,0.237806}
,
{0.0456059,-0.133987,-0.0814774,0.131851,0.0563184,-0.122862}
,
{-0.216046,-0.219521,0.12116,0.34824,-0.0316254,-0.161841}
,
{0.151646,0.251856,0.133181,0.0294478,-0.00906498,-0.0983226}
,
{0.157709,-0.0107093,0.10138,0.158873,-0.0975291,-0.211616}
,
{-0.339337,0.042015,-0.11601,-0.0643079,-0.0508833,-0.0256095}
,
{-0.147703,0.0204467,-0.0224788,-0.158909,-0.309192,0.092841}
,
{0.521211,-0.510746,0.163965,0.0766117,-0.0699323,-0.130285}
,
{-0.118159,-0.0243582,0.065761,-0.105426,-0.0340719,0.0210617}
,
{-0.572114,-0.123696,-0.279312,0.128139,0.0633476,-0.0335697}
,
{-0.189152,-0.070906,0.024596,-0.129655,-0.0236131,-0.109554}
,
{0.194887,-0.0101216,-0.0408799,0.0965396,-0.00583884,-0.0691506}
,
{-0.00562636,-0.0467658,-0.102116,0.485185,-0.122931,0.0327176}
,
{0.413698,-0.0504446,0.0535061,0.0288981,-0.019755,-0.0260701}
,
{0.257731,-0.334132,-0.131028,-0.0900122,0.139,0.353221}
,
{0.392922,0.0966389,0.22254,-0.140317,0.0150702,-0.10398}
,
{-0.33095,0.0537277,0.0184472,-0.175127,-0.0649373,0.260377}
,
{0.0463921,-0.00366821,0.472514,0.101035,-0.440732,-0.242091}
,
{-0.197267,-0.103207,0.146249,-0.229008,-0.153546,-0.0341976}
,
{-0.39958,0.270593,-0.353387,-0.211356,0.151133,0.0575385}
,
{-0.361797,-0.166313,0.0666166,0.621683,-0.408739,-0.512841}
,
{0.321914,0.155311,-0.170511,0.157307,-0.362691,-0.132293}
,
{-0.0586562,0.860003,-1.01945,-0.894639,0.96583,-0.916781}
,
{0.0129501,-0.33432,-0.17721,0.17032,0.113391,0.572171}
,
{-1.23612,0.0330111,0.364438,0.982026,-0.914351,0.965921}
 };
  static const float bias2[1] = { 0.271839 };
  static const float weights2[][1] = { {-0.0398502}
,
{-0.0969302}
,
{0.0680623}
,
{0.0662469}
,
{-0.0215205}
,
{0.0640192}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_4(v, index);
}
static int assign_gen_lepton_prior_1_0_4() {
  global_gen_lepton_prior.at(1,0,4) = &specialized_gen_lepton_prior_1_0_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_4 = assign_gen_lepton_prior_1_0_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.312135,0.28994,-0.154073,-0.397441,-0.189834,0.207817 };
  static const float weights1[][6] = { {0.159787,0.149832,0.21549,-0.219634,-0.397661,0.392436}
,
{-0.0780815,-0.0772232,-0.116398,-0.0545033,-0.0626125,0.0686478}
,
{-0.155581,-0.0714665,0.561624,0.227723,-0.0533189,0.0733276}
,
{0.670411,0.152305,0.26687,0.056545,-0.544025,0.376951}
,
{0.371354,0.28595,-0.253788,-0.325771,-0.22296,0.209176}
,
{0.176381,0.0779693,-0.129931,-0.500512,-0.315601,0.0205319}
,
{0.382129,0.111998,-0.229727,-0.682574,-0.146406,0.0982594}
,
{-0.0195011,0.102081,0.0541811,-0.15268,-0.00969388,0.0826447}
,
{-0.00916316,0.13123,0.0952675,-0.0446981,0.0513214,-0.177288}
,
{0.0197133,-0.0438285,-0.139196,-0.0785611,-0.0159132,0.0729682}
,
{0.114785,-0.0174549,0.0211244,-0.00464837,0.0324765,-0.0151794}
,
{0.0828171,0.19427,-0.395524,-0.344224,0.0419669,-0.0774881}
,
{0.245365,0.165668,-0.136483,-0.230848,-0.227512,-0.0897122}
,
{-0.1768,-0.0822577,0.214571,-0.0563096,-0.0739272,-0.0385069}
,
{0.0627152,-0.0207765,-0.0611635,-0.0576385,-0.018637,-0.0964602}
,
{-0.130603,-0.054727,-0.0543154,0.0274698,0.144808,-0.001665}
,
{0.496918,0.104529,0.186375,-0.0421051,-0.197713,0.355745}
,
{0.121194,-0.173532,-0.228691,-0.119865,-0.00928797,0.000850759}
,
{0.208324,0.00336534,0.172835,-0.468376,0.183959,-0.0766522}
,
{0.0189631,0.0801844,0.138087,-0.192127,0.222574,0.00907294}
,
{0.0628426,0.0340551,-0.348745,0.033014,0.169625,0.0615651}
,
{-0.0776369,-0.115821,-0.147512,-0.295315,-0.0891403,0.0865638}
,
{-0.0622117,0.11583,-0.0050484,-0.0970414,0.117695,-0.0568457}
,
{-0.00329122,0.0783424,-0.0789232,-0.1503,0.137007,0.149308}
,
{-0.083956,0.124727,-0.11694,-0.0505104,-0.10607,0.0680575}
,
{0.0904167,-0.192603,0.0103376,-0.00360576,-0.0880572,-0.266449}
,
{0.0518494,0.0720195,0.00157079,0.0627278,0.210901,0.0621466}
,
{0.230867,-0.207826,-0.0251052,-0.103669,-0.0996886,-0.262497}
,
{-0.0133658,0.214886,-0.0891266,0.240427,0.124579,0.269612}
,
{0.150658,-0.0130343,0.00531251,-0.0242142,-0.127927,0.17426}
,
{0.000101113,-0.00922339,0.0684095,0.0507116,0.0341193,0.0777388}
,
{-0.0163092,0.00514735,-0.117143,-0.210544,-0.108019,0.15766}
,
{-0.0876046,-0.158868,0.0412678,-0.102045,-0.144049,-0.0877024}
,
{0.0335836,0.0485874,0.126921,-0.116751,0.115616,-0.19468}
,
{0.00089967,0.0137091,0.110622,-0.0743594,-0.0018584,-0.035005}
,
{-0.0123362,-0.145276,0.1467,0.181447,0.0175106,0.217001}
,
{-0.00830804,-0.0343314,0.489769,-0.134111,-0.0146726,0.048487}
,
{0.187289,-0.136636,0.0389246,-0.0381192,0.00340967,-0.0873048}
,
{0.115377,-0.0303676,0.394247,0.00247563,-0.0154861,-0.097517}
,
{0.188695,0.15275,0.0311955,-0.000601977,0.2426,-0.0366742}
,
{-0.0441527,-0.00990403,-0.0898038,0.113447,-0.109979,-0.133755}
,
{0.0439126,0.0823224,0.156155,0.187431,0.0740119,0.00116734}
,
{0.086573,-0.209439,-0.0837567,0.19805,-0.0688223,-0.0283148}
,
{0.0520764,0.115253,-0.200723,0.0476637,0.258956,0.213081}
,
{0.0658038,-0.0951952,-0.125986,0.16273,-0.0295872,-0.0414508}
,
{-0.05706,0.0437981,-0.00447032,-0.181173,-0.00720923,0.0141083}
,
{0.0315373,-0.0643244,-0.0313656,-0.0737449,0.0944522,0.211117}
,
{0.0671141,0.11059,0.115991,-0.0836347,0.112898,-0.0186722}
,
{0.00868364,-0.0131795,-0.390439,0.122435,-0.0332315,-0.147163}
,
{-0.0227056,0.0566721,0.12259,0.14085,0.00276237,-0.0159612}
,
{0.00696822,-0.0075172,-0.11676,-0.134052,-0.0329963,-0.0715629}
,
{0.0290957,0.109274,0.232276,0.0234219,0.043231,-0.127471}
,
{-0.0467491,0.0259803,-0.151444,-0.0661863,0.0456156,0.0963769}
,
{-0.190998,-0.00366645,-0.270538,0.181889,-0.0712171,0.141448}
,
{0.269008,0.208838,-0.0759788,0.00947815,0.38391,-0.303032}
,
{-0.0371796,0.0467446,0.0151935,0.00676005,-0.0859125,-0.122223}
,
{-0.0579632,0.119983,-0.918893,-0.405513,0.210111,-0.823363}
,
{-0.416402,-1.10981,-0.363144,0.368029,-0.346542,0.310034}
,
{0.0153388,-0.631833,0.339327,-0.181116,0.274285,0.4164}
,
{-0.0489933,0.166434,-0.170231,0.104171,0.209636,0.0384069}
,
{0.0883285,-0.35114,-0.0671405,-0.191323,0.112293,-0.0468775}
,
{0.00670587,0.636673,0.644515,0.532365,-0.241514,0.216706}
,
{0.266868,-0.108693,0.221849,0.730192,-0.555086,0.2168}
,
{-0.123901,0.219316,-0.213602,0.0738901,-0.141861,-0.612823}
,
{0.436663,-0.465916,0.236877,0.361836,0.158621,-0.449722}
,
{-0.042667,0.167134,0.0179342,0.131746,-0.0847443,-0.140548}
,
{-0.0957179,-1.05255,0.259694,0.197949,0.283091,-0.798564}
,
{-0.0151899,-0.561085,-0.297523,0.289064,0.183979,0.0768087}
,
{-0.0334994,-0.220832,-0.0779285,-0.0163137,0.29761,-0.599356}
,
{-0.220541,0.00531381,-0.106324,0.138242,-0.319948,-0.299197}
,
{0.0431406,-0.0787104,0.103591,-0.0517091,0.145808,0.350544}
,
{-0.473658,0.603596,-0.375994,-0.861562,0.60254,-0.903737}
,
{0.668861,0.511812,0.8069,0.100279,1.02518,0.0174687}
,
{-0.140246,1.15884,0.138704,0.112953,0.293856,-0.431909}
,
{0.15618,-1.08861,-0.282936,-0.0491238,-0.979224,1.10614}
,
{0.0521641,-0.251054,0.0498335,-0.0897873,0.27678,0.0899089}
,
{0.123376,0.0904798,0.106133,-0.0549994,0.0425908,0.16525}
,
{-0.25779,-0.407425,0.158456,0.266842,-0.0174744,0.00662312}
,
{-1.35406,-0.751281,-0.10336,-0.0757776,-0.371335,0.150173}
 };
  static const float bias2[1] = { 0.252792 };
  static const float weights2[][1] = { {0.0704775}
,
{0.0608206}
,
{-0.400791}
,
{-0.62439}
,
{-0.0912224}
,
{0.0524985}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_5(v, index);
}
static int assign_gen_lepton_prior_1_0_5() {
  global_gen_lepton_prior.at(1,0,5) = &specialized_gen_lepton_prior_1_0_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_5 = assign_gen_lepton_prior_1_0_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.120726,-0.149737,0.255673,0.33137,0.148582,-0.266284 };
  static const float weights1[][6] = { {-0.0952136,-0.0376719,0.0361741,-0.00536994,-0.252327,0.0306943}
,
{-0.0668745,0.132738,-0.0722002,0.0288763,0.116741,0.452075}
,
{0.00419895,0.0538718,-0.0198163,0.142635,0.0529414,-0.720059}
,
{-0.3449,-0.103304,-0.0053338,0.388566,-0.0182052,-0.915644}
,
{-0.214178,-0.0796464,0.276648,0.165024,0.258244,-0.19149}
,
{0.122128,-0.128901,0.354043,0.312981,0.101567,-0.0318815}
,
{-0.0194047,-0.0888921,0.238281,0.423848,-0.0538262,-0.0187567}
,
{-0.201622,-0.0749739,-0.113785,-0.116631,0.17212,0.064212}
,
{-0.214431,0.142207,-0.374965,0.0144316,0.180449,-0.202771}
,
{-0.0768025,0.145038,-0.157371,-0.132059,-0.137714,0.0146179}
,
{0.0542145,-0.0200579,-0.0507368,0.000838032,-0.0747297,-0.0188082}
,
{0.112579,-0.0067546,0.0475936,-0.453448,0.126127,0.0716118}
,
{0.185753,0.0396215,0.23795,0.111675,0.0814392,-0.275721}
,
{-0.168242,0.336494,-0.0498386,0.310867,0.184934,-0.291126}
,
{-0.0203428,0.0702294,-0.100662,-0.0677642,-0.19682,0.0634119}
,
{-0.103164,0.139719,-0.140961,-0.0308919,0.037122,-0.138159}
,
{-0.0758493,-0.384537,0.218453,-0.481087,-0.0577337,0.238096}
,
{0.0882525,-0.0323537,0.0729062,-0.0251444,-0.100887,0.103308}
,
{0.144939,0.0828622,0.317711,0.355764,-0.113209,0.395673}
,
{0.0529746,0.0268171,0.0134182,-0.0750581,-0.000831916,-0.271331}
,
{0.0556404,0.170753,0.0603831,0.00040034,0.132085,-0.0703645}
,
{0.0102475,0.0756508,-0.0342689,0.0565122,0.115502,0.0241672}
,
{0.151852,-0.195773,-0.172877,0.156883,-0.167488,-0.0453105}
,
{-0.0664992,0.00129776,-0.0668118,-0.0444492,0.00611037,-0.0293336}
,
{0.0551457,0.236138,-0.184273,0.0738316,-0.0864228,-0.21461}
,
{0.0489825,0.0210895,-0.119286,0.0748314,-0.141494,-0.165274}
,
{0.0408377,0.0323873,-0.0699757,0.186908,-0.126965,-0.057579}
,
{-0.0654351,-0.062771,-0.0672613,-0.105333,-0.0370889,-0.132227}
,
{0.165063,-0.126072,-0.15455,-0.0680749,0.0954324,0.0254052}
,
{0.181909,-0.0311623,0.0165701,0.150049,-0.0368584,-0.0634485}
,
{0.0561114,0.0527491,0.154842,0.0694139,-0.0237592,-0.602673}
,
{-0.00379211,0.0960096,-0.0337513,-0.166946,0.102316,0.107459}
,
{-0.175883,0.0347646,0.17557,0.18044,-0.0718205,0.0676922}
,
{0.0505047,-0.026017,0.00355144,-0.109152,-0.154087,-0.035343}
,
{-0.0749351,-0.0172603,-0.234031,-0.108614,0.0689737,0.0234677}
,
{0.205943,0.0755526,0.269625,-0.0125059,-0.000395666,0.0586101}
,
{0.147332,-0.308281,-0.268343,-0.0034315,-0.067734,0.700783}
,
{-0.0696359,0.0790489,0.161024,0.0973164,-0.0634006,0.163238}
,
{-0.224572,0.120626,-0.0290902,0.215555,-0.00192007,0.0874152}
,
{-0.0381537,-0.000420224,0.085617,0.0260778,-0.0453005,-0.0762932}
,
{-0.107025,-0.0697916,-0.29311,-0.0304603,0.0623143,0.0529185}
,
{0.0188671,0.0857725,-0.244587,-0.157841,0.224384,-0.411725}
,
{0.0269125,-0.000762246,0.0442453,0.200174,-0.0303989,-0.0476011}
,
{-0.0689481,0.0337962,0.147262,-0.119096,-0.135456,0.0578491}
,
{-0.103455,-0.0174477,-0.0542352,-0.0395005,-0.0240905,-0.179506}
,
{-0.257664,0.0752566,0.0229954,-0.0621675,-0.0656413,0.227526}
,
{0.0892109,-0.0339382,0.312846,0.203913,-0.104897,0.168358}
,
{0.0262384,-0.0914579,-0.146264,-0.0977874,-0.012173,0.0795065}
,
{-0.381893,-0.00498023,-0.280792,-0.160364,-0.0541951,0.45103}
,
{-0.135686,0.0508484,0.19859,-0.0292514,-0.109725,-0.353437}
,
{-0.0412941,0.0363497,0.0225768,-0.0113688,0.000985686,0.04851}
,
{-0.199956,-0.178287,-0.325135,-0.300487,-0.0817118,-0.432775}
,
{-0.0492939,0.00124024,0.143943,0.199293,-0.136207,0.143178}
,
{0.00121141,-0.109568,-0.255432,0.0666667,0.0248002,-0.456364}
,
{0.138216,-0.0942553,-0.0373578,-0.177675,0.208973,-0.192606}
,
{0.0189278,-0.114265,0.161191,-0.146569,-0.0605915,-0.0651331}
,
{0.358942,-0.101751,-0.0691589,-0.113639,0.212869,-0.12796}
,
{0.129653,0.0859438,-0.00691685,0.155413,0.108995,0.0272486}
,
{0.179919,0.0957911,-0.0846413,-0.26526,0.0910937,-0.230329}
,
{-0.110991,-0.13786,0.0815282,-0.0828527,-0.00258299,-0.0797468}
,
{0.149775,0.0163459,0.191466,0.0502554,-0.09259,0.0614536}
,
{-0.0560971,0.0644238,-0.0594715,0.220375,0.0225467,-0.0354234}
,
{-0.0787255,-0.0955681,0.017223,0.103161,-0.0961796,0.0260641}
,
{-0.0962267,0.0389141,-0.0937024,-0.214414,0.116145,0.0898702}
,
{-0.279726,-0.0268014,0.103099,0.0982682,0.194141,0.0945703}
,
{0.00315739,-0.0190929,0.0172783,0.025277,-0.0088447,0.115287}
,
{0.224576,0.106261,0.0401589,0.00560398,0.107725,0.147184}
,
{0.08082,-0.054071,-0.0647647,-0.222942,0.00404956,0.0282575}
,
{-0.251698,0.00638217,-0.0443854,-0.125293,0.0695131,0.248801}
,
{0.167332,0.156122,-0.115797,0.12327,0.0544403,0.0703119}
,
{-0.109856,0.0319374,-0.0127122,0.0425928,-0.0822369,0.1356}
,
{-0.123523,-0.00827993,-0.098819,-0.0218072,0.124546,0.0476001}
,
{0.0794493,-0.0795625,-0.0391014,-0.129357,0.00982776,-0.131608}
,
{-0.0595095,-0.0493549,-0.0543996,-0.137925,0.129245,-0.00037851}
,
{0.143844,0.0211154,0.0710367,0.115832,0.172895,0.145017}
,
{-0.230331,0.0603345,-0.000184684,0.159776,-0.0366453,-0.171848}
,
{-0.152784,-0.0570968,-0.00781664,-0.0423589,0.183964,-0.138355}
,
{-0.116267,-0.0705614,0.17108,0.0526442,-0.032231,-0.0194454}
,
{0.0462873,-0.10522,0.100859,-0.224533,-0.162436,-0.0760487}
 };
  static const float bias2[1] = { 0.190264 };
  static const float weights2[][1] = { {-0.0650517}
,
{-0.128284}
,
{0.0779013}
,
{-0.109859}
,
{0.118962}
,
{0.399026}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_6(v, index);
}
static int assign_gen_lepton_prior_1_0_6() {
  global_gen_lepton_prior.at(1,0,6) = &specialized_gen_lepton_prior_1_0_6;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_6 = assign_gen_lepton_prior_1_0_6();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0787262,0.0451947,-0.124337,0.156475,0.154221,0.155411 };
  static const float weights1[][6] = { {0.0363908,0.230668,0.20121,0.00498514,0.191926,0.196035}
,
{-0.0387768,0.0433928,0.39931,-0.0358136,0.0698347,-0.0781211}
,
{0.0650358,-0.384019,0.141522,0.101309,0.0219585,-0.0584072}
,
{-0.107129,0.050252,-0.140211,0.155643,0.427942,0.380514}
,
{0.0291747,-0.0233225,-0.264571,0.250868,-0.0598375,0.207359}
,
{-0.0488618,0.131886,-0.0296262,0.158184,-0.0994888,0.101002}
,
{-0.10609,0.0246125,-0.0729151,0.144167,0.13094,0.166699}
,
{0.0159498,-0.153375,0.0363033,0.0789846,-0.0139706,-0.00240797}
,
{0.100354,-0.145182,-0.319652,0.013969,0.25347,-0.0373537}
,
{-0.0986354,-0.00735057,-0.0107482,-0.0412765,-0.0406441,0.0193692}
,
{-0.00410074,0.0718071,-0.0666623,0.103213,0.130282,0.0698637}
,
{-0.12724,0.0270266,-0.0692621,-0.101463,0.112932,0.108417}
,
{0.0807626,-0.0122047,-0.0817405,-0.113864,0.231719,0.0772032}
,
{0.0672715,0.101473,-0.0943859,-0.0875168,-0.0738754,0.0972045}
,
{-0.110808,0.202059,-0.085655,0.014497,0.0418486,0.0908323}
,
{0.109906,0.0568051,0.000214856,0.03502,0.164967,-0.00388836}
,
{-0.404634,0.0554523,0.0892727,0.357226,0.14463,0.377605}
,
{0.0656371,-0.42057,-0.20654,-0.0165129,-0.158598,0.105822}
,
{0.0154584,0.14073,-0.175333,0.122909,0.164588,0.0817712}
,
{0.0782355,-0.16028,0.160683,-0.0333379,-0.0985777,0.0471118}
,
{-0.00653699,-0.254179,0.0150393,-0.0016105,-0.082201,-0.0500644}
,
{0.194103,0.00485668,-0.181412,0.104722,-0.0470072,-0.0268899}
,
{-0.169055,0.115333,0.147691,-0.0318834,-0.0811016,0.0259754}
,
{0.0614196,-0.0385663,-0.0828187,-0.038258,0.0871046,0.0764681}
,
{0.0932266,0.262416,-0.143262,0.0910684,-0.0957952,-0.316892}
,
{0.0123139,0.0422179,-0.0932466,-0.206377,-0.149899,0.12516}
,
{-0.0528774,0.257447,0.0166452,0.0923298,-0.0248513,0.134596}
,
{0.163236,0.0821075,0.0451484,-0.1349,-0.132816,0.203083}
,
{-0.265637,-0.0731379,0.0165465,-0.07804,0.227879,0.425329}
,
{-0.0452492,0.0907556,-0.0518062,-0.0349311,-0.097862,0.0644039}
,
{0.0872494,-0.165685,-0.0663035,-0.0415761,-0.112471,0.170841}
,
{0.0578805,0.151637,-0.190345,0.140059,-0.16755,0.0783068}
,
{0.0295248,0.262516,-0.121269,-0.111223,0.0883709,0.213258}
,
{0.133687,-0.103399,-0.0979702,-0.170683,0.219627,0.0572168}
,
{-0.224736,0.560297,0.186687,-0.0497183,-0.281355,0.00652804}
,
{-0.152912,0.131877,0.254136,-0.0471186,-0.0466856,-0.0460503}
,
{-0.145111,0.221697,-0.24112,-0.0941486,0.303654,0.0191516}
,
{-0.0107183,0.204193,-0.128249,0.121356,-0.315584,-0.101388}
,
{0.263445,-0.0159015,0.142819,-0.0234622,0.631903,0.0341875}
,
{-0.0888041,-0.343872,0.242361,-0.107518,-0.1552,0.142767}
,
{0.101507,-0.240922,-0.0825414,0.0233763,0.0228032,0.0393034}
,
{-0.0484566,-0.714154,0.197802,-0.0790156,0.273324,-0.0104983}
,
{-0.00681405,-0.0368735,0.247657,-0.0169971,-0.0530506,0.0450338}
,
{0.108951,-0.0367228,-0.044423,0.167227,0.186874,-0.248572}
,
{0.0582733,0.11828,0.188252,0.128503,-0.0971284,-0.111293}
,
{-0.0271725,-0.0248101,0.0576362,0.0176546,-0.171342,0.00503702}
,
{0.106487,0.234655,-0.570954,0.118731,0.0170765,-0.119108}
,
{0.00329494,0.0534233,0.108621,-0.0929802,-0.138056,0.191411}
,
{-0.00102802,0.122824,-0.0115335,0.0407019,-0.178158,-0.0759032}
,
{0.152286,-0.0325285,-0.11187,0.144333,-0.167921,-0.0310322}
,
{-0.0669789,-0.150414,0.0876724,-0.152518,0.105905,0.124605}
,
{-0.0331882,0.451326,0.375109,-0.0868711,-0.420602,0.222547}
,
{-0.0513403,-0.0421762,0.196661,0.0524047,-0.210611,-0.0597048}
,
{-0.0472905,0.115977,-0.194811,-0.0570878,-0.304015,0.110744}
,
{0.0904175,-0.0213079,0.0479791,0.122776,-0.115958,-0.0548524}
,
{0.152744,0.11952,-0.0242103,-0.0158223,-0.0796311,0.156374}
,
{-0.0420273,-0.0661887,-0.0116731,-0.212682,0.0907618,-0.632477}
,
{-0.266917,0.0725829,0.063205,-0.0330393,0.0727759,0.390781}
,
{0.274526,0.016123,-0.0437902,-0.0659742,-0.181012,-0.582239}
,
{0.0795257,0.0577345,-0.154553,0.0484995,-0.0968398,0.424627}
,
{0.208369,0.167849,-0.0661761,0.151612,0.0283346,0.0643646}
,
{0.491811,0.156921,0.178953,-0.0537998,0.0174251,-0.292562}
,
{0.0636037,0.0186565,0.0623256,0.184045,-0.136035,0.0849085}
,
{0.125294,0.0882093,0.0739579,-0.319894,0.0831355,-0.807395}
,
{-0.209297,0.0817605,-0.236143,-0.185203,-0.0792026,-0.00574757}
,
{-0.0604436,0.255692,0.0623866,0.135662,0.0247445,0.181151}
,
{-0.0259757,-0.0131882,0.000167179,-0.331528,0.066424,0.0960998}
,
{0.123079,-0.0537392,0.0419859,0.282994,-0.00300272,0.0989855}
,
{-0.28975,-0.0905215,-0.171676,0.016352,-0.0217124,0.526563}
,
{0.333488,-0.0314287,0.170648,0.091766,-0.0510338,-0.31855}
,
{-0.0454461,0.157426,0.152373,0.140727,-0.0508158,0.0717323}
,
{0.354802,0.199621,-0.255958,0.0766276,0.111189,0.126879}
,
{-0.248589,0.197862,-0.000999737,-0.0324467,0.0581813,-0.395289}
,
{0.053311,-0.18665,-0.150759,-0.294251,0.00831409,0.133593}
,
{-0.0508057,-0.309798,-0.0552549,-0.142706,0.135385,0.672066}
,
{0.200731,-0.0290348,-0.0356115,-0.0555229,-0.0907408,-0.256856}
,
{-0.123526,0.0874385,0.0765182,0.0497827,4.61204e-05,-0.160316}
,
{0.0215688,0.130049,-0.11219,0.159683,-0.00482657,0.317851}
,
{-0.127354,-0.0433099,-0.124986,0.116024,-0.122643,0.0711333}
 };
  static const float bias2[1] = { 0.139051 };
  static const float weights2[][1] = { {-0.0657993}
,
{-0.58868}
,
{0.0887519}
,
{0.130391}
,
{0.0429687}
,
{0.077804}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_7(v, index);
}
static int assign_gen_lepton_prior_1_0_7() {
  global_gen_lepton_prior.at(1,0,7) = &specialized_gen_lepton_prior_1_0_7;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_7 = assign_gen_lepton_prior_1_0_7();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00550033,0.0,0.00600206,-0.0358471,0.0374794,0.0 };
  static const float weights1[][6] = { {0.055478,-0.0962846,-0.0963541,-0.0536873,-0.0863517,0.0744482}
,
{-0.131251,-0.248741,-0.149765,-0.233154,0.0519923,-0.0735904}
,
{-0.212727,0.0859568,0.00513473,0.131448,0.0366566,0.0696213}
,
{-0.00191038,0.045603,-0.0197971,0.143247,0.18583,0.134094}
,
{0.0149023,-0.0038232,0.0124087,0.0860515,0.258193,-0.00084776}
,
{0.0151755,-0.0952935,-0.107529,0.163574,0.121317,-0.0208446}
,
{0.0442809,-0.0362886,-0.151016,-0.134184,0.160905,0.0179758}
,
{0.0405982,-0.0215504,0.144639,-0.0878501,0.155846,-0.0351424}
,
{-0.00282359,0.000478555,0.0431725,0.0155056,0.118789,-0.164823}
,
{0.103656,0.0169921,-0.00928026,0.0951171,-0.032455,-0.0509427}
,
{-0.0944232,0.111129,0.150899,0.197922,0.0918301,-0.162729}
,
{0.117525,0.0973639,-0.158496,-0.128183,0.141801,0.0222065}
,
{0.0200725,0.151493,0.0814647,-0.10989,0.159987,-0.15156}
,
{-0.0403203,-0.153848,0.0624288,0.0195463,0.0924953,0.0782698}
,
{0.0769515,-0.000309229,0.180334,-0.0494851,0.153276,-0.121247}
,
{0.00614127,-0.161795,0.0652039,0.144494,0.145434,-0.110689}
,
{0.109412,-0.00721179,0.0461226,-0.0393402,0.0347256,0.092568}
,
{-0.0139241,0.114514,-0.00545275,0.11746,0.0409262,0.186444}
,
{0.0718523,-0.071504,0.080351,-0.126628,-0.0149033,-0.212702}
,
{-0.0645241,0.0681344,-0.0919406,-0.000655359,0.0997091,-0.0562219}
,
{0.00968758,0.00122556,-0.066761,-0.0441929,-0.0411371,-0.0289281}
,
{-0.17072,-0.176784,0.158155,-0.216723,-0.0622428,-0.0321651}
,
{0.100395,0.0618708,0.101817,-0.00196027,0.106752,-0.0995808}
,
{-0.139515,0.0284945,-0.113959,-0.0274466,0.16898,-0.159958}
,
{-0.010662,0.0363225,-0.196762,-0.112962,0.00166189,0.0142758}
,
{0.041724,-0.070005,-0.0479368,-0.125343,0.109241,0.14061}
,
{-0.134477,0.0733903,-0.138894,0.0398576,-0.146085,-0.078482}
,
{0.131987,0.0539672,-0.0888152,-0.112545,0.0502031,-0.0957621}
,
{-0.0392211,0.0252726,0.0431485,0.216078,0.0410341,0.0295552}
,
{-0.121015,-0.0403573,0.0425891,-0.0116145,-0.0366729,0.128116}
,
{-0.062721,-0.0133631,-0.0953006,-0.149252,-0.01338,-0.0141814}
,
{-0.123846,0.0148482,0.0467091,0.0504332,0.00422232,0.0223569}
,
{-0.0783447,0.0040751,-0.15329,0.0723963,0.146941,-0.204198}
,
{0.0426762,0.209211,-0.237617,0.0341048,0.00615187,-0.234265}
,
{0.220424,-0.0689511,-0.134351,-0.0654127,0.13258,-0.0106673}
,
{-0.110091,0.123596,0.0329449,0.0231696,0.120548,-0.0277802}
,
{-0.00774223,-0.0042366,-0.106426,0.00877068,0.0213637,-0.0366821}
,
{-0.226,-0.162056,-0.107678,-0.212537,-0.0378648,0.163348}
,
{0.00789881,0.103221,-0.106002,-0.0565078,0.0382801,-0.123925}
,
{-0.0136987,-0.13354,-0.0627756,-0.230741,0.0153575,0.0427244}
,
{0.0251645,0.02743,-0.238657,-0.227833,-0.00570573,0.0583796}
,
{0.0320187,-0.225844,-0.0285177,0.191639,-0.0761902,0.0150484}
,
{0.118198,0.132476,-0.00835756,0.206137,0.140048,0.085011}
,
{0.130554,0.127661,-0.0573091,0.174745,-0.0121635,0.0767981}
,
{0.22826,-0.0780506,0.103566,0.0272801,0.11189,0.144945}
,
{-0.198604,0.0541384,0.171533,0.116384,0.187179,-0.00208595}
,
{-0.0303187,0.0402706,0.0713631,0.0527243,-0.0838659,-0.0875496}
,
{0.034242,-0.0567808,-0.213086,0.058666,-0.165647,0.0161731}
,
{0.0422038,0.15669,-0.131923,-0.133741,0.0231499,-0.0794785}
,
{0.0220138,-0.120473,0.0654012,0.0774251,-0.152292,0.0750116}
,
{-0.093681,-0.00299316,-0.0228897,0.00552819,-0.00786074,-0.0718511}
,
{0.114797,-0.0638926,0.017638,0.228333,0.00622618,0.00778906}
,
{0.0592151,-0.203471,0.137422,-0.102053,-0.0383817,0.110252}
,
{-0.062964,-0.0106009,-0.0665352,-0.0171871,0.234605,-0.215613}
,
{-0.0487326,0.0495148,0.162759,-0.0769148,0.0437106,-0.0120665}
,
{-0.167216,-0.0161461,0.165394,-0.0530808,0.121079,0.0761704}
,
{0.0218309,0.149841,0.0796163,0.113064,-0.153714,-0.115159}
,
{-0.157902,0.030194,0.0961178,-0.148715,-0.0378557,0.0165161}
,
{-0.0151006,0.0279242,0.135269,0.0229308,0.0111599,0.00574469}
,
{0.0116096,-0.180345,0.0801319,0.0527631,0.0185071,-0.0857893}
,
{0.00899273,0.121833,-0.0858284,-0.160259,-0.050327,0.17671}
,
{-0.0275653,0.179391,-0.0394817,-0.105845,0.193001,-0.0244178}
,
{0.0497474,-0.0596379,0.0721223,0.020096,-0.126537,0.0491035}
,
{0.126972,-0.0779899,0.0525204,-0.0507751,0.0218922,0.0322676}
,
{0.0449849,0.108079,0.121225,-0.0819169,0.179045,0.11435}
,
{0.0352976,-0.163171,-0.00373137,0.0229434,0.126888,0.136006}
,
{0.105501,0.10411,0.151362,0.0392201,0.0455752,-0.0785012}
,
{0.118637,-0.0610901,-0.098954,0.0253875,-0.0486111,-0.0651824}
,
{-0.119452,-0.0411292,0.144235,-0.164127,-0.0873962,0.151808}
,
{0.179122,-0.0677645,-0.0564964,0.0666961,0.0293597,0.10456}
,
{0.0292565,-0.0493165,0.0203016,-0.0959097,-0.0404793,-0.0996223}
,
{0.161911,-0.0213761,-0.0195346,0.133125,0.0174088,0.240989}
,
{-0.0144014,-0.0263831,-0.0427819,0.047363,0.0911506,-0.107635}
,
{-0.0261986,0.0762477,0.143223,-0.0523043,-0.0173039,0.121178}
,
{0.0212614,-0.14984,0.0529511,-0.147765,-0.0181256,-0.112079}
,
{0.182228,0.0191062,-0.0585446,-0.0787257,0.0705439,-0.131043}
,
{0.0991961,0.0951653,-0.154062,-0.244254,-0.0980519,0.053596}
,
{-0.0922614,-0.212095,0.0422878,-0.0361174,0.188386,-0.203255}
,
{0.0641663,-0.158929,-0.0266295,0.119013,-0.190703,-0.0661035}
 };
  static const float bias2[1] = { -0.0367235 };
  static const float weights2[][1] = { {-0.0153297}
,
{-0.133728}
,
{-0.194719}
,
{0.0510931}
,
{-0.0549835}
,
{-0.071486}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_8(v, index);
}
static int assign_gen_lepton_prior_1_0_8() {
  global_gen_lepton_prior.at(1,0,8) = &specialized_gen_lepton_prior_1_0_8;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_8 = assign_gen_lepton_prior_1_0_8();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.268773,-0.00184407,-0.285337,-0.144875,-0.0788866,-0.110291 };
  static const float weights1[][6] = { {0.032165,0.174671,0.107113,-0.0216333,-0.156141,-0.264803}
,
{0.240079,-0.0022284,0.126049,0.00218963,-0.380894,0.199534}
,
{-0.0775966,-0.154535,0.0183357,-0.0506275,0.25611,0.0794491}
,
{0.292166,-0.154678,-0.00485963,-0.296906,0.0204187,0.248064}
,
{0.419507,-0.171857,-0.27709,-0.072204,-0.152992,-0.232851}
,
{0.288951,-0.0494167,-0.354387,-0.21761,-0.226119,-0.0488743}
,
{0.114845,-0.0758231,-0.23765,-0.353402,0.00214448,-0.113601}
,
{0.0546173,0.0323249,0.246096,0.158032,-0.0314521,-0.246185}
,
{0.0180854,-0.385542,-0.153274,-0.0211732,0.0400586,0.102452}
,
{-0.140848,0.114835,-0.0320708,0.00633662,0.0102024,-0.156324}
,
{0.197891,-0.207273,0.0159161,0.0475861,-0.0384124,-0.0634152}
,
{0.155198,-0.239027,-0.134623,0.0543185,-0.078854,0.00555817}
,
{0.0136215,0.116811,0.221783,0.0314462,-0.0207414,0.0719673}
,
{0.156347,-0.0748794,-0.0633248,0.0848434,-0.104053,-0.124722}
,
{0.0732396,0.0953791,0.0341702,-0.070129,-0.112091,0.0959039}
,
{-0.233656,-0.0900365,0.0722139,-0.154966,-0.0287362,0.0873785}
,
{0.142807,-0.436245,-0.271218,-0.210211,-0.174462,-0.15254}
,
{-0.0366334,-0.0387966,-0.348067,0.063006,-0.231611,-0.0866205}
,
{-0.0269659,0.300835,-0.00585699,0.210306,0.0371351,-0.0169309}
,
{0.134916,0.114368,-0.06248,0.0111955,-0.0202597,0.116945}
,
{0.109546,0.0356853,0.00231166,0.0934233,-0.158909,0.0131627}
,
{0.12899,0.0105762,-0.0445487,0.0851873,-0.17147,0.0594675}
,
{0.055444,0.0477638,0.0628651,0.0491812,-0.131576,0.185173}
,
{0.15592,0.0109283,0.0691773,0.123853,-0.0422877,0.0170549}
,
{-0.0885419,-0.0624044,0.187117,-0.215558,-0.0458564,0.026504}
,
{0.0194258,0.00568355,-0.126519,0.000258959,-0.334248,-0.00903294}
,
{0.00896248,-0.113767,-0.118474,-0.139912,0.0812847,-0.164316}
,
{0.22528,-0.0480592,-0.231632,-0.0176538,0.153363,0.0310624}
,
{-0.269361,0.297648,0.731432,-0.0439948,-0.244435,-0.364598}
,
{0.0169487,-0.113903,-0.140314,0.165923,0.0647126,0.0642664}
,
{0.104615,0.20163,-0.0584706,-0.112265,-0.0153591,0.0876159}
,
{0.0418741,0.0934439,0.00619979,-0.140957,-0.0200333,-0.0881671}
,
{-0.0116272,-0.0410651,-0.0150355,0.0137097,0.0351626,-0.015177}
,
{-0.034458,-0.234105,0.0184033,-0.0349583,-0.0883171,0.0338181}
,
{0.0931693,-0.109349,-0.0661213,-0.0455568,0.141012,0.100841}
,
{0.0792279,0.0359068,0.0810173,0.0262001,0.0257284,0.0391643}
,
{0.00516464,-0.0335078,0.0666876,-0.0618881,-0.025765,0.113124}
,
{0.0368752,-0.0332903,-0.15247,-0.00915002,0.10711,0.0387455}
,
{-0.035905,-0.0927666,0.363663,-0.0137049,-0.0107633,0.00631218}
,
{0.0054547,-0.148797,0.0557861,-0.0239695,-0.131129,0.0496929}
,
{0.120475,0.0477394,-0.117068,0.0791721,-0.0822853,0.0174203}
,
{0.164368,0.0298373,0.0649776,-0.00356326,-0.204149,0.115688}
,
{-0.022482,-0.0303055,-0.0569578,-0.052652,-0.0813403,0.0228589}
,
{0.0228031,0.0609771,0.168467,-0.0294315,-0.152513,0.00109731}
,
{-0.0876245,0.0561655,0.196546,-0.200691,0.281059,0.114801}
,
{0.112497,0.0175543,-0.0792243,0.0445509,0.0339292,0.046873}
,
{0.0586329,-0.0128658,-0.0739192,-0.0328749,-0.126472,0.0620584}
,
{-0.0240363,-0.0150605,0.0356842,0.019849,0.0336933,-0.0225986}
,
{-0.0323261,0.184228,0.19985,0.0898665,-0.0794523,-0.110654}
,
{-0.13658,0.0183885,0.178599,-0.0663465,0.0766166,-0.0375578}
,
{0.0245289,-0.0308187,0.141404,-0.0312467,0.0974795,0.043292}
,
{-0.107234,-0.033198,0.136113,-0.0622576,-0.211501,-0.0500593}
,
{0.287489,0.0121382,-0.115155,0.176168,-0.0663108,0.050542}
,
{0.0881989,-0.1479,-0.124187,0.0172289,-0.0125086,0.0824653}
,
{-0.113284,0.0140386,-0.281322,-0.0265326,-0.422602,-0.159403}
,
{0.3402,0.242023,-0.695056,-0.138039,-0.127272,-0.203563}
,
{0.402535,0.0894397,0.564403,0.0654916,-0.422398,0.461985}
,
{-0.034794,-0.149416,-0.0130439,0.0198656,-0.0560764,0.290914}
,
{-0.785827,0.362742,0.389467,-0.168016,-0.181653,-0.181231}
,
{-0.480381,0.036992,0.114801,0.0563444,-0.0794459,0.0526638}
,
{0.0198025,-0.182267,0.0505284,0.114422,-0.141702,0.0567196}
,
{0.438696,-0.172012,0.0188607,-0.136656,-0.277549,0.359529}
,
{0.00566501,0.00192451,0.0862456,0.112162,-0.0327929,0.105826}
,
{-0.152837,-0.00232344,-0.0829507,0.0262355,0.536405,0.600641}
,
{0.276162,-0.255667,-0.0525173,0.0103611,-0.00435967,-0.0180028}
,
{-0.00118914,0.16645,-0.419041,-0.189646,-0.322112,0.150618}
,
{-0.198997,0.524612,0.134287,0.0496979,-0.0567012,-0.296078}
,
{-0.00550462,-0.0682659,0.0191705,-0.0137168,0.126432,-0.0781416}
,
{-0.625277,-0.20578,-0.0242572,-0.0436896,0.220346,0.356469}
,
{0.147255,0.194689,0.224373,-0.1026,0.125459,0.0550028}
,
{0.335292,-0.0359326,-0.114327,0.17124,-0.0355131,0.455589}
,
{0.150569,0.276602,-0.112468,-0.0239033,-0.0918433,-0.0940258}
,
{0.148707,0.178373,-0.1495,0.0489458,-0.0233394,-0.0157715}
,
{-0.182776,0.369009,-0.72194,-0.0815652,-0.360273,0.623762}
,
{-0.513038,-0.076032,0.19629,0.0925362,0.0441782,-0.439521}
,
{-0.501347,-0.0580566,0.301758,0.0498115,0.114563,0.484869}
,
{0.0372494,-0.17424,-0.0433047,-0.0686046,0.0295691,-0.00216857}
,
{-0.233985,0.288471,0.681765,-0.0526303,0.239846,-0.00173467}
,
{-0.0438205,-0.0913039,-0.0189827,-0.0840994,0.233966,-0.0285438}
 };
  static const float bias2[1] = { 0.289077 };
  static const float weights2[][1] = { {0.0997846}
,
{-0.187566}
,
{0.286062}
,
{-0.110512}
,
{-0.368342}
,
{-0.147918}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_9(v, index);
}
static int assign_gen_lepton_prior_1_0_9() {
  global_gen_lepton_prior.at(1,0,9) = &specialized_gen_lepton_prior_1_0_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_9 = assign_gen_lepton_prior_1_0_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_10(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0695475,0.0248776,-0.0950623,0.00605543,0.323313,-0.22703 };
  static const float weights1[][6] = { {0.125152,0.280512,-0.00808857,0.153145,-0.199953,0.0220255}
,
{0.327366,0.25234,0.0639871,0.0337022,0.186848,-0.0382756}
,
{-0.0947589,-0.209512,0.208392,0.246449,-0.0943869,0.0194047}
,
{-0.42062,-0.141268,-0.297028,0.201725,0.407948,-0.402222}
,
{0.0657695,0.0461563,-0.0345735,0.161968,0.43092,-0.171566}
,
{0.364059,0.07457,0.0343805,-0.0406584,0.261767,-0.00282138}
,
{0.121159,-0.0199865,0.140809,-0.00698342,0.198269,-0.143969}
,
{-0.0868777,-0.147912,0.220735,-0.207392,-0.160755,-0.0978341}
,
{-0.101407,0.195121,-0.329686,-0.0745099,-0.0673905,-0.117243}
,
{-0.140125,-0.104886,-0.0291651,-0.130674,-0.0502821,0.0109301}
,
{0.0492467,0.154179,0.0706147,-0.050514,-0.18048,-0.0581298}
,
{-0.0898266,-0.0298947,0.0289559,0.146417,-0.101963,0.0569548}
,
{-0.00660251,-0.113636,0.0775253,-0.139495,0.140616,-0.0693964}
,
{0.215629,-2.81294e-05,0.0438351,-0.207027,-0.0939862,0.333457}
,
{0.0301392,0.109866,0.0121529,0.0491818,0.0879355,-0.0364916}
,
{0.170901,0.191567,0.076119,-0.115931,-0.045827,-0.0281257}
,
{0.386418,-0.0392574,-0.161827,-0.0645313,-0.39814,0.174278}
,
{0.0160429,-0.0683974,0.0545767,-0.216645,-0.00192726,0.00691942}
,
{0.121467,0.101391,0.128105,-0.142325,0.130135,-0.304904}
,
{0.0732666,0.227057,-0.171694,-0.0484905,0.0478283,0.0334195}
,
{0.045453,0.112954,-0.0452701,0.00845664,0.0140744,-0.0373736}
,
{0.0421334,0.0466618,-0.0462784,-0.15264,0.0486393,-0.0790909}
,
{0.0384569,0.0378813,-0.232086,-0.00912314,0.238936,-0.0226254}
,
{0.0599212,-0.0829082,0.0454535,-0.016675,-0.00129187,-0.0487261}
,
{-0.188,-0.326326,-0.195862,-0.175657,0.100269,-0.00438161}
,
{-0.0798195,0.0207799,-0.123449,-0.187264,-0.185556,0.123513}
,
{-0.22999,0.320155,0.109984,-0.0632526,0.203355,0.0898935}
,
{0.0400746,0.0809688,-0.0879421,-0.079942,-0.085373,0.00310245}
,
{-0.0111877,-0.347549,0.136469,0.00728666,0.170622,-0.498081}
,
{0.00668025,0.102295,-0.0838477,0.0377163,-0.0268065,0.0243216}
,
{0.161328,0.120379,-0.15078,0.0181122,0.142365,-0.243596}
,
{0.0512646,-0.030859,-0.117054,0.0102529,0.0511091,-0.0117276}
,
{-0.019079,-0.0314855,0.208123,-0.288546,-0.0159479,0.105132}
,
{0.123394,-0.0532091,0.00891633,-0.0272621,-0.0108134,0.141839}
,
{-0.0491873,-0.0340744,-0.10899,0.160639,-0.10058,-0.0785165}
,
{-0.02843,0.156669,-0.339928,0.132519,-0.0182073,-0.0990513}
,
{0.329014,0.351942,0.143573,0.0822964,0.184738,-0.567355}
,
{0.109443,0.220013,-0.232595,-0.197544,0.0298212,-0.166036}
,
{0.289012,0.0930464,-0.330473,0.742466,0.0498557,-0.552038}
,
{0.0214055,-0.101913,-0.30661,-0.0726105,0.0128362,0.256064}
,
{0.0480052,0.0211094,0.0591314,-0.086823,0.0825326,0.157069}
,
{0.180155,0.11374,0.171298,0.231511,0.260465,0.261447}
,
{-0.0334124,0.0567333,-0.109146,0.00544021,-0.0187579,0.0311369}
,
{0.0542778,-0.179059,0.281083,0.0108428,-0.0855769,-0.113702}
,
{-0.112245,0.0165958,0.235843,-0.136983,-0.00108742,0.0633053}
,
{0.118273,0.00188543,0.103055,-0.0163849,0.00885698,-0.137595}
,
{0.0223496,-0.0614471,-0.0952256,0.173712,-0.163946,-0.422994}
,
{-0.0809922,0.11657,-0.062127,0.250287,0.00352075,0.0157277}
,
{-0.0641006,-0.110931,-0.0113545,0.0675807,-0.0892659,0.197728}
,
{-0.0203787,-0.066882,0.0660517,-0.337418,0.0267834,0.093746}
,
{-0.0916369,-0.0303724,-0.158611,0.431002,-0.0898903,-0.164749}
,
{-0.243342,-0.327702,0.049456,-0.0826834,-0.252532,0.0810139}
,
{0.0704044,0.0262902,-0.0250091,0.0242276,0.0468214,-0.0273422}
,
{0.201156,0.0648285,-0.467052,-0.213851,-0.0455067,-0.13733}
,
{-0.000738855,0.167198,0.0847262,-0.00417207,-0.33203,-0.47688}
,
{0.124569,-0.606438,-0.121299,-0.114168,-0.741038,-0.260192}
,
{0.016987,-0.0127203,-0.0739752,-0.0891622,-0.408786,-0.223407}
,
{-0.0365823,-0.150983,-0.0420469,-0.13157,0.31462,0.414257}
,
{-0.209064,0.223108,-0.0574082,0.0414742,-0.492619,0.607786}
,
{0.147835,0.0867901,-0.0172798,0.12601,0.0560803,-0.27075}
,
{-0.185442,0.0278208,-0.117744,0.0280434,-1.11591,0.145052}
,
{0.0844336,-0.0878453,0.0566814,-0.0205766,-0.167478,0.2686}
,
{0.119163,-1.05707,-0.144563,0.182268,0.733243,-0.752079}
,
{-0.101213,-0.419355,-0.180749,-0.0854231,0.672787,0.503132}
,
{0.00537801,-0.0307431,-0.164054,-0.00741778,0.275598,-0.0173919}
,
{-0.103423,-0.181318,0.0749655,-0.105821,-0.16557,-0.138031}
,
{-0.147535,-0.174805,0.0542109,0.0100416,0.123024,0.212172}
,
{0.108542,0.792865,-0.0563159,0.0318175,-1.16348,1.05085}
,
{-0.0574291,0.304338,0.0877454,-0.0291668,-0.17995,0.399313}
,
{-0.0504725,-0.0246981,0.0490959,-0.0716721,0.171014,0.102423}
,
{-0.140329,-0.784676,-0.107804,-0.155081,0.113773,-0.573685}
,
{-0.00396848,0.634239,-0.0875666,0.0586915,-0.537133,0.463947}
,
{0.0012471,-0.430105,-0.226902,-0.0451081,0.953458,-1.59887}
,
{-0.103239,-0.569766,-0.128715,0.208756,0.535729,-0.965536}
,
{0.0784106,-0.489825,-0.0934411,0.0192869,0.988358,-0.912012}
,
{0.118755,-0.200734,-0.0434952,0.102571,-0.095587,-0.146518}
,
{0.0727073,-0.0703084,0.0807588,0.0676158,0.128675,-0.219936}
,
{-0.00970121,0.116444,0.0591438,-0.205746,0.0128747,-0.160138}
,
{0.2044,0.12582,-0.0776564,-0.111027,0.0418833,-0.0420579}
 };
  static const float bias2[1] = { 0.0630695 };
  static const float weights2[][1] = { {0.0736116}
,
{0.0269104}
,
{0.261475}
,
{0.638606}
,
{-0.160041}
,
{0.122726}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_10(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_10(v, index);
}
static int assign_gen_lepton_prior_1_0_10() {
  global_gen_lepton_prior.at(1,0,10) = &specialized_gen_lepton_prior_1_0_10;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_10 = assign_gen_lepton_prior_1_0_10();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_11(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.088163,-0.1292,0.0926907,-0.138466,0.272971,0.116338 };
  static const float weights1[][6] = { {-0.0767465,-0.104017,0.0739029,0.156889,0.0893198,-0.129545}
,
{-0.381821,0.132593,0.564671,-0.0944703,0.0698188,0.0540381}
,
{-0.0542738,-0.172335,0.278829,-0.00656219,0.0270478,-0.0096282}
,
{0.550832,0.278513,-0.402645,0.302812,-0.103342,0.0666414}
,
{0.113659,-0.152963,0.073375,-0.104907,0.187937,-0.0360224}
,
{0.170812,-0.0792183,0.176772,-0.210098,0.24567,0.187477}
,
{0.271219,-0.0932024,0.231252,0.0443523,0.190399,0.174413}
,
{-0.108031,-0.314229,-0.0769333,-0.146548,0.18182,0.0265608}
,
{-0.158809,0.00462257,-0.0387075,-0.0283093,-0.0959926,0.0145957}
,
{0.0688371,0.0295388,-0.0362388,0.183949,0.0569424,0.0719272}
,
{-0.156077,-0.120259,0.00558324,-0.0539493,0.155857,0.0809521}
,
{0.0538246,0.0721914,0.149587,0.00755331,-0.0383504,0.0193617}
,
{-0.245427,0.0625852,0.0250771,0.19908,0.0314078,-0.095451}
,
{-0.0677564,0.0165805,-0.0975408,-0.0748302,-0.0350924,0.0781061}
,
{-0.0356354,0.16254,-0.0729196,0.148732,-0.0742802,0.0571576}
,
{-0.0169589,-0.169387,0.0402285,-0.0539183,-0.0953615,-0.0828807}
,
{-0.0513861,0.143117,0.216127,-0.270798,0.481387,0.388034}
,
{-0.0812398,0.0507489,-0.305972,0.0352769,0.0174419,0.0280649}
,
{-0.0992653,-0.0610387,-0.0706312,-0.0632155,-0.0666691,-0.221256}
,
{0.0536288,-0.106551,-0.217256,0.0875589,0.0559219,-0.0282658}
,
{-0.0779843,-0.131447,-0.108262,0.0809371,0.027909,0.0353042}
,
{0.106859,0.0894731,0.0683707,0.0813557,-0.13408,0.114159}
,
{0.0511916,-0.0771058,-0.160511,0.00159318,-0.0167612,-0.0342098}
,
{0.148582,0.0619275,-0.132399,0.00670185,-0.0113989,-0.057106}
,
{0.063416,-0.247841,-0.123078,0.378024,-0.0689036,0.0780652}
,
{0.132808,-0.117762,-0.023349,-0.0605235,0.0899806,-0.211636}
,
{-0.0913449,-0.0498375,-0.0321327,-0.225911,0.102078,-0.0105492}
,
{0.0598155,0.0209975,0.00118793,0.161,-0.178431,0.141332}
,
{-0.249542,-0.0769013,-0.0495753,0.103858,-0.207568,-0.283096}
,
{0.205826,0.0169619,-0.00762068,-0.0167258,-0.0535986,-0.0862018}
,
{0.123364,0.114221,-0.185387,0.0882995,-0.0472775,0.0501388}
,
{-0.123854,-0.00154947,0.0248682,-0.0469594,-0.0217369,-0.0516535}
,
{0.00497926,0.121753,0.294064,-0.0714466,0.299697,-0.306379}
,
{0.135344,0.0734331,0.0966541,-0.0646138,0.0729197,0.0150214}
,
{0.0186636,-0.0832649,0.068609,-0.0804169,-0.122844,0.00282525}
,
{0.0656704,0.0215939,-0.0108342,-0.0209002,-0.174393,0.0929662}
,
{0.334805,0.0601623,0.148405,0.201903,0.0350581,-0.160148}
,
{-0.0919077,0.158329,-0.423717,-0.133505,-0.0528914,0.0117986}
,
{-0.280248,-0.208953,-0.226418,-0.225338,-0.0171133,0.0293529}
,
{0.278929,0.302991,0.314102,-0.0758313,-0.447785,0.211346}
,
{-0.0179044,0.0420548,-0.0248017,-0.0426946,0.109347,-0.0627995}
,
{0.153725,0.611781,-0.453849,-0.136982,0.0725149,-0.0939153}
,
{0.0546975,-0.0148147,0.283671,0.0774817,0.064739,-0.0671556}
,
{0.0185727,0.166578,-0.226477,0.0150612,0.00105369,0.0556864}
,
{0.161494,-0.15973,0.120189,0.0463747,-0.138902,0.0274087}
,
{-0.0107774,0.0155127,0.0340095,-0.0213789,-0.0202107,0.030157}
,
{-0.190711,0.10764,0.093666,-0.194137,0.155682,-0.276245}
,
{0.00656404,0.00958348,-0.154893,-0.152674,-0.137031,-0.0344777}
,
{0.218919,0.236944,-0.293436,0.0779214,-0.158347,0.0729399}
,
{0.00408845,-0.0630983,-0.0505999,0.214814,0.184155,-0.02574}
,
{0.00917249,0.0785695,-0.0043429,-0.112023,0.0330293,-0.0661807}
,
{-0.0789874,-0.00315636,0.504905,0.100959,0.0476273,-0.00528092}
,
{-0.0526014,0.098571,0.11679,-0.0918938,-0.0742202,0.0162666}
,
{-0.183673,-0.333863,-0.148341,0.127826,0.113905,-0.0838004}
,
{-0.0227238,-0.139969,-0.0905745,0.268929,-0.33047,-0.124065}
,
{-0.226989,-0.129604,-0.0139091,0.18597,-0.684554,-0.285359}
,
{0.677643,0.12407,0.0306333,-0.893384,0.67331,0.580579}
,
{0.24725,0.0364295,0.0241232,-0.173527,0.610446,0.177216}
,
{0.17181,0.00303042,-0.0835613,-0.0274295,0.218402,0.100368}
,
{-0.230938,0.0476332,-0.0739954,0.00378153,-0.483756,-0.447784}
,
{-0.026928,0.0344147,0.124542,0.0836284,-0.114414,-0.0168543}
,
{0.0391288,0.201441,0.213929,-0.21603,0.526897,0.0804626}
,
{0.173668,0.118128,0.0324738,-0.146541,0.14892,-0.00369951}
,
{-0.515307,-0.0336062,-0.071629,0.322141,-0.562216,-0.0483266}
,
{0.24687,0.116496,0.11663,-0.167004,-0.285416,0.0891231}
,
{-0.135378,0.0143915,0.0288259,0.363323,-0.185174,-0.217545}
,
{-0.22196,-0.103544,0.137523,0.142446,0.90099,0.275204}
,
{-0.179305,0.089641,0.196327,0.25542,-0.369035,-0.102238}
,
{0.127593,0.064931,-0.0136007,-0.316221,-0.150136,-0.0153836}
,
{-0.177655,0.179801,-0.0566275,0.29134,-0.0985804,0.0625158}
,
{-0.0874415,-0.201438,-0.133783,-0.242249,0.0604181,-0.00485524}
,
{-0.00844944,0.133257,-0.0297391,-0.0350845,-0.379714,0.432867}
,
{-0.541493,0.0168525,-0.158628,0.132565,0.203134,0.107806}
,
{0.452276,-0.0534538,-0.22253,-0.00886898,0.29025,0.268689}
,
{-0.0392131,0.00897333,-0.0440728,0.112332,0.107883,0.197747}
,
{-0.142484,0.0547028,0.00631131,0.358426,-0.380706,-0.0162115}
,
{0.120708,0.207148,0.149587,0.0648571,-0.0318708,-0.160784}
,
{0.313425,0.0504229,0.105512,-0.263684,0.761142,-0.00762905}
,
{-0.128077,0.0128773,-0.0786875,0.0790657,-0.116433,0.0866157}
 };
  static const float bias2[1] = { 0.125938 };
  static const float weights2[][1] = { {0.0608763}
,
{-0.0896744}
,
{1.48611}
,
{-0.0790304}
,
{0.104104}
,
{0.115796}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_11(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_11(v, index);
}
static int assign_gen_lepton_prior_1_0_11() {
  global_gen_lepton_prior.at(1,0,11) = &specialized_gen_lepton_prior_1_0_11;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_11 = assign_gen_lepton_prior_1_0_11();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_12(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0800772,-0.170125,-0.00700985,-0.125811,0.196628,0.0189147 };
  static const float weights1[][6] = { {0.100343,0.0363976,-0.181763,0.00857902,-0.0722647,0.138182}
,
{-0.00290707,-0.200691,0.12576,-0.0948898,-0.0535985,0.371073}
,
{0.0127902,0.0943654,0.0270488,-0.148549,0.268997,-0.269921}
,
{0.210774,-0.205697,-0.0652096,-0.813363,0.482103,-0.0764547}
,
{0.129212,-0.132033,-0.0904982,-0.110755,0.239136,0.0202329}
,
{0.0994659,-0.176336,-0.154312,-0.061437,0.238991,-0.0221164}
,
{0.111933,-0.389708,-0.181532,-0.14704,0.250448,-0.0248118}
,
{-0.104571,-0.157001,-0.0916131,0.0872355,0.0117193,0.0423217}
,
{-0.150674,0.0728612,-0.0141756,-0.230629,0.0155414,0.0202635}
,
{0.0243344,0.164869,0.0690419,0.200764,0.00823762,-0.180503}
,
{-0.130987,0.128922,-0.0852139,0.108488,-0.223526,-0.138938}
,
{0.0801888,-0.211801,0.0779083,0.0935091,0.0749719,-0.129674}
,
{0.0104377,0.00841591,0.208807,-0.0565126,0.163977,-0.0353015}
,
{-0.111109,0.0762971,0.107312,0.0282228,0.0869814,-0.0225827}
,
{-0.146623,-0.235977,-0.0152756,-0.13133,-0.0376555,0.146543}
,
{-0.115948,-0.158434,0.147035,0.174065,0.0527008,-0.0621011}
,
{0.148133,-0.0361362,-0.480641,0.015186,0.215083,0.193892}
,
{0.0678318,-0.166135,-0.0243971,-0.172164,-0.142933,-0.13545}
,
{0.244139,-0.187466,0.320782,0.249367,0.133903,0.013494}
,
{-0.234596,0.0642105,-0.0189238,-0.223359,-0.00425731,-0.03463}
,
{-0.0531984,0.184228,0.0399622,0.118119,0.131192,0.0266178}
,
{0.136398,0.111559,-0.0152712,-0.0257343,0.0906831,-0.11218}
,
{-0.141686,-0.179615,0.157121,-0.0546939,0.0139363,0.111624}
,
{-0.306008,0.0531987,0.071377,0.00195773,0.112067,0.0808289}
,
{0.19523,-0.110193,0.128965,0.00257618,-0.0674735,-0.00918267}
,
{0.0238993,0.24079,-0.0399632,-0.0701189,-0.0866439,0.000692208}
,
{-0.179476,0.191321,-0.0989702,-0.0633904,-0.170932,-0.214471}
,
{0.0244099,-0.010152,0.0401828,0.0968976,-0.0417891,0.0498854}
,
{0.00249149,0.148365,-0.0474807,-0.0841741,-0.104113,0.163575}
,
{-0.061337,0.0658982,-0.18634,0.124868,0.0118145,0.225766}
,
{0.224453,-0.10306,0.0648363,0.0685152,-0.0540232,0.129822}
,
{0.0532179,0.177302,0.0628201,0.20778,-0.160463,0.0689564}
,
{-0.0531095,-0.0865482,-0.0154166,0.0965647,-0.0495434,-0.0665959}
,
{-0.0223718,0.22857,0.0538358,-0.0967632,-0.187142,0.107775}
,
{0.447941,0.138166,-0.0951389,-0.243275,0.0227025,0.0744861}
,
{0.179071,-0.106671,0.0604637,0.194608,0.0107648,-0.0525726}
,
{0.0875431,-0.0139724,0.0640563,0.0819978,0.0831976,-0.168813}
,
{0.217006,-0.0419131,-0.0233578,-0.0468572,-0.0203908,-0.0133991}
,
{-0.0496157,-0.186381,0.0299756,0.35728,-0.06339,-0.339899}
,
{0.248694,0.240446,-0.266294,-0.235139,0.0137207,0.114509}
,
{-0.152608,-0.0293781,0.0817679,0.141131,0.052007,-0.0556611}
,
{-0.224078,0.0707821,0.132352,0.733757,0.0669818,0.0184743}
,
{-0.197716,0.282036,-0.143433,0.210965,-0.0228018,0.22187}
,
{-0.598326,-0.049609,-0.101632,0.255699,-0.114222,0.171843}
,
{0.00465736,0.1446,-0.023116,0.0294688,0.0833993,0.0627437}
,
{0.0375986,0.100292,-0.0961077,0.080416,-0.01416,-0.0341728}
,
{0.288619,0.124025,-0.0377359,0.437116,0.0952744,-0.0512387}
,
{-0.336913,-0.142603,0.10147,-0.0758215,-0.0417971,0.0842835}
,
{0.0331197,-0.0571365,0.179969,0.193742,0.120827,-0.169935}
,
{-0.345694,-0.183781,0.00602199,-0.0420992,-0.131651,0.090467}
,
{0.421707,-0.151263,-0.0366217,-0.248532,-0.13425,-0.038545}
,
{0.418012,0.0509245,-0.181893,-0.375501,-0.129766,-0.331292}
,
{-0.60758,0.112351,0.00217039,0.0568655,0.11265,-0.0400603}
,
{-0.278692,-0.194404,0.30963,-0.266313,0.238571,-0.267549}
,
{-0.163109,0.154177,0.0525299,-0.0438175,-0.0844852,-0.170717}
,
{-0.141581,0.118437,0.0257651,0.0637948,0.00542464,0.118781}
,
{-0.108702,-0.135651,-0.145574,-0.195269,-0.135918,-0.0437191}
,
{0.0665637,0.0301573,-0.0628237,0.142639,0.227987,0.0423551}
,
{-0.156835,-0.0819797,-0.0947,0.0568652,0.194877,0.0362981}
,
{-0.0236557,-0.204455,0.124461,-0.159892,0.00165103,0.10004}
,
{0.154245,0.0240782,0.247907,-0.0296267,-0.0376321,0.0492123}
,
{0.127053,-0.00490118,-0.0391122,0.136047,-0.0923131,0.170493}
,
{0.215436,-0.14631,-0.08916,-0.0791083,0.0565163,-0.101884}
,
{-0.0653658,-0.102338,-0.0383114,-0.0465663,-0.0269674,-0.0535446}
,
{-0.0521878,0.0181426,-0.0489064,-0.0741934,-0.120387,-0.11199}
,
{-0.206211,0.00452378,-0.138238,0.023973,0.0122139,0.0246063}
,
{0.22632,0.0557867,0.18258,-0.122542,0.187483,0.164954}
,
{-0.178523,-0.122586,-0.10686,0.117254,-0.170107,-0.120211}
,
{-0.0218912,0.0442566,0.0609741,-0.0189507,-0.0499258,0.0828614}
,
{0.0551132,0.0294889,-0.000657302,0.0232274,0.0986892,0.116067}
,
{-0.0319575,-0.0754876,-0.0691734,-0.0166783,-0.210397,0.177317}
,
{0.069283,-0.158823,-0.0542389,-0.131702,0.0602419,-0.0134285}
,
{-0.0817839,-0.242499,-0.214506,0.0615803,-0.140844,0.0777484}
,
{-0.030449,0.0527438,0.0389056,0.0102641,-0.153586,0.0880355}
,
{-0.0575201,-0.0105972,0.0387598,0.0715221,0.0597215,0.0971302}
,
{0.225421,0.111863,0.0682379,-0.190984,0.0262387,-0.233632}
,
{-0.0108953,-0.157065,-0.071737,0.0343027,-0.00285074,0.0756236}
,
{-0.186683,-0.0838808,0.0746675,-0.0363627,-0.126678,-0.0912105}
,
{0.0243607,-0.0674742,0.086959,-0.0467646,0.148673,-0.0648583}
 };
  static const float bias2[1] = { 0.220558 };
  static const float weights2[][1] = { {-1.65845}
,
{-0.0797808}
,
{-0.145688}
,
{0.266491}
,
{0.0907576}
,
{0.190363}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_12(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_12(v, index);
}
static int assign_gen_lepton_prior_1_0_12() {
  global_gen_lepton_prior.at(1,0,12) = &specialized_gen_lepton_prior_1_0_12;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_12 = assign_gen_lepton_prior_1_0_12();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_13(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.401714,0.243784,0.107901,0.44755,-0.220297,0.24326 };
  static const float weights1[][6] = { {0.142259,0.091596,0.0970788,-0.25403,0.169374,-0.122991}
,
{0.0227576,0.0995658,-0.889094,-0.0247199,0.162416,-0.0225111}
,
{0.0248152,-0.0147015,-0.00434688,0.23589,0.044841,-0.133127}
,
{0.00578795,0.663838,0.536403,0.714781,-1.96542,1.15461}
,
{0.434869,0.275842,0.295382,0.306074,-0.0589896,0.0212074}
,
{0.353218,0.270223,0.18068,0.453986,-0.0659176,0.16365}
,
{0.292436,0.291271,-0.339738,0.329726,-0.176074,0.106499}
,
{0.141459,0.136515,-0.0732245,-0.167823,0.0130108,0.187902}
,
{-0.0233397,-0.120626,-0.130987,-0.0747756,-0.000526876,-0.0509695}
,
{-0.114131,0.0321959,-0.189227,0.101784,0.0829811,0.112872}
,
{-0.132899,-0.0997575,-0.157775,-0.156915,0.00201271,0.0321807}
,
{0.10733,0.0880584,-0.289646,-0.107058,0.0363283,0.154412}
,
{0.17261,0.0108646,-0.0152328,0.0845736,0.366785,0.00611373}
,
{-0.060484,-0.064967,0.129784,-0.1518,0.128666,-0.118456}
,
{-0.108725,-0.0749331,-0.146391,-0.064537,0.175371,-0.00320505}
,
{0.0658111,0.103329,0.237576,-0.153834,0.0907659,-0.0498448}
,
{0.263625,0.0939137,-0.110254,0.0767573,-0.1009,0.219581}
,
{0.0302825,-0.213047,-0.0893321,0.0107958,-0.00602338,0.0257475}
,
{0.124512,0.18222,-0.11979,0.374767,-0.120533,0.179427}
,
{-0.257245,-0.0821199,-0.0715187,0.0601819,-0.122497,0.0685745}
,
{0.048526,0.141567,-0.0984195,-0.103471,-0.00911654,-0.1348}
,
{0.0394191,-0.139033,0.12969,-0.0487791,0.168985,0.121775}
,
{-0.107788,0.0414694,0.0822841,0.212484,-0.116249,-0.115798}
,
{-0.0279708,0.128578,-0.136185,0.00555627,0.141477,0.0175852}
,
{0.0165168,0.0300211,0.0305347,-0.100758,-0.102685,-0.0687737}
,
{-0.0545883,0.0927574,0.153344,0.172911,-0.0861734,0.224428}
,
{-0.07018,0.0625456,0.0594245,0.0892474,-0.040857,-0.18756}
,
{0.189783,0.0570007,0.0664812,-0.0665091,0.0326638,0.0713512}
,
{0.00593976,0.200941,-0.277073,-0.133545,-0.0578674,-0.037139}
,
{-0.0586788,-0.113441,0.0835888,0.0298982,-0.0871545,0.109477}
,
{-0.109805,0.0552664,0.204683,0.245165,0.107651,0.0215824}
,
{-0.0218181,-0.0515983,0.0553251,-0.113726,0.0887738,-0.0585176}
,
{0.107295,0.104417,-0.0879392,-0.355859,-0.159883,-0.0743104}
,
{0.104899,-0.0530372,0.023004,0.24299,0.221425,-0.118546}
,
{0.000250971,-0.109839,0.267609,-0.0346659,0.117264,0.133746}
,
{-0.153031,-0.0386585,-0.22793,0.219298,-0.159558,0.0196594}
,
{0.0126977,0.201015,-0.0101884,-0.0227673,-0.0286791,-0.0542694}
,
{-0.0247751,-0.0665232,-0.125283,-0.22585,0.0909767,0.193397}
,
{0.142839,-0.269536,-0.049353,0.298377,0.132308,-0.11829}
,
{-0.0862939,0.00961612,-0.0527047,-0.151397,-0.149263,0.0228723}
,
{0.081003,-0.0907622,0.0703871,-0.0150174,-0.030597,-0.00451235}
,
{0.308997,-0.184382,-0.358267,0.295791,0.226699,-0.228399}
,
{0.0578472,-0.324045,0.274863,0.0250161,-0.0174309,0.14974}
,
{-0.184514,0.603876,-0.421513,-0.0519766,0.0377525,-0.0211504}
,
{0.0600872,0.0602657,0.0403773,0.0923275,0.361078,0.0618969}
,
{0.0687589,-0.218615,0.0185207,0.0340784,0.174155,0.127087}
,
{0.328976,0.352367,0.633738,0.0617102,0.0962939,-0.499627}
,
{-0.247542,0.0720695,-0.182746,0.119847,-0.144857,0.064138}
,
{-0.08516,-0.0059099,0.300592,0.500964,-0.111191,-0.110425}
,
{-0.0679607,-0.0704867,0.354735,-0.0299754,-0.0456128,0.13054}
,
{0.0290393,0.0607569,-0.204672,-0.0924999,-0.102077,-0.0835766}
,
{-0.115684,0.0192979,0.256323,-0.237056,0.0256635,0.256419}
,
{0.165376,-0.207986,0.112047,0.0283367,0.12797,0.00620206}
,
{0.0408504,-0.298387,0.577624,-0.121419,-0.159604,0.105215}
,
{0.0362639,-0.0855042,0.0499371,-0.0261116,0.0543641,0.132432}
,
{0.0956994,-0.0408492,-0.262038,0.0373701,0.0204514,0.237712}
,
{-0.0282071,0.158918,0.0139159,0.158267,-0.158773,-0.00785176}
,
{-0.0861229,-0.185104,0.269537,0.0656527,-0.23071,0.0136051}
,
{0.0589546,0.00642984,-0.152182,-0.00242592,-0.0836588,-0.132621}
,
{0.355647,0.0791859,-0.182015,0.286485,0.161572,0.109881}
,
{-0.157821,0.112286,0.0421293,-0.25012,-0.0275112,-0.238663}
,
{-0.0468041,0.0576744,-0.00960114,-0.185591,-0.0101316,0.00249937}
,
{0.0985799,0.130317,-0.166783,0.320435,-0.00542687,0.0163688}
,
{0.0566837,0.000427758,0.00346017,0.114647,0.0765787,-0.00603991}
,
{-0.218531,0.157968,0.182828,-0.156715,0.037455,-0.0599298}
,
{0.157485,0.19436,-0.201401,0.213015,-0.00645263,0.0639295}
,
{0.20852,0.157423,0.205779,-0.205517,-0.0483379,0.00789614}
,
{0.0827385,-0.0349638,0.143772,0.225686,-0.0844315,-0.05617}
,
{-0.131335,-0.165727,0.198392,-0.00502012,-0.0275285,-0.14389}
,
{-0.153034,-0.0800085,0.282029,-0.230529,-0.0173197,0.119031}
,
{-0.272469,0.10843,0.144563,-0.0633674,-0.0847608,-0.0406867}
,
{-0.151462,-0.0357588,0.328885,-0.31325,-0.095721,-0.0700461}
,
{0.370426,0.0137214,-0.20253,0.310294,0.156776,0.265312}
,
{-0.284667,0.0113423,0.304519,-0.237293,-0.232314,-0.0528506}
,
{-0.0205723,-0.0368878,0.118271,0.206384,-0.0464348,0.0133877}
,
{-0.232029,-0.0376525,0.130671,0.0477615,-0.0508039,0.0896571}
,
{-0.113334,-0.00539547,-0.023819,0.0629959,-0.0336224,-0.0576118}
,
{0.0477568,0.0892543,-0.096747,-0.113152,0.0359676,0.0465488}
,
{-0.0681641,0.115328,-0.195556,-0.057013,0.0455046,0.0625665}
 };
  static const float bias2[1] = { 0.125373 };
  static const float weights2[][1] = { {0.134435}
,
{0.0623212}
,
{-1.33521}
,
{0.0930945}
,
{-0.0535735}
,
{0.114225}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_13(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_13(v, index);
}
static int assign_gen_lepton_prior_1_0_13() {
  global_gen_lepton_prior.at(1,0,13) = &specialized_gen_lepton_prior_1_0_13;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_13 = assign_gen_lepton_prior_1_0_13();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -1.15633,0.566884,0.347262,0.515323,0.0724849,0.406308 };
  static const float weights1[][6] = { {-0.298592,-1.35482,-1.62046,1.59091,-0.0382487,-0.954348}
,
{-0.656889,0.120658,-0.101485,0.280479,0.0164569,0.336975}
,
{-0.653754,0.00165015,0.0936305,0.377021,-0.35062,0.160161}
,
{-0.469307,1.27897,1.11583,-0.0314383,0.0201403,0.716514}
,
{-1.11131,0.559668,0.307009,0.655966,0.0917806,0.446508}
,
{-1.09959,0.272715,0.132527,0.629379,0.0892533,0.291797}
,
{-1.03742,0.585419,0.182168,0.531562,0.116686,0.462596}
,
{0.102754,0.0168361,0.0205506,0.00724804,0.133872,0.134593}
,
{0.0908082,-0.100057,0.123138,-0.0622635,0.0528311,-0.118085}
,
{-0.013521,0.0580484,-0.0590664,-0.0414429,0.126634,0.00591902}
,
{-0.232951,-0.149676,0.0304915,-0.245575,-0.015171,-0.0923452}
,
{0.220929,-0.207216,0.134536,-0.105516,-0.00522322,-0.0940935}
,
{0.0335015,0.0141877,-0.217041,-0.0372344,-0.0885262,0.161313}
,
{0.0488288,0.137889,-0.168037,-0.0700251,-0.0499078,0.0447876}
,
{-0.0396399,-0.0817647,-0.0942373,-0.16378,0.0967192,-0.06597}
,
{-0.00440584,0.110654,0.0977843,0.196239,-0.0730596,0.184526}
,
{-0.207148,0.189402,-0.0718604,0.00652252,0.10426,-0.00387384}
,
{-0.109755,0.124795,-0.198925,-0.0577003,0.00533976,0.113368}
,
{0.0690844,-0.884547,-1.42896,0.528908,-0.293306,-0.45361}
,
{-0.0655377,0.0361,-0.173982,0.16099,-0.100908,0.0567783}
,
{0.165494,0.123093,0.22752,-0.190507,-0.101624,0.141469}
,
{0.272878,0.0974095,0.126503,-0.0759778,0.0646951,-0.134878}
,
{-0.0953456,0.112858,-0.0868463,0.00677029,0.000355215,0.0661882}
,
{0.40829,0.0433999,0.149634,-0.0706079,-0.055099,0.0634747}
,
{-0.0897278,-0.0138213,0.107373,0.0683347,-0.0429646,-0.149949}
,
{-0.139207,0.0493457,0.0279525,-0.0384398,-0.172005,-0.0593398}
,
{-0.11328,-0.0104785,0.0750708,0.0515127,0.0998211,-0.0898005}
,
{-0.142068,-0.124794,0.0307692,0.00542924,0.0766535,0.0932354}
,
{0.653374,0.696513,0.902036,-0.569457,-0.183126,0.674391}
,
{-0.156846,-0.0522358,0.213588,-0.0113364,-0.0813193,-0.216526}
,
{0.119868,-0.095992,-0.0285368,0.0258997,-0.00265645,0.0863155}
,
{-0.0473442,-0.0160607,-0.0329466,0.140896,-0.0863437,0.0417062}
,
{0.188904,0.00547852,0.0590145,0.0717894,0.0910471,-0.0726825}
,
{0.0245413,0.22598,-0.0108151,0.00893472,0.017375,0.158496}
,
{-0.0999276,-0.0556925,-0.0315024,-0.0122986,0.0290945,0.0423026}
,
{-0.0242609,0.00634292,0.00131002,-0.00400951,-0.0933387,-0.0464306}
,
{0.0990202,0.0613706,0.0276567,0.00944188,-0.0903288,-0.210068}
,
{-0.0447533,0.02369,-0.0192802,0.053488,0.0824551,-0.0317831}
,
{-0.000745151,0.0495268,-0.0144993,0.0109831,-0.124385,0.0510063}
,
{0.0175759,-0.0599578,0.00725188,-0.0323971,-0.026275,0.13164}
,
{-0.121028,-0.0490126,-0.0319407,0.00538412,0.0113932,0.0995633}
,
{0.00681358,0.129025,-0.0556989,0.0157134,-0.113449,0.0517999}
,
{0.0784362,0.0834818,-0.00874209,0.0786226,0.247479,-0.00399917}
,
{0.142229,0.0330101,0.0143489,0.0397964,0.195782,-0.0902878}
,
{-0.0194205,-0.0672695,-0.00762046,-0.0132247,0.0934413,0.118615}
,
{0.103759,0.0623089,0.0311378,0.0292161,0.0425159,-0.119746}
,
{-0.0109435,0.13214,0.00424536,0.0795477,-0.0388903,-0.250637}
,
{-0.0182463,-0.0327166,0.00813697,-0.0424196,-0.0964799,0.0379876}
,
{-0.0862717,-0.0456116,-0.00814218,-0.0314333,-0.15024,-0.0153166}
,
{0.0323394,-0.0285457,0.0202194,-0.00327396,0.0635743,-0.0441426}
,
{0.0147171,0.00852989,0.00279582,0.000999391,-0.00833593,-0.00821417}
,
{-0.0372587,0.142433,-0.0792684,-0.0160239,-0.280301,0.0909696}
,
{-0.000213492,0.0181394,-0.00152207,0.00644718,0.00466551,-0.0266969}
,
{-0.0384361,-0.0154309,-0.0140992,-0.0041454,0.0264368,0.0622324}
,
{0.10185,0.0491487,0.0296357,0.0429644,0.00417812,-0.0973156}
,
{-0.0755286,-0.0892939,-0.00834454,-0.0370467,0.015031,0.0549165}
,
{0.0869509,-0.0268363,0.0145935,0.0620428,-0.00421427,0.285498}
,
{-0.101885,-0.0400045,-0.0234638,-0.0827972,-0.365443,-0.375817}
,
{-0.0602594,-0.0707781,0.0123483,0.00148577,0.0651142,0.000141556}
,
{0.0649421,0.0563442,0.0169567,0.0577056,-0.0173358,0.106654}
,
{-0.0894672,-0.0631014,-0.0165889,-0.062943,-0.0423517,0.0204852}
,
{-0.0203932,-0.0625566,-0.0100904,-0.0876035,0.00686542,-0.143832}
,
{0.183417,-0.199851,0.0126819,-0.0733292,0.0523684,-0.375894}
,
{-0.00377237,-0.129556,0.0524688,-0.03549,-0.0473659,-0.00302966}
,
{0.139794,0.116016,-0.0060015,0.0709537,0.0495895,0.114316}
,
{-0.0774597,-0.0760079,0.00271096,-0.0347223,-0.0984083,-0.00730363}
,
{-0.000826219,-0.194041,0.037731,-0.0502334,0.0560188,-0.247156}
,
{0.00853253,0.105065,-0.0599169,0.0107424,-0.407929,-0.558005}
,
{0.0581131,-0.0193385,0.0152618,-0.000167726,0.0790831,-0.0641544}
,
{-0.080535,-0.140655,0.00509922,-0.0830323,-0.093075,-0.0338217}
,
{-0.204934,-0.179674,-0.0140512,-0.105675,-0.00275987,0.0596543}
,
{0.0246004,0.0235399,-0.0270737,-0.0510761,-0.119333,0.0376535}
,
{0.41398,-0.417293,0.0998271,0.205934,0.13112,0.296046}
,
{0.0718591,0.0979646,-0.0505347,-0.0193393,0.0449153,0.248533}
,
{-0.177392,-0.19589,-0.0178549,0.034732,0.388963,-0.271542}
,
{-0.12038,0.0446987,-0.0398144,-0.0252719,-0.139085,0.0655062}
,
{-0.178326,0.00183193,0.197454,-0.186825,-0.174753,0.153175}
,
{0.124139,0.0518165,0.956142,-0.7886,-0.107867,0.781393}
,
{-0.246337,0.134604,-0.0496912,-0.000465306,-0.291224,0.695121}
 };
  static const float bias2[1] = { 0.278715 };
  static const float weights2[][1] = { {-0.0263195}
,
{0.0382103}
,
{0.0704672}
,
{-0.0437998}
,
{0.0134767}
,
{0.0115333}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_1_0(v, index);
}
static int assign_gen_lepton_prior_0_1_0() {
  global_gen_lepton_prior.at(0,1,0) = &specialized_gen_lepton_prior_0_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_1_0 = assign_gen_lepton_prior_0_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_14(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.013812,-0.016536,-0.0051518,-0.0286026,-0.0251176,0.011077 };
  static const float weights1[][6] = { {0.10076,0.0395661,0.120518,0.0710187,-0.00716863,-0.235177}
,
{-0.195946,-0.115659,-0.119089,0.112811,0.290013,0.00146262}
,
{0.122457,-0.185276,-0.104235,0.145767,-0.368575,-0.138245}
,
{-0.106682,-0.0649427,-0.0337357,-0.0123245,-0.0312716,0.195725}
,
{0.0406426,0.0597482,0.0696822,-0.0337399,-0.0488654,0.0152588}
,
{-0.0345762,0.00639539,-0.127609,0.0880853,-0.143735,-0.123585}
,
{-0.0793658,0.0523307,0.176292,-0.0787983,-0.123121,0.00548361}
,
{0.0747907,-0.00447075,-0.027239,-0.0325663,-0.241731,-0.0770375}
,
{0.232799,0.0805563,0.00191352,-0.0299217,-0.0836112,-0.1891}
,
{-0.00996585,0.0392092,0.241944,0.153513,0.11361,-0.0813498}
,
{0.211895,-0.0106786,0.0517505,0.0300678,0.0571,-0.0406105}
,
{-0.0826137,-0.0914119,0.157391,-0.245713,-0.0827565,-0.00132011}
,
{-0.12781,-0.0353951,-0.0166306,-0.0903461,0.105626,-0.153854}
,
{0.0122794,0.0125041,-0.123148,-0.0119442,-0.128844,0.0406886}
,
{-0.0807624,-0.0399151,0.109622,0.185862,0.0102582,0.181816}
,
{0.064329,-0.0661938,-0.0116858,0.108196,-0.0871164,0.198896}
,
{0.0876076,-0.0451673,0.180597,0.0724513,-0.135818,0.0838905}
,
{0.12575,0.0592576,-0.0598643,-0.204639,-0.274654,-0.12201}
,
{-0.0296879,-0.160535,-0.0218118,0.00687841,0.0280386,0.0328741}
,
{0.0917747,-0.0767358,-0.233656,0.0783768,0.0218023,0.0657059}
,
{0.148214,-0.00694379,0.0148504,0.198694,-0.193211,0.188459}
,
{-0.00904709,-0.201095,0.183599,-0.0388409,0.00122465,0.011592}
,
{0.134487,-0.226894,0.0279483,-0.0507619,-0.0703268,0.243901}
,
{0.0736354,-0.135334,-0.154284,0.00429297,0.247348,0.149334}
,
{0.0253481,-0.0673276,0.00321531,-0.117127,0.0112798,-0.229996}
,
{0.044971,-0.106445,0.104001,-0.147586,0.0769373,-0.0311494}
,
{-0.0656387,-0.0681187,0.0711322,-0.0761194,0.056147,-0.0435205}
,
{0.0640886,0.146993,-0.25321,-0.143754,-0.249671,-0.0383481}
,
{0.000727084,-0.146748,-0.192707,0.116492,-0.0187941,0.0850153}
,
{0.202305,-0.168369,0.00657544,-0.235353,-0.089549,0.208477}
,
{-0.00538163,-0.0681942,0.126306,-0.22302,-0.36121,0.0673021}
,
{0.00739277,0.0285493,-0.0118732,-0.0741624,0.061911,0.142446}
,
{0.0598228,0.0389722,-0.065998,-0.0760615,0.0398643,-0.144447}
,
{0.000865438,0.146571,-0.104963,-0.174081,-0.0648468,0.239811}
,
{-0.09314,-0.100363,0.143996,0.0336023,-0.0199665,-0.246271}
,
{0.198132,0.227406,0.157881,-0.0839574,-0.103715,0.0903424}
,
{-0.159635,0.141315,0.0850733,-0.0390417,-0.0567976,-0.210603}
,
{0.0232912,0.177554,0.126983,-0.00536389,0.0438952,-0.139384}
,
{-0.119892,0.149976,0.0851032,-0.0372074,0.127117,-0.224815}
,
{0.0968986,-0.0587351,-0.122651,0.00685863,-0.0784858,-0.0748894}
,
{0.153136,-0.0421461,-0.181323,0.180539,0.306642,-0.0744388}
,
{-0.0780134,0.0314602,0.106335,-0.0866954,-0.0627691,-0.166847}
,
{-0.137064,0.106298,-0.112502,0.0602281,0.219288,0.00493867}
,
{-0.0571802,0.0401354,0.198543,-0.157764,0.019604,-0.0751668}
,
{0.22468,-0.0518931,0.0885254,-0.00178837,0.03908,0.0353312}
,
{-0.0507281,-0.0481736,0.0753832,0.0121744,-0.148926,0.0528621}
,
{0.100667,0.0968492,0.202497,-0.0873652,-0.0408168,0.0970907}
,
{0.21719,-0.139673,0.141116,-0.105876,0.0490487,0.0230993}
,
{-0.133757,-0.103824,-0.0345926,-0.00703394,0.146427,0.0737863}
,
{-0.0601733,0.0384234,0.115649,0.0869976,-0.141245,0.00248739}
,
{0.0210395,0.00580976,0.0940065,-0.147092,-0.150316,0.0747843}
,
{-0.103047,0.0683877,0.190434,0.106294,0.0214562,-0.206045}
,
{-0.0719611,-0.0612372,0.168148,-0.111381,0.150603,0.202269}
,
{0.0444652,-0.0712722,0.0931212,0.0918027,0.218623,-0.0677188}
,
{-0.0718823,0.1749,0.126035,-0.0829726,0.0139172,-0.105009}
,
{0.079808,-0.0355577,-0.115853,-0.0656084,0.0377082,-0.0531924}
,
{-0.0829846,-0.0184967,-0.0577121,0.0514168,0.1166,0.0108076}
,
{-0.0360186,-0.0347268,-0.139464,0.0236604,0.162951,-0.174411}
,
{-0.0677694,-0.0642692,0.0894771,-0.0435977,-0.0885819,0.0264764}
,
{0.208794,0.0968519,-0.140089,-0.375802,-0.351616,0.134167}
,
{0.251819,-0.0849178,-0.00569701,-0.137028,0.139983,-0.0438331}
,
{0.0765864,0.0585523,-0.102078,-0.103823,0.0802134,-0.00991403}
,
{0.00116658,-0.0626438,-0.0172763,0.195717,0.0193386,0.154913}
,
{0.165011,-0.0715096,-0.133578,0.117836,0.156664,-0.0549027}
,
{0.079683,0.0629338,0.0273668,0.183755,0.0441465,-0.00805766}
,
{-0.0355063,-0.237345,-0.0397641,0.017515,0.051175,-0.0824582}
,
{-0.0630467,0.0762082,-0.0379258,0.0147339,-0.0846056,0.085354}
,
{-0.145531,0.106565,-0.13113,-0.0244501,0.038079,-0.184416}
,
{-0.156163,0.239736,0.150399,0.14489,0.165588,0.222334}
,
{-0.0002211,0.0315644,0.0853441,0.271477,-0.0737467,-0.184786}
,
{0.254637,-0.095821,-0.0489499,0.00910345,0.194932,0.0777908}
,
{-0.0457604,-0.0318536,-0.189561,-0.0065594,-0.295635,-0.0720823}
,
{0.143813,-0.0978619,0.11288,0.124389,-0.150082,0.200556}
,
{0.13604,0.0487348,0.091257,0.2757,0.231829,-0.134121}
,
{0.0727301,0.0477917,-0.014023,-0.039198,0.0678502,-0.11873}
,
{-0.0154533,0.17244,0.0756265,0.0343412,-0.0688199,-0.0812901}
,
{0.097652,0.144636,0.0393337,-0.148817,-0.202388,0.0542921}
,
{0.00399012,-0.221552,-0.0696671,-0.0981108,0.13608,-0.0305821}
,
{-0.0696696,0.141706,0.0975904,0.136544,-0.137111,-0.0797006}
 };
  static const float bias2[1] = { -0.0693109 };
  static const float weights2[][1] = { {-0.208212}
,
{0.111907}
,
{0.035401}
,
{0.10974}
,
{0.134404}
,
{-0.140642}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_14(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_14(v, index);
}
static int assign_gen_lepton_prior_1_0_14() {
  global_gen_lepton_prior.at(1,0,14) = &specialized_gen_lepton_prior_1_0_14;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_14 = assign_gen_lepton_prior_1_0_14();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_15(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0197409,-0.0465057,0.0194685,0.0,-0.00371958,-0.00825256 };
  static const float weights1[][6] = { {-0.0956044,0.195078,-0.44306,-0.0364047,0.113619,0.135974}
,
{-0.0178664,-0.0447255,-0.11503,-0.010313,-0.296093,0.154274}
,
{0.044449,-0.0114295,0.0260747,0.0738346,-0.0726782,0.151312}
,
{-0.611786,-0.023487,-0.0295546,0.0375569,0.182647,-0.0676193}
,
{-0.0607377,-0.162497,0.00629828,-0.0570846,0.107284,0.0373113}
,
{-0.00394928,-0.0472919,0.0626079,0.151039,-0.153618,0.21982}
,
{0.00999098,-0.101453,0.0222811,-0.0759474,-0.0995115,-0.0737021}
,
{-0.364204,-0.215676,-0.10639,0.033019,0.146879,0.111203}
,
{-0.209629,0.0328072,-0.537119,0.0778282,0.260884,-0.164036}
,
{-0.176268,0.0112424,0.227179,0.0887538,-0.0916921,0.00281493}
,
{-0.101164,0.00334622,-0.0632237,-0.101375,0.154785,-0.0392123}
,
{-0.135552,0.252791,0.0687041,-0.0045403,0.0980213,-0.157845}
,
{-0.402427,0.0990144,-0.120566,0.0422574,0.192797,-0.0134194}
,
{-0.00194873,-0.246085,0.0648475,0.132194,0.00641563,-0.0754631}
,
{-0.00165036,-0.0234522,0.107646,0.0172873,0.0225461,-0.0352014}
,
{-0.178692,-0.126415,-0.0743557,-0.143019,0.087135,0.135867}
,
{-0.00881506,0.241222,0.177982,-0.00854364,0.0913037,-0.0698254}
,
{-0.191635,-0.16276,-0.0550455,-0.152056,-0.0946729,0.0379554}
,
{0.177494,0.0111145,-0.0540993,0.0745831,0.102961,0.0705095}
,
{0.0609642,0.117503,0.182073,-0.190434,-0.0607578,0.0164314}
,
{0.0395357,-0.000566844,-0.010708,-0.102095,-0.0566132,-0.190013}
,
{0.0411111,0.0280923,-0.123116,-0.00342422,-0.0142098,0.0106826}
,
{-0.0151559,-0.196345,-0.0290886,-0.125361,-0.00425752,-0.116358}
,
{0.118126,0.041122,-0.0245817,0.044852,-0.0192121,-0.153582}
,
{-0.117411,-0.0261833,0.256346,-0.195263,-0.0752898,-0.0850965}
,
{0.106789,0.0265618,-0.0196231,0.00208065,-0.178174,-0.0497913}
,
{-0.119818,-0.00148261,-0.0721741,0.034289,-0.0417526,0.103369}
,
{-0.0754769,-0.0913247,0.304912,-0.108987,0.121178,-0.227696}
,
{-0.0275753,0.395717,-0.71846,-0.00912214,0.226209,-0.0573128}
,
{0.0852173,0.128832,0.138703,-0.210299,0.0377746,0.140165}
,
{0.120335,-0.0615463,-0.197283,-0.00313063,-0.015552,0.0344107}
,
{-0.0767034,0.104703,0.0354691,0.0555345,0.0437366,0.128289}
,
{0.0126077,-0.0613136,-0.115885,0.0570255,-0.174687,0.0829118}
,
{0.0198917,-0.0250643,-0.0391633,0.0628919,-0.102018,-0.0341087}
,
{0.0112192,0.141149,0.340564,-0.178449,-0.0479129,0.00131255}
,
{-0.21593,-0.121838,0.184777,0.0552601,0.42088,0.0385099}
,
{-0.0634304,-0.195817,-0.0383615,0.0638892,-0.149747,0.124683}
,
{-0.021739,-0.123653,0.0606624,-0.0195591,0.323791,-0.060043}
,
{-0.0449806,0.0210946,-0.0451059,-0.0440805,0.397509,0.114131}
,
{-0.00526844,-0.179657,-0.153884,0.0750689,0.241428,0.129544}
,
{0.0460689,-0.0505115,-0.244748,-0.168837,-0.32393,0.0294108}
,
{0.0570066,-0.0726838,-0.0900307,0.0182499,0.118081,-0.133145}
,
{2.30653e-05,0.0702909,-0.04181,0.049951,-0.367764,-0.0707709}
,
{-0.0824715,-0.0107224,0.241474,-0.0942102,0.186857,0.181747}
,
{0.309652,0.0776073,-0.244364,0.169345,-0.132536,0.0303646}
,
{0.0773221,0.0586898,-0.0885896,-0.12951,-0.142426,-0.0105899}
,
{0.0618986,-0.0555817,-0.196993,0.149522,-0.429775,-0.00204547}
,
{0.044624,-0.0429198,-0.227434,0.0317084,-0.225917,-0.127275}
,
{-0.155398,-0.201594,0.17052,0.201008,0.617608,0.0705328}
,
{0.247531,0.00330774,0.0144341,0.0734921,0.377039,0.146248}
,
{0.119775,-0.0384475,-0.0425524,-0.0961149,0.181852,-0.0498298}
,
{0.0195762,-0.0646742,0.336698,-0.027531,-0.0258925,0.200255}
,
{0.0572015,-0.157748,-0.105727,-0.0141017,0.117212,-0.00281407}
,
{-0.191109,0.296401,0.289346,-0.010936,-0.376794,0.157319}
,
{0.0190437,0.0474428,-0.0562009,0.0581993,0.0461962,-0.153708}
,
{-0.156252,-0.0206804,-0.191121,0.0974237,0.0504254,0.0687497}
,
{0.0325898,-0.108372,0.210924,-0.0809623,0.0291374,0.122673}
,
{0.151664,0.119471,0.159352,0.0765335,-0.107911,-0.0919155}
,
{0.199697,-0.0433496,-0.174314,-0.0533134,-0.202064,0.0101602}
,
{0.0599712,0.171323,-0.351805,0.181621,0.23874,-0.206657}
,
{0.125868,0.0135947,-0.128628,-0.123403,-0.00934737,0.025833}
,
{-0.0218465,0.0111048,0.291874,-0.0400912,0.133199,-0.155377}
,
{-0.0639944,0.0517719,0.301998,-0.146162,0.038767,-0.13825}
,
{0.0389022,0.00498908,0.0291288,0.0941229,0.0445812,0.0377597}
,
{0.144703,0.0749164,0.223947,-0.0488255,-0.257719,0.0542415}
,
{-0.0572602,-0.282134,0.326534,0.123495,0.0383219,-0.0391131}
,
{0.0332541,0.110795,-0.0563565,0.0613639,-0.0741877,-0.000361362}
,
{0.0324848,-0.136806,0.101075,-0.0206513,-0.291525,-0.018441}
,
{0.0191919,-0.112547,-0.0899739,-0.171268,0.0791124,-0.0309325}
,
{0.0930703,-0.0166631,0.173515,0.148033,0.141909,-0.0678392}
,
{-0.131233,-0.223624,-0.257274,0.118143,0.0435549,0.00770376}
,
{-0.00509046,-0.192453,0.182164,-0.0176377,0.171133,-0.165954}
,
{-0.236931,0.11774,-0.0252373,0.127149,-0.0889564,-0.11785}
,
{0.0889282,-0.197452,0.167362,-0.0726607,-0.177248,0.0304306}
,
{-0.148481,-0.00552886,-0.241549,0.00835097,-0.0569328,-0.0764657}
,
{0.196745,0.0833356,0.118836,-0.0391236,0.155746,-0.228972}
,
{0.0608343,-0.74603,1.22426,-0.0425932,0.13209,0.231744}
,
{-0.14281,-0.648467,1.05412,0.0885153,0.147419,0.10164}
,
{-0.0400988,0.00824892,0.0481494,0.187828,0.161163,0.0316018}
 };
  static const float bias2[1] = { -0.0351789 };
  static const float weights2[][1] = { {-0.0802203}
,
{0.123379}
,
{-0.0740482}
,
{-0.106966}
,
{0.289481}
,
{0.0512568}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_15(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_15(v, index);
}
static int assign_gen_lepton_prior_1_0_15() {
  global_gen_lepton_prior.at(1,0,15) = &specialized_gen_lepton_prior_1_0_15;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_15 = assign_gen_lepton_prior_1_0_15();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_16(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.119748,0.108675,-0.014851,0.206157,0.043769,-0.0856018}
,
{0.203217,0.126368,0.0664256,0.0740371,0.069123,0.247521}
,
{0.008082,0.0459041,0.0719442,-0.0357881,-0.167989,-0.0614451}
,
{-0.00149201,-0.135797,-0.140325,0.0214244,0.134188,-0.121591}
,
{-0.053184,0.162978,0.0339113,-0.13653,-0.0698816,0.0976577}
,
{0.101252,-0.190403,0.162957,0.0047805,0.0481689,-0.237247}
,
{-0.125574,-0.0298291,-0.0395137,-0.121544,-0.0968112,0.0158121}
,
{-0.234902,-0.121491,-0.127382,-0.0843223,-0.141171,-0.139595}
,
{-0.0649509,0.104444,0.00209919,0.0745176,-0.0729957,0.0707424}
,
{-0.0463472,0.149017,0.0515918,0.0788749,0.22279,-0.130975}
,
{0.0492714,-0.0208048,0.171767,-0.0904755,-0.0397743,0.00453771}
,
{-0.0465689,-0.0301408,0.0248577,0.0185687,0.206188,0.0342454}
,
{0.0804045,-0.181664,0.199147,-0.161865,0.0223625,-0.0179329}
,
{0.0428285,-0.0985546,-0.0926588,-0.00387906,0.161967,-0.170966}
,
{0.145711,-0.106508,0.213852,0.149038,-0.0591781,0.10498}
,
{0.0596736,0.0397706,-0.107647,-0.126483,-0.0326368,0.205902}
,
{-0.0277339,-0.0279392,-0.067517,-0.0700658,0.0881877,-0.143656}
,
{-0.0237576,0.029646,0.131139,-0.125102,-0.0742793,-0.0826222}
,
{0.0673026,-0.00117347,-0.116991,-0.176831,-0.0966003,0.0863333}
,
{-0.208368,0.0081912,-0.0380424,0.197298,-0.221184,0.0100004}
,
{-0.0152038,0.0773127,-0.0969304,0.0128787,0.063553,-0.0138928}
,
{0.0790599,-0.0837846,0.125846,-0.0231442,0.128241,-0.0611824}
,
{-0.0522098,-0.0467848,0.0473767,0.055125,0.0336391,0.143994}
,
{-0.117164,-0.0561188,-0.041283,0.0796429,0.110258,-0.0507663}
,
{0.0848508,0.161948,-0.048085,0.0505195,-0.132083,0.0453854}
,
{0.106596,0.143409,-0.0537428,0.085301,0.0139656,0.00742886}
,
{0.0644659,0.056438,0.047348,0.131753,0.116695,0.0551441}
,
{0.0543073,0.0643702,-0.0561727,0.0637417,0.111652,-0.139277}
,
{-0.13927,0.0645094,-0.0470263,-0.0181401,0.0987504,0.0361621}
,
{-0.00249222,0.0857519,0.195767,0.0359403,-0.149483,0.0542702}
,
{-0.0208771,0.119007,-0.0761813,-0.0340897,-0.227386,-0.132007}
,
{-0.0100736,0.0776018,-0.102454,-0.0309846,-0.120895,0.120492}
,
{0.079733,0.124934,0.114395,0.0853951,0.0251893,0.12583}
,
{0.0154009,0.187609,-0.0142037,-0.0193389,0.113875,0.110111}
,
{0.140813,0.12839,-0.0728827,0.0424194,0.11858,0.0336331}
,
{-0.0838514,0.16694,-0.027933,-0.075003,-0.211496,-0.0417768}
,
{-0.0667762,0.0175361,-0.0419404,0.0131974,0.242693,0.130764}
,
{0.110131,0.0318072,0.131008,0.155922,-0.0365857,0.107704}
,
{-0.0790213,-0.0666281,0.151499,0.0407012,0.141266,-0.238356}
,
{-0.0826696,-0.149797,0.0432871,-0.11467,0.0154954,0.164743}
,
{-0.136858,0.0143261,0.0872694,0.181911,0.0510481,0.0677018}
,
{0.061222,-0.0251808,-0.120585,0.18681,-0.0612246,-0.0449081}
,
{-0.0564776,-0.0280327,-0.131703,0.111276,-0.00457414,-0.0993889}
,
{0.0628087,0.127903,-0.098024,-0.189634,-0.0515781,0.0983921}
,
{-0.0571609,-0.118779,-0.107858,0.0082276,0.0421608,0.0508312}
,
{0.0763679,0.105696,-0.0238646,-0.194566,-0.127522,0.0189425}
,
{0.0766558,-0.0327823,-0.0784681,0.00991436,0.00358351,0.0477445}
,
{0.0297482,-0.18861,0.0877292,0.00138213,0.0278402,-0.113307}
,
{-0.10128,-0.0699536,-0.00486184,0.0521667,-0.0781171,-0.0169633}
,
{0.148933,0.0965351,-0.0518258,0.231379,-0.0538877,-0.0857459}
,
{0.15422,0.0126353,-0.00439959,-0.123379,-0.0594629,-0.00342238}
,
{0.0472291,-0.0933246,0.0547073,-0.114456,0.0713115,0.0401382}
,
{0.0873708,-0.0737401,0.137215,0.14163,-0.0847879,-0.0292226}
,
{0.0306203,-0.126605,-0.0595884,-0.0110287,-0.137441,-0.249673}
,
{0.0493985,-0.240812,0.048224,0.0389779,0.042699,-0.0484116}
,
{-0.191771,0.24383,0.0344904,-0.0744852,0.13666,-0.13652}
,
{0.114851,-0.0726625,0.191858,0.0332707,-0.0818145,0.0423189}
,
{0.0206352,-0.12725,0.121732,-0.0348364,-0.0567534,0.0505589}
,
{-0.0807464,0.0979327,-0.0931276,-0.00255847,-0.0801165,-0.0425931}
,
{-0.0526385,0.0734405,0.0950828,-0.0679845,0.125174,0.108633}
,
{0.214787,-0.0535476,0.0277943,0.13419,-0.000405843,-0.139866}
,
{-0.195396,-0.212176,-0.188633,0.138651,0.0156,-0.00942138}
,
{0.0709514,0.0285278,-0.159136,0.0280464,-0.061345,-0.00767007}
,
{0.0201346,0.0292829,-0.010025,0.244481,-0.163044,-0.00391158}
,
{-0.0498859,-0.0705652,-0.201245,0.23812,-0.0199831,-0.033774}
,
{0.0212871,-0.123508,0.024604,0.0717468,0.0479505,-0.19579}
,
{0.224249,0.0377776,-0.0416238,0.0782436,0.234603,-0.117883}
,
{-0.00411771,0.0406019,-0.117543,-0.0753744,-0.191369,-0.162062}
,
{-0.181729,-0.039625,-0.209625,-0.248854,-0.0684548,0.160706}
,
{0.131826,-0.035204,0.0355088,-0.14786,-0.155016,0.0442536}
,
{0.0451044,-0.0473099,0.0257956,-0.0250037,0.168537,-0.136407}
,
{-0.100727,0.0365499,0.177671,0.126594,0.113612,-0.0511105}
,
{-0.233701,0.216727,0.137461,0.0149227,0.0795027,0.139043}
,
{0.0680618,-0.11796,0.20798,-0.0262858,-0.0721377,0.087013}
,
{0.0858451,-0.0972168,0.045605,0.0702104,0.018687,-0.056486}
,
{-0.0236669,0.112314,0.0128109,-0.00555664,0.00272069,-0.122359}
,
{0.0825126,0.0704305,0.0124728,0.185298,0.0822677,-0.0134923}
,
{-0.243034,0.112554,-0.106942,-0.0288299,-0.0163879,0.0495161}
,
{-0.0127224,0.0492163,0.206233,0.0770937,-0.246589,-0.0216687}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0725689}
,
{-0.158174}
,
{-0.107223}
,
{0.000532299}
,
{-0.000448929}
,
{0.0572882}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_16(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_16(v, index);
}
static int assign_gen_lepton_prior_1_0_16() {
  global_gen_lepton_prior.at(1,0,16) = &specialized_gen_lepton_prior_1_0_16;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_16 = assign_gen_lepton_prior_1_0_16();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_17(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0124788,-0.217192,-0.116949,0.12606,0.219925,0.439843 };
  static const float weights1[][6] = { {0.0004701,0.118316,0.106539,-0.144764,-0.227832,-0.016704}
,
{-0.130062,0.124046,-0.437028,0.0085988,0.152841,0.174982}
,
{0.0206464,0.165317,0.0407441,-0.212465,0.0300759,0.259402}
,
{-0.228656,-0.0843922,0.6501,0.298873,0.386445,-0.16679}
,
{-0.0542522,-0.0500939,-0.0101757,0.174959,0.257204,0.486307}
,
{-0.141293,-0.166714,-0.187676,0.055466,0.235784,0.327557}
,
{0.00062623,-0.180004,-0.107352,0.185395,0.176775,0.30581}
,
{0.0704773,0.00300415,0.0809128,0.0425504,0.19793,-0.151825}
,
{-0.070985,0.0651304,0.06646,-0.0306321,0.0489813,-0.105314}
,
{0.048224,-0.0573451,0.0902982,0.221227,0.0824424,-0.0360965}
,
{-0.203903,-0.00907272,0.0167191,0.000329932,-0.197888,0.0147834}
,
{-0.0331612,-0.0210393,-0.0415529,0.228239,-0.0648535,0.159465}
,
{0.0960024,-0.0982857,-0.16898,-0.171198,-0.0265461,0.102251}
,
{0.190187,0.10518,-0.224261,-0.128718,-0.228624,-0.192146}
,
{-0.147239,-0.133869,0.0936292,-0.156311,0.106104,0.0786769}
,
{-0.0253177,-0.0659704,0.0106731,-0.010246,-0.000702904,0.132494}
,
{0.0468804,-0.232857,0.188948,0.0133324,0.354097,0.194903}
,
{-0.0268743,-0.0664659,0.164667,-0.109274,0.022272,-0.0468263}
,
{-0.145735,-0.249363,-0.167371,0.0985696,-0.0457484,0.31647}
,
{-0.196085,0.0138898,0.00903273,0.125896,-0.0412563,-0.0857476}
,
{-0.0444544,0.191778,0.0979984,0.250414,0.112091,-0.076999}
,
{-0.0122257,-0.0465541,0.050737,0.0846778,-0.0171961,-0.0901598}
,
{-0.047919,0.0323693,0.0272951,0.234713,0.0646399,0.125789}
,
{-0.128052,0.212253,0.00688797,-0.00614505,0.115833,0.147065}
,
{0.0827891,-0.00122954,0.0630517,-0.144405,-0.108594,-0.0795999}
,
{0.179532,-0.0727499,-0.139362,-0.0794659,0.0229077,0.0916585}
,
{0.014399,0.337461,0.126653,-0.202421,-0.173252,-0.0965524}
,
{-0.0852822,0.237089,-0.11507,-0.0992923,-0.120265,-0.0864529}
,
{-0.0443624,0.0613542,0.124136,0.164777,-0.0769087,-0.0689663}
,
{-0.187613,-0.0645122,0.124647,-0.0430688,0.135611,-0.0278232}
,
{-0.0742088,0.0139564,-0.0225735,-0.0733096,-0.0919964,0.0807557}
,
{0.0159464,-0.12576,0.0373354,-0.103604,0.00922473,-0.0405082}
,
{-0.0054083,0.0137924,0.421053,-0.198868,-0.337635,0.0189261}
,
{-0.0678925,-0.0506674,0.15539,0.179908,-0.106619,-0.175995}
,
{0.0780606,-0.00790867,-0.139285,-0.0310241,0.0249969,0.085277}
,
{-0.144095,-0.0567931,-0.0149798,0.09935,0.0323427,-0.154371}
,
{0.0604014,-0.126146,0.181475,-0.211231,-0.121735,-0.0208277}
,
{-0.00364372,-0.01684,-0.0614994,0.0498104,0.15037,0.0775919}
,
{0.032561,-0.039453,0.0395791,-0.00576746,0.0565641,-0.0162035}
,
{-0.101033,-0.0653465,-0.689315,0.181716,0.179011,0.113011}
,
{-0.172094,-0.087979,-0.347601,0.193467,0.205176,-0.011832}
,
{0.0493918,0.200538,0.299884,-0.00280971,-0.228555,0.025347}
,
{0.0537207,0.106549,0.0430879,-0.0208331,-0.0128585,0.122806}
,
{0.11516,0.0747664,0.0452153,-0.0085636,-0.346239,0.136785}
,
{0.0750245,-0.198631,0.0769152,-0.0616911,-0.259115,-0.0975956}
,
{-0.0556226,0.143527,0.415451,-0.302089,-0.0177118,0.115722}
,
{0.106154,0.348201,0.673093,-0.15173,-0.419191,0.236376}
,
{-0.131119,-0.0232807,-0.184338,-0.106255,0.0433957,0.137115}
,
{0.224213,0.00285143,-0.101649,-0.0900477,-0.155999,0.129764}
,
{-0.0670293,-0.1715,-0.156903,-0.0342626,-0.144206,0.0557676}
,
{-0.00479309,0.188006,-0.0454394,0.081314,-0.127856,0.195675}
,
{0.00969166,-0.114622,-0.121226,-0.00552656,0.12331,-0.00964746}
,
{-0.0849542,-0.0847049,-0.0413492,-0.0870005,0.0280417,0.0383562}
,
{-0.0404227,-0.125354,0.00316172,0.0302079,0.190773,-0.107452}
,
{-0.166969,0.115953,0.166009,0.189599,-0.0927046,-0.13068}
,
{0.0057849,-0.00588797,0.0337046,0.0213449,-0.0191864,-0.0346892}
,
{0.0167182,0.237169,0.151497,0.0343846,-0.0144666,-0.00279391}
,
{0.175,-0.0839242,0.129602,0.0633572,0.0341607,0.00287358}
,
{-0.14377,-0.00537641,0.0347217,-0.107003,-0.0181908,-0.101018}
,
{0.0466548,0.11738,-0.149087,-0.100839,0.268416,-0.00522979}
,
{-0.0959975,-0.0554499,-0.00131378,-0.130816,0.172558,-0.189612}
,
{0.0756482,-0.0560736,-0.0227872,0.163493,-0.117385,0.0088746}
,
{-0.158756,0.0593169,-0.0372154,0.0702713,0.118845,-0.067937}
,
{0.167701,-0.0175882,-0.14248,-0.113201,-0.0549128,-0.0397989}
,
{-0.150276,0.107577,0.0824314,-0.232628,0.18129,0.159875}
,
{-0.00859115,-0.0131422,-0.00373467,-0.220679,0.139524,-0.018424}
,
{0.108605,0.065787,-0.0208017,-0.0597629,-0.212162,-0.0517689}
,
{0.0729179,-0.132398,-0.163396,-0.00385328,-0.0362049,-0.0300001}
,
{-0.0932343,-0.0334071,0.153474,-0.0245787,0.132056,-0.247606}
,
{0.142106,-0.00968639,-0.0815338,0.0314564,0.0685295,-0.141102}
,
{-0.0185454,-0.234255,0.202165,-0.18707,0.024705,0.0153406}
,
{-0.159835,-0.00834665,-0.202173,0.0141859,-0.172403,-0.171115}
,
{0.204049,-0.0639803,-0.111327,-0.0318132,0.0547261,-0.0222356}
,
{0.169962,-0.0779046,0.0142518,-0.0222975,-0.0372536,0.140538}
,
{-0.108386,-0.240002,-0.152219,0.0203601,-0.118632,-0.0940427}
,
{-0.101877,0.0926299,0.230257,-0.0264147,0.0977303,-0.167295}
,
{0.0993539,0.0852245,0.181299,0.0356859,-0.148607,0.158488}
,
{-0.0133039,-0.0531536,-0.00680796,-0.0453171,0.000302968,0.0606092}
,
{-0.00219312,0.157513,-0.0530247,0.0746683,-0.151286,0.122318}
 };
  static const float bias2[1] = { 0.14031 };
  static const float weights2[][1] = { {-0.0647022}
,
{-0.0997928}
,
{0.0780819}
,
{0.0506223}
,
{0.0311349}
,
{0.124685}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_17(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_17(v, index);
}
static int assign_gen_lepton_prior_1_0_17() {
  global_gen_lepton_prior.at(1,0,17) = &specialized_gen_lepton_prior_1_0_17;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_17 = assign_gen_lepton_prior_1_0_17();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_18(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.358471,-0.019686,0.386216,-0.0524152,-0.0288001,0.0 };
  static const float weights1[][6] = { {-0.172371,-0.00390763,-0.0786436,0.0289225,-0.0210722,0.100159}
,
{0.0968548,-0.133007,-0.00811677,-0.327346,0.0033411,-0.0340131}
,
{0.204842,0.209382,-0.041968,0.363773,0.0335228,-0.0512925}
,
{0.229124,0.109578,0.661548,0.052175,0.106332,-0.115106}
,
{0.136029,-0.0997821,0.631297,-0.0769864,-0.0931015,-0.188612}
,
{0.357445,-0.0421254,0.273984,-0.0730005,0.100741,0.0412563}
,
{0.22513,-0.077523,0.382008,-0.0397733,0.0488628,-0.186048}
,
{-0.180602,-0.0329692,-0.0102299,-0.537453,-0.0829834,-0.0859029}
,
{-0.0687797,0.141394,0.081033,-0.372288,0.0626238,0.0866448}
,
{0.0077116,-0.074244,-0.0973047,0.0312443,-0.143876,-0.0484198}
,
{-0.0634881,0.0622332,0.0343454,0.0560129,0.197858,0.0302798}
,
{0.108634,-0.0986666,0.189233,0.0404242,-0.0380605,-0.0568653}
,
{0.116264,-0.0858067,-0.151814,-0.152243,-0.0448957,0.0105139}
,
{-0.105485,-0.257977,-0.124603,0.108607,-0.231396,0.0416817}
,
{-0.0546073,0.161716,0.020072,-0.171681,0.118347,0.0739282}
,
{-0.0517534,-0.166734,-0.0190257,0.00993431,-0.0743982,0.0464415}
,
{0.117046,0.184704,0.159207,-0.252694,0.00622749,0.0974759}
,
{0.148773,-0.0289598,-0.0277854,0.035219,-0.175289,-0.108756}
,
{0.155177,0.0775195,0.136562,0.0888198,0.0845447,-0.00437457}
,
{0.0228964,-0.134525,-0.072927,-0.0652822,0.0398606,-0.111221}
,
{-0.0940512,0.00716672,0.0318522,0.0827007,-0.0465552,-0.0366428}
,
{-0.0632654,0.0669036,0.0102815,0.00542411,-0.103329,-0.128225}
,
{-0.0146938,-0.10744,0.0934715,-0.051954,0.00206024,0.149099}
,
{0.022608,-0.0851809,-0.00396414,0.00957905,0.0254995,-0.0839657}
,
{0.0299356,-0.113584,0.0966896,-0.013423,0.173595,0.156648}
,
{0.116211,-0.0682113,-0.149444,-0.0302432,0.0940534,0.1061}
,
{0.0272485,0.146666,-0.0859031,0.12096,-0.0515207,-0.0114731}
,
{-0.181624,0.153423,-0.00363577,0.201971,-0.122293,0.171667}
,
{-0.129878,-0.0608855,0.0533246,0.118086,-0.159393,-0.0737791}
,
{0.195963,0.200187,0.0377719,-0.116096,-0.00519014,-0.022497}
,
{-0.0362235,0.0731236,0.0613061,0.411582,0.028875,-0.0152727}
,
{0.134105,0.153589,0.079546,-0.0535241,-0.0983905,0.143322}
,
{-0.191741,0.0192288,0.0588651,0.00516625,0.140092,-0.121632}
,
{-0.00892463,0.052913,0.186026,0.0550105,0.0839574,-0.0940633}
,
{-0.118504,-0.0721594,0.00335097,-0.0271586,-0.0618384,-0.0922884}
,
{0.0298905,-0.22175,-0.0511101,-0.152545,-0.00978685,0.0166168}
,
{-0.0142165,-0.183342,0.0534445,-0.14092,-0.102799,-0.0607911}
,
{0.400664,-0.0165875,-0.194978,-0.190234,-0.0762961,-0.184835}
,
{0.0364551,0.146865,0.0854804,-0.00152905,0.137656,-0.153029}
,
{-0.0105217,0.128783,0.0172532,-0.121495,0.207878,-0.0458224}
,
{0.14338,0.0744376,-0.046491,-0.188172,-0.0391509,0.123958}
,
{0.00718877,-0.0756044,-0.0486111,-0.454868,-0.0596736,-0.0396053}
,
{0.00554141,0.0316845,-0.0255859,0.00408649,-0.0877628,-0.0894004}
,
{-0.210038,0.0410976,0.0171313,-0.141408,0.0883195,-0.038919}
,
{-0.308416,-0.0570304,0.182788,0.370835,0.073234,-0.11236}
,
{-0.0527218,-0.188961,-0.0291149,-0.0810063,-0.208854,-0.119353}
,
{-0.0183226,-0.120037,-0.0519976,-0.00663488,0.220097,-0.0853446}
,
{0.0784428,0.0619265,-0.152423,-0.338875,0.181151,-0.0247419}
,
{-0.123919,0.0848158,-0.0817097,-0.243051,0.0316884,-0.191905}
,
{0.13081,-0.150171,-0.0806942,-0.314035,0.167325,-0.0443622}
,
{0.256742,-0.19528,-0.155477,-0.23946,-0.158844,0.026693}
,
{0.559375,0.118703,-0.0842671,0.253797,0.0533968,-0.0069117}
,
{0.114444,0.108387,0.00460763,0.198161,-0.0741602,0.0203139}
,
{0.0500043,-0.23986,0.0528513,0.322055,0.164365,-0.0326445}
,
{-0.0187384,-0.136597,-0.188284,0.0334327,-0.0495815,0.0372599}
,
{0.138315,0.0570051,0.231593,-0.0990396,0.0849434,0.0408064}
,
{0.0117983,-0.0689306,-0.0349821,0.132531,-0.148321,-0.0948899}
,
{-0.0471172,-0.0283897,0.227797,0.150807,0.0458094,-0.0217946}
,
{0.0115139,-0.00882232,-0.0973332,-0.0050961,0.079519,0.00514297}
,
{-0.149025,0.0931741,-0.00022729,-0.19157,0.113565,-0.00224447}
,
{-0.0391165,0.158362,0.109072,0.0627282,0.124774,0.0122831}
,
{-0.169787,0.179364,-0.0675363,-0.0101591,-0.122719,0.0509906}
,
{0.179844,-0.109006,-0.0474407,-0.0993918,-0.148898,-0.0694072}
,
{-0.0327934,0.0782955,-0.0381625,-0.0192331,-0.0691754,0.0485264}
,
{0.105098,-0.0891879,-0.158033,0.0116015,-0.229648,0.152308}
,
{0.0865133,0.238598,0.0901545,-0.0183465,-0.121754,0.0541635}
,
{0.107404,0.159035,0.20847,0.211448,0.144893,0.104225}
,
{0.147811,0.119328,-0.055273,-0.0877828,-0.169331,0.0194708}
,
{0.0929758,-0.111626,-0.0880781,0.210705,0.00719919,0.0212425}
,
{0.120665,-0.125874,-0.135273,0.145444,-0.148259,0.0687469}
,
{0.0146342,0.0733759,-0.172627,0.0622194,-0.103248,-0.244634}
,
{-0.173461,-0.140276,0.0746428,-0.0510265,-0.113047,-0.131789}
,
{-0.105771,-0.134733,0.00763552,0.202453,-0.0913936,0.0548768}
,
{-0.0107253,-0.166573,0.0888523,-0.145495,0.0474057,-0.0991869}
,
{-0.241529,0.136038,0.0449071,-0.0902488,0.0202266,-0.0151209}
,
{-0.153333,0.053935,-0.0892099,-0.238884,-0.14285,0.0602807}
,
{0.114873,0.00225605,0.139327,-0.00164423,0.133462,-0.0991489}
,
{-0.0510534,-0.070797,0.0918456,-0.121589,0.111005,0.00962294}
,
{-0.0574802,-0.0118065,0.104791,0.0449227,-0.216447,-0.0655896}
 };
  static const float bias2[1] = { 0.174091 };
  static const float weights2[][1] = { {0.0958864}
,
{-0.0635888}
,
{0.185884}
,
{-0.123748}
,
{-0.14256}
,
{-0.161768}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_18(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_18(v, index);
}
static int assign_gen_lepton_prior_1_0_18() {
  global_gen_lepton_prior.at(1,0,18) = &specialized_gen_lepton_prior_1_0_18;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_18 = assign_gen_lepton_prior_1_0_18();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_19(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.115446,-0.0541417,-0.0670414,0.173535,0.246388,-0.156274 };
  static const float weights1[][6] = { {-0.0121821,-0.129751,-0.071727,-0.14637,0.198171,0.135683}
,
{0.0981805,0.0290064,0.457946,0.146323,-0.10604,0.0565528}
,
{-0.197338,0.0699272,0.0682434,-0.0365995,0.058143,-0.483847}
,
{-0.00304312,-0.115292,-0.150515,0.223392,-0.326791,-0.0492626}
,
{0.2246,-0.187565,-0.152668,0.100862,0.243333,-0.13068}
,
{0.150575,0.0236961,-0.0814414,0.102993,0.286665,-0.222724}
,
{-0.0892646,-0.126268,-0.0158984,0.162727,0.353384,-0.0924185}
,
{-0.751087,0.062065,-0.222648,0.373792,0.09016,-0.231315}
,
{-0.473762,-0.126803,-0.279436,0.678248,0.0809094,0.0500842}
,
{0.0648807,0.0713998,-0.0396329,0.0321255,-0.0473402,-0.0359039}
,
{0.177426,-0.0537393,0.0391646,-0.0262207,-0.0929485,0.031879}
,
{-0.0948624,0.149158,0.0186929,0.0218839,0.181044,-0.154997}
,
{-0.177964,-0.00763195,-0.272952,0.0341436,-0.170104,0.269709}
,
{0.131657,0.181251,-0.0850126,0.050265,0.0523461,0.0328796}
,
{0.00861659,-0.00376215,0.157604,0.0230462,-0.115826,-0.0749641}
,
{0.114856,0.0993947,0.0771913,-0.153317,0.130989,-0.122591}
,
{0.261629,-0.0283129,0.245266,0.0772894,0.480536,0.103781}
,
{-0.0533046,-0.194131,0.307973,0.00567714,-0.0345297,-0.140828}
,
{0.143331,0.0271484,-0.25612,0.269465,0.289834,-0.287435}
,
{0.0177863,-0.195036,-0.0489237,-0.00902049,-0.064061,-0.0316692}
,
{0.0561549,-0.0359785,0.0276987,-0.0347199,-0.0156146,-0.00123141}
,
{0.00157811,-0.0882114,-0.181585,-0.0603689,0.0118924,0.0672498}
,
{0.065983,-0.0880297,-0.0299337,0.0231819,0.113205,0.125022}
,
{-0.00707632,-0.338012,0.0456367,-0.0245187,-0.0177994,-0.120053}
,
{0.0958657,0.118358,-0.112634,-0.0887978,0.0195148,0.0705325}
,
{-0.0426983,0.103669,-0.0830362,-0.06558,0.0936319,0.189578}
,
{0.0257665,0.0827512,-0.0714466,-0.224634,-0.111351,-0.0954877}
,
{-0.0303402,-0.0625955,0.0381448,0.0323735,0.0130526,0.105643}
,
{-0.109332,-0.0986347,0.208911,-0.222439,-0.104452,-0.0045088}
,
{-0.0577834,0.0230298,-0.0399275,-0.0710847,0.0511338,-0.00334924}
,
{0.19879,-0.255869,0.116024,-0.150168,0.0162193,0.182844}
,
{-0.0632548,-0.143175,0.0606813,0.125994,-0.00782354,-0.0791537}
,
{-0.0257191,0.142437,-0.0560653,0.444656,-0.166672,0.00986848}
,
{0.119142,0.0706177,-0.0301255,0.120812,-0.0633158,-0.0717879}
,
{0.0942588,-0.194953,-0.191046,-0.155693,0.0289259,-0.145674}
,
{0.424786,0.252687,0.0362823,-0.473835,-0.0328149,-0.00850765}
,
{0.160235,-0.0417065,0.17799,-0.13885,0.0137387,0.111678}
,
{-0.191867,0.0253294,0.279811,0.0369988,0.0719641,0.152649}
,
{0.262063,-0.137551,-0.24488,0.210787,-0.134519,0.38977}
,
{-0.0440992,0.037226,-0.468374,0.117131,0.0211785,0.301336}
,
{0.0696444,0.150776,0.0163902,0.260992,-0.0474413,0.00594341}
,
{0.167709,-0.117987,0.438003,-0.257882,0.0251408,0.406426}
,
{-0.110327,-0.0538891,0.121281,0.14679,-0.0575133,-0.106408}
,
{-0.366927,-0.117248,-0.4509,0.553866,-0.0776052,-0.124698}
,
{0.0795913,0.0867344,0.415574,-0.337179,0.159576,0.275501}
,
{-0.253044,-0.0388832,0.238451,0.247947,0.0648674,0.063846}
,
{-0.4036,-0.195751,-0.269447,0.794343,-0.0352651,-0.0293352}
,
{-0.0978785,0.0142428,-0.164548,0.0853716,0.00322686,0.0803222}
,
{-0.027908,0.172765,0.217978,-0.347532,0.00115576,-0.354417}
,
{0.249523,0.0716417,0.0923181,-0.437985,0.0230996,-0.243422}
,
{-0.00565715,-0.013365,-0.291241,0.00908834,0.0111149,-0.0478344}
,
{-0.0644142,0.179819,0.333435,0.287495,-0.0678499,-0.32265}
,
{-0.322262,-0.0138976,-0.0689942,0.00330094,0.106802,0.278425}
,
{-0.0859908,0.00760335,0.188538,-0.163547,0.0126618,0.194033}
,
{-0.0707923,0.21684,-0.00446316,-0.00119879,0.0861735,-0.0592385}
,
{0.0429826,0.0560415,0.00985407,0.0261542,0.145732,-0.263161}
,
{-0.0617314,0.101317,-0.0164052,-0.185154,0.0409769,0.0309211}
,
{-0.165754,0.0662478,0.164755,-0.17939,0.0231087,-0.0670673}
,
{-0.0915138,-0.0361993,0.041472,-0.18595,-0.00642467,0.184477}
,
{0.0852688,0.121818,-0.105763,-0.03286,-0.0660721,-0.203248}
,
{0.229155,0.333214,-0.134078,-0.0838114,0.0872221,-0.167853}
,
{0.114252,0.0144473,-0.104433,-0.192918,0.0137302,-0.117335}
,
{0.00636646,0.00489675,-0.0221219,-0.0887349,-0.0846511,0.190262}
,
{0.101931,-0.0560078,-0.139476,0.173495,-0.0659849,-0.0318578}
,
{0.121602,0.270588,-0.00372028,-0.143877,0.0697711,-0.217367}
,
{-0.330415,0.0814545,0.0417757,-0.142867,-0.0795914,0.189781}
,
{0.287389,-0.0378169,0.172299,0.155418,0.133813,-0.294285}
,
{-0.142497,0.0660999,0.0119942,-0.114795,-0.289138,0.0177282}
,
{0.0898642,-0.0137672,0.0352674,0.0823217,0.0606251,0.297885}
,
{0.10379,-0.0456099,0.0364852,-0.0464813,-0.046396,-0.186406}
,
{0.133935,0.134261,-0.0430327,-0.121072,0.189974,-0.0482545}
,
{-0.040229,0.109485,0.00993249,0.0633616,0.030712,-0.00588855}
,
{0.0275327,-0.0589749,0.0480516,-0.0253905,-0.0326952,-0.0708235}
,
{0.293213,0.160719,-0.0900729,0.0481196,-0.0409806,-0.227657}
,
{0.0564456,0.0995741,-0.0680091,0.0978609,-0.0458352,0.0339784}
,
{-0.0128524,-0.167899,-0.00787021,0.00278289,-0.00504071,0.20356}
,
{0.0864405,0.0392392,0.0784654,0.133721,-0.000361608,0.009518}
,
{-0.203658,0.0157133,0.052606,0.099976,-0.142955,0.151879}
,
{0.126196,-0.142227,0.102843,0.0825526,0.0254471,-0.0154799}
 };
  static const float bias2[1] = { 0.0727215 };
  static const float weights2[][1] = { {0.0725831}
,
{0.145867}
,
{0.96264}
,
{0.0966392}
,
{0.155889}
,
{-0.348513}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_19(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_19(v, index);
}
static int assign_gen_lepton_prior_1_0_19() {
  global_gen_lepton_prior.at(1,0,19) = &specialized_gen_lepton_prior_1_0_19;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_19 = assign_gen_lepton_prior_1_0_19();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_20(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.210343,0.110517,0.0452346,-0.0314442,0.239445,0.0307786}
,
{0.0285488,-0.0382427,-0.00875248,-0.0449517,0.11041,-0.143919}
,
{0.0906115,-0.101483,0.0918412,-0.112651,-0.0850786,-0.236996}
,
{0.169829,-0.232694,-0.00312608,0.0876103,0.108356,-0.175908}
,
{0.164435,0.225522,-0.0549428,-0.0519312,-0.0632633,-0.0176123}
,
{0.0948004,-0.0913194,-0.0205609,-0.0685718,0.0894991,0.120182}
,
{0.0413314,0.00816802,-0.194808,-0.0798095,0.101907,-0.208419}
,
{0.0601334,-0.0220414,-0.0542578,-0.191945,0.105712,0.0511613}
,
{-0.0489669,-0.0100638,0.108468,-0.223615,0.0218962,0.0384528}
,
{-0.136405,0.139071,-0.0724172,-0.234443,0.069838,0.132537}
,
{-0.111605,-0.082773,-0.0894137,-0.130465,-0.0834845,-0.0563399}
,
{-0.0737878,-0.177236,-0.0437381,-0.0538683,-0.135347,-0.14013}
,
{0.0521572,-0.0570831,0.0508692,-0.0393975,-0.223453,0.0523585}
,
{0.161036,-0.0500577,0.114228,0.196743,-0.0308141,0.0233937}
,
{0.158996,0.179829,-0.198978,-0.157475,0.0943675,-0.136072}
,
{-0.0538738,-0.121827,-0.115217,0.0393577,-0.105645,0.0930057}
,
{-0.018786,0.00228756,0.153317,-0.231196,0.159151,-0.0757422}
,
{-0.00873411,-0.00322637,-0.0251446,0.0201792,-0.131357,-0.0496213}
,
{0.0188713,0.00762621,0.0181315,0.0518926,-0.21309,0.0442198}
,
{-0.0382504,0.0796391,-0.205549,-0.125148,-0.175672,0.224118}
,
{0.0991141,0.0984806,-0.133822,-0.0427955,-0.17348,0.147271}
,
{0.101444,0.213403,-0.0183623,-0.00205479,-0.0311087,0.0789154}
,
{-0.0597043,0.125,-0.0651135,0.0238054,-0.0201448,0.0849049}
,
{0.0518302,0.0122055,-0.0121571,-0.165486,0.125012,-0.0948344}
,
{-0.0438597,0.208009,0.0966608,0.0372661,-0.131389,-0.0521026}
,
{-0.0707136,-0.0527514,-0.0370982,-0.168672,0.017563,0.0919144}
,
{0.153138,-0.122848,0.138033,-0.109897,-0.0485441,0.203962}
,
{-0.00662248,-0.174758,0.0986359,-0.0247788,0.00170548,0.0607476}
,
{-0.111032,-0.205381,-0.0986271,-0.0834988,-0.0686276,0.204432}
,
{-0.0235097,0.131306,-0.191013,-0.113622,0.0443114,0.0474155}
,
{-0.219849,-0.0609559,0.107928,-0.217926,-0.0484079,-0.18319}
,
{-0.0464613,0.180636,-0.0912529,0.100513,0.163036,0.11307}
,
{0.0262902,-0.0285175,0.0105348,0.0496791,0.0762009,0.0213265}
,
{0.163824,0.00300777,0.186829,-0.148938,0.176801,0.219314}
,
{0.194255,-0.110953,0.0774208,-0.120961,-0.104531,0.0601306}
,
{-0.06236,0.0667148,0.00836955,-0.0326203,0.0705022,0.210495}
,
{-0.0959753,0.0936707,-0.0433786,0.0761947,0.147319,-0.223591}
,
{-0.0931609,0.0599545,-0.171372,-0.0173972,0.160967,0.0570155}
,
{0.151131,0.123255,0.0867209,-0.240294,0.133026,0.0659163}
,
{-0.0127877,0.178228,0.0482256,-0.11823,0.164569,-0.0387978}
,
{0.0631582,-0.0652391,-0.175835,-0.0241342,0.161116,-0.118077}
,
{-0.0725827,0.13154,-0.077084,0.241462,-0.00357169,-0.121906}
,
{0.0204152,-0.0280007,0.0831169,-0.169216,0.193171,0.0943546}
,
{0.183944,-0.0984813,-0.0909401,0.0883346,-0.216689,0.0204631}
,
{0.169401,-0.151235,0.031475,0.206491,-0.0471031,-0.0297037}
,
{0.15031,0.148597,-0.104375,0.0642684,-0.186455,-0.138715}
,
{0.00188946,-0.0796653,-0.0264439,-0.0396878,-0.0749942,0.139626}
,
{-0.0686259,0.0386695,0.128475,-0.102494,-0.0824075,0.0851352}
,
{-0.0826572,-0.0605984,-0.0490648,-0.133397,-0.15068,0.242168}
,
{-0.0647362,-0.0264829,-0.0535725,0.141202,-0.164414,0.0956587}
,
{0.068436,0.0567985,-0.0722197,0.0372231,0.180986,0.0368512}
,
{-0.0175176,-0.00680452,0.102572,0.194915,-0.0171911,-0.0791507}
,
{0.00993022,-0.0394251,0.08185,0.199231,-0.0942798,0.103056}
,
{-0.0384332,-0.174063,0.0233835,-0.0659695,0.0422041,-0.0144835}
,
{0.124863,-0.0965132,0.0220094,0.0498794,0.107847,0.126501}
,
{-0.0427445,0.142349,-0.00812564,-0.149882,-0.0776085,0.0478361}
,
{0.0132873,-0.151687,-0.0645182,-0.0607628,-0.0199948,0.0971324}
,
{-0.237038,0.209576,0.0668896,-0.0896826,0.127664,0.0914599}
,
{0.0722153,0.104499,-0.0137197,0.163015,0.0456845,-0.0517482}
,
{0.0649338,-0.00744943,-0.0119686,0.089057,0.0562513,-0.031278}
,
{-0.148988,-0.0355861,-0.0638106,0.128274,-0.0503746,-0.0126756}
,
{0.0348622,-0.0164917,0.0673691,0.012889,-0.114696,0.0409886}
,
{-0.0207695,-0.109737,0.011768,-0.0953569,0.0115551,-0.209789}
,
{0.12839,0.00356532,-0.0375028,-0.166753,0.0716936,0.104258}
,
{0.069591,0.027864,-0.0413305,-0.0514927,0.0886771,0.14506}
,
{-0.0648581,0.148381,0.0564243,0.100393,-0.0214954,0.155405}
,
{0.104624,0.0527433,-0.0703367,0.0264096,0.00749876,0.0670042}
,
{0.00132853,0.0611802,0.0887771,0.0301216,0.24713,-0.129369}
,
{0.0227945,-0.0176521,-0.107444,-0.0874881,0.208731,0.101383}
,
{-0.202153,0.0992373,0.0876053,0.0405295,0.017336,-0.0682468}
,
{-0.134839,0.137783,-0.0559888,0.199141,-0.0536753,0.0111743}
,
{-0.0285429,0.122289,0.217977,0.111161,0.0900796,0.0184871}
,
{0.0496964,0.0918829,-0.0892164,0.0562371,-0.033246,-0.235017}
,
{0.010404,-0.145772,0.176063,0.138925,0.015867,-0.0691115}
,
{0.00167173,-0.0891875,-0.0120531,0.172051,0.174167,0.0319115}
,
{0.0900524,0.0509762,-0.0571516,0.0151931,-0.0740091,-0.059205}
,
{0.141812,-0.237256,-0.20404,0.112978,-0.0236363,-0.0658023}
,
{0.0363326,0.166931,0.155784,-0.00877251,-0.00906845,0.158317}
,
{-0.0853514,-0.072529,0.0461216,-0.198041,-0.114911,-0.000781806}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.00896047}
,
{-0.0300184}
,
{0.00827576}
,
{-0.159986}
,
{0.081133}
,
{-0.0822559}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_20(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_20(v, index);
}
static int assign_gen_lepton_prior_1_0_20() {
  global_gen_lepton_prior.at(1,0,20) = &specialized_gen_lepton_prior_1_0_20;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_20 = assign_gen_lepton_prior_1_0_20();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_21(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.103511,-0.00855197,0.0406686,-0.00354318,-0.00536648,-0.147669 };
  static const float weights1[][6] = { {0.131559,-0.0354846,0.0320745,0.103408,0.00647899,-0.0955104}
,
{-0.257769,-0.108377,-0.0478209,-0.234652,-0.24004,-0.0344281}
,
{0.0723676,0.0959483,0.0200197,0.237044,0.188694,-0.0510935}
,
{-0.586642,0.230289,0.133742,-0.0812523,-0.190133,-0.750349}
,
{0.0164815,-0.231793,-0.0584631,-0.248959,-0.125235,-0.397572}
,
{-0.0830282,0.120839,0.0280027,-0.0212962,0.185247,0.0647864}
,
{-0.180398,-0.251418,-0.025174,0.0385467,0.0949122,-0.184211}
,
{0.0349175,0.388235,0.0125088,-0.59953,-0.065612,0.0064112}
,
{0.0965338,0.392576,-0.240058,-0.445998,-0.020265,-0.0677871}
,
{-0.0587211,0.231206,0.0437456,-0.00087146,0.0894945,0.111923}
,
{-0.06001,-0.0146864,0.19766,0.0481509,-0.0308094,0.0378403}
,
{0.0250293,-0.14349,0.0360536,-0.110262,-0.120649,0.0737017}
,
{-0.14616,-0.177819,0.0568301,0.11669,0.16357,-0.231055}
,
{0.370183,-0.104276,0.228253,-0.324849,0.151615,0.179409}
,
{-0.0447504,-0.132022,0.061471,0.0647035,0.106753,-0.00623625}
,
{-0.0044257,0.234465,0.23983,0.0379509,-0.139628,0.121419}
,
{0.211213,0.0656218,0.12412,0.15522,-0.170307,0.288286}
,
{0.00691586,0.148494,-0.127007,-0.0180632,-0.106366,-0.00435059}
,
{-0.211324,0.0620527,-0.16523,-0.140319,-0.0592116,-0.118511}
,
{-0.0466318,-0.180744,-0.0927396,0.0513012,-0.065896,0.0515469}
,
{0.0566687,0.249745,-0.0538036,0.0476957,-0.175318,0.109063}
,
{-0.0706518,-0.0557233,0.00788094,0.123773,-0.111067,0.110754}
,
{-0.113207,-0.121409,0.0587192,0.0697644,-0.113758,0.162561}
,
{0.059072,0.0360441,-0.0132179,-0.109611,-0.111534,-0.159736}
,
{0.0429192,-0.123384,0.167031,0.155988,-0.00479974,0.0285226}
,
{-0.214826,-0.141414,0.0249773,0.272075,0.227017,0.0130427}
,
{-0.027247,0.163751,-0.0387075,0.0958702,-0.0605965,-0.0877214}
,
{-0.0446254,-0.0284154,-0.156879,0.156304,0.0285527,0.0357257}
,
{-0.00310537,-0.141458,-0.0158429,0.17572,0.206442,0.0141152}
,
{-0.0924331,-0.217184,-0.100357,-0.195475,0.101855,0.0901603}
,
{-0.0647998,-0.169859,0.153409,-0.0505735,-0.0654911,0.0210519}
,
{0.0556978,0.0145488,0.134277,0.0460829,0.167956,0.0696956}
,
{-0.384569,-0.00706983,0.771907,-0.0771898,0.0427876,0.140916}
,
{0.218347,-0.0773157,-0.00461579,-0.0929661,-0.10977,-0.11711}
,
{-0.166614,-0.164717,0.0733714,-0.046102,0.188268,0.0889445}
,
{-0.235818,0.0591122,0.214807,-0.1076,0.0218408,0.0694087}
,
{0.128413,0.345879,-0.457801,-0.0972622,0.127871,-0.0492186}
,
{0.0037372,0.224518,-0.0698508,-0.00123031,0.0407467,0.187701}
,
{-0.19277,-0.183478,-0.152655,-0.110205,0.0637212,0.214705}
,
{-0.147633,-0.0230061,0.0586805,-0.108369,0.135266,0.0647272}
,
{-0.143113,0.243762,-0.00911549,-0.156985,-0.168955,-0.035087}
,
{-0.156372,0.231588,0.111008,-0.204416,0.117218,0.145232}
,
{0.107661,0.420571,-0.231985,0.0129879,0.11892,0.057704}
,
{-0.093719,-0.15103,0.159473,0.0625575,-0.125382,0.076081}
,
{0.0529504,0.1847,-0.0696214,-0.111721,-0.0331299,-0.00225652}
,
{-0.143107,0.300634,0.0414413,0.198028,0.14004,0.251556}
,
{-0.244914,0.134539,-0.5637,-0.157327,0.0382112,0.156724}
,
{0.0118617,0.434119,-0.283158,-0.0898893,-0.148348,-0.0228975}
,
{-0.0912569,-0.140656,-0.0100772,-0.139771,-0.133533,-0.0418205}
,
{0.0702781,0.0939906,-0.0042488,-0.150736,-0.131944,-0.154674}
,
{-0.216011,-0.239079,-0.00475001,-0.143055,-0.203572,0.150039}
,
{0.175053,0.184922,-0.474061,0.0381584,0.078402,0.126455}
,
{-0.00250552,-0.14657,0.249667,0.0830064,0.0987099,0.0313399}
,
{-0.0666117,0.0916889,-0.0763458,-0.141787,0.0464953,0.0229315}
,
{0.000373428,0.0505372,0.00740507,0.0355153,-0.0591163,-0.0508523}
,
{-0.190059,-0.0954394,-0.0442723,-0.120643,0.119069,-0.0973332}
,
{-0.000823292,-0.0468082,0.119038,-0.00886592,-0.102168,0.0803484}
,
{-0.130431,0.0872708,0.104103,0.196052,0.116386,-0.0543969}
,
{0.0136979,0.0686126,-0.172854,0.125418,0.124151,-0.028046}
,
{-0.161472,-0.0310818,0.0609788,0.0467052,-0.0514156,0.0113573}
,
{0.162022,-0.0613927,0.0720679,-0.0426929,-0.0162442,-0.048013}
,
{0.00603233,-0.0963707,-0.0417805,0.00810956,0.180622,-0.142284}
,
{0.238966,0.116568,0.0251267,-0.168106,-0.0997544,-0.0533256}
,
{-0.140127,-0.069168,-0.172581,0.083081,0.101732,0.0584283}
,
{0.0956955,-0.158871,-0.154146,-0.0144731,-0.0637948,0.00919882}
,
{0.0391312,0.174004,0.0857509,-0.147709,0.0347704,-0.113876}
,
{-0.195064,0.0977104,-0.0857222,0.0679955,0.098163,-0.0199647}
,
{0.0851302,-0.0161158,-0.00402324,0.126544,0.1501,0.0306749}
,
{-0.0189962,-0.0881897,-0.00732343,-0.0791654,-0.0905181,-0.0227787}
,
{0.226772,-0.00712709,-0.0870191,0.128962,0.125107,0.192598}
,
{-0.00507359,-0.0217814,-0.171855,-0.100754,0.0200569,0.0591895}
,
{0.156132,-0.0375602,0.0422857,0.134624,0.0213096,-0.0166211}
,
{0.00946686,0.0586404,-0.0798053,-0.0521675,-0.0494665,-0.0374388}
,
{0.145288,-0.0716293,-0.249308,-0.0774701,0.0507343,0.02886}
,
{-0.0873501,0.203123,0.146731,-0.17843,0.0658211,-0.126433}
,
{-0.115625,0.00301114,-0.0806624,-0.0776003,-0.214862,-0.0376825}
,
{-0.185709,-0.217631,0.0318368,-0.0398467,-0.0406821,-0.018161}
,
{-0.109341,0.0121247,-0.166126,0.150868,0.0316175,-0.0809249}
,
{-0.141379,-0.0564057,-0.0249499,0.146011,0.159023,-0.123642}
 };
  static const float bias2[1] = { -0.0967584 };
  static const float weights2[][1] = { {0.160023}
,
{-0.108647}
,
{0.28213}
,
{-0.15315}
,
{-0.219876}
,
{0.126777}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_21(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_21(v, index);
}
static int assign_gen_lepton_prior_1_0_21() {
  global_gen_lepton_prior.at(1,0,21) = &specialized_gen_lepton_prior_1_0_21;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_21 = assign_gen_lepton_prior_1_0_21();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_22(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.314766,-0.103716,0.145759,0.0787314,-0.0880982,0.0136495 };
  static const float weights1[][6] = { {0.192102,-0.0911026,0.00352689,0.0810405,0.288439,-0.159508}
,
{-0.386385,-0.108668,0.0150788,0.0855898,-0.000608137,0.0539607}
,
{-0.308292,-0.119511,-0.300509,-0.180796,-0.147558,-0.23672}
,
{-0.667685,0.112748,-1.27326,-0.516732,-0.322019,0.303787}
,
{-0.238366,-0.195935,0.0542287,0.0271032,0.0309201,-0.0164825}
,
{-0.350685,0.00986096,0.127458,0.199624,0.0194346,-0.0808566}
,
{-0.32034,-0.282754,0.108413,0.17986,-0.0464655,-0.0944013}
,
{0.459128,0.0534137,-0.113437,0.234639,-0.0200029,-0.491668}
,
{0.550821,0.20179,0.0988405,0.223749,0.220559,-0.306985}
,
{0.02872,-0.123607,0.0836507,-0.102059,0.136665,-0.00830082}
,
{0.0937346,0.0141782,-0.0378011,-0.0663474,-0.00668464,0.069952}
,
{0.0895024,0.190778,-0.0332427,0.0658223,-0.167813,0.187301}
,
{-0.109863,-0.259664,0.184949,0.0680792,-0.0638274,0.0669561}
,
{-0.132499,0.284653,0.0890857,-0.0526534,0.117992,-0.183167}
,
{-0.0535759,0.18158,-0.0984136,0.143964,0.0212545,0.0507615}
,
{0.0193909,0.0653834,-0.120677,0.213778,-0.0481133,-0.0998266}
,
{-0.104942,0.388377,0.149352,-0.197594,0.341581,-0.109772}
,
{0.215792,0.0632467,0.0451327,-0.0846284,0.041314,-0.0306869}
,
{-0.0756369,0.0400649,0.00983827,0.176017,-0.249667,0.191359}
,
{0.0430682,-0.0113715,-0.0482974,0.0907137,0.0427522,0.0106139}
,
{0.189525,0.054432,-0.19016,-0.10647,0.0380656,-0.0255962}
,
{-0.00433059,-0.0634153,-0.0942085,-0.00174688,0.076014,0.0928168}
,
{-0.127672,0.0892912,-0.0152207,0.142844,0.215528,0.0363382}
,
{-0.0285715,0.0268275,0.157864,-0.106827,0.0867796,0.0597565}
,
{0.158101,0.0232793,-0.0513087,0.0204107,0.356032,0.0959819}
,
{0.0591093,-0.269523,-0.0570517,0.234642,0.289631,0.0574147}
,
{-0.102411,0.0179561,-0.0099302,-0.263742,0.084604,0.0193193}
,
{0.0880217,-0.154516,-0.0166632,0.0495311,0.202079,0.0564774}
,
{0.685014,-0.020038,0.0207744,-0.283045,0.00230207,0.584556}
,
{-0.0887126,-0.154978,0.081699,0.0172517,0.0402827,0.187501}
,
{-0.152026,0.0439931,-0.47948,-0.45068,-0.182611,-0.115932}
,
{0.0385584,-0.104368,0.0807968,0.225436,0.00786685,-0.0928151}
,
{-0.0245512,0.0984058,-0.258885,0.223503,-0.483925,0.0727426}
,
{-0.0208604,-0.0985177,-0.117982,-0.0264402,0.011592,0.0252829}
,
{0.00233893,-0.0516684,0.170627,-0.734719,0.48149,-0.133881}
,
{0.189373,0.110707,-0.0724068,0.260136,-0.238985,-0.103374}
,
{0.122015,0.00815653,-0.440834,0.567602,0.0614712,0.412284}
,
{-0.37258,-0.0455423,0.152272,-0.382195,-0.0850688,0.10383}
,
{-0.0168585,0.0573415,0.333803,-0.37853,0.122832,-0.042022}
,
{0.123871,-0.0107839,0.0957356,0.328162,0.0143831,-0.066433}
,
{-0.164233,-0.106088,-0.222949,0.152332,0.160239,-0.262814}
,
{0.33381,-0.00680912,0.581007,0.512986,0.291496,0.06345}
,
{0.239857,-0.257419,0.0130395,0.129837,0.375954,-0.756252}
,
{0.415691,0.285626,0.031238,-0.381348,-0.27191,0.0673863}
,
{0.0215727,-0.0168224,0.121932,-0.110769,-0.0132637,-0.382732}
,
{0.15757,0.285255,0.493032,-0.072285,-0.565392,-0.0523173}
,
{0.211769,0.0673314,-0.164983,-0.434335,0.38155,-0.215402}
,
{-0.157517,-0.0630523,0.125285,0.11167,0.0875051,-0.0571486}
,
{-0.642909,-0.26905,-0.215014,-0.559214,0.154166,0.11026}
,
{0.268616,-0.151216,-0.210281,-0.317766,0.361536,-0.198899}
,
{0.57537,0.250004,0.0888572,-0.334028,-0.176461,-0.119426}
,
{0.531277,-0.281512,0.268721,-0.241402,0.349443,-0.94519}
,
{0.106546,-0.273565,-0.195244,0.441204,0.375387,-0.28588}
,
{-0.32156,0.275209,-0.35882,-0.800019,-0.904548,0.416276}
,
{-0.347553,0.107321,-0.117844,-0.0745265,0.525758,-0.43662}
,
{-0.325543,0.044973,-0.159256,-0.354784,0.342467,-0.486016}
,
{-0.179287,-0.0157881,-0.101129,0.0937355,0.521231,-0.548711}
,
{0.75082,-0.0311692,-0.059469,-0.359297,-0.921786,0.944398}
,
{0.852662,-0.00754513,0.0329633,-0.363314,-0.891972,1.07867}
,
{-0.597046,0.131397,-0.0382823,0.0529309,0.55403,-0.509192}
,
{-0.547181,-0.0441976,-0.185278,-0.107295,0.596703,-0.398648}
,
{0.0946587,-0.242992,-0.0678635,0.118323,0.0612856,-0.0572462}
,
{0.0822656,-0.230472,-0.166065,-0.124661,-0.248517,0.142202}
,
{-0.185532,-0.0718077,-0.218689,0.265283,0.407779,-0.277098}
,
{0.221706,0.0606906,-0.0104542,-0.410563,0.297995,0.409769}
,
{0.137081,0.0785112,-0.0311892,-0.16878,-0.238809,0.116448}
,
{-0.0191164,-0.0547035,0.084974,0.218499,-0.338646,0.197732}
,
{0.0932047,-0.0483936,-0.0550991,0.293456,-0.511487,0.904962}
,
{-0.621184,-0.124228,-0.211727,-0.177158,0.515138,-0.501734}
,
{-0.176419,-0.00498678,-0.242463,-0.137153,0.351349,0.610663}
,
{-0.59091,-0.177246,-0.18399,0.171212,0.533991,-1.1195}
,
{-0.0201242,0.125989,-0.0616011,0.10813,-0.253192,0.0103608}
,
{-0.541981,0.0674988,0.164832,0.321786,0.705104,-0.888879}
,
{0.350365,0.0480498,-0.0232085,-0.358749,-0.141873,0.171853}
,
{0.078306,-0.0685025,0.127936,0.0860879,-0.000564597,-0.12217}
,
{-0.0901649,-0.0384301,-0.192914,0.147733,-0.18903,0.0240184}
,
{0.12996,0.19971,0.0445126,-0.0898186,-0.0150956,0.0608779}
,
{0.0678455,-0.0713539,-0.0944799,-0.0881644,-0.189799,-0.0673678}
,
{0.0149305,0.128922,0.111674,0.0676375,0.143227,0.1344}
 };
  static const float bias2[1] = { -0.0208974 };
  static const float weights2[][1] = { {-0.0633596}
,
{0.162619}
,
{-0.0738044}
,
{0.242184}
,
{0.0531857}
,
{-0.0460138}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_22(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_22(v, index);
}
static int assign_gen_lepton_prior_1_0_22() {
  global_gen_lepton_prior.at(1,0,22) = &specialized_gen_lepton_prior_1_0_22;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_22 = assign_gen_lepton_prior_1_0_22();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_23(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.00590933,0.0313214,-0.207568,0.150217,0.0983174,-0.0435416}
,
{-0.14184,-0.107895,0.0142864,0.0214318,-0.069324,-0.0832422}
,
{0.224821,0.102109,-0.205143,0.0701678,0.0750935,0.161604}
,
{0.0885706,0.0805093,-0.00451507,-0.0317337,-0.0872534,0.0251876}
,
{-0.086601,0.143349,0.0451414,0.19895,-0.127448,0.249443}
,
{-0.082903,0.0313285,0.0102881,0.0635033,-0.0775028,-0.0958478}
,
{-0.084756,0.0823059,0.0532345,-0.0529951,-0.130033,-0.0546655}
,
{-0.072095,0.0548719,0.173805,-0.103066,-0.123894,0.00632326}
,
{0.17454,-0.192989,-0.0528388,0.184264,0.07097,0.0583642}
,
{0.161912,-0.125635,-0.0157199,-0.0115054,-0.150085,-0.0770797}
,
{0.0825234,0.107149,-0.0620166,-0.197096,0.0212522,0.102683}
,
{-0.0598454,0.0422853,0.153961,-0.0395008,-0.0322699,0.0353407}
,
{-0.115651,0.118605,-0.0611459,0.138963,0.14092,0.0287638}
,
{0.0574757,-0.021929,-0.024979,0.101306,-0.00534056,-0.0862089}
,
{-0.209502,-0.0566912,0.0322431,-0.0876952,0.0362071,-0.0676382}
,
{0.158916,0.113903,0.064268,0.0397329,0.145568,0.109636}
,
{0.118798,0.150908,-0.091253,0.129759,-0.0524211,-0.10336}
,
{-0.0047982,-0.0889096,0.137388,0.0417868,-0.100551,0.030503}
,
{0.024647,0.14403,0.0306102,-0.0225202,0.00310396,-0.137975}
,
{0.0652644,-0.0656614,-0.0988355,0.122041,-0.185481,0.102392}
,
{-0.0157624,-0.172258,-0.105172,0.127173,0.14554,-0.0257111}
,
{-0.126865,0.0173937,0.0566668,0.108647,-0.205525,0.0132024}
,
{0.0807891,-0.138014,-0.130935,-0.0646162,0.00429957,0.187638}
,
{0.0467857,-0.0997416,-0.229428,-0.124768,0.00865549,-0.0976292}
,
{-0.00557126,0.0857868,0.105614,0.141724,-0.0684149,0.110246}
,
{0.10146,-0.0949545,-0.0592037,0.204849,0.184736,-0.0321106}
,
{0.127333,0.139537,0.0188758,0.156628,0.0884361,0.148782}
,
{-0.073745,0.131427,-0.0803541,-0.0436911,-0.120746,-0.212438}
,
{-0.0634599,0.114691,0.143224,0.0989301,0.0215421,-0.104078}
,
{0.000415326,0.112794,-0.0390617,-0.0753078,-0.0827205,-0.0354123}
,
{0.144419,0.172068,0.0332532,-0.0423959,0.00964818,-0.118957}
,
{-0.000384782,-0.157049,0.108399,0.0560963,-0.0643438,0.00182309}
,
{-0.232527,0.134947,-0.0681963,0.0882814,-0.00790341,-0.051716}
,
{0.0014216,-0.0662946,-0.247618,0.0749041,-0.143842,0.215286}
,
{0.140179,0.0142037,0.104611,-0.149479,0.0367939,0.0786227}
,
{-0.115409,0.208889,0.100736,-0.037803,0.000873756,-0.0747844}
,
{0.0211608,-0.0619465,-0.076055,-0.0861413,0.0565698,-0.119581}
,
{0.150209,0.0968281,0.11025,0.0600226,0.0529413,-0.0634397}
,
{0.136989,-0.241403,-0.122817,0.15331,0.0571717,-0.0827194}
,
{-0.223755,-0.0124291,-0.0588976,0.114287,-0.0858556,-0.127842}
,
{0.0943282,0.230221,-0.213513,-0.0940802,-0.0303127,0.0315733}
,
{-0.177718,-0.151684,0.068553,-0.00554645,-0.225293,-0.186255}
,
{0.092553,0.102847,0.023945,0.0357995,-0.0768143,-0.0015868}
,
{0.0662683,-0.0189624,-0.221545,-0.202679,-0.158091,-0.0772854}
,
{0.17574,-0.104121,-0.017296,-0.0408201,-0.160933,0.0819053}
,
{0.0343366,0.0680663,0.0040201,0.050888,-0.0668898,0.126901}
,
{-0.157418,0.166725,0.0686516,0.11042,0.14643,-0.0424278}
,
{0.0739789,0.100784,0.0169882,-0.0243483,0.246509,0.00736948}
,
{-0.108013,-0.026806,0.0813107,-0.116363,0.225068,-0.062332}
,
{-0.237005,0.110419,0.133775,-0.0231056,0.00794125,-0.0370154}
,
{0.176499,0.242865,0.0780006,0.0985484,0.0343098,-0.0618609}
,
{0.109415,0.168422,0.0862551,-0.0294055,-0.0776434,-0.15728}
,
{-0.0977427,0.0740797,-0.126288,-0.0276852,0.121028,0.0147547}
,
{0.0644353,-0.147656,-0.0159143,-0.0587404,-0.0546534,-0.0628788}
,
{-0.118206,0.0147023,0.00586114,-0.0252192,0.0482087,-0.15425}
,
{-0.15229,0.15806,0.0965642,-0.107383,0.0433676,0.104277}
,
{0.0796925,-0.054205,0.173977,-0.11402,0.135998,0.124965}
,
{-0.00640392,-0.0184635,-0.17609,0.0415276,0.0909883,0.174916}
,
{0.0848236,-0.0361329,-0.0435772,-0.168021,0.155636,0.161253}
,
{-0.0873359,0.124474,-0.0910019,0.247887,0.0550524,0.130357}
,
{-0.0411044,-0.0476878,0.0715596,-0.124046,0.101766,0.0228186}
,
{0.126602,-0.0745183,0.0769965,-0.00453568,-0.11871,0.115742}
,
{-0.0415026,0.112684,-0.206733,-0.0247154,-0.0786888,-0.0809292}
,
{-0.147359,-0.0769621,-0.00879714,-0.177601,0.0575757,0.0165392}
,
{0.00792122,-0.0412869,-0.152501,-0.240886,0.150183,-0.0415658}
,
{-0.0878952,-0.0486071,0.130902,0.067612,-0.181161,0.0725384}
,
{0.0656863,-0.070444,0.0258993,0.217353,-0.0490691,-0.00570204}
,
{-0.0273599,0.018749,0.0516268,0.182089,0.0227878,0.130667}
,
{-0.179685,-0.241267,0.00316526,-0.105516,-0.126588,-0.141317}
,
{0.120018,-0.17247,-0.120833,0.0667766,0.131875,0.122109}
,
{-0.106724,-0.019794,-0.0759499,-0.0791405,0.0555129,0.165883}
,
{0.108902,-0.0965736,0.0532932,0.0219672,-0.0474113,0.0267489}
,
{-0.158484,-0.109325,-0.0179489,-0.0213019,0.0296874,0.1312}
,
{0.0590096,0.0996252,-0.0485267,-0.0221703,0.245764,-0.0829572}
,
{0.0358445,0.143219,-0.0806644,0.0311746,0.124521,0.0971496}
,
{0.0116271,0.121525,-0.0811914,0.121037,0.184632,0.11467}
,
{0.24365,0.179841,-0.0698613,0.0854558,-0.0312843,-0.00164149}
,
{0.11657,0.0189977,0.14534,-0.160314,-0.0656305,-0.071561}
,
{0.136472,0.173803,0.0354821,0.0520227,-0.1054,0.0491083}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0834185}
,
{-0.142454}
,
{0.0739872}
,
{-0.0595614}
,
{-0.114973}
,
{0.00279589}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_23(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_23(v, index);
}
static int assign_gen_lepton_prior_1_0_23() {
  global_gen_lepton_prior.at(1,0,23) = &specialized_gen_lepton_prior_1_0_23;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_23 = assign_gen_lepton_prior_1_0_23();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.393944,0.392878,0.724407,0.395966,0.526102,0.158031 };
  static const float weights1[][6] = { {1.49977,1.16181,-1.1613,-0.83486,1.16904,-0.349603}
,
{0.0787371,0.549497,0.508775,0.027107,0.245773,0.390936}
,
{0.189971,0.209387,0.343881,0.0155675,-0.106419,-0.0358131}
,
{-0.343532,0.773132,0.853303,1.13184,1.04877,-0.127496}
,
{-0.196147,0.310332,0.559735,0.232455,0.724967,0.253424}
,
{-0.203904,0.283747,0.558279,0.308362,0.317804,-0.0222179}
,
{-0.506702,0.345068,0.592611,0.29622,0.38468,0.224809}
,
{0.185517,0.136195,-0.102478,0.000244814,0.0661901,-0.155861}
,
{-0.192203,0.0149546,0.128299,0.219726,-0.133303,0.111667}
,
{-0.0315941,0.0507829,-0.000189464,0.102733,-0.128577,-0.00470122}
,
{0.0608228,-0.146934,0.239809,0.0295689,0.0695852,0.0395215}
,
{0.0478791,0.165144,0.0388868,0.00285382,0.121137,-0.106305}
,
{-0.00419567,-0.0174656,0.104623,-0.116622,0.0624828,0.0188961}
,
{0.039462,-0.00202117,-0.0938089,0.118081,0.115302,-0.0996308}
,
{-0.142451,0.0443982,0.0899836,-0.249381,-0.0996916,-0.00594565}
,
{-0.0194873,0.17079,0.0864566,-0.0181207,0.20012,0.0130229}
,
{0.193777,0.0722811,0.0643669,0.111573,0.0582256,-0.0994475}
,
{0.225277,0.0475047,0.0133598,0.133189,0.0187373,0.100378}
,
{2.09367,1.03709,-2.32718,-1.92871,-0.0378011,-0.115389}
,
{-0.148684,-0.222348,0.034779,-0.118905,-0.058409,-0.0832692}
,
{0.139561,-0.130878,0.0471394,0.238183,-0.311863,0.15239}
,
{0.169428,0.0978222,0.155342,0.127236,-0.197243,-0.115273}
,
{0.122172,-0.0455348,0.0530751,0.0824454,0.0824129,0.0832035}
,
{0.230615,0.0686709,-0.0225611,0.192906,-0.355211,-0.0824408}
,
{0.136886,0.0954106,0.0148412,-0.0874352,0.0814372,-0.0261397}
,
{-0.231041,0.13444,-0.253313,-0.135317,0.0844318,0.0464077}
,
{0.195027,-0.207874,-0.232461,0.0615356,0.171449,-0.129444}
,
{0.347522,0.00341931,0.0317147,0.0545156,0.0325812,0.0273224}
,
{-0.700857,-0.00654369,0.552876,0.207055,-1.76771,-0.0325859}
,
{-0.0933016,0.0274468,-0.133115,0.0555601,-0.0256463,0.179373}
,
{-0.151298,-0.107624,-0.0115003,-0.0351375,-0.0360486,-0.00756147}
,
{0.12198,0.00133206,-0.22687,0.0266929,0.0286304,-0.0837787}
,
{0.0834872,-0.202705,0.112296,-0.200566,-0.000753731,0.177912}
,
{0.224441,-0.0408716,0.0635634,0.21391,-0.104407,0.0823311}
,
{-0.0403083,-0.0643233,-0.0411614,-0.00797341,-0.086881,-0.252802}
,
{0.0636011,-0.132916,-0.141723,0.0460868,-0.0926373,-0.00817511}
,
{0.102587,-0.0887809,-0.138773,0.0452144,-0.0118036,0.330627}
,
{0.0413637,-0.0688708,-0.0499835,0.0179532,-0.0365235,0.0107702}
,
{0.0583736,-0.0577412,-0.0705315,0.0289809,0.0131591,0.194913}
,
{-0.045006,0.00443617,0.0141336,-0.0269655,-0.00580137,-0.139307}
,
{-0.112959,-0.0842417,-0.089094,-0.0618366,-0.0754103,-0.00707813}
,
{-0.0639151,-0.104253,-0.133987,-0.0156992,-0.134268,-0.152891}
,
{0.0693506,-0.0800275,-0.0858307,0.0357092,-0.0479108,0.178472}
,
{-0.0230292,0.0166164,-0.00611254,-0.017237,-0.0350077,0.13185}
,
{-0.0723797,0.0355701,0.00881494,-0.0372354,-0.049931,0.0167877}
,
{0.0672716,0.12045,0.111796,0.036377,0.0599983,0.0240163}
,
{0.0874667,0.100894,0.0657451,0.0536684,-0.122131,0.0467213}
,
{0.0275764,-0.0235177,-0.0173855,0.0188994,-0.023746,-0.0136527}
,
{0.0651381,-0.0502222,-0.03659,0.0455397,-0.190269,-0.00688132}
,
{0.147029,0.00282487,0.0107908,0.0782232,0.107304,0.0302757}
,
{0.128843,-0.0157742,-0.0173313,0.0768555,-0.0133394,-0.0267511}
,
{-0.0846326,0.027968,0.0321835,-0.0582692,-0.0842993,0.057962}
,
{-0.0178779,-0.0265381,-0.0110496,-0.0103474,-0.00502873,-0.0142179}
,
{-0.0641052,-0.0133411,0.0230138,-0.0500988,0.143672,-0.0327322}
,
{-0.0820118,0.0989201,0.0406911,-0.0611747,0.0382564,-0.170882}
,
{-0.124024,-0.0915151,-0.0422393,-0.0250705,-0.000178238,0.0276754}
,
{0.0908548,-0.178122,0.00044849,0.0810835,0.0648526,-0.100772}
,
{-0.701411,-0.612298,-0.0567414,0.470955,-0.0364095,-0.18835}
,
{0.165762,-0.253762,0.0932551,0.112452,0.0330422,-0.0386143}
,
{0.264445,-0.199809,-0.0738939,0.0888466,0.00876791,0.113776}
,
{-0.0634336,-0.137663,0.0396306,-0.131556,-0.0214097,-0.0574943}
,
{0.0803979,-0.120976,0.0569235,-0.0159858,0.0212351,0.35268}
,
{0.0249363,0.0424956,0.203751,-0.757091,-0.380261,0.373132}
,
{-0.178924,0.0324353,0.0452451,0.0566632,-0.00574797,-0.500992}
,
{0.0471453,-0.0887035,0.207701,-0.0859445,0.00286818,-0.00714289}
,
{0.113565,0.0327756,0.0540678,0.0770192,0.0145619,0.171296}
,
{-0.0455448,-0.146414,0.0731792,-0.162457,-0.0449251,-0.0937004}
,
{-0.0761679,0.481497,-0.243963,0.161812,0.167793,-0.15571}
,
{0.152953,0.0313705,-0.092624,-0.00936576,-0.0442407,-0.26582}
,
{0.0329415,0.0929924,0.193284,0.131498,0.00959845,-0.0138709}
,
{0.180677,0.209847,-0.0555272,0.159453,0.00407055,-0.065912}
,
{0.0912712,0.194649,-0.129395,0.208078,0.0703991,0.123358}
,
{0.238852,0.0620371,0.459585,-0.172303,0.400647,-0.129316}
,
{0.0596956,0.227343,0.0662634,-0.0750618,0.0525823,0.205118}
,
{0.356583,0.0327277,0.220014,-0.106475,0.397097,-0.321896}
,
{0.162092,-0.11331,0.18758,-0.14074,0.189865,0.351585}
,
{0.422713,-0.139734,-0.210049,0.249398,0.364262,-0.349411}
,
{0.0528249,0.220002,-0.11796,-0.122623,0.0891569,-0.0297816}
,
{0.050808,-0.0649846,-0.0642588,0.377624,0.28899,-0.420803}
 };
  static const float bias2[1] = { 0.253307 };
  static const float weights2[][1] = { {-0.0789463}
,
{-0.0481604}
,
{0.0644602}
,
{0.129939}
,
{-0.0344915}
,
{0.013954}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_2_0(v, index);
}
static int assign_gen_lepton_prior_0_2_0() {
  global_gen_lepton_prior.at(0,2,0) = &specialized_gen_lepton_prior_0_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_2_0 = assign_gen_lepton_prior_0_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_24(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0781839,-0.251987,-0.242956,0.05923,0.171637,0.0314039 };
  static const float weights1[][6] = { {-0.126384,-0.00106332,-0.0263309,0.0242469,-0.161848,0.0514939}
,
{-0.989874,-0.146553,0.143178,-0.192026,0.0661564,-0.05324}
,
{-0.0674324,-0.0153263,-0.282951,0.0792661,-0.134324,0.0133118}
,
{0.0270809,-0.0386966,-0.0161108,0.091984,0.238294,0.141772}
,
{-0.00136303,-0.195082,-0.306244,-0.136579,0.210231,0.0530919}
,
{0.0241125,-0.340163,-0.178832,-0.06847,-0.00279201,0.119833}
,
{-0.0608045,-0.0750142,-0.266953,-0.101552,-0.0357493,-0.154474}
,
{-0.000893185,0.0321195,0.237477,0.175793,-0.0438304,-0.589493}
,
{0.0382056,0.0271073,0.118737,0.0304248,0.19547,-0.39817}
,
{0.0688919,-0.117182,0.0973052,-0.0186703,0.174237,-0.0611077}
,
{0.0810515,0.0886195,0.0993946,0.0339048,0.0726189,-0.00499435}
,
{0.110015,0.0691537,-0.150149,0.0168852,0.127688,0.14423}
,
{0.167414,0.296132,0.0920879,-0.00239802,0.128109,0.184037}
,
{-0.360885,0.057509,0.080351,-0.058992,0.0137752,0.0410937}
,
{-0.0381692,0.0303757,-0.0559095,-0.035934,0.10222,0.0229675}
,
{-0.212681,0.148107,0.142322,-0.0541083,-0.0875417,0.181201}
,
{0.0685323,-0.248628,-0.0563863,-0.0102625,0.132897,0.0968796}
,
{-0.00411641,-0.0175269,0.112256,-0.0219085,0.0643782,0.158179}
,
{0.113892,-0.258026,-0.0405029,0.0393996,0.249248,0.128461}
,
{0.124869,-0.0320738,-0.0436843,0.0422718,-0.0899545,-0.231738}
,
{-0.150906,0.0507832,0.036753,-0.158451,0.0855159,0.0967349}
,
{-0.147015,0.0538361,0.0368634,-0.0827776,0.0761339,-0.15952}
,
{-0.0989683,-0.0705176,0.149221,0.229816,0.128043,-0.0935092}
,
{0.0151105,0.0475903,0.0464809,-0.0544992,0.0842112,-0.39762}
,
{0.153532,0.287234,0.158856,0.207786,-0.14311,-0.109891}
,
{-0.171321,0.157597,0.322566,0.314196,-0.22322,0.122821}
,
{-0.0185689,0.0386731,0.0238969,0.209614,0.0472679,-0.0301754}
,
{-0.301349,0.159884,0.13548,0.0807002,-0.0255539,-0.184644}
,
{-0.217473,-0.0120843,-0.0617462,-0.102254,-0.0886934,0.196011}
,
{0.169753,0.0307499,0.107144,-0.195191,0.160866,-0.100173}
,
{-0.0935835,-0.0252293,0.246174,-0.0522209,0.0849172,-0.134127}
,
{-0.0915269,-0.0257859,-0.0112313,-0.00707486,0.0261512,0.0844062}
,
{-0.112729,0.062806,-0.203301,0.170091,-0.0314986,0.285736}
,
{0.0711988,-0.133571,-0.163989,-0.00266884,-0.131128,0.0867883}
,
{-0.661649,-0.0486053,-0.0234143,-0.103934,-0.0348405,-0.343628}
,
{0.737219,-0.0935159,0.478391,-0.0787384,0.122775,-0.16103}
,
{0.000527881,-0.216135,0.740152,-0.10625,0.122807,0.497169}
,
{-0.234415,0.038532,0.271237,-0.0697691,0.175039,0.130518}
,
{0.289731,-0.0597171,0.0863124,-0.000619007,0.0075452,-0.760113}
,
{-0.55153,-0.000579267,-0.299772,-0.158082,-0.12185,0.0202081}
,
{-0.144112,-0.0189457,-0.0616635,-0.114635,-0.137563,0.0102994}
,
{0.645325,0.147058,-0.735721,-0.23283,-0.149147,0.100632}
,
{-0.22627,0.0892343,-0.255012,-0.125869,-0.00938277,-0.0943734}
,
{-0.0579034,-0.0612677,0.0564204,-0.0339027,0.0708762,0.107659}
,
{0.279702,0.222666,-0.259191,0.0618009,0.11034,-0.345132}
,
{-0.276642,-0.0157491,0.174092,0.0436828,0.121922,0.0899812}
,
{-0.916999,0.207199,-0.315368,-0.14813,-0.254752,-0.173423}
,
{0.279976,-0.0916714,0.15156,0.00953424,0.00130803,0.194341}
,
{-0.402943,-0.0667169,0.0868661,0.038886,0.018909,-0.0994152}
,
{-0.407814,0.170573,-0.214395,-0.0152972,-0.0366086,0.0307508}
,
{0.0819351,-0.00068956,0.0172762,-0.0618328,0.0455773,0.0375048}
,
{-0.417081,0.174979,-0.136745,0.186863,0.0450144,0.0266232}
,
{-0.1889,0.171684,-0.566901,0.0220894,-0.101957,0.149408}
,
{0.245619,-0.0266738,0.0129478,-0.201725,0.0554826,0.0202957}
,
{0.20175,-0.186879,-0.240854,-0.104885,0.0305553,0.119694}
,
{-0.0604919,0.092591,0.00954395,0.0520607,0.0328769,-0.0298248}
,
{-0.213385,0.0309057,0.132161,-0.0098281,0.112919,-0.140731}
,
{-0.216944,-0.0497476,0.189008,0.0319511,0.145026,-0.174215}
,
{0.0404368,0.00905174,0.147665,0.142785,0.0947084,0.0585825}
,
{0.0932875,-0.128937,-0.0383265,0.0248383,0.137678,-0.0494629}
,
{0.0837179,-0.0595213,0.0653274,0.0869178,-0.113199,0.000373259}
,
{0.0135767,0.0229123,-0.051446,-0.0637289,-0.181079,-0.113048}
,
{0.0783567,0.0168703,0.106442,-0.107996,0.0403741,0.138618}
,
{0.0798902,0.0600918,-0.0352818,-0.0147743,-0.111032,-0.15429}
,
{0.0340796,-0.199694,-0.26392,-0.263851,0.0595842,-0.0767712}
,
{0.0908188,-0.169888,-0.0739419,0.123053,-0.158249,0.0364342}
,
{0.0735954,0.122244,0.176388,-0.0804582,0.0738436,-0.0435786}
,
{0.035778,-0.0738505,0.139657,0.242025,0.0632032,0.0298621}
,
{0.13609,-0.165263,-0.00601252,0.0607425,-0.00126214,0.0175808}
,
{0.133359,-0.0745843,-0.174437,0.196379,-0.17785,-0.0313935}
,
{-0.186605,0.0448669,-0.00233489,0.0516886,-0.00606181,-0.132849}
,
{-0.112533,-0.0367798,-0.00816759,0.069359,-0.209655,-0.0839548}
,
{-0.0753568,-0.146207,0.0863078,0.0317172,0.0744114,0.0596976}
,
{0.202498,0.0781134,-0.0414368,-0.0974829,0.0878897,0.230168}
,
{0.22882,0.0307606,0.0902438,-0.0959161,0.0248512,-0.0190291}
,
{-0.0420644,0.109719,-0.0722274,0.217111,0.0318495,0.111856}
,
{0.0682864,-0.0389676,-0.161604,-0.030337,-0.0930983,0.000997633}
,
{-0.0839687,0.0196408,0.0141866,-0.0995753,0.0579814,-0.112696}
,
{-0.166345,0.125788,0.0922129,-0.148016,0.0240433,0.0954041}
 };
  static const float bias2[1] = { 0.194878 };
  static const float weights2[][1] = { {1.79655}
,
{-0.218174}
,
{-0.151859}
,
{-0.144383}
,
{0.183557}
,
{-1.50028}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_24(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_24(v, index);
}
static int assign_gen_lepton_prior_1_0_24() {
  global_gen_lepton_prior.at(1,0,24) = &specialized_gen_lepton_prior_1_0_24;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_24 = assign_gen_lepton_prior_1_0_24();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_25(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.0992378,0.11765,0.0361617,0.0994956,0.0312135,0.0143101}
,
{-0.135416,-0.189899,0.0238943,0.18643,-0.0258667,0.106726}
,
{0.206452,0.0651683,0.09083,-0.128581,-0.0568839,0.150947}
,
{-0.115668,-0.0441759,0.152958,0.121688,0.00926224,-0.12083}
,
{-0.137141,-0.117788,-0.0134573,0.0675388,0.0516387,0.0251256}
,
{-0.183241,-0.0360177,-0.114558,0.0610962,0.0426952,-0.0826383}
,
{0.15388,0.131971,-0.163481,-0.0119039,0.0480732,-0.0248579}
,
{-0.0680814,-0.0232476,0.130762,-0.221275,0.11945,-0.0403664}
,
{-0.0284017,-0.0218533,0.149649,-0.0958318,0.215027,-0.216787}
,
{-0.000720117,0.0333888,0.150256,-0.00145715,-0.00950267,-0.0496221}
,
{0.088226,0.178855,-0.126599,-0.144865,0.0828096,-0.184279}
,
{-0.02648,-0.0437935,-0.125684,0.0658676,-0.0560742,0.0779496}
,
{0.00157763,-0.185849,0.128899,-0.0138265,-0.0119312,0.194755}
,
{0.154409,-0.00972317,0.098844,0.0632777,-0.133242,-0.084623}
,
{-0.156013,0.0219272,0.0728993,0.0875675,-0.0415486,-0.125225}
,
{0.184073,-0.172441,-0.0339368,-0.162584,-0.104748,-0.0325722}
,
{0.0840002,0.125756,-0.108927,0.194132,0.0174947,-0.037356}
,
{0.149088,0.23452,-0.139254,0.0955626,-0.022149,-0.0378243}
,
{0.0140486,0.0216472,0.0789438,0.0255685,-0.0270502,0.00367519}
,
{-0.0236982,-0.0934663,0.0269767,0.040288,-0.162132,0.0280552}
,
{-0.0478912,-0.00815008,-0.147144,0.0418508,-0.15055,0.123167}
,
{-0.164106,0.0257766,-0.160851,0.0191532,0.111658,-0.0729243}
,
{0.138327,0.0571657,-0.240679,-0.0428229,0.0805556,-0.0986979}
,
{-0.133585,0.0133683,-0.143688,0.0185124,0.0450603,-0.129318}
,
{-0.192567,0.195058,-0.219038,-0.0258482,-0.0491103,-0.193267}
,
{-0.139391,0.0307465,1.69879e-05,0.174464,-0.145014,-0.0992911}
,
{0.093575,-0.240345,-0.0464758,0.203549,-0.0553149,0.060759}
,
{-0.00119739,0.0734635,-0.0127926,-0.0453743,-0.141757,0.0286724}
,
{-0.0466296,-0.0124176,0.0325425,-0.123732,-0.211019,0.135495}
,
{0.0613649,0.0759858,-0.106997,-0.1633,0.0292376,0.068035}
,
{0.0202706,0.0462355,0.176559,0.212773,-0.0371773,-0.023695}
,
{-0.0287079,-0.00187191,-0.010448,0.140872,0.0496742,-0.0386012}
,
{0.101561,-0.0931184,0.20475,0.0839177,-0.101474,-0.00117594}
,
{0.244864,0.153785,-0.185431,-0.132931,-0.0400248,-0.0284924}
,
{-0.000822807,0.0155404,-0.174969,0.0483098,0.221133,0.185206}
,
{0.0139771,0.0520447,-0.10533,0.00507303,-0.150307,0.134617}
,
{-0.124729,0.10898,-0.010863,-0.0665401,0.0269246,0.163373}
,
{0.056873,0.0486619,0.0673681,0.00732819,0.11601,0.152028}
,
{0.031237,-0.153132,0.0508213,-0.116485,-0.0632815,0.139445}
,
{0.0427285,0.150153,0.155692,-0.196955,0.151405,0.10866}
,
{0.170771,0.108205,-0.00899686,-0.178569,-0.0905285,0.00444731}
,
{0.0251607,0.169402,-0.00274187,-0.148133,0.165649,0.137548}
,
{-0.0565825,0.155339,-0.100144,-0.105047,0.0456818,0.0714969}
,
{-0.188163,0.0847008,0.138526,0.0456355,0.15451,-0.026645}
,
{-0.0669868,0.181249,-0.0603101,-0.107918,-0.0431853,-0.104154}
,
{-0.0840122,-0.0815791,0.00842247,-0.0114765,-0.0668877,-0.0536499}
,
{-0.0350835,0.235854,0.0886025,-0.102578,-0.0204373,-0.0493966}
,
{0.13207,0.0343819,0.0782173,0.00481026,0.199304,-0.0856745}
,
{0.227751,0.0439186,-0.0108535,-0.130302,0.0471074,-0.110722}
,
{-0.163716,-0.12396,-0.0147367,-0.0252434,0.0835239,-0.0600102}
,
{-0.0189519,0.0582621,-0.0877178,0.0416351,0.0942245,0.0782419}
,
{-0.175564,0.0822885,0.138889,0.0864826,-0.0857951,-0.100712}
,
{0.193582,0.0113192,0.124062,0.100795,-0.12162,0.0847983}
,
{-0.13053,-0.134,0.0555205,-0.00660986,0.0503399,0.155309}
,
{-0.164414,-0.098851,-0.0927149,-0.0562251,-0.0751758,-0.0756399}
,
{0.159752,0.094444,-0.0345632,0.0121711,-0.118229,0.0357158}
,
{0.0195991,0.0380809,-0.151843,-0.0391906,0.151732,0.0181964}
,
{0.0897157,-0.0330521,0.107397,0.188445,-0.114931,0.0582783}
,
{-0.0247685,0.187972,0.00221847,-0.058175,0.0445358,0.0411564}
,
{0.133264,0.101971,0.0488928,-0.0698159,0.0814141,0.0639663}
,
{-0.00551388,-0.049665,0.104679,0.138352,0.0492258,0.134151}
,
{0.109789,-0.0467336,0.0646768,-0.178922,-0.00703847,-0.00208347}
,
{0.00827079,-0.0737935,-0.0742002,-0.105536,0.182234,-0.0792052}
,
{0.00161448,-0.0991483,-0.118496,0.0597604,-0.169523,-0.0678222}
,
{-0.116189,-0.0667849,-0.125432,0.154741,0.104789,-0.187085}
,
{-0.0343484,-0.0318222,0.0470916,-0.0802661,0.117361,-0.0642041}
,
{-0.0772892,0.11942,-0.248889,0.0033992,0.041669,-0.130374}
,
{0.114435,-0.0361568,0.197836,-0.223076,0.0560796,0.0157046}
,
{-0.0600213,-0.00746505,-0.233804,0.188343,-0.178275,-0.0126079}
,
{-0.229657,-0.0308038,0.00771329,0.191761,-0.144483,0.0288981}
,
{0.207147,0.191694,-0.0472221,-0.0692928,-0.0406316,0.0628883}
,
{0.181103,-0.166813,0.093256,-0.0453456,0.0803498,0.182777}
,
{0.0772099,0.169032,-0.0290756,0.01713,-0.100506,0.0841984}
,
{-0.13028,-0.14004,0.0975488,-0.123395,-0.0260966,0.0559824}
,
{-0.107395,-0.234248,0.132167,-0.0152657,0.218165,0.0235268}
,
{-0.019449,-0.0883735,0.184872,-0.109299,-0.136224,-0.217837}
,
{-0.148774,0.065568,0.021542,-0.0874462,-0.184355,0.0200126}
,
{-0.0579838,-0.00717082,0.042284,0.190279,0.0703246,-0.0571826}
,
{0.117086,0.0416272,0.12259,-0.0387484,0.16815,-0.201819}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.142475}
,
{-0.00058467}
,
{0.114252}
,
{-0.0292469}
,
{0.0346924}
,
{-0.0811479}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_25(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_25(v, index);
}
static int assign_gen_lepton_prior_1_0_25() {
  global_gen_lepton_prior.at(1,0,25) = &specialized_gen_lepton_prior_1_0_25;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_25 = assign_gen_lepton_prior_1_0_25();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_26(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0165796,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.0764173,0.0673021,-0.0942719,0.13896,0.0729221,-0.133959}
,
{0.048399,0.0370325,0.133715,-0.121121,-0.00244507,0.0379187}
,
{0.110732,0.00214138,0.0697936,-0.139896,0.00834973,0.19087}
,
{0.0424009,-0.00217434,-0.112202,0.0238218,-0.181682,0.0359278}
,
{0.0217109,-0.12948,-0.090914,0.0975154,0.00610119,-0.140704}
,
{0.0274637,0.131199,-0.153018,0.0637958,0.133559,-0.077342}
,
{0.0136848,-0.0589097,-0.0191196,-0.210915,-0.078127,-0.0683024}
,
{-0.0602052,-0.173414,0.0706817,-0.0493385,0.218986,-0.182457}
,
{0.0114385,0.0274517,-0.101681,0.192878,-0.0348828,0.207896}
,
{-0.205628,-0.164189,-0.0200829,-0.0255444,-0.073929,-0.0652292}
,
{-0.0307724,0.0540254,0.0489871,-0.0631519,-0.0749767,-0.0899256}
,
{0.0415284,0.0163655,0.0390609,0.117211,0.00917831,-0.0509186}
,
{0.00965234,0.0510035,0.14176,0.0315756,-0.086073,0.0440367}
,
{0.107048,-0.0556717,-0.112122,-0.202394,0.118576,-0.2004}
,
{-0.0297106,0.243553,0.124263,-0.110365,0.0206439,0.0990169}
,
{0.147862,-0.208572,0.0067094,-0.155608,0.109841,0.0174758}
,
{-0.0365926,0.121408,0.0131226,-0.236335,0.056484,-0.127134}
,
{-0.201769,-0.176882,-0.00446028,0.0787639,-0.0394901,0.134674}
,
{0.0182852,0.0126397,0.0539661,-0.0914395,0.119463,-0.0674677}
,
{0.00336845,0.0710519,0.0778911,0.125509,0.216599,-0.183057}
,
{-0.00924838,0.122425,-0.214879,-0.141793,0.123788,0.0496855}
,
{-0.00155037,0.055251,0.00943442,0.0721663,0.0471555,-0.00329319}
,
{0.218787,-0.03652,0.14578,0.143095,0.142417,-0.132514}
,
{-0.0721848,0.0398864,-0.130984,-0.113582,0.216422,0.0568988}
,
{-0.156456,-0.110009,-0.142963,-0.0292252,-0.148288,-0.194213}
,
{-0.0723325,0.0744692,0.213861,0.149984,0.0864981,0.00840238}
,
{0.00524359,-0.203832,-0.0600022,-0.204771,-0.106917,0.0912472}
,
{0.0689356,-0.135008,-0.118924,-0.0743039,-0.0866598,-0.166895}
,
{0.0370731,-0.0422646,0.103003,-0.174248,0.194135,-0.0146008}
,
{0.0100182,0.0830379,-0.0958549,-0.0772096,-0.235427,-0.119242}
,
{-0.0427221,-0.00984832,-0.0294767,0.0686477,0.0701525,-0.201732}
,
{-0.0276252,0.139303,0.0905341,0.138925,0.0154515,-0.00929379}
,
{0.065053,0.217528,-0.167703,0.0352419,0.00968443,-0.12134}
,
{0.122966,-0.104338,0.132116,-0.045483,-0.148685,-0.152772}
,
{0.0718237,0.0440665,-0.140307,0.0583805,-0.0516611,-0.0569992}
,
{-0.238814,0.0953854,-0.0339562,-0.133066,-0.0701211,-0.00958028}
,
{0.0527331,0.041585,-0.138361,-0.0109073,0.090883,-0.166144}
,
{0.0691558,0.0661872,-0.124832,0.00150027,0.0489718,0.165901}
,
{-0.204038,-0.0149876,0.0896313,-0.0288856,0.215664,0.0333858}
,
{0.0723798,0.0646181,0.0323447,-0.215241,-0.101724,0.0631157}
,
{-0.128483,0.0025966,0.214154,-0.0805528,0.00327184,-0.197557}
,
{-0.0132898,0.0673511,-0.190916,-0.0897355,-0.00360762,-0.149612}
,
{-0.0190859,-0.0284855,0.126865,-0.0438087,-0.0680882,-0.168071}
,
{-0.131872,-0.000743011,0.193442,0.0167782,-0.0551595,0.0465651}
,
{0.0815534,0.0345646,-0.192778,0.133988,0.0848075,0.0177586}
,
{-0.0852174,0.0246157,0.0616129,0.150206,0.0752251,0.160622}
,
{0.194113,0.0710886,0.00507706,-0.183906,-0.0971793,0.0156027}
,
{-0.0331971,0.037178,0.0518204,0.183396,0.0513538,-0.0703306}
,
{-0.157711,0.193728,0.143104,0.0468865,-0.124342,0.0221041}
,
{-0.134158,-0.0558082,0.100507,-0.0657807,0.021154,-0.028065}
,
{0.0123129,0.0661028,0.110562,-0.0326904,0.0203259,0.156891}
,
{-0.00275924,-0.0190823,-0.12369,0.0451824,0.0423227,-0.24417}
,
{0.00531481,0.0106247,0.0658207,0.0152555,-0.0770492,0.23656}
,
{0.0598747,-0.0161398,-0.0375203,0.104606,-0.0424489,-0.0195398}
,
{0.0912671,-0.180233,-0.162124,-0.0996291,-0.0251217,0.0192651}
,
{0.0450219,-0.0975623,-0.0443899,-0.133846,-0.00146313,0.160652}
,
{-0.0254389,0.073637,0.065516,0.0343036,-0.172414,-0.00311895}
,
{0.0227308,0.0775647,0.0793523,0.0885415,-0.141176,0.0208862}
,
{0.145916,-0.0123575,-0.229234,0.0510008,-0.0119345,-0.0389182}
,
{-0.0780605,-0.146141,0.104902,0.0526065,-0.00324382,0.0146256}
,
{0.120373,-0.0210188,-0.112511,0.0851794,-0.207152,0.189856}
,
{0.00733675,-0.0347391,-0.112875,0.0107662,0.109788,0.004408}
,
{-0.144845,0.208512,0.0957321,0.0773065,0.0307239,0.0887914}
,
{-0.0672565,-0.00674267,0.1519,0.020977,0.0931244,0.208681}
,
{-0.00542676,-0.142596,-0.0493664,-0.13363,0.0416364,0.0561787}
,
{0.064981,0.197455,0.136259,0.221132,-0.118407,-0.0755863}
,
{-0.203171,0.0409037,-0.154299,0.0919754,-0.131766,-0.0999087}
,
{-0.213503,-0.0504848,0.141258,0.0168487,-0.0783921,-0.0772706}
,
{-0.0332333,0.0685748,-0.0162746,0.0102667,-0.207677,0.0486961}
,
{-0.166508,-0.149503,-0.158167,-0.0308221,0.0157167,-0.00224327}
,
{-0.023915,0.107962,0.124201,-0.00675186,-0.0271256,-0.144482}
,
{-0.0870233,0.0635105,-0.0401817,0.0408415,-0.083299,0.235077}
,
{-0.114334,0.144243,0.192586,0.0338218,-0.0122273,0.179374}
,
{0.061157,0.00259414,-0.0526904,0.0802641,0.148011,-0.0229048}
,
{0.0948269,-0.10703,-0.0685734,-0.1526,-0.00333284,0.0436261}
,
{0.142451,0.135435,-0.157473,-0.140951,-0.130607,-0.0964731}
,
{0.147694,0.0959693,-0.111123,-0.0221141,0.226747,0.152378}
,
{-0.0850466,0.0302856,-0.144284,0.0840562,0.120592,-0.0506374}
,
{-0.118427,0.156236,0.198982,-0.079998,0.102122,0.005268}
 };
  static const float bias2[1] = { -0.0167706 };
  static const float weights2[][1] = { {0.183919}
,
{-0.0102072}
,
{0.00774461}
,
{-0.00648242}
,
{-0.188966}
,
{-0.0393476}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_26(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_26(v, index);
}
static int assign_gen_lepton_prior_1_0_26() {
  global_gen_lepton_prior.at(1,0,26) = &specialized_gen_lepton_prior_1_0_26;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_26 = assign_gen_lepton_prior_1_0_26();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_27(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.000737158,0.0907051,-0.00987622,0.0455949,-0.027858,-0.0229318 };
  static const float weights1[][6] = { {0.13288,-0.0391211,-0.120098,0.113108,0.00294694,0.129456}
,
{-0.0734952,0.159819,-0.0398248,-0.185532,-0.0620755,0.0287294}
,
{-0.0488327,-0.127377,0.0704287,0.180613,0.0741834,-0.0319924}
,
{0.0180379,0.254082,-0.151389,0.44725,0.0136489,-0.0223527}
,
{0.0590521,0.179016,-0.174117,0.170697,-0.0177572,-0.0944437}
,
{-0.091645,0.0114503,0.104839,0.0103121,0.0748901,-0.165498}
,
{-0.113229,0.0411514,-0.0583471,0.0806828,0.113596,0.0979086}
,
{0.0611802,0.265384,-0.0649559,-0.164659,-0.0786219,-0.113909}
,
{0.185027,0.134074,-0.0475596,0.150701,-0.0777988,-0.0510526}
,
{-0.00158156,-0.0471419,0.131803,-0.0667296,0.000798065,0.00689508}
,
{-0.0523515,0.0441167,-0.01019,-0.233262,0.0983433,-0.120718}
,
{-0.0081119,0.207699,0.0414642,0.0589594,-0.102229,-0.0500513}
,
{0.136315,0.358766,-0.0742773,0.2618,-0.0648281,0.0783999}
,
{-0.0275579,-0.0594962,-0.116647,-0.0561136,0.298168,0.166245}
,
{-0.241642,-0.0432867,-0.00664223,-0.147586,0.0707119,-0.122813}
,
{-0.0559159,0.086515,0.0456008,-0.156331,-0.00360708,0.00044069}
,
{0.111654,-0.0321409,-0.0183794,0.0664051,-0.0473426,-0.0872898}
,
{0.0532974,0.0652908,0.0794574,-0.109529,-0.0334403,0.113809}
,
{-0.113423,0.0299122,-0.126278,-0.150656,0.172469,-0.0377024}
,
{0.0660386,-0.0336745,-0.171958,-0.0634781,0.067794,-0.0274229}
,
{0.137026,-0.0592864,-0.0738389,-0.028946,-0.000983666,0.0647603}
,
{0.00811622,0.0502686,-0.0945787,-0.0077259,0.00966266,0.0103833}
,
{-0.0888521,0.128442,-0.0346104,0.0435379,0.0664008,0.0457002}
,
{0.019838,0.0350854,0.129798,0.0398118,0.0358625,0.0943347}
,
{0.0396407,0.0612167,0.0344204,-0.0120998,0.125101,0.0821796}
,
{-0.0790004,0.179696,-0.0164048,-0.134035,0.0633893,-0.024299}
,
{-0.17607,-0.0361363,-0.147837,-0.00419994,0.015549,0.0918935}
,
{0.0735758,-0.0814584,0.209357,-0.0703454,0.0526264,-0.0780751}
,
{-0.126608,0.199089,0.195507,0.149985,0.0647698,-0.0698221}
,
{0.055432,0.00683862,-0.0181161,0.0314267,0.0859634,0.0159982}
,
{0.115132,0.0387741,0.211392,-0.0501198,-0.0474386,0.0153656}
,
{-0.17238,-0.185442,-0.02516,0.142669,-0.174839,-0.11171}
,
{0.0700724,-0.146557,0.187552,-0.102628,-0.207141,-0.122411}
,
{0.0129215,-0.0417843,-0.115495,0.0118365,0.0833282,0.109943}
,
{-0.0122258,0.0140038,-0.0913508,-0.336561,-0.269397,-0.168293}
,
{0.0467291,0.078274,0.0289838,-0.482394,-0.10415,-0.110892}
,
{0.189102,0.0135623,0.132764,-0.425186,-0.158236,-0.133811}
,
{0.279221,0.0745101,0.150542,-0.554442,-0.147967,-0.0201178}
,
{-0.134092,0.204394,-0.0462644,0.0471813,-0.128972,-0.0555412}
,
{-0.174764,-0.0548137,0.0377229,0.153248,-0.0672439,0.0817457}
,
{-0.089478,-0.0105945,-0.0910286,-0.0411868,0.0359379,-0.0631021}
,
{-0.0803197,0.17387,0.0378221,0.249348,0.186303,-0.00106932}
,
{0.349416,0.215715,0.124696,-0.568867,-0.138101,-0.116742}
,
{-0.191552,-0.0169686,-0.00633661,0.350727,0.147373,0.101588}
,
{-0.0597033,0.125736,0.0642666,-0.17588,0.0666507,0.0209251}
,
{-0.049567,0.0901941,0.133817,-0.219158,0.101286,-0.0382271}
,
{0.103945,0.0305433,-0.0658611,-0.0136741,0.0767422,-0.00619093}
,
{0.181722,-0.0652726,-0.0430095,0.136884,0.00903181,0.248167}
,
{-0.121344,-0.2676,-0.0213636,0.148159,0.101591,-0.0550134}
,
{0.110742,0.0473489,0.063077,0.405105,0.208738,0.231746}
,
{-0.0119889,-0.249493,-0.0563343,0.0206294,-0.0610791,0.0220225}
,
{-0.0325367,-0.184975,0.136664,0.154479,-0.0268374,0.00608548}
,
{0.199997,-0.132175,0.031098,0.420459,0.109688,0.184549}
,
{-0.104857,0.0136005,-0.176198,0.467179,-0.0498499,0.165617}
,
{-0.0106062,0.0594829,0.101331,-0.105004,0.191134,-0.176663}
,
{-0.173582,-0.202151,0.17782,-0.0827733,0.206639,0.238615}
,
{-0.158358,-0.0260289,-0.00267208,-0.22794,-0.0406851,0.115672}
,
{0.0958648,-0.182447,0.0797719,0.110344,0.110159,0.0403546}
,
{0.125675,-0.13053,0.0993938,0.0223823,-0.0633297,0.0172375}
,
{-0.0950623,-0.0102067,-0.027823,0.141395,-0.0771215,-0.257438}
,
{0.0572379,0.268711,-0.156085,-0.0263369,-0.290938,-0.187446}
,
{0.0335175,0.262337,-0.114456,0.0212884,-0.174515,-0.0853834}
,
{0.0440666,0.0835735,0.183193,-0.123758,-0.119192,-0.0841523}
,
{-0.151381,-0.0625354,-0.0489977,0.00821411,0.108566,0.245034}
,
{0.0912566,0.1085,0.147245,0.109088,-0.122715,0.0886358}
,
{-0.173944,-0.0705059,0.043452,0.18069,-0.0598338,0.0119325}
,
{0.153542,0.00622371,0.124423,-0.138123,-0.0147866,0.162376}
,
{-0.115102,0.0301371,-0.0610139,-0.137348,0.146425,-0.100726}
,
{-0.185027,0.121092,0.081939,-0.125417,0.107803,-0.0403722}
,
{0.022327,-0.0443832,-0.0265146,0.0174473,0.0676645,0.159892}
,
{-0.0946383,-0.0497364,-0.0119244,-0.0145094,-0.181884,0.10572}
,
{-0.149087,-0.205947,-0.023011,-0.11952,0.0800608,-0.043064}
,
{-0.0735911,-0.0331957,0.133573,0.0167874,-0.055945,0.125022}
,
{0.117329,-0.218145,0.000842978,0.117045,-0.0315139,0.015887}
,
{0.0297796,-0.139607,-0.0103534,-0.0879184,0.136414,-0.162039}
,
{-0.198306,-0.0134807,0.145406,0.0216635,-0.0663851,0.203598}
,
{0.0770965,-0.0895033,-0.135344,-0.0802246,0.0264478,0.1116}
,
{-0.0312538,-0.110461,0.0378182,-0.00177714,0.0805161,0.0616178}
,
{0.187194,-0.0325202,0.0603863,-0.187178,-0.235752,0.0487896}
 };
  static const float bias2[1] = { 0.0129215 };
  static const float weights2[][1] = { {0.101021}
,
{0.162514}
,
{-0.0850069}
,
{0.253145}
,
{-0.0873113}
,
{-0.128189}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_27(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_27(v, index);
}
static int assign_gen_lepton_prior_1_0_27() {
  global_gen_lepton_prior.at(1,0,27) = &specialized_gen_lepton_prior_1_0_27;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_27 = assign_gen_lepton_prior_1_0_27();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_28(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0489851,0.00195242,-0.0177057,0.00902331,-0.0850035,-0.0289576 };
  static const float weights1[][6] = { {-0.229665,0.0732713,0.0178098,0.090194,-0.146929,-0.0909271}
,
{0.20018,0.353632,0.159078,0.211857,-0.140709,-0.181777}
,
{0.143063,0.338813,0.116767,-0.756948,-0.108723,-0.224403}
,
{-0.0394545,0.0957057,-0.0497848,0.00537293,-0.187976,0.0390563}
,
{0.0319597,-0.01643,0.15003,0.124493,-0.0494324,-0.0882611}
,
{-0.0348094,-0.196754,0.111811,0.18722,-0.115536,0.0908956}
,
{0.0467157,-0.0768101,0.122465,0.0998077,0.0994775,-0.134783}
,
{-0.395003,-0.337868,0.0267619,0.380918,0.478171,0.328493}
,
{-0.41561,-0.201437,-0.231161,0.179534,0.393561,0.411951}
,
{0.0177022,0.168467,0.0125455,-0.0588639,-0.0929395,-0.00455642}
,
{-0.071204,-0.243578,0.0658571,-0.184739,-0.0003474,-0.0719289}
,
{0.0234716,0.158287,-0.0587334,-0.173999,0.0894072,0.115699}
,
{-0.228897,0.101581,-0.0334097,0.0152158,0.246646,0.27453}
,
{0.270468,-0.150686,0.0662319,-0.302144,-0.120325,-0.020001}
,
{-0.177464,0.1039,-0.0125144,-0.126627,-0.184569,0.144645}
,
{0.0723186,0.0705613,0.150544,0.0372636,-0.0651441,0.0130694}
,
{0.0305526,0.170473,-0.108342,-0.0420118,0.19829,0.036375}
,
{0.13356,0.263201,0.0810978,0.0940233,-0.204245,-0.0851183}
,
{0.0695466,0.0535294,-0.114277,-0.0836268,-0.265989,-0.0689259}
,
{-0.0675191,-0.083598,-0.150444,0.0576451,0.025053,0.00324755}
,
{0.218371,0.176417,0.0546041,-0.277675,0.109651,-0.0386871}
,
{0.115542,0.0305208,-0.0253664,0.148584,0.160052,0.0913052}
,
{0.125189,-0.121208,-0.144394,0.229139,-0.109462,-0.0195922}
,
{-0.0921222,-0.0688776,-0.0876985,-0.116247,0.0370146,-0.0474305}
,
{0.0253699,-0.0200259,0.0371913,0.0361564,0.0969063,-0.151297}
,
{0.216207,0.00421038,-0.0611769,0.0279565,-0.0883026,0.0354104}
,
{-0.20824,-0.129339,-0.104951,0.117468,-0.0360532,0.143433}
,
{-0.225262,-0.127272,0.194173,0.0506997,-0.13773,-0.00102329}
,
{0.214857,-0.11766,-0.138456,0.104676,-0.0521683,0.0360771}
,
{-0.183538,0.0983542,0.205401,-0.191317,0.0947933,-0.0247073}
,
{0.120443,0.0155391,-0.0269073,-0.195772,-0.121477,0.104985}
,
{-0.14444,-0.17786,-0.197156,0.106695,-0.0227482,-0.0899906}
,
{-0.0667123,0.0243563,-0.150818,0.0153228,0.203807,0.0642724}
,
{-0.0613405,-0.0378621,-0.181499,0.0339156,-0.141306,0.0755314}
,
{0.213409,0.0759176,0.025308,0.151952,-0.0992685,0.0128318}
,
{0.0959167,0.116449,0.144602,0.0422251,-0.0588549,0.0366762}
,
{0.108072,-0.125525,-0.00593795,0.0363724,-0.0436786,0.199079}
,
{-0.00762574,0.126113,0.000762793,0.0864262,0.273955,-0.0647624}
,
{0.0237032,-0.137285,-0.0882636,-0.124279,0.139162,0.0284341}
,
{-0.0472162,0.301744,0.115553,0.325261,-0.0936783,-0.00941727}
,
{-0.0732953,-0.164204,0.0522451,-0.421102,-0.0454473,0.0233999}
,
{-0.0121358,0.112145,0.0434657,0.0776631,-0.0263989,-0.199021}
,
{0.0765829,0.335386,0.0853387,-0.43519,-0.128588,-0.148194}
,
{-0.25252,-0.510009,-0.134941,0.443498,-0.143836,0.152281}
,
{0.2189,0.431438,-0.0454745,0.0181946,-0.330173,-0.201727}
,
{0.0163549,0.221005,-0.0764451,-0.549359,0.0183092,-0.0972322}
,
{0.231489,0.366039,-0.143307,-0.0113477,-0.192993,-0.0431153}
,
{0.00779701,-0.105118,-0.0297587,0.172252,0.148932,-0.0405087}
,
{0.0406894,0.00641681,0.087094,-0.519529,0.0305042,0.0644163}
,
{0.0158566,-0.282382,0.0646759,0.400624,-0.0755948,0.171983}
,
{-0.181304,0.211532,-0.0167164,-0.19816,-0.12336,-0.366973}
,
{-0.0734142,-0.0101415,0.0682416,0.330325,-0.0230717,0.0512331}
,
{0.227201,0.373758,-0.240401,-0.415748,-0.075632,-0.0381305}
,
{-0.399998,-0.925246,0.0414172,-0.75704,0.345733,0.201887}
,
{0.0658813,0.0448195,0.180802,-0.21369,0.120322,-0.178599}
,
{0.0158112,-0.13463,0.24026,0.0559793,0.0293869,0.0614909}
,
{-0.0125158,-0.0221595,0.0374549,0.0141378,-0.119777,-0.0497317}
,
{0.078861,0.147865,0.0629459,-0.00253639,-0.0728549,0.124523}
,
{-0.0273859,0.151053,0.0220653,-0.0204928,0.0179965,0.0799369}
,
{0.017919,-0.180676,-0.0232808,-0.173724,0.174229,0.18749}
,
{0.0548648,-0.0995161,-0.0729326,0.0383795,0.149438,0.115829}
,
{0.0952825,-0.200853,0.0601812,0.177205,0.140031,-0.0500341}
,
{-0.108617,-0.0753997,-0.0206531,0.0176963,0.0935968,-0.0122417}
,
{0.158665,0.0122179,0.0688047,0.00511451,0.0752902,0.14873}
,
{0.0632388,0.0716598,0.0842594,0.113624,-0.0909054,-0.0167737}
,
{-0.0883259,0.183539,0.0993064,0.00599285,-0.0869564,0.0386643}
,
{0.137456,-0.0980729,0.0615188,-0.0714789,0.0326447,0.185536}
,
{-0.0746782,-0.10691,0.140217,0.162845,-0.243054,-0.0856423}
,
{0.0437032,-0.0476763,0.139427,-0.0360852,0.0718196,-0.0552895}
,
{0.0599724,-0.150405,0.114516,0.0465091,-0.0856697,-0.0450086}
,
{0.0321499,-0.237894,-0.174691,-0.0819034,-0.112751,-0.185018}
,
{-0.00132443,0.00252641,-0.0211105,-0.0160144,0.0787775,0.0773246}
,
{-0.127821,0.155081,0.125803,0.172546,0.129794,0.0910727}
,
{-0.0322323,-0.0917315,0.207137,-0.119568,-0.0672018,0.224636}
,
{-0.0580483,-0.116785,-0.125262,0.100659,-0.0180388,-0.141618}
,
{0.173774,-0.245233,-0.122036,0.199531,-0.133153,0.0721719}
,
{0.0934235,-0.10509,-0.0770225,0.104587,0.178406,-0.206473}
,
{0.124812,0.0302486,-0.127918,-0.0545841,0.099108,-0.0882217}
,
{0.0329221,-0.0757624,-0.0141291,0.0126443,-0.198067,0.0202538}
 };
  static const float bias2[1] = { -0.0363399 };
  static const float weights2[][1] = { {-0.160572}
,
{0.167887}
,
{0.0809366}
,
{-1.74006}
,
{0.0366612}
,
{0.176554}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_28(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_28(v, index);
}
static int assign_gen_lepton_prior_1_0_28() {
  global_gen_lepton_prior.at(1,0,28) = &specialized_gen_lepton_prior_1_0_28;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_28 = assign_gen_lepton_prior_1_0_28();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_29(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.104791,-0.189419,0.0678374,-0.0383437,0.0,0.136443 };
  static const float weights1[][6] = { {-0.167148,0.242085,-0.0178666,-0.193287,0.0677999,-0.0119297}
,
{-0.104377,-0.772549,0.109233,-0.224198,0.0245546,-0.21628}
,
{-0.414593,0.197442,0.298079,-0.455056,0.115345,-0.174693}
,
{-0.151455,0.145326,-0.0977587,0.594117,-0.102512,0.121894}
,
{-0.233108,-0.0667654,0.052465,-0.0566236,0.00211651,0.170892}
,
{-0.0605812,-0.205874,0.155457,-0.0254873,0.0566212,0.0160985}
,
{0.0475027,-0.107647,0.116184,0.0967151,-0.0710854,0.119472}
,
{0.392549,-0.575933,0.0456717,0.336811,0.0106649,0.439521}
,
{0.29768,-0.546699,0.0709189,0.62219,0.157051,0.111594}
,
{0.147837,0.103004,-0.019347,0.125608,0.0520227,0.165744}
,
{0.00849066,0.0311874,0.189916,-0.0333782,-0.0768209,-0.0874647}
,
{0.363696,0.0239376,0.243018,0.00556366,-0.162375,-0.0793005}
,
{0.422787,-0.299622,-0.0101046,0.219516,-0.182937,0.0503248}
,
{-0.0893088,0.171019,0.0122596,-0.0253583,0.165678,-0.210128}
,
{-0.0852649,-0.0271627,-0.0891621,0.162995,-0.0392326,0.181426}
,
{-0.162046,0.178984,0.0128886,0.076315,0.052279,-0.034796}
,
{0.171037,0.0808495,-0.142074,0.16912,0.103826,0.100751}
,
{-0.18066,0.0126553,0.1746,-0.0328918,0.0193514,-0.0177255}
,
{-0.061871,-0.275203,0.144799,0.10688,0.188936,0.0408462}
,
{0.00815361,-0.120944,-0.0041414,0.0153049,-0.18702,-0.0258461}
,
{-0.0611287,-0.0140335,-0.0293431,0.0270098,-0.166127,0.0649779}
,
{-0.0424011,0.061542,0.112124,0.0278929,-0.203352,-0.00971851}
,
{-0.205012,0.147618,0.107463,0.00992937,0.170727,0.0885764}
,
{0.0303984,0.0862752,-0.0458053,0.0303191,0.089596,0.0225624}
,
{0.0581832,0.170173,-0.0798125,0.0809789,0.0519595,0.0511217}
,
{0.113891,-0.0711911,-0.11934,0.200217,-0.113055,0.0582574}
,
{-0.114795,-0.217847,0.0855948,-0.100673,-0.205017,-0.0851748}
,
{0.090739,0.0501484,-0.173209,-0.137182,0.144334,-0.064496}
,
{0.177151,-0.087524,0.219501,0.00663228,0.00983129,-0.0536955}
,
{-0.109236,-0.193458,0.150591,-0.0256149,0.134576,-0.0206503}
,
{-0.314059,0.214216,-0.0729014,-0.00592039,0.0737613,0.429495}
,
{0.161768,-0.0946881,-0.0179403,0.100574,0.127451,0.161631}
,
{0.495571,-0.420113,0.0780013,0.0746567,-0.136812,-0.385601}
,
{-0.0224888,-0.066163,-0.0729192,0.23914,0.117097,-0.00478324}
,
{-0.163599,0.290113,-0.0496534,0.220399,-0.110516,0.0633586}
,
{-0.0286734,0.415933,0.15404,-0.214544,-0.0819672,-0.0734929}
,
{-0.923021,0.675377,-0.114555,0.0267075,-0.105508,0.614011}
,
{0.188455,-0.107981,-0.455369,0.212838,-0.125602,0.230675}
,
{0.556226,0.428109,-0.0701132,0.058881,-0.0158845,-0.470511}
,
{-0.0899098,0.537278,0.0622145,-0.0602969,0.00336654,0.232497}
,
{-0.0342337,0.0757233,-0.128451,-0.0336932,-0.145028,0.148596}
,
{0.693663,-0.195949,0.0989883,-0.185271,-0.0783664,-1.30611}
,
{-0.0846929,0.139483,0.0244326,-0.135264,-0.165034,0.0431654}
,
{-0.167534,-0.05849,-0.087612,0.116474,-0.0723865,-0.0519442}
,
{0.326712,-0.269388,-0.303617,0.258212,-0.0320066,0.145941}
,
{-0.128763,0.200867,0.0454228,0.0752248,-0.0395808,0.191875}
,
{-0.178839,0.255425,0.00396376,-0.0902841,-7.26445e-05,-0.602583}
,
{-0.24285,-0.646132,-0.00299124,0.0682847,-0.0896012,-0.0176187}
,
{0.0525115,-0.534062,-0.180797,0.0393928,-0.0048384,-0.0956061}
,
{0.0916795,-0.183457,-0.172305,0.246881,-0.148247,0.462319}
,
{0.403701,0.552041,-0.174741,0.0797001,-0.0783117,-0.163971}
,
{-0.138447,-0.182432,0.189184,-0.638643,0.078507,-0.488186}
,
{-0.0230995,0.0359455,0.366279,0.182063,0.000959769,-0.0181609}
,
{0.170957,0.135881,-0.625403,0.435911,-0.146474,0.418692}
,
{0.0135518,0.0585083,0.124913,0.173245,0.0627291,0.0422739}
,
{-0.0466903,0.0808337,-0.214524,-0.151658,-0.0194462,-0.0829511}
,
{0.0389838,-0.165616,0.0902993,0.205673,-0.072373,-0.0459672}
,
{-0.130262,-0.0696214,-0.0711257,0.125843,-0.0907464,0.119058}
,
{0.115108,-0.129036,0.114108,-0.065411,-0.138786,-0.0911723}
,
{0.103205,-0.0580685,-0.0798026,-0.137599,0.120261,-0.0894198}
,
{-0.308831,0.018655,-0.10848,-0.12636,0.0209471,0.0557456}
,
{-0.0843407,-0.235387,0.0782609,-0.169471,0.0766272,0.138799}
,
{-0.300903,-0.177533,0.0241178,-0.174703,-0.0288848,0.113709}
,
{-0.012133,-0.0384906,0.0537844,-0.0360326,-0.0106711,0.0408299}
,
{-0.0873415,-0.0615824,0.00332437,-0.147241,-0.0425431,0.0647118}
,
{-0.142436,0.145915,0.048869,0.0951664,0.0994377,-0.0244929}
,
{0.163907,-0.135541,0.0458645,-0.107105,-0.0266458,-0.0222151}
,
{0.169538,0.0340644,0.0103134,0.00469737,0.0692073,0.105835}
,
{-0.0518397,0.0856027,0.0552236,-0.0196249,0.182421,0.0257809}
,
{-0.102721,-0.0514055,-0.113686,-0.00476124,0.0146755,-0.0509232}
,
{-0.117734,-0.123536,0.0166009,-0.089448,-0.0552635,-0.185694}
,
{-0.0163771,0.0203197,0.0605543,-0.0420456,-0.061949,0.108188}
,
{0.00233222,0.00337514,0.079947,0.085997,0.0106441,-0.114482}
,
{-0.0742216,-0.0694697,-0.0468032,0.0876093,-0.0366294,-0.0495622}
,
{0.183488,0.0952694,0.146307,0.0847148,0.0374111,0.142684}
,
{-0.0944959,-0.0537902,0.0253177,-0.0745486,-0.208532,0.03857}
,
{0.0234374,0.0378012,-0.0890639,-0.00688425,0.111808,0.0167914}
,
{-0.137037,0.0423809,0.104307,-0.00701892,-0.218992,-0.0394314}
,
{0.0751887,0.135636,-0.0983268,-0.0274296,0.105663,-0.206765}
 };
  static const float bias2[1] = { -0.02433 };
  static const float weights2[][1] = { {0.168003}
,
{-1.5172}
,
{0.121129}
,
{-0.0884521}
,
{-0.0738354}
,
{0.231201}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_29(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_29(v, index);
}
static int assign_gen_lepton_prior_1_0_29() {
  global_gen_lepton_prior.at(1,0,29) = &specialized_gen_lepton_prior_1_0_29;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_29 = assign_gen_lepton_prior_1_0_29();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_30(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0596082,-0.0488557,-0.006408,-0.0167191,-0.135969,0.0325017 };
  static const float weights1[][6] = { {0.049263,-0.149155,-0.184777,-0.0432185,-0.0678052,0.00521114}
,
{0.0866381,0.0991404,-0.0326948,0.0872336,0.269981,0.101106}
,
{0.102636,0.189972,-0.1016,-0.610889,0.383714,-0.013383}
,
{-0.0957625,0.0508082,0.248517,0.217719,-0.192723,-0.168803}
,
{0.0242602,-0.0203967,0.167348,0.00179572,-0.279616,-0.0750439}
,
{0.000795008,0.184917,0.0102126,0.078055,0.0460749,-0.00833982}
,
{0.0197709,0.0390723,0.131792,0.121362,-0.178037,-0.0916686}
,
{-0.0703433,-0.364202,-0.146848,0.179869,0.132214,0.214695}
,
{0.0409828,-0.126952,0.076853,0.130467,0.0350742,0.148623}
,
{0.060509,0.0655128,0.0350905,0.0460559,-0.0184167,0.0193573}
,
{-0.108046,-0.165357,0.0717792,-0.0385218,0.0205567,0.199551}
,
{0.447494,-0.00241367,-0.077924,-0.087718,-0.106035,0.0994878}
,
{0.118165,-0.103389,-0.175608,-0.139008,-0.0307776,-0.175961}
,
{-0.166193,0.00757841,-0.171775,-0.0400534,-0.0316857,0.179984}
,
{-0.134468,-0.0238727,0.0933381,-0.205076,-0.114078,0.0846671}
,
{0.0500875,-0.12244,-0.0792046,-0.00117549,-0.00669883,-0.0546476}
,
{0.280738,-0.0260997,0.0581249,-0.174948,-0.26596,-0.340541}
,
{0.0543649,-0.0208926,-0.0115203,0.109181,0.184352,0.0420236}
,
{0.228634,-0.0906795,0.026149,-0.0107255,-0.0413755,0.0180527}
,
{-0.0220297,-0.0959794,-0.134162,0.0659479,-0.0305702,0.0466338}
,
{-0.0261293,0.0169276,-0.012125,-0.00297083,0.094244,-0.01187}
,
{0.237422,0.0344539,-0.00616602,-0.321275,0.0296859,0.229119}
,
{0.0233566,-0.103827,-0.02893,0.0541638,-0.0852474,0.0396599}
,
{0.0474675,0.0351376,0.0960522,0.0511063,-0.235034,0.0472614}
,
{0.168454,-0.115781,0.155259,0.0293997,0.143761,-0.0837115}
,
{-0.153866,-0.20732,0.124986,0.179873,-0.0162825,0.0930734}
,
{0.0811831,0.119074,-0.0986301,-0.127581,-0.0128931,0.230103}
,
{0.00627946,-0.0946252,-0.00254908,-0.0134241,-0.108759,0.118644}
,
{-0.0414748,-0.0684192,-0.0311705,-0.0847573,-0.0327635,-0.0438657}
,
{0.248197,-0.0625834,0.101426,-0.047356,-0.0093979,-0.0659155}
,
{-0.12892,-0.274481,0.0400075,0.169817,-0.195525,0.0276609}
,
{0.052135,0.140388,-0.0535052,-0.125603,0.116633,-0.00738417}
,
{0.0835527,0.00965834,-0.0520439,0.36031,-0.471005,0.005873}
,
{0.0798538,0.103217,0.111768,0.16244,-0.0838017,0.117932}
,
{-0.0082126,0.451588,-0.0817051,-0.509924,-0.104989,-0.148368}
,
{0.278906,0.445985,0.0659016,0.562298,-0.126435,0.0673547}
,
{-0.257607,-0.899461,0.0730858,-0.0915192,-0.285159,0.243935}
,
{-0.0456066,-0.23055,0.047415,0.46368,0.415697,0.0309275}
,
{-0.0104639,-0.177932,-0.0380915,0.39636,-0.858716,0.306074}
,
{-0.0907416,0.00488375,-0.0781715,0.0890313,0.0074004,-0.141251}
,
{-0.172352,-0.285394,-0.0427513,0.369989,0.293314,-0.0943816}
,
{0.24721,1.40598,-0.0826419,-0.0838276,0.614429,-0.188487}
,
{0.0456209,0.396437,-0.128036,-0.156792,0.101089,-0.178597}
,
{0.0694477,0.288695,-0.0717913,0.14415,0.608347,-0.00444991}
,
{0.227061,0.528835,-0.0860382,0.113874,0.313497,-0.0765573}
,
{-0.10304,-0.430913,-0.122043,0.594713,-0.299289,0.0296046}
,
{0.0970635,0.0119983,-0.154514,-0.0618822,0.651743,-0.216271}
,
{-0.0129373,0.27151,0.0416802,0.833715,-0.10545,-0.0485721}
,
{-0.160387,0.196326,-0.0976726,-0.081016,-0.563753,0.0110068}
,
{-0.0808058,-0.26743,0.135221,-0.181975,-0.602472,0.0234001}
,
{-0.00315719,0.0631156,-0.16684,0.89478,-1.01419,-0.0678038}
,
{0.0854046,0.364023,-0.0329303,0.11918,-0.0890414,0.112596}
,
{-0.182401,-0.00272645,-0.0575273,0.0251927,-0.201103,0.00281573}
,
{0.0691979,0.626074,0.0361712,-0.132801,0.0843682,-0.00601766}
,
{0.110098,0.0778657,0.0279661,0.0501231,0.135154,0.00459013}
,
{-0.0746638,0.223079,-0.0273657,0.0336013,-0.00327436,0.00909496}
,
{-0.141022,-0.0283363,0.0905834,0.179176,0.103248,-0.113778}
,
{0.0482186,0.210236,0.0209785,0.0158808,0.0731628,0.078839}
,
{0.0213292,-0.0285049,-0.142223,-0.0912348,0.0264631,0.119875}
,
{0.0881602,-0.106336,-0.0161363,-0.0271116,-0.0266497,-0.0505926}
,
{0.0455383,0.236981,0.0425861,0.148473,-0.117059,-0.00278483}
,
{0.0992912,-0.0235383,-0.02941,-0.106197,0.0206124,0.00723399}
,
{-0.0218002,-0.072862,-0.0170858,0.0586142,0.134283,0.164527}
,
{-0.013353,0.0555478,0.164641,0.117277,-0.0533942,0.0534342}
,
{-0.100503,-0.0415312,-0.06082,-0.0410181,-0.1179,-0.0899851}
,
{-0.00511432,0.0253534,-0.0189374,0.212115,0.0189399,0.195091}
,
{-0.109893,0.109403,0.0699062,0.020087,0.167473,0.00440317}
,
{0.103998,-0.0710898,-0.00730803,0.18711,-0.0593108,-0.0970614}
,
{0.0829866,-0.0223261,0.139559,0.133559,-0.0560826,-0.000474119}
,
{0.0561302,-0.138725,-0.116496,0.0990391,0.0347898,-0.0530413}
,
{0.203578,0.13373,-0.0550145,-0.150144,-0.0543098,0.175177}
,
{0.17128,-0.0545399,0.0560491,0.0513024,-0.243574,-0.192266}
,
{0.0266772,-0.100954,-0.122528,-0.132879,-0.0102202,-0.158459}
,
{-0.0858889,-0.114519,-0.0950045,0.146101,-0.00794979,0.165664}
,
{-0.094104,-0.0241131,-0.000231575,-0.060092,-0.0129807,-0.108115}
,
{0.136833,-0.042958,-0.00395185,0.0515178,-0.147189,-0.0552254}
,
{-0.150781,0.0547226,-0.0554533,-0.0875472,0.145756,-0.140058}
,
{0.0742926,0.0519808,-0.0934658,-0.172585,0.117943,0.118732}
,
{0.152362,0.177884,0.00146119,-0.0711827,0.206884,-0.134576}
 };
  static const float bias2[1] = { 0.181863 };
  static const float weights2[][1] = { {0.132427}
,
{-0.353986}
,
{0.0205648}
,
{-1.97175}
,
{-1.67798}
,
{-0.12875}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_30(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_30(v, index);
}
static int assign_gen_lepton_prior_1_0_30() {
  global_gen_lepton_prior.at(1,0,30) = &specialized_gen_lepton_prior_1_0_30;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_30 = assign_gen_lepton_prior_1_0_30();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_31(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00599948,0.0,0.0,-0.00504448,0.0,-0.00600202 };
  static const float weights1[][6] = { {-0.094751,-0.0527138,0.0670637,-0.0417665,0.131364,0.0953913}
,
{0.119182,0.0936136,0.107109,-0.239225,-0.0141361,0.111382}
,
{-0.055237,0.105477,0.136597,-0.153249,-0.00550202,0.0122457}
,
{-0.0360513,0.067141,-0.0599193,-0.0662519,-0.0400736,0.146204}
,
{-0.0715985,-0.129991,0.0991392,-0.149091,-0.0474975,-0.0610177}
,
{0.167977,-0.206158,0.0373797,-0.00379343,-0.0827224,-0.0381907}
,
{0.18892,-0.0851308,-0.113146,-0.105024,0.0361156,-0.041042}
,
{-0.091975,0.10162,-0.0948584,0.108874,0.0449432,0.180882}
,
{0.0332245,-0.00630813,0.196912,0.159329,-0.0763045,-0.14578}
,
{0.193236,0.1044,0.0656674,-0.102693,0.00196003,-0.0765003}
,
{-0.0893768,-0.118764,-0.206825,0.0425829,0.186214,-0.0625282}
,
{0.0184265,0.131491,0.0476696,-0.119888,-0.0541393,0.0695005}
,
{-0.0573502,0.118481,0.115022,0.0590631,0.0198123,0.204314}
,
{-0.0222604,-0.0199725,-0.198805,-0.0173691,0.0209314,-0.188026}
,
{0.0577274,-0.0874276,-0.0151421,0.0699939,-0.0563359,-0.123713}
,
{-0.121376,0.0633637,-0.0372578,-0.00624147,4.95867e-05,-0.15252}
,
{0.0322664,-0.0333358,-0.0345392,-0.0368833,-0.082944,-0.0645003}
,
{-0.216602,-0.210056,-0.00159582,-0.10262,-0.247887,0.105062}
,
{-0.143726,-0.00628086,0.0192452,-0.159838,-0.0045535,-0.217014}
,
{-0.15353,-0.13551,0.00909152,-0.0734025,-0.0165605,-0.136351}
,
{0.127385,-0.0659596,-0.13248,0.00993098,-0.0513064,-0.0803796}
,
{-0.0364437,-0.111717,-0.111941,-0.148657,-0.0793487,0.0616444}
,
{-0.163576,0.0426711,-0.237871,0.119619,-0.0274266,0.138713}
,
{0.197352,0.0464895,-0.0619773,-0.0177969,0.0708926,0.0148265}
,
{0.0348582,-0.0141965,0.0412522,0.0388249,-0.0972518,-0.0741848}
,
{-0.162453,0.0928076,-0.152626,-0.119616,0.207899,0.0523211}
,
{-0.0159015,0.0958934,-0.129638,0.0606483,-0.177877,-0.209342}
,
{-0.213114,-0.120095,-0.173963,-0.0588024,-0.0901301,-0.0839178}
,
{0.0333487,0.0646969,0.114181,0.0240591,-0.177005,-0.132054}
,
{-0.0318275,0.0482551,-0.0917037,0.0704717,0.0635918,-0.130571}
,
{-0.140305,-0.149603,-0.114845,-0.215637,-0.016642,-0.0356058}
,
{-0.0104592,0.00857389,-0.00843546,0.0373969,-0.00710958,-0.0859299}
,
{0.0269863,-0.176707,-0.152935,0.203889,-0.157706,-0.154302}
,
{-0.0827045,0.03249,0.0848576,-0.0524328,0.128994,0.0336706}
,
{-0.0647118,-0.120966,0.0599783,0.122444,0.0786917,-0.0592518}
,
{0.180242,0.0696702,0.102546,0.149166,0.0738314,0.117278}
,
{-0.203016,0.100955,-0.042496,0.242859,-0.0689138,-0.0175363}
,
{0.0122238,-0.120527,-0.114813,-0.0369869,-0.0608171,-0.00302776}
,
{-0.0654802,-0.0108082,-0.0988292,-0.122692,0.058191,-0.0136848}
,
{0.0992221,-0.137976,-0.147992,-0.0317971,0.0471461,0.112539}
,
{0.159807,0.116977,0.022657,-0.0612481,-0.0866798,0.0643804}
,
{0.0473476,0.0249504,0.11761,0.052472,-0.0410481,-0.0585388}
,
{0.0846865,-0.0405118,0.0847598,0.115095,-0.043053,-0.0552526}
,
{0.108611,0.026486,-0.0328784,0.00537855,-0.033363,-0.147232}
,
{-0.145891,0.04374,-0.0462915,0.00604374,0.0113074,-0.187153}
,
{0.0655167,-0.231055,-0.0344034,-0.147282,0.00606437,-0.0224424}
,
{-0.0652033,-0.103925,0.111509,0.0905987,-0.0453383,-0.0524275}
,
{0.143736,0.0474169,0.0880698,0.03508,-0.0687901,-0.0892165}
,
{-0.0159361,0.144846,-0.0279591,0.190241,0.0866274,0.0758928}
,
{-0.185982,-0.0190903,0.0492881,-0.0261019,0.0230107,0.222003}
,
{-0.119103,-0.162572,0.0128946,0.0354033,-0.0508055,0.0514073}
,
{-0.0258831,-0.0399749,0.029244,-0.0365348,0.0612074,0.0297836}
,
{-0.064129,0.0719351,-0.137399,-0.138458,0.0280492,0.158494}
,
{-0.23843,0.0659124,-0.0688019,-0.143989,-0.0379496,-0.0711668}
,
{-0.184269,0.0786863,-0.119277,-0.0368959,0.0197266,0.19412}
,
{-0.16422,-0.000839606,0.0817437,0.0242256,0.0534917,0.176085}
,
{0.121306,-0.0956555,-0.15182,-0.0382601,-0.126985,0.0747553}
,
{-0.0782301,-0.021236,0.137316,0.117797,0.12292,-0.0121689}
,
{-0.00747812,-0.0856396,-0.0953563,-0.0946246,-0.0973826,0.147212}
,
{0.0985113,0.0377561,0.130496,-0.0936332,0.0413928,-0.0159725}
,
{-0.215498,0.113096,-0.0494765,-0.0379686,0.0641827,-0.00504159}
,
{0.0999753,-0.0581938,0.104251,0.114718,0.0255285,0.0506782}
,
{0.0527656,0.063471,0.190683,-0.0430321,-0.0554056,-0.0931628}
,
{-0.102138,0.113324,0.0580792,-0.122986,-0.147327,-0.0220279}
,
{-0.113681,-0.0688866,-0.107878,0.0220304,0.0523469,-0.0657775}
,
{-0.0261817,0.129058,-0.0247177,-0.135397,0.101988,-0.183521}
,
{-0.160732,-0.220493,-0.131733,0.021638,-0.0118613,0.0735051}
,
{-0.176587,0.0656145,-0.0246468,-0.109706,0.0202366,0.0197664}
,
{0.043901,0.0832057,0.184056,0.07437,0.0978789,-0.074701}
,
{-0.129001,0.10516,-0.0743548,0.0764187,-0.163142,0.0361606}
,
{-0.0626204,-0.142328,-0.013366,0.0576678,-0.0779648,-0.0374499}
,
{-0.0402567,0.0995342,-0.00940782,-0.149064,0.0415528,-0.211494}
,
{0.121299,0.0338161,-0.181099,-0.123992,-0.0392577,-0.0641152}
,
{0.0486868,0.167939,-0.0573928,-0.0763765,0.130751,0.147323}
,
{-0.0574856,-0.102295,-0.119709,-0.0196911,0.192018,-0.0996749}
,
{0.0741499,0.0757923,0.0812921,0.0445915,-0.188254,0.124361}
,
{0.0508948,0.0892866,-0.0480183,0.0370752,-0.156233,-0.0043693}
,
{-0.0930856,-0.108082,0.0292995,-0.139718,-0.178366,0.193977}
,
{0.116265,0.130161,-0.172289,0.102349,0.0344735,-0.160307}
 };
  static const float bias2[1] = { -0.00860542 };
  static const float weights2[][1] = { {-0.108203}
,
{-0.0593516}
,
{-0.163882}
,
{-0.000353491}
,
{-0.0704046}
,
{0.171351}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_31(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_31(v, index);
}
static int assign_gen_lepton_prior_1_0_31() {
  global_gen_lepton_prior.at(1,0,31) = &specialized_gen_lepton_prior_1_0_31;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_31 = assign_gen_lepton_prior_1_0_31();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.537228,0.109893,-0.720693,-0.1454,0.0584715,0.247449 };
  static const float weights1[][6] = { {0.276808,-0.925925,0.195754,-0.154994,-0.170016,0.0416912}
,
{0.437863,0.0967663,-0.441132,0.20289,0.38241,0.362637}
,
{0.27357,0.0767095,-0.782799,-0.13435,-0.230412,0.0973501}
,
{-0.158406,0.509502,-0.707017,0.00854348,0.918512,0.216743}
,
{0.682179,-0.00586906,-0.650226,-0.0612024,0.124354,0.195139}
,
{0.585759,0.0729059,-0.681996,-0.276906,-0.0942498,0.108156}
,
{0.589928,0.0289492,-0.593587,-0.070887,0.00150956,0.0176373}
,
{-0.1319,0.022883,0.0737449,-0.112853,-0.16711,-0.225503}
,
{0.176848,-0.0053291,0.243724,0.0865516,0.045321,0.173707}
,
{0.242508,-0.124346,-0.15686,0.0120629,-0.0654649,-0.0955198}
,
{0.152746,-0.0699063,0.0309165,0.0140515,-0.0985162,-0.051566}
,
{0.14557,0.0434325,0.0694279,0.0166218,0.082337,0.0472018}
,
{0.0564811,-0.0918781,-0.00216866,-0.0216069,0.0196507,0.0928211}
,
{-0.185936,0.15564,-0.0517666,-0.141827,-0.060457,-0.117009}
,
{-0.0439866,-0.108189,0.145766,-0.0677082,-0.0989145,0.185821}
,
{-0.0417953,0.0106038,0.00369355,-0.0808737,-0.0730227,0.00597543}
,
{-0.143439,-0.129757,0.0876098,0.17775,-0.0727299,0.142656}
,
{-0.064616,-0.111654,0.0414309,-0.23186,0.214095,-0.0888565}
,
{2.20246,-4.40947,1.64652,-1.80389,-2.79203,-1.43074}
,
{0.0732473,0.0652701,-0.171123,0.0353085,0.0692883,0.00469948}
,
{-0.0110071,0.138224,-0.162053,0.224717,0.0552267,-0.048208}
,
{-0.0198708,0.0503612,-0.0065842,0.0810598,-0.0728669,-0.000549862}
,
{-0.174351,-0.0219013,-0.0594962,0.000376513,-0.138502,0.228782}
,
{-0.0281068,0.04195,-0.00235512,0.143286,-0.042861,-0.142835}
,
{0.264422,-0.219663,0.146214,-0.152423,-0.310066,-0.0447388}
,
{0.349884,-0.286821,0.169064,0.13925,-0.157635,0.014041}
,
{0.261497,-0.172992,-0.0154977,-0.140684,-0.068371,-0.160761}
,
{0.326792,-0.10537,0.00172672,-0.0408586,0.0574534,0.0824831}
,
{0.112692,-0.0328259,-0.012087,0.0864947,0.0679081,0.0586032}
,
{-0.0401047,-0.111649,0.00332261,-0.140456,0.0350696,0.124496}
,
{-0.000112171,-0.0759408,0.00189053,-0.0278064,-0.121782,-0.0431396}
,
{-0.0375442,0.186015,0.0586507,-0.0891149,-0.0861917,-0.095833}
,
{-0.0548819,-0.130361,-0.0346372,-0.0857855,0.00740437,0.0983255}
,
{-0.201906,-0.100024,0.0229734,0.212986,-0.0211944,-0.0946334}
,
{0.0650354,-0.00207837,0.104717,0.0999686,-0.0338654,0.162615}
,
{-0.0590814,0.000990813,-0.0905757,-0.103748,0.0376042,-0.159473}
,
{-0.0280471,0.00487954,-0.0491434,-0.0780278,0.0420656,-0.176381}
,
{0.0583593,-0.0011675,-0.0185486,0.0936897,-0.0250001,-0.0197413}
,
{0.0445909,0.00841002,-0.0580499,0.0635747,0.1098,-0.0884875}
,
{0.0349898,-0.00347767,-0.0246667,0.0366681,0.12511,-0.098632}
,
{-0.0378445,0.00129155,-0.0178813,-0.0740333,0.0160804,-0.00245859}
,
{-0.0569181,0.0167075,-0.0220584,-0.107392,-0.218647,-0.0507437}
,
{0.0491961,-0.00397394,-0.00215344,0.0860667,-0.0776075,0.0561453}
,
{0.00923248,-0.00415769,0.119073,-0.0285731,-0.0989609,0.129529}
,
{0.0057742,0.0067982,0.0495334,-0.00806187,-0.0235484,-0.0475094}
,
{-0.0719223,-0.000550989,0.0117035,-0.100811,0.0139946,0.00135468}
,
{-0.0096506,-0.00277491,0.0169188,0.0296443,0.0653655,0.0979525}
,
{-0.0072242,-0.000328172,-0.0405112,-0.0223391,0.0176112,0.00894894}
,
{-0.027877,0.00258661,-0.0150479,-0.0964016,-0.0494411,-0.00778063}
,
{-0.0592405,-0.00100736,0.00912568,-0.111498,-0.0925759,-0.0330614}
,
{-0.0461796,-0.00332521,-0.0258938,-0.0752059,-0.0160689,-0.0162174}
,
{0.00475602,-0.0108051,0.011818,0.0017977,0.0954099,0.0124595}
,
{0.092829,0.00367314,0.00565104,0.188208,-0.00891203,0.00301434}
,
{0.0218006,-0.00332757,0.0828138,0.0742967,0.0146778,0.0665128}
,
{0.212592,-0.194468,-0.290445,0.13254,0.333842,-0.203386}
,
{-0.0651822,-0.0786896,0.108142,-0.100809,0.0621307,-0.0194394}
,
{0.101417,-0.120296,0.0127697,0.00810656,-0.213791,0.0148014}
,
{-0.0188061,0.167768,0.218416,0.112041,-0.0847973,-0.0545163}
,
{0.140806,-0.0253955,0.103143,-0.0203796,-0.114274,-0.186229}
,
{0.0555933,0.0158568,0.103062,-0.000606589,0.0933468,0.189951}
,
{-0.104955,0.0533279,0.0267226,-0.0624396,-0.146147,-0.0852545}
,
{-0.264192,-0.0253791,-0.187542,-0.170694,0.216735,-0.0315448}
,
{0.257096,-0.137164,0.0295058,0.0833422,-0.455133,-0.00409152}
,
{0.0388981,-0.0347447,0.146462,0.0148202,-0.190057,0.0121305}
,
{-0.0614925,-0.0955507,-0.123353,-0.040653,0.108913,0.0470594}
,
{-0.0274923,-0.110695,-0.193176,-0.0785507,-0.0374124,0.0466222}
,
{-0.161631,-0.0423774,0.0232101,0.118693,0.224684,0.392689}
,
{0.103858,0.169979,0.133471,0.171153,-0.234025,-0.129127}
,
{0.145017,-0.022424,-0.128,-0.0334187,-0.176121,0.0905156}
,
{-0.00239402,0.0492432,0.0760121,0.0153122,0.15424,0.0755039}
,
{0.145521,0.120083,-0.161286,-0.0208422,-0.0516394,0.0463652}
,
{-0.285923,-0.0471817,0.182485,-0.055071,0.00861848,0.147495}
,
{0.241763,-0.0680009,0.219998,0.115567,-0.604638,0.204723}
,
{-0.064137,0.0134087,0.120362,0.0600246,0.144464,-0.248779}
,
{0.422163,0.0181747,0.169489,0.150535,-0.172651,-0.27858}
,
{-0.124617,-0.003537,0.158173,0.0816789,-0.173383,-0.0498521}
,
{0.266609,0.0271508,-0.0145899,0.0792803,-0.515726,0.416242}
,
{-0.122142,-0.00396911,-0.196337,-0.039502,-0.090925,-0.0326799}
,
{0.452251,0.116086,-0.222942,0.172851,-0.144275,-0.224577}
 };
  static const float bias2[1] = { 0.0435068 };
  static const float weights2[][1] = { {-0.0738589}
,
{0.211064}
,
{-0.0448257}
,
{0.0411338}
,
{0.0231161}
,
{0.0302824}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_3_0(v, index);
}
static int assign_gen_lepton_prior_0_3_0() {
  global_gen_lepton_prior.at(0,3,0) = &specialized_gen_lepton_prior_0_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_3_0 = assign_gen_lepton_prior_0_3_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.253994,-0.610563,-0.197128,-0.130288,-0.355106,0.07777 };
  static const float weights1[][6] = { {0.149809,-0.134995,-0.0621908,0.164056,-0.083504,0.200114}
,
{-0.0559635,-0.245707,0.0955593,-0.196021,-0.173677,-0.165533}
,
{-0.115348,0.107722,-0.370275,0.228381,0.161001,0.0255428}
,
{-0.256393,1.21133,0.967767,0.414077,1.27851,0.146428}
,
{-0.302692,-0.67849,-0.355203,-0.0976795,-0.405139,-0.0574479}
,
{-0.29874,-0.836552,-0.38081,-0.288491,-0.738967,0.0322132}
,
{-0.129984,-0.756297,-0.279952,-0.383116,-0.525767,-0.0446511}
,
{-0.00239728,-0.0295669,0.128851,-0.0960999,-0.122462,0.199298}
,
{-0.0411363,0.214958,-0.17344,0.118267,0.179022,-0.175969}
,
{0.0424328,-0.00174324,0.128781,-0.147099,0.0392673,-0.11648}
,
{0.000103032,-0.0167136,-0.0848569,-0.140969,-0.0466838,0.0693672}
,
{0.105119,0.192328,-0.130321,-0.074348,-0.0337547,0.123646}
,
{-0.0922391,0.121108,0.0289211,0.0555835,-0.00494845,0.128791}
,
{0.0271134,0.0617285,-0.0772826,0.0372225,-0.0777891,-0.0371039}
,
{-0.18951,-0.00982362,-0.0322719,0.022297,0.0309053,0.16958}
,
{-0.108797,-0.11955,-0.0661017,-0.00910477,-0.0139679,-0.0325403}
,
{0.0812549,-0.0139877,-0.063947,-0.12585,0.0727825,-0.123117}
,
{0.139347,0.0967951,-0.0308404,-0.0144226,-0.021263,-0.0542642}
,
{0.413958,-1.67921,-1.2614,0.79027,-1.47428,0.89862}
,
{0.0860299,0.176165,0.026698,0.0238666,-0.127075,0.106525}
,
{-0.16241,0.572429,-0.0143709,-0.215635,0.547079,-0.169445}
,
{-0.324153,0.0607719,0.0968191,-0.362719,0.124027,-0.120901}
,
{-0.0302547,-0.0201336,0.0609952,0.150463,0.123651,-0.0716219}
,
{-0.224411,-0.0742668,-0.0356858,-0.344878,0.261514,0.0174726}
,
{0.198677,-0.113641,-0.121167,-0.160392,-0.0805181,0.102678}
,
{0.0294239,-0.334933,-0.288123,-0.101145,-0.275167,0.154908}
,
{-0.0152176,-0.0400017,-0.07656,-0.00341593,-0.0548296,0.036833}
,
{0.172285,-0.238969,-0.0448472,-0.0808563,-0.0720836,0.220303}
,
{0.1256,-0.321654,-0.014713,0.0650225,-0.324416,0.276547}
,
{0.0490281,0.0789055,0.107609,-0.0797479,0.000643275,-0.0909362}
,
{-0.223593,0.182133,0.119258,0.240785,-0.0503255,0.0069041}
,
{-0.169824,0.095775,0.0445893,-0.0922038,-0.154471,-0.00187976}
,
{0.104824,0.109923,0.0924226,0.0360302,-0.180081,-0.192601}
,
{-0.131087,-0.065315,-0.0926058,-0.00796132,0.203493,0.220266}
,
{0.00010544,-0.0847653,0.286518,0.0218254,-0.0455782,0.0729584}
,
{-0.071859,0.065175,-0.184054,0.013479,0.011164,-0.0473993}
,
{0.041841,0.140393,-0.403877,0.179345,0.0305939,-0.0332238}
,
{-0.082708,0.0116357,-0.00197395,0.0176124,-0.0135936,0.124907}
,
{-0.0571182,-0.0800212,-0.10213,0.0813903,0.13912,-0.00390255}
,
{-0.0448132,-0.0271731,-0.0873665,0.0198506,0.0248884,-0.079456}
,
{-0.0276419,0.0227426,0.0486804,-0.118276,-0.0601862,-0.0211956}
,
{0.12214,0.139497,-0.0316484,-0.174834,-0.0751411,-0.03908}
,
{-0.0847646,0.119376,0.101856,0.05382,-0.132435,-0.0238911}
,
{-0.0721301,0.120139,0.0226779,0.19668,-0.162361,-0.0920906}
,
{0.146146,0.134641,0.00340267,-0.0163606,-0.126596,-0.116839}
,
{-0.00751481,-0.0493577,-0.0297929,0.0171084,0.0685365,0.0424971}
,
{0.0422693,-0.096269,-0.0858428,-0.0356179,0.140376,-0.0798795}
,
{-0.0116892,-0.0402706,0.00636451,-0.0241194,0.0350219,0.0114832}
,
{0.0740972,-0.125222,-0.0171938,-0.201724,0.0765663,0.0969493}
,
{-0.0521705,0.111911,0.00134323,0.0767097,-0.0794407,0.0237508}
,
{-0.0256161,0.0225309,-0.0283145,0.0803681,-0.00777492,-0.0394007}
,
{-0.120784,-0.0617611,-0.0434772,-0.177918,0.0640828,-0.0760789}
,
{-0.0109494,-0.0389807,0.00197047,-0.0805036,0.0163446,0.00351543}
,
{-0.140575,-0.150729,0.033147,-0.0327052,0.114673,0.23739}
,
{-0.150714,0.0179172,0.0362497,0.232021,-0.106366,-0.0137571}
,
{-0.130287,0.0106284,0.00951222,-0.00844877,-0.0789621,-9.46609e-05}
,
{-0.158332,-0.0777209,-0.101661,-0.0211087,-0.0352271,-0.106496}
,
{0.170808,-0.175061,0.0496266,-0.0526552,-0.157908,-0.0754314}
,
{-0.0273039,-0.0766929,0.127947,0.111205,0.0332858,-0.167725}
,
{-0.199428,0.0251158,-0.0755908,-0.113221,-0.125165,0.0358869}
,
{0.0603473,-0.015407,-0.039227,0.0199235,0.0704728,0.212153}
,
{0.145662,-0.139262,-0.117705,-0.132627,0.108625,-0.0393585}
,
{0.0912144,-0.107715,-0.147212,0.00357403,0.136132,-0.0455903}
,
{0.0255447,0.0732848,-0.044975,-0.257952,0.0183431,0.221843}
,
{0.157258,0.00730223,0.0569818,0.152729,0.022037,-0.15922}
,
{-0.0966994,0.0538154,-0.0358408,-0.10668,0.0139375,0.131107}
,
{-0.105454,-0.0370566,0.0240921,-0.135261,-0.0141863,0.0549099}
,
{0.0107351,-0.0699336,-0.0134506,-0.178724,-0.0362407,0.152794}
,
{-0.110776,0.0922643,-0.0574592,0.0663558,0.0556288,-0.0277673}
,
{-0.0188694,0.0908533,-0.119293,0.0265285,-0.0040737,0.149424}
,
{-0.23931,-0.0363331,0.0066238,0.063798,-0.00763193,0.104553}
,
{0.152493,0.0671399,-0.054927,0.0519644,0.0380923,-0.0518354}
,
{-0.248551,-0.0113036,-0.0739375,0.172949,-0.166437,0.157123}
,
{0.0769644,0.00924693,-0.0737485,-0.151753,0.0527147,-0.0865756}
,
{0.0890113,0.21891,-0.038311,-0.0270327,-0.109652,-0.133113}
,
{-0.0254904,0.075941,-0.144095,-0.237624,-0.148974,0.0286034}
,
{-0.1977,-0.0595678,-0.190628,0.127348,-0.0327343,-0.0174032}
,
{0.0128942,0.151593,0.0599221,0.0964998,0.0891571,-0.0184738}
,
{0.0356161,0.00896282,0.114628,-0.163394,0.0126429,-0.215944}
 };
  static const float bias2[1] = { -0.312908 };
  static const float weights2[][1] = { {-0.0173993}
,
{0.0350145}
,
{0.0327765}
,
{-0.0267785}
,
{0.0314048}
,
{-0.0120231}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_4_0(v, index);
}
static int assign_gen_lepton_prior_0_4_0() {
  global_gen_lepton_prior.at(0,4,0) = &specialized_gen_lepton_prior_0_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_4_0 = assign_gen_lepton_prior_0_4_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_5_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0561122,-0.0409076,0.0212977,-0.0544302,-0.0305696,0.0526912 };
  static const float weights1[][6] = { {0.054521,0.0958299,0.176778,-0.152218,-0.0759034,0.219652}
,
{0.139748,-0.0553614,0.0604413,0.0440548,-0.0384484,0.0829764}
,
{0.0591626,-0.000248312,0.0537405,-0.0724055,0.109904,0.120054}
,
{0.152129,-0.0706839,0.150444,-0.095201,-0.0431915,-0.0623243}
,
{-0.115445,0.0269475,0.0992975,0.0702476,0.140435,0.226277}
,
{-0.0884314,-0.158074,0.236527,0.111922,-0.166174,0.0701415}
,
{-0.0648655,0.0274159,-0.0569138,-0.222447,0.023229,0.076718}
,
{0.116311,-0.0732985,-0.24305,0.027953,0.0442841,-0.151453}
,
{-0.0963631,0.0509015,-0.117224,0.0737755,-0.128859,0.0242266}
,
{0.0952836,0.0386248,0.093554,0.169836,-0.0178225,0.0935723}
,
{0.231555,0.195652,-0.118858,-0.0724333,-0.108955,-0.0518493}
,
{0.0254881,-0.126955,-0.0747049,-0.0896375,-0.00595353,-0.0176252}
,
{-0.00809017,0.129969,0.0492969,-0.0771421,-0.00391534,0.10552}
,
{-0.107405,-0.164692,-0.227702,0.0942525,-0.0443277,-0.0649907}
,
{0.0517051,-0.0972627,0.124606,0.129682,0.180198,-0.111154}
,
{0.215451,-0.0446786,0.0846638,-0.0510095,-0.145889,0.0658166}
,
{-0.198577,-0.140525,-0.0970715,0.10438,0.0373238,-0.031282}
,
{0.0573062,0.0478251,-0.0689404,0.215725,-0.232771,-0.0583119}
,
{-0.0183664,-0.170642,-0.104677,0.0899459,0.0139835,0.232404}
,
{-0.123449,-0.165026,-0.0466359,0.122239,-0.161916,-0.0248459}
,
{0.0600293,-0.0732893,0.0511194,-0.146094,-0.0237816,0.0394649}
,
{0.0696641,-0.0122207,-0.145932,-0.115759,-0.130917,0.14818}
,
{-0.133914,-0.243217,-0.000292254,0.0881918,0.000700032,-0.102151}
,
{0.230243,0.0468633,0.143688,-0.110183,-0.0786656,-0.0415542}
,
{-0.156148,-0.17656,0.0964232,-0.00859736,-0.14112,0.210681}
,
{0.0119561,0.104924,-0.0145448,-0.0152407,-0.14479,0.177168}
,
{-0.0413823,0.0360414,0.0322376,0.0774984,0.116342,0.0505793}
,
{0.059217,-0.190376,0.111666,0.010149,-0.000510007,-0.0979413}
,
{0.0716855,0.0611625,-0.182915,-0.0666753,0.0454054,0.0558241}
,
{0.0135541,-0.150151,0.188808,0.00940807,0.0222224,0.080071}
,
{0.0220068,-0.0468754,0.153952,0.00646922,-0.13793,0.0982394}
,
{0.185477,0.191585,-0.0602446,0.0894315,-0.10765,0.0613789}
,
{-0.0197223,-0.0461593,0.194429,0.00683452,-0.140404,-0.0999587}
,
{-0.00601962,-0.222317,-0.0829788,-0.00729236,0.12269,0.0580968}
,
{-0.0476538,-0.0457714,0.00843206,0.028268,-0.0390276,0.0247676}
,
{0.069985,-0.0668084,-0.132313,-0.131711,-0.0465835,-0.258376}
,
{0.0343697,-0.0859444,-0.0239717,0.0774756,-0.0469743,-0.173937}
,
{-0.120471,0.0332264,-0.224858,0.0753644,0.0637787,0.106925}
,
{0.097579,0.207526,-0.00635664,0.114691,-0.0301708,-0.0824357}
,
{0.120658,0.0245977,-0.121176,0.110347,0.00269361,-0.0421053}
,
{-0.0417216,-0.0178245,-0.0208714,0.0442985,-0.0970919,0.163269}
,
{-0.21222,-0.0133208,0.18095,0.166762,-0.124019,0.0947841}
,
{0.098898,-0.0694877,0.0608925,0.037717,0.044973,0.0932797}
,
{-0.206888,0.0119985,0.0709523,0.03673,0.0483935,-0.0378602}
,
{0.105634,0.0233276,0.216849,0.217974,-0.118837,-0.239839}
,
{-0.126004,-0.0399586,-0.107035,-0.1377,0.0810309,0.076539}
,
{0.223692,0.12799,0.161473,0.131529,-0.0154285,0.177307}
,
{-0.0242985,-0.0703393,0.131258,-0.092018,-0.00460301,0.0520004}
,
{0.0994976,0.0139392,0.250863,0.150167,0.139894,0.125756}
,
{-0.066035,-0.000190961,-0.156703,-0.0698531,0.192775,-0.0383755}
,
{-0.153871,0.00659294,0.0995896,0.0301062,0.0105533,-0.0650694}
,
{-0.0461011,-0.0324788,-0.105071,0.179761,-0.0712708,-0.0701016}
,
{-0.217189,0.172427,0.0826273,-0.0488169,-0.0575498,-0.165286}
,
{-0.118986,0.0070043,-0.15137,0.00214831,0.158601,-0.06579}
,
{-0.1123,-0.1079,-0.168036,0.0207615,-0.104824,0.0292189}
,
{0.17391,-0.153763,0.0916233,0.102561,0.0460738,-0.116762}
,
{0.0310124,0.125971,0.000565497,0.215889,0.0486717,0.164088}
,
{-0.0476609,0.100262,-0.135257,-0.145753,-0.0830429,0.0598134}
,
{0.138717,0.0245476,0.0865696,0.0610772,0.024337,-0.0286651}
,
{-0.0574596,0.120885,0.0307968,0.0384115,0.0097385,0.115779}
,
{0.0843048,0.0654523,-0.0648669,-0.0721482,0.0645343,-0.0472169}
,
{0.103847,-0.00387342,0.0745694,-0.00771909,0.0689736,0.023453}
,
{0.077198,-0.0185854,0.0255188,-0.0444072,0.103314,-0.0999996}
,
{-0.00926429,-0.0282638,-0.00347649,-0.0168667,0.148984,0.15619}
,
{-0.1375,0.0369751,-0.121778,-0.0229196,-0.202299,-0.0940598}
,
{0.10922,0.0260078,-0.0167137,0.0511762,0.0375633,0.070246}
,
{0.11961,-0.109724,0.193626,0.130152,0.152604,-0.118521}
,
{-0.0893202,-0.0443523,-0.0237856,-0.0814885,0.0680295,0.00353328}
,
{0.074144,0.14989,0.195119,0.0878575,-0.0754889,0.126137}
,
{0.00131585,-0.0244997,0.0134587,0.0277394,0.0407545,0.150202}
,
{0.234502,0.0839438,0.0749916,0.0580502,-0.0248079,0.0202659}
,
{0.0890856,0.151354,0.055563,0.0690795,-0.15345,-0.190525}
,
{-0.0119642,-0.0508283,0.0402128,-0.123935,0.0598198,0.0586525}
,
{-0.0093018,0.0739807,0.0187372,0.0147549,-0.01709,-0.0267656}
,
{0.164211,0.00851059,-0.0165202,-0.0495101,0.0420572,0.0440199}
,
{-0.0560479,0.0468007,0.21752,-0.046,0.0924148,-0.10833}
,
{0.0459573,-0.157555,-0.13151,0.0521833,0.0658946,0.0722875}
,
{0.0213231,0.129039,0.164554,0.0523329,0.0721911,0.0562923}
,
{0.102078,-0.126903,0.00788171,0.19407,-0.0667321,0.0864765}
 };
  static const float bias2[1] = { -0.0642025 };
  static const float weights2[][1] = { {-0.112116}
,
{-0.00694458}
,
{-0.0429718}
,
{0.0683449}
,
{0.000203505}
,
{-0.0955934}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_5_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_5_0(v, index);
}
static int assign_gen_lepton_prior_0_5_0() {
  global_gen_lepton_prior.at(0,5,0) = &specialized_gen_lepton_prior_0_5_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_5_0 = assign_gen_lepton_prior_0_5_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.089578,0.0903139,0.626021,0.366089,0.557579,-0.0933558 };
  static const float weights1[][6] = { {0.0173495,-0.063434,0.627563,0.266972,-0.0699953,0.203974}
,
{0.184592,0.310158,0.470041,0.0731129,0.3049,-0.0836086}
,
{0.178476,0.0356876,0.513965,0.164137,0.186675,-0.305596}
,
{0.691098,0.11857,0.932914,0.374903,0.740696,-0.250809}
,
{-0.0248686,0.20449,0.494794,0.506138,0.400615,-0.0710881}
,
{-0.0769631,-0.100671,0.306119,0.484844,0.482726,-0.116913}
,
{-0.0519886,0.00036994,0.434631,0.251733,0.65703,-0.0843173}
,
{-0.0886159,-0.13298,-0.169942,0.0882762,-0.07108,0.0961505}
,
{-0.382774,0.0348063,0.085235,0.209146,0.0751295,0.122393}
,
{0.207235,0.182528,-0.0972152,0.0756451,0.133532,-0.214412}
,
{-0.223932,0.112746,0.00426866,0.0401914,-0.0238445,-0.0966966}
,
{0.0843594,-0.155159,-0.952805,-0.0140881,0.297375,0.0732381}
,
{-0.0601343,-0.052994,-0.0379362,-0.24414,0.0333273,-0.158527}
,
{0.0320592,0.0495751,-0.245809,-0.0706631,0.0918618,-0.0119148}
,
{0.0452245,0.0542903,-0.0363089,-0.00679594,0.0589599,0.0359381}
,
{0.218749,0.045115,0.0743229,0.00487393,-0.235928,0.121035}
,
{0.144662,0.0786451,-0.94204,0.43061,0.742348,-0.0465073}
,
{0.21201,-0.106356,-0.101126,0.135552,-0.21701,-0.0552623}
,
{0.113604,0.0794278,0.747444,-0.0710642,0.00208115,0.153976}
,
{0.109663,-0.210063,-0.935379,0.210614,0.288085,-0.0134154}
,
{0.0656436,0.22603,0.163651,0.134193,-0.195301,0.00270231}
,
{-0.160444,-0.00119676,0.141925,-0.044789,0.0793784,-0.0263117}
,
{-0.0280387,0.200655,0.145882,0.103682,-0.0298833,-0.233281}
,
{-0.162376,-0.0431596,0.0900177,0.0083102,-0.0347939,-0.206448}
,
{0.0131192,0.094811,0.129254,0.205271,0.0605207,0.126447}
,
{0.106839,-0.0341493,0.063533,-0.0106052,0.146153,0.0662793}
,
{0.0348436,-0.18548,0.0363461,0.057424,0.0412898,-0.0756039}
,
{0.0285093,0.171793,0.110416,0.0392062,0.0388076,-0.0800893}
,
{0.348339,0.0561198,0.130809,0.142938,0.203003,-0.177444}
,
{-0.13232,-0.00538578,-0.120041,0.0768629,-0.00765126,-0.120342}
,
{-0.0243615,0.100956,0.144484,0.111059,-0.0150735,0.127265}
,
{0.238878,0.00567989,0.169733,0.0236814,0.0399659,0.0872194}
,
{0.0599401,0.0220673,0.0855307,-0.101353,0.0107873,-0.0331113}
,
{-0.0243859,0.105989,0.0846581,0.146238,-0.212517,0.166982}
,
{-0.119165,-0.115489,-0.0411156,0.00588125,0.0146577,-0.0261738}
,
{0.0270863,-0.0147418,0.0114746,0.0541666,-0.0327053,0.0173609}
,
{0.374677,0.134429,0.0552737,-0.0252812,-0.101347,-0.182842}
,
{0.0547147,0.0201983,0.000957101,0.0815889,-0.0677615,0.159771}
,
{-0.345089,-0.176401,-0.0252008,0.0190374,0.0425787,-0.102938}
,
{-0.174422,0.16124,0.00477045,0.172842,-0.204512,0.0485535}
,
{0.123474,0.0634029,-0.0018326,0.0371665,-0.0506466,0.0593448}
,
{0.197594,-0.0510986,0.0229718,-0.0270296,-0.0299173,-0.0631781}
,
{0.0364719,0.117499,0.00806574,-0.0389784,0.018306,0.0383205}
,
{-0.122446,-0.300905,-0.188355,0.021325,0.0611127,0.269506}
,
{0.0380746,0.152571,0.00874467,-0.0642812,0.0494802,0.0145512}
,
{0.0171305,-0.138737,-0.0143756,-0.0521057,0.104921,0.0214445}
,
{0.275215,0.0300376,0.00340418,-0.0507526,0.0524628,-0.0104466}
,
{0.0424187,-0.107407,-0.00474446,-0.0352635,0.0458772,0.0161137}
,
{-0.145363,-0.142881,0.124536,-0.0752116,0.170538,0.108319}
,
{0.147431,0.237903,0.145456,0.0540672,-0.107286,0.079584}
,
{-0.077794,0.0359782,0.00559773,0.0536931,-0.0760769,0.00462467}
,
{-0.0145379,0.0309625,-0.0849089,0.0808583,-0.0419009,0.0885012}
,
{-0.0661526,-0.000683162,-0.0142421,-0.0514546,0.0468737,-0.0781285}
,
{0.0343087,-0.0317492,-0.0603828,-0.00623801,0.0124905,0.0816924}
,
{0.0339333,0.177681,0.0314782,-0.0613108,0.0585657,-0.0377084}
,
{-0.0177476,0.0515602,0.0123497,0.0344878,-0.00305934,0.0228777}
,
{-0.1186,-0.0578913,0.00343616,0.0344133,0.0146521,-0.0928855}
,
{0.315692,0.255972,-0.0856468,0.0120432,-0.0963061,0.409273}
,
{0.20425,-0.147696,0.0354584,-0.0181112,0.0906572,-0.0414435}
,
{0.0118466,0.0930665,-0.00782973,-0.0840972,0.0268584,-0.0448106}
,
{0.0163264,0.0188864,-0.022661,-0.038073,-0.0138182,0.0656355}
,
{-0.00498736,0.159391,-0.0608756,-0.146482,-0.111466,0.0884786}
,
{-0.12761,0.310765,-0.0340416,-0.208072,-0.127409,-0.0408369}
,
{0.0607423,0.0122156,0.0116473,0.0247995,0.0606298,0.137252}
,
{0.190825,0.122058,0.00111119,-0.02591,-0.0822043,0.0861467}
,
{0.0276959,0.0289461,0.0167194,0.0356367,-0.0274525,0.0197793}
,
{0.0280076,0.0156518,0.0560477,0.0824139,0.0846921,0.0158108}
,
{-0.0363734,-0.0341625,0.00332619,0.025454,0.145429,-0.137113}
,
{-0.0310877,0.11299,0.0643649,0.0510752,0.0814029,0.0201003}
,
{0.0559131,0.0801764,0.00827506,0.00522209,-0.0218749,0.0685949}
,
{-0.105193,-0.00087855,-0.00346566,-0.0132777,0.0402803,-0.0259672}
,
{-0.0523158,-0.200381,0.0148275,-0.0199721,0.0899293,-0.282663}
,
{-0.281008,-0.400168,-0.220983,-0.142095,-0.0445532,0.602214}
,
{-0.0964993,0.00209043,-0.0268406,-0.0558851,0.0636507,0.0273029}
,
{-0.272265,0.18125,-0.0247792,-0.00927552,0.0939228,-0.019357}
,
{0.146168,0.036903,0.0738519,0.113468,0.0423242,0.207103}
,
{-0.282444,-0.807685,-0.43499,-0.278373,-0.090921,-0.155451}
,
{0.667218,0.250769,-0.105317,0.631371,0.783955,-0.420411}
,
{-0.40912,0.388735,-0.0154792,-0.111948,-0.174226,-0.664963}
 };
  static const float bias2[1] = { 0.363574 };
  static const float weights2[][1] = { {0.0167854}
,
{0.0206867}
,
{-0.0930651}
,
{0.0375411}
,
{0.0308949}
,
{-0.0160733}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_0(v, index);
}
static int assign_gen_lepton_prior_1_0_0() {
  global_gen_lepton_prior.at(1,0,0) = &specialized_gen_lepton_prior_1_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_0 = assign_gen_lepton_prior_1_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.243451,-0.0997662,0.605902,-0.153224,-0.0270393,0.346271 };
  static const float weights1[][6] = { {0.131976,-0.0340126,0.319012,-0.198207,-0.280332,0.244337}
,
{-0.09124,0.131486,0.0131221,-0.0286839,-0.0636353,-0.0533227}
,
{-0.0960581,-0.0620406,-0.229545,0.151483,-0.0193739,0.0725698}
,
{0.651437,0.26837,0.540862,-1.07184,0.173746,-0.0685202}
,
{0.342158,-0.217755,0.692325,-0.0835313,-0.0172157,0.301011}
,
{0.439459,-0.0588388,0.547397,0.0600578,-0.0404665,0.238831}
,
{0.118181,-0.126072,0.610542,-0.281059,-0.0328894,0.465083}
,
{-0.0658048,-0.00466037,0.0380416,-0.0959746,-0.18033,0.0261671}
,
{-0.0995329,-0.0236076,0.105471,-0.243123,0.0975183,-0.0512332}
,
{0.0762908,0.135725,0.15546,0.194116,-0.0543357,-0.0176467}
,
{0.0967196,0.129048,0.0290452,0.082834,-0.0127137,0.0988621}
,
{-0.359986,-0.00756197,-0.097022,0.0415643,-0.155094,-0.00291313}
,
{0.137912,0.01009,-0.021618,-0.0884915,0.000657861,0.0640001}
,
{0.0368987,0.0503667,0.176331,-0.311075,-0.0426497,-0.082786}
,
{-0.05932,-0.0414869,-0.16778,-0.107767,-0.0356725,-0.0268241}
,
{-0.0278046,-0.209611,0.0708103,0.170471,-0.159941,-0.0591577}
,
{-0.751309,-0.344909,0.33749,0.376347,-0.0978196,0.382173}
,
{-0.162607,0.17434,-0.0155652,-0.260557,0.119765,-0.035269}
,
{0.45203,-0.0508205,0.0195764,-0.502149,0.200466,0.0666486}
,
{-0.258483,0.0386066,-0.204161,0.121011,0.0985505,0.171418}
,
{0.0836715,0.101394,0.0401228,-0.114481,-0.0660592,-0.0444908}
,
{0.053248,0.0838645,0.0210546,-0.222837,0.035086,0.00118573}
,
{-0.194611,-0.00840211,0.120357,0.117492,-0.0131679,-0.119564}
,
{0.0921991,-0.0385147,0.0990571,-0.168293,-0.0896029,-0.0552462}
,
{0.126742,0.142717,0.139626,0.033889,0.00640344,0.14248}
,
{0.073852,-0.0523126,-0.0618026,0.0555346,-0.0082989,0.103444}
,
{0.0559464,0.046676,-0.0842697,0.135413,-0.0751887,0.0807056}
,
{0.00982812,0.134285,0.0529309,0.0636043,-0.145373,0.00440224}
,
{0.106379,-0.00985263,0.298082,-0.459773,0.465573,0.0325555}
,
{0.176372,0.0150255,-0.188205,0.230345,-0.204403,-0.127364}
,
{0.0485728,-0.035153,0.0418891,-0.0266748,-0.0978911,-0.0238558}
,
{-0.0639302,-0.03644,0.0742524,-0.0623576,-0.109798,0.0276806}
,
{-0.0555513,0.0403974,-0.0736107,0.0017766,-0.112004,0.0502566}
,
{-0.207464,0.125584,-0.166525,0.035408,-0.184077,-0.0409906}
,
{0.0292705,0.0759355,-0.146207,0.0221123,-0.0406739,0.115312}
,
{-0.0398114,0.0440686,0.107181,-0.0275424,0.090976,-0.0573356}
,
{0.358569,-0.0069858,-0.0572123,-0.0640712,0.225129,0.0424986}
,
{-0.0607974,0.0210946,-0.0764013,-0.0534012,-0.0473407,0.0480227}
,
{-0.234603,0.0756246,-0.225219,0.166175,0.0217573,0.136238}
,
{0.115484,0.0156558,-0.0340091,0.337967,0.000392285,0.0162685}
,
{0.0181818,-0.0676837,0.0694179,-0.109438,-0.110293,-0.0412181}
,
{-0.0705615,0.0382686,0.0319526,0.130749,0.220813,-0.0466486}
,
{-0.0526519,0.00108538,0.0209397,-0.223322,0.137567,-0.0226208}
,
{-0.065584,-0.0797215,0.0196604,-0.368221,-0.437073,0.000937846}
,
{-0.0450976,0.00386954,0.122183,-0.0476363,0.126096,-0.0852485}
,
{-0.033882,-0.0303974,0.028804,-0.138061,0.014126,-0.0302146}
,
{0.0431256,-0.0826088,0.122322,0.151671,-0.285373,-0.0633148}
,
{0.0306212,-0.0890899,-0.109329,-0.0688514,-0.0247395,0.0361604}
,
{0.0361062,0.00964601,-0.141052,-0.274801,-0.0239321,0.0715186}
,
{0.0328359,0.17511,-0.148766,0.0394517,0.133498,0.125365}
,
{0.0510578,-0.0202681,-0.0289857,0.0775506,-0.0710072,0.0193799}
,
{-0.096076,0.134206,-0.0199224,0.263519,-0.0577159,0.0158386}
,
{-0.0170398,-0.00664982,0.0461777,-0.0418017,0.0267004,-0.02157}
,
{0.214974,-0.102119,-0.129343,0.0356651,-0.0994549,0.0752907}
,
{0.0548549,-0.0200524,0.0476331,0.0482552,0.228962,-0.00592518}
,
{-0.0225415,-0.152362,0.0526517,-0.0219006,-0.00852918,-0.106282}
,
{0.0196199,-0.0804708,0.238364,-0.193598,-0.388558,-0.0732107}
,
{0.0474414,0.0596586,0.419192,0.0737677,0.0654153,0.0974296}
,
{0.0914966,-0.21991,-0.0263856,0.166529,-0.0535514,0.0141556}
,
{-0.0672863,0.043023,-0.0636851,-0.0927673,0.0882026,-0.0281551}
,
{-0.0478457,-0.0411051,-0.0120186,-0.0510274,0.0384324,-0.0395531}
,
{0.00687522,-0.199598,0.121445,-0.034922,-0.268355,0.0491478}
,
{-0.0684399,-0.0880861,-0.18948,-0.523017,-0.184102,-0.0512736}
,
{-0.0966521,0.262155,0.123258,0.0385452,0.0808993,-0.158649}
,
{0.0531393,0.0106527,0.0942248,0.0935069,0.0159339,-0.0140677}
,
{-0.0417785,-0.013596,0.055645,-0.0360459,0.119192,-0.0948798}
,
{-0.229916,0.22105,0.0948428,-0.137783,-0.205037,-0.195526}
,
{0.111726,0.26136,-0.114978,0.391234,0.345449,-0.184693}
,
{-0.0666657,0.0988873,-0.117374,0.020566,-0.263234,0.0330984}
,
{0.0521102,0.0549981,0.105505,-0.126729,0.156278,0.119171}
,
{0.0435176,-0.0588238,-0.0349378,-0.0608638,-0.147302,0.103677}
,
{-0.0959639,-0.0831622,-0.0348734,-0.0457172,-0.155093,-0.146731}
,
{0.257399,-0.139477,0.18542,0.226223,0.337011,-0.0518258}
,
{-0.00688083,0.0634262,0.0382387,-0.100007,-0.194548,0.0910148}
,
{0.178241,0.0420115,-0.130202,0.999487,0.180042,-0.0862408}
,
{-0.120782,-0.0112278,-0.14944,-0.0272937,0.115948,-0.200081}
,
{0.856085,0.903677,-0.971785,-0.71266,-0.460993,-0.878861}
,
{0.000526709,0.198925,-0.115001,-0.0745418,-0.153806,-0.137112}
,
{0.0150542,-0.216889,0.273375,-0.524228,0.726212,0.0841998}
 };
  static const float bias2[1] = { 0.385101 };
  static const float weights2[][1] = { {-0.161441}
,
{-0.0450763}
,
{0.0545683}
,
{0.0670538}
,
{0.0363799}
,
{0.0928537}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_1(v, index);
}
static int assign_gen_lepton_prior_1_0_1() {
  global_gen_lepton_prior.at(1,0,1) = &specialized_gen_lepton_prior_1_0_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_1 = assign_gen_lepton_prior_1_0_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0813139,0.315844,0.463878,0.34136,-0.124167,0.381958 };
  static const float weights1[][6] = { {0.403417,0.214977,0.620364,0.588049,0.206765,0.513196}
,
{-0.309086,0.0676886,0.0702461,0.0390961,-0.0305859,-0.338787}
,
{0.528642,-0.352862,0.0651511,0.148656,-0.110954,0.162521}
,
{-0.516102,0.436107,0.606483,0.607366,0.558422,0.391594}
,
{0.0264032,0.43119,0.433702,0.303027,-0.161936,0.314748}
,
{0.109702,0.257724,0.411967,0.259539,0.0564043,0.265551}
,
{0.161047,0.255791,0.433642,0.370839,0.0726093,0.373968}
,
{-0.175973,-0.102014,-0.0758166,0.15672,-0.163563,0.0065344}
,
{0.0676595,-0.205084,0.122115,0.0476212,-0.111649,0.120444}
,
{-0.121929,-0.232887,-0.0589399,0.00648579,0.167414,0.0527042}
,
{-0.0892565,-0.0192966,0.228324,-0.0901467,-0.0664457,-0.0188627}
,
{0.0406935,-0.0999303,-0.136735,0.00515044,-0.0698094,-0.049718}
,
{-0.363684,0.0146495,0.0765267,-0.0613992,-0.0978332,-0.054912}
,
{0.112878,0.269622,0.37907,0.435916,-0.314642,0.0832293}
,
{-0.0223651,-0.162581,0.0594295,0.0602923,0.0533754,0.130411}
,
{-0.070675,-0.0723939,-0.1742,-0.00214842,-0.0273738,-0.168677}
,
{-0.118458,0.274382,0.281874,0.373823,-0.148425,0.416949}
,
{0.0528954,-0.0649753,0.0491869,0.0385681,-0.130492,-0.241952}
,
{-0.246156,-0.048497,0.0237023,0.0829549,-0.120827,0.158414}
,
{0.0908689,-0.0183711,0.11376,0.0633576,-0.0396621,-0.0119599}
,
{0.0534451,0.170905,0.0196667,-0.184448,-0.209036,-0.173127}
,
{-0.217703,-0.120296,0.0540928,-0.016246,-0.317859,0.0259064}
,
{0.0392157,-0.0183654,0.0133388,0.0128295,-0.206782,0.0929071}
,
{-0.117358,0.099884,-0.116837,0.0373173,0.145797,0.0876883}
,
{0.156762,0.0909268,0.29119,0.221605,0.209675,0.259007}
,
{0.0941238,0.269666,0.0076416,0.153588,0.0607149,-0.0986697}
,
{0.142072,-0.0143099,-0.179033,-0.0127703,0.189376,-0.114564}
,
{0.0101461,0.0467898,-0.193558,-0.025976,0.378475,0.192376}
,
{0.576261,0.16156,0.325358,0.359098,-0.150414,0.123431}
,
{0.242103,-0.0897101,-0.148086,0.160628,-0.170036,0.0158379}
,
{-0.194862,0.210935,-0.119027,0.0316352,-0.091218,0.135036}
,
{-0.220634,-0.176209,0.108096,-0.125989,-0.0677153,-0.00864178}
,
{-0.0594792,0.0857481,-0.0440559,0.00190572,0.174371,0.0783903}
,
{-0.0707817,-0.206676,-0.00719027,-0.15758,-0.0864731,0.0445565}
,
{-0.153218,0.025981,0.100891,-0.10887,-0.178727,-0.141099}
,
{0.00946675,0.0552097,-0.130881,0.132315,-0.139712,0.067151}
,
{0.284574,0.265988,-0.22242,0.023399,-0.00982902,0.281141}
,
{-0.029623,-0.055123,0.017785,0.0343649,0.147603,-0.0521903}
,
{0.170721,-0.0705425,0.00843126,0.0557896,-0.035666,-0.214446}
,
{0.113017,0.0145106,0.0332437,-0.121519,0.163539,0.208671}
,
{-0.0675584,-0.0342162,-0.0311898,0.0550335,0.015184,0.0425018}
,
{0.0517684,-0.116776,0.0684536,-0.0685751,0.387628,0.0606372}
,
{-0.06984,-0.00925097,0.00340871,0.0389981,-0.0339364,-0.093217}
,
{-0.0913645,-0.0273318,0.0193138,-0.0197511,0.0622617,0.0242019}
,
{-0.104637,-0.0447221,0.00640064,0.0270368,-0.154584,0.0674269}
,
{0.0243971,-0.0352248,0.0346735,-0.0348748,-0.0480547,0.00196363}
,
{0.173352,-0.113734,-0.000707726,0.14633,-0.0880487,-0.0267598}
,
{0.0747549,0.0420715,-0.00430501,-0.0179386,-0.107774,-0.062846}
,
{-0.0241069,-0.0227844,0.0163818,-0.0167599,0.133067,0.00331699}
,
{0.10931,0.113844,0.0166202,-0.10845,-0.131442,0.016871}
,
{0.0903972,0.0337454,-0.00271578,-0.0239299,0.0465896,-0.0184717}
,
{-0.0148489,-0.126756,-0.0589729,0.14742,-0.16899,0.140864}
,
{-0.0495319,-0.00891229,0.0240208,0.00169274,-0.102459,-0.0833537}
,
{-0.282112,0.0838821,0.0549356,-0.0748268,0.117724,-0.130883}
,
{0.0481246,-0.0713777,0.0764038,-0.226154,-0.216707,0.0486602}
,
{0.0633362,-0.0241301,0.0255052,-0.119827,0.186528,-0.140919}
,
{0.0496748,0.162806,0.0945008,0.214703,0.0930711,0.24434}
,
{0.153267,0.0877515,0.247769,-0.114781,0.0591189,-0.0511053}
,
{-0.0252882,-0.255667,-0.0495424,0.15349,0.0564796,0.0225522}
,
{0.0246492,0.234144,0.144674,0.177189,0.0875293,0.0959112}
,
{0.115315,-0.0874844,0.143714,-0.119879,0.08237,-0.0760736}
,
{-0.193615,0.0814621,0.181926,-0.0310021,0.0959809,0.109801}
,
{0.0963109,0.264091,-0.269716,0.394296,-0.00180838,0.142796}
,
{-0.217823,-0.342043,-0.499922,-0.467231,-0.0674073,-0.33323}
,
{0.126971,0.0561826,-0.248729,0.0152145,0.146571,-0.0127918}
,
{0.00904477,0.116513,-0.273241,-0.0722979,0.0946043,0.104022}
,
{0.373387,0.285835,0.360254,0.292417,0.131324,0.563303}
,
{0.00862456,0.00484535,-0.0555395,0.140168,0.167681,0.269169}
,
{-0.0631958,0.0715369,-0.0470081,0.291687,0.0944226,0.170603}
,
{-0.112932,-0.117494,-0.161639,-0.402862,0.12637,-0.259673}
,
{0.206551,-0.00429288,0.0856801,0.188493,-0.227573,0.0863501}
,
{0.119559,0.193707,0.0106464,-0.0122323,-0.0814145,0.120024}
,
{0.0907963,0.160809,0.273054,0.0170709,-0.0702212,-0.0827314}
,
{-0.134042,-0.282254,0.235126,-0.318414,-0.0529066,-0.0714736}
,
{0.0885096,-0.024558,0.11709,0.111749,0.123806,-0.127699}
,
{-0.0234792,-0.218796,-0.206308,-0.0240858,0.426455,-0.233613}
,
{0.533636,0.365391,0.36108,0.288202,-0.0306697,0.496141}
,
{-0.091204,-0.0841629,0.381104,0.235681,0.160748,0.374222}
,
{0.0652129,0.0162397,0.165605,0.000749826,-0.0912543,-0.059684}
 };
  static const float bias2[1] = { 0.316667 };
  static const float weights2[][1] = { {0.0573498}
,
{0.0374542}
,
{0.0768424}
,
{0.0510083}
,
{0.146965}
,
{0.0205857}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_2(v, index);
}
static int assign_gen_lepton_prior_1_0_2() {
  global_gen_lepton_prior.at(1,0,2) = &specialized_gen_lepton_prior_1_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_2 = assign_gen_lepton_prior_1_0_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0806447,-0.0742435,0.0564575,0.16649,0.161316,0.00699735 };
  static const float weights1[][6] = { {0.1705,-0.174048,0.131938,-0.436644,-0.226901,0.0408654}
,
{-0.0191544,-0.0659575,0.148885,-0.0573206,0.137025,0.0859737}
,
{-0.18468,-0.377316,0.0947857,0.204022,-0.0685714,0.0521424}
,
{0.00557176,0.155094,0.152047,0.344182,0.219993,0.000341061}
,
{-0.00872959,0.0754776,0.219713,0.138492,0.233891,-0.00600375}
,
{-0.0879231,-0.232134,0.0578074,0.306113,0.0549815,0.11363}
,
{-0.143948,-0.0107003,0.00770418,0.00280278,0.129413,-0.179363}
,
{-0.0926938,-0.109196,0.0360856,0.147872,-0.0201204,-0.444943}
,
{-0.230258,-0.041182,-0.120039,-0.0807024,0.0167719,-0.0314535}
,
{-0.0427314,0.119323,-0.136442,0.125333,0.0148777,0.0446604}
,
{0.0799032,-0.0328299,-0.0766727,0.0354036,0.121411,-0.00346016}
,
{-0.159012,-0.157752,0.0154624,-0.133481,0.0588181,-0.268369}
,
{-0.224374,-0.121969,0.196907,0.0142999,0.176792,0.56327}
,
{-0.317157,-0.0334262,0.172262,0.141235,0.022379,-0.0879209}
,
{0.00836269,0.0613915,0.15375,0.182401,-0.0143495,-0.177818}
,
{-0.0650949,0.210996,-0.0352367,-0.160892,0.217469,0.045134}
,
{-0.0869708,-0.283155,-0.445854,0.439763,0.537107,-0.424023}
,
{-0.239061,-0.0975403,0.0771782,0.106443,-0.0265125,-0.106855}
,
{0.210694,0.0697529,0.0509337,-0.00236818,0.00124955,0.042866}
,
{-0.286034,0.116941,-0.0260061,0.00805372,-0.0024034,-0.374529}
,
{0.0249435,0.108891,0.0832321,0.0155963,0.0523627,-0.113773}
,
{-0.0564782,-0.123426,0.0341122,-0.0329114,0.0252226,0.251864}
,
{0.0700983,0.0741207,-0.0515027,0.15671,0.056831,0.0386888}
,
{-0.155669,-0.101952,0.0929062,0.0895251,0.0175693,0.032855}
,
{-0.189515,-0.0793326,0.132904,0.1008,0.184949,0.0889401}
,
{-0.0873616,-0.010673,-0.0376048,-0.222831,0.203666,0.106256}
,
{-0.0328111,-0.146857,-0.0634149,0.069222,0.0518932,0.129801}
,
{0.125421,-0.120369,0.0722621,-0.00823793,0.151383,-0.0191194}
,
{-0.143385,-0.412897,-0.0348248,-0.162662,0.208586,-0.0589428}
,
{0.12633,0.0907564,-0.0788944,-0.0781413,0.170008,0.213377}
,
{-0.178852,-0.0717708,-0.236634,0.0531002,-0.127615,-0.00655995}
,
{0.141884,0.0133171,0.0660271,-0.237846,0.0270836,0.054772}
,
{0.0998216,-0.00598588,-0.0162168,-0.115565,0.102715,0.122107}
,
{-0.15488,-0.0194896,-0.184695,-0.031772,-0.074702,-0.0851262}
,
{0.0390835,0.00130544,0.0222236,-0.0843658,0.119248,-0.0367007}
,
{-0.0397082,-0.0351264,0.0499326,0.128576,-0.0854309,-0.0362095}
,
{-0.300022,0.0491146,0.0316759,-0.000750622,0.0312296,-0.196999}
,
{0.027798,0.0452571,-0.0377965,-0.0882626,0.053433,-0.0320394}
,
{-0.276624,0.231589,-0.137265,0.00735193,-0.156724,-0.103681}
,
{0.173466,0.0908373,0.0126213,0.0802024,-0.048319,0.0571673}
,
{-0.138262,0.046422,0.00138964,-0.0360081,0.0471311,-0.106617}
,
{-0.105353,0.0583231,0.0140596,0.21757,-0.209476,-0.109088}
,
{-0.00801392,0.0921213,-0.0442941,-0.0276783,-0.011127,-0.0155155}
,
{0.041925,-0.0108167,0.137153,0.105315,0.0981039,-0.015458}
,
{-0.243062,-0.00815005,-0.00869857,-0.0954332,0.0980134,-0.154741}
,
{-0.050593,-0.0668574,-0.0127617,0.0466965,-0.0710047,0.0775885}
,
{0.204682,-0.226632,0.117233,0.0919485,0.028565,0.158759}
,
{-0.0925691,0.0444504,0.030545,0.0799291,-0.0550891,-0.00723886}
,
{-0.0529705,-0.127334,0.0436252,0.207057,-0.130111,-0.0441179}
,
{0.216112,0.136629,0.0624011,0.128812,-0.0557258,0.0796844}
,
{-0.000612929,0.00298542,-0.0676142,-0.120443,0.0547386,0.0383554}
,
{-0.0720401,-0.0275247,0.094075,-0.0691251,0.163175,0.0263921}
,
{-0.083843,-0.061243,-0.0155367,-0.0251886,0.00860412,0.0367183}
,
{-0.309822,0.02231,-0.0029728,-0.0197528,0.0404856,0.0538038}
,
{0.177767,0.122242,2.43318e-05,-0.0934955,-0.150858,-0.106575}
,
{-0.102203,-0.0187162,-0.0960093,0.0191653,-0.25874,-0.0784644}
,
{0.0841216,-0.37595,0.153867,0.400789,-0.0882433,0.0275609}
,
{0.35677,0.174953,0.160948,0.101174,0.0463389,0.014272}
,
{-0.602413,0.00520835,-0.0253011,-0.0665427,0.0288076,-0.1538}
,
{0.173768,0.231637,0.0038383,-0.209276,0.0760606,0.00240238}
,
{-0.00704482,-0.137954,0.134817,0.280689,0.0342647,0.0362279}
,
{0.0236211,-0.138088,-0.110907,0.0979661,0.189923,0.141701}
,
{0.72486,0.31736,0.296742,0.217635,0.00591014,-0.101673}
,
{-0.972967,-0.0298848,-0.195962,1.33403,-0.194837,0.428302}
,
{0.180128,0.0819775,0.138727,0.256641,-0.0213187,0.0356383}
,
{-0.190522,-0.0750728,0.00385382,0.195373,-0.12194,0.0158884}
,
{0.216094,-0.238995,-0.317518,0.396791,-0.171132,0.395889}
,
{-0.273546,-0.634257,0.149036,0.719246,-0.0914228,-0.0178993}
,
{-0.205125,0.0425897,-0.171199,-0.213064,0.167063,0.342333}
,
{0.240937,0.151499,-0.0522176,-0.136125,-0.0396856,-0.0205454}
,
{0.0751597,-0.211094,-0.0417735,0.026043,-0.14047,-0.0475362}
,
{-0.421963,0.00174777,-0.0619887,0.373988,-0.0479183,0.0461873}
,
{-0.61927,0.493881,0.160698,-0.525991,-0.252387,-0.0640858}
,
{0.884912,-0.295332,-0.371571,0.23663,0.0650441,0.173734}
,
{-0.477077,-0.430584,0.110644,-1.27677,-0.253213,0.0637964}
,
{0.0948918,0.151243,0.0608144,-0.190677,0.381601,0.213877}
,
{-0.188418,0.175874,0.214509,-0.317107,-0.477874,0.101767}
,
{0.0423447,0.0271311,-0.10207,0.0479267,0.051438,-0.0408732}
,
{0.115036,0.104662,0.0479874,-0.0955494,-0.113103,-0.0483599}
 };
  static const float bias2[1] = { 0.229943 };
  static const float weights2[][1] = { {-0.472584}
,
{-0.0951279}
,
{-0.0900656}
,
{0.0778457}
,
{0.0720606}
,
{-0.127682}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_3(v, index);
}
static int assign_gen_lepton_prior_1_0_3() {
  global_gen_lepton_prior.at(1,0,3) = &specialized_gen_lepton_prior_1_0_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_3 = assign_gen_lepton_prior_1_0_3();
