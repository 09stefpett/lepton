#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.31661,0.0567987,-0.12916,-0.058703,0.0515205,0.163163 };
  static const float weights1[][6] = { {0.0173633,-0.266877,0.0800723,-0.0252955,-0.0510179,-0.406603}
,
{-0.229933,-0.0309784,-0.105823,-0.263635,0.0169924,-0.0361688}
,
{-0.0461971,-0.0164361,0.11939,-0.165001,0.123206,0.772665}
,
{-0.485566,0.366983,-0.293886,0.213208,-0.220157,-0.053481}
,
{-0.174602,0.0277299,-0.302317,-0.106974,0.169387,0.262748}
,
{-0.116624,-0.0473399,0.0247544,-0.297323,0.173332,0.372974}
,
{-0.340786,0.00521747,0.2135,-0.307282,0.228404,0.361991}
,
{-0.037776,0.0261843,-0.0111238,0.0347286,0.035931,-0.102067}
,
{-0.100242,0.00408434,0.178188,-0.0743568,-0.0144435,-0.00722111}
,
{-0.124207,-0.214444,-0.122226,-0.0931869,-0.209839,0.093425}
,
{0.100625,-0.060526,-0.105462,-0.239003,0.00512755,0.0540857}
,
{0.17237,-0.103724,0.0934492,-0.0837063,-0.105263,-0.0358919}
,
{-0.027604,-0.0587746,0.0926243,-0.175352,-0.0526773,-0.0427868}
,
{-0.0525871,0.141928,-0.107954,0.0771492,-0.113691,0.00646008}
,
{0.104374,-0.021342,0.0112651,-0.123239,0.0877514,-0.167404}
,
{0.0711958,0.181149,0.143232,-0.0504612,0.0888599,-0.146856}
,
{-0.106259,0.0507574,0.0950208,0.0935967,0.0251465,-0.172978}
,
{-0.00673285,0.0163017,-0.0856721,-0.13836,0.0836149,0.0172934}
,
{0.296124,0.0676945,-0.0506202,-0.184152,-0.225479,-0.292994}
,
{-0.232515,0.0269585,-0.0831553,-0.212718,-0.0560011,0.0775624}
,
{0.0043058,0.107942,-0.147847,-0.0127693,-0.0453512,0.303313}
,
{-0.0307254,-0.000203831,0.00116339,-0.0293765,0.0706974,0.0218531}
,
{-0.141845,-0.0189042,-0.0013592,-0.0698683,-0.0666151,0.112207}
,
{0.127001,0.0680214,-0.263497,-0.256837,0.124299,0.107008}
,
{0.0332768,0.0105974,-0.0209016,-0.0420372,0.0823651,0.242454}
,
{-0.0406817,-0.189684,0.017374,0.0205357,-0.0189222,-0.0226769}
,
{0.0523393,-0.154938,0.00942581,-0.181993,0.150248,0.0761451}
,
{-0.127251,-0.060186,0.165699,-0.0389195,-0.135213,-0.0460208}
,
{0.264412,-0.19897,-0.2483,-0.212396,0.0913723,0.0214044}
,
{-0.094259,-0.146577,0.195717,-0.140988,0.181388,0.0346245}
,
{-0.00462797,-0.0129234,-0.130135,0.0859922,0.0364954,-0.214701}
,
{-0.101903,-0.120855,-0.119514,0.13723,-0.033391,0.0909979}
,
{-0.198229,-0.0430761,-0.0959601,-0.0713426,0.0927001,0.0459109}
,
{0.173963,0.15553,0.0534038,0.0827311,0.147489,0.0869742}
,
{0.0173613,0.0406496,-0.0510454,-0.0330769,-0.114576,-0.0415736}
,
{0.0639285,0.0818355,0.0258087,-0.0470083,-0.0178224,0.0216218}
,
{0.0813042,0.11418,-0.153554,-0.0941309,0.0693508,-0.0726794}
,
{-0.0412308,-0.0375594,0.0833915,-0.0275148,0.0777206,0.00784077}
,
{-0.0800079,-0.134274,0.0144596,0.172195,0.146099,0.0370428}
,
{0.00695497,0.025125,0.108006,0.11674,0.0618515,0.0362919}
,
{-0.161294,-0.152284,-0.0978447,0.0224467,0.124354,-0.111737}
,
{0.0503598,0.133344,-0.0114378,-0.0916169,0.131719,-0.0833562}
,
{-0.0616892,-0.0703529,0.0300492,-0.0362326,0.0513678,-0.0116591}
,
{0.105243,0.168835,0.172917,-0.0528843,0.19327,-0.0524604}
,
{0.0312582,0.0783516,-0.139982,-0.0208678,-0.255562,-0.00117737}
,
{-0.000296018,-0.0388392,0.0797947,-0.10092,-0.0795579,0.0795212}
,
{0.0742746,-0.0412707,0.10827,0.0135975,0.0582058,0.174601}
,
{0.0979112,0.0747978,0.00978103,-0.0262437,-0.100655,0.0990117}
,
{-0.00744054,-0.000543442,0.328031,-0.217304,-0.0426396,-0.0262893}
,
{-0.0990098,-0.105657,0.0545965,-0.00200949,-0.0296914,-0.00906807}
,
{-0.145703,-0.191525,0.0455568,0.104458,0.0508884,-0.0133252}
,
{-0.0324221,-0.0367166,0.215932,-0.0752725,0.300562,0.114883}
,
{-0.123665,-0.134998,-0.182365,-0.0706052,0.0669643,-0.158426}
,
{-0.0629797,-0.00911411,0.0777185,0.0602615,0.13571,-0.124008}
,
{0.109509,-0.108378,-0.17809,-0.00383117,-0.106,0.0453857}
,
{-0.00366091,-0.0538379,-0.168331,-0.0663601,0.0697149,-0.0544527}
,
{0.264069,-0.0603908,-0.062317,0.00963877,0.0725164,0.496885}
,
{0.0136893,0.315804,-0.0195195,-0.189771,0.0950945,0.0749765}
,
{0.0696404,-0.151801,-0.0996949,0.20388,0.00717005,-0.0503541}
,
{0.0629785,0.0342249,-0.0247545,-0.0773652,-0.165967,-0.0281934}
,
{-0.0496063,-0.00245166,-0.0109444,0.146567,-0.0415703,-0.0779528}
,
{-0.016121,-0.14239,-0.0345821,-0.119463,-0.170496,0.27938}
,
{0.0308867,0.0510531,0.0682036,0.113206,0.00397261,0.258902}
,
{-0.078588,-0.170548,-0.0195943,-0.0340192,-0.079635,0.145764}
,
{0.0712974,0.168157,0.0556684,0.119873,-0.0776527,-0.113659}
,
{0.0226398,0.0407706,-0.141626,-0.0329559,0.146681,-0.0459968}
,
{-0.108777,-0.207861,-0.439659,-0.0369566,-0.197462,0.139642}
,
{0.323216,-0.466295,0.102834,0.0868334,-0.38403,-0.241154}
,
{0.0189211,-0.0331118,0.0854746,0.0336435,-0.109589,-0.0896155}
,
{-0.145782,-0.052712,-0.108384,-0.0482469,-0.269481,-0.250884}
,
{0.053087,0.0721992,0.0186537,-0.00562984,-0.0199033,-0.0279343}
,
{0.0432012,-0.162538,0.144448,-0.221429,-0.163276,-0.041842}
,
{0.515728,-0.345377,-0.0643753,0.0495487,0.0234272,-0.0805811}
,
{-0.207581,-0.279275,0.0896124,-0.0997284,-0.224816,-0.0996825}
,
{-0.185146,-0.199131,0.359253,-0.216558,-0.096613,-0.666941}
,
{-0.0662611,-0.0337171,0.145711,0.215611,-0.227841,0.107472}
,
{-0.507578,0.73438,0.318039,-0.0130414,0.0592827,-0.531749}
,
{0.130671,0.0895312,0.113663,-0.0746714,-0.085537,-0.0792903}
,
{0.107035,-0.716973,0.774038,0.299966,0.066301,-0.89602}
 };
  static const float bias2[1] = { 0.307978 };
  static const float weights2[][1] = { {-0.097257}
,
{0.0725158}
,
{-0.0242003}
,
{0.00962835}
,
{0.00784573}
,
{0.0316508}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_0_0(v, index);
}
static int assign_gen_lepton_prior_0_0_0() {
  global_gen_lepton_prior.at(0,0,0) = &specialized_gen_lepton_prior_0_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_0_0 = assign_gen_lepton_prior_0_0_0();

template<typename T> float gen_lepton_prior_0_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0972178,-0.456023,0.302207,0.562833,-0.065231,-0.205144 };
  static const float weights1[][6] = { {-0.406362,1.43796,-0.996749,-1.26601,-0.514822,-0.341023}
,
{-0.141051,-0.0258121,-0.104848,-0.179403,-0.512963,0.091416}
,
{0.124,-0.0975134,0.178538,-0.00535876,-0.430346,-0.135592}
,
{0.178541,-0.835173,0.519496,1.04665,0.225841,-0.240977}
,
{0.0715962,-0.457289,0.364894,0.516024,-0.039512,-0.347899}
,
{0.251815,0.0200218,0.030453,0.194662,-0.255393,-0.262984}
,
{0.0298233,0.0804093,-0.0127563,0.328701,-0.269379,-0.23326}
,
{0.154226,0.199495,0.12691,0.157165,-0.0378201,-0.0935928}
,
{0.0194612,-0.020484,-0.248048,-0.0739283,-0.0472709,0.131263}
,
{-0.0888871,0.0584438,0.0720105,-0.0474149,-0.0874367,-0.0639991}
,
{-0.108031,0.00103648,-0.160682,-0.0998819,-0.151,0.113747}
,
{-0.109867,-0.0821853,0.0803643,-0.0838458,0.0711145,-0.109987}
,
{-0.032996,-0.0507149,0.16018,-0.057832,-0.0423967,0.11188}
,
{0.14701,0.047103,0.157314,0.0699973,-0.0585538,-0.00864058}
,
{-0.169332,0.0181303,-0.0194225,0.0194622,0.160523,0.108125}
,
{0.157091,-0.0849473,0.148691,-0.0341032,-0.0571394,-0.129223}
,
{-0.048963,-0.0707676,-0.0392094,-0.16217,0.0420667,-0.00802623}
,
{-0.00733496,-0.138663,0.00759918,0.163196,-0.0671899,-0.134871}
,
{-0.242056,0.530422,-0.266112,-0.668327,-0.475864,0.179708}
,
{-0.106339,0.0291882,0.0516575,-0.0324942,-0.17719,-0.155996}
,
{-0.0855131,0.0117245,0.140202,0.286331,-0.071443,0.0822806}
,
{0.169426,0.225663,0.0887637,0.19371,-0.268132,-0.00659466}
,
{-0.139953,-0.00329596,0.0341856,0.0132358,0.00642509,-0.215406}
,
{0.390929,0.116729,0.216243,0.0602193,-0.127896,0.256472}
,
{-0.0630187,-0.198804,-0.0333997,-0.255358,-0.0391118,-0.189059}
,
{0.066534,-0.11882,0.10679,-0.1929,0.144609,0.0795511}
,
{0.0908584,0.036064,-0.0665245,0.442004,0.0584196,-0.0318041}
,
{-0.205124,0.361796,0.0463433,0.108926,-0.0925075,-0.197646}
,
{0.384451,-0.529808,0.00449064,0.6971,0.180687,-0.334882}
,
{-0.105903,0.0726427,-0.0237526,-0.0660298,0.0406592,0.0194197}
,
{0.00377064,-0.0456509,0.013153,0.0822328,-0.0799288,-0.222584}
,
{-0.104228,-0.113405,0.208021,-0.0590246,0.00844445,0.022556}
,
{0.189148,-0.00992275,-0.0111332,-0.0694408,0.0808073,0.00316027}
,
{-0.116508,-0.0938301,0.10893,-0.186278,-0.0562075,-0.0458882}
,
{0.0427424,-0.0407899,-0.0574966,0.0333122,0.077942,0.114267}
,
{-0.0555441,0.00175153,0.00522803,0.0337437,0.0752423,0.0779939}
,
{-0.0952641,-0.141181,-0.119898,0.0936979,0.0319162,0.0704731}
,
{0.138197,-0.0163208,-0.0153881,-0.0197563,-0.0051062,0.0227068}
,
{-0.181134,-0.260733,-0.164997,-0.00252216,-0.0240327,0.0251713}
,
{0.204254,0.175427,-0.143558,0.174338,0.075781,-0.179437}
,
{0.183155,0.0768348,0.0327038,0.00305745,0.0407464,0.065698}
,
{0.0288539,-0.135911,-0.101325,-0.0500752,-0.321555,-0.0266163}
,
{-0.0814625,0.0321584,0.071834,0.0345205,-0.0440801,0.0626036}
,
{0.116729,0.127655,0.102599,0.0439018,-0.0396729,0.128085}
,
{0.185432,0.0116859,-0.100681,0.0540885,-0.166264,-0.0936244}
,
{-0.0795546,0.0407464,0.105877,-0.0310938,0.0876049,0.0429838}
,
{-0.0794273,0.0901668,0.151103,-0.050605,-0.14168,-0.0261553}
,
{-0.0227184,-0.020073,-0.0125168,0.0206209,0.0672245,0.0454244}
,
{0.403043,0.162557,-9.85948e-05,0.0366855,0.000554311,0.0052156}
,
{0.0578735,0.0550506,-0.0503865,0.155117,0.0460327,0.0688666}
,
{0.0661455,0.146152,0.0471455,0.0499502,0.0578312,-0.0402112}
,
{-0.116238,0.0868246,0.0689693,-0.0426,-0.328955,-0.276033}
,
{0.0522742,0.0243185,0.0159294,-0.0410917,-0.0498981,-0.111115}
,
{0.106202,-0.0562167,-0.106908,-0.0021912,0.121474,-0.0453739}
,
{-0.417213,-0.231246,0.0270774,-0.063431,-0.0697299,0.221186}
,
{0.0261647,-0.0621685,-0.0549182,0.0371618,-0.12175,-0.000976543}
,
{0.155055,0.168097,0.00777564,0.111996,0.521341,-0.0115852}
,
{-0.142644,0.353679,0.0100106,0.147318,0.372286,-0.0735012}
,
{-0.0437579,-0.082752,-0.0540073,-0.0637274,-0.0775201,-0.0517763}
,
{0.201605,-0.0466554,-0.179016,0.166627,-0.204188,-0.0690001}
,
{0.00978026,0.0348734,0.0472517,-0.0390975,0.00180913,-0.0117145}
,
{-0.0519463,-0.181141,0.0191655,-0.191783,0.0798179,0.0623766}
,
{0.393729,-0.0143965,0.0894183,-0.0605117,-0.480513,0.370919}
,
{0.0270376,-0.126066,0.0472407,-0.124573,0.0548634,0.0526701}
,
{-0.0799324,-0.110852,-0.0795543,0.0405719,0.0633451,0.138703}
,
{-0.0761472,-0.0530097,-0.0353806,0.0930217,0.0885877,0.164137}
,
{0.211337,-0.172414,-0.168175,0.163415,0.123642,0.13603}
,
{-0.160373,-0.173424,-0.277563,-0.349045,-0.721765,0.0084536}
,
{0.0574088,-0.0496653,-0.0301714,-0.0873652,0.130604,0.127079}
,
{0.140308,-0.0879625,-0.210898,0.0162236,-0.0650182,-0.18061}
,
{0.0189082,0.0583564,0.0544906,-0.0896969,0.233104,0.0174504}
,
{-0.436088,-0.453431,-0.325891,-0.187614,0.127271,0.0245699}
,
{-0.00247565,0.517607,0.0897746,0.219386,0.0225437,-0.111737}
,
{-0.0192353,-0.0940369,-0.0984227,0.0228309,-0.0490813,-0.0496072}
,
{0.436042,-0.0804203,0.136815,-0.395182,0.0922524,0.184399}
,
{-0.0188719,-0.241139,-0.0257915,-0.233143,0.468391,0.122972}
,
{-0.175798,-0.0587561,0.325044,0.32582,0.167749,-0.261353}
,
{-0.0254623,0.141767,0.137995,0.0995552,0.194871,0.193892}
,
{0.415823,0.183906,0.555143,-0.454389,0.143548,-0.164988}
 };
  static const float bias2[1] = { 0.176537 };
  static const float weights2[][1] = { {0.018954}
,
{-0.0673746}
,
{0.0708864}
,
{0.0554684}
,
{0.0143868}
,
{-0.0348524}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_1_0(v, index);
}
static int assign_gen_lepton_prior_0_1_0() {
  global_gen_lepton_prior.at(0,1,0) = &specialized_gen_lepton_prior_0_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_1_0 = assign_gen_lepton_prior_0_1_0();

template<typename T> float gen_lepton_prior_0_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.185146,0.454392,-0.173477,0.33306,0.4538,0.17324 };
  static const float weights1[][6] = { {1.00405,-1.44718,1.14075,-1.23274,1.54881,-0.418572}
,
{-0.00940282,0.0471582,-0.00762179,-0.111669,0.299626,-0.149055}
,
{-0.163048,0.556271,-0.0379303,-0.0865359,0.332647,-0.356353}
,
{-0.394997,0.701884,-0.337393,0.752126,0.108124,0.12248}
,
{-0.251264,0.415085,-0.21646,0.34022,0.470336,-0.0737856}
,
{-0.176285,0.316847,-0.0832416,0.18399,0.609806,0.0733891}
,
{-0.217435,0.410624,-0.250381,0.342804,0.319405,0.160448}
,
{0.0546094,0.063912,0.0562744,0.244508,0.0241663,0.0823974}
,
{0.117288,-0.0176492,-0.0308896,0.00242958,-0.0600947,-0.0853959}
,
{-0.0860798,-0.163027,0.13072,-0.0110288,0.0294081,-0.089062}
,
{0.106255,0.076092,0.0784231,-0.145206,0.0466229,-0.0205113}
,
{-0.040466,0.154841,0.181322,-0.177739,0.0319926,0.0724207}
,
{-0.201189,-0.0737315,0.166392,0.0323622,0.15524,0.1267}
,
{0.00799243,-0.0100261,0.132241,-0.0992687,-0.00547681,-0.116491}
,
{0.23282,-0.107845,-0.0264886,0.19357,0.123807,0.0486621}
,
{-0.0612433,-0.0833964,0.142544,0.0590161,0.129744,0.00113629}
,
{-0.0295233,0.0906516,-0.0204875,0.0252202,0.0188436,0.140699}
,
{-0.23266,0.106207,0.0684045,-0.0801823,-0.0988982,0.156499}
,
{1.06611,-1.34328,0.742428,-1.09177,1.17157,-1.15}
,
{-0.108655,-0.164733,0.0551449,0.210899,0.166944,-0.0145089}
,
{0.186583,0.0907369,-0.113497,0.211319,-0.180949,-0.108154}
,
{0.142798,0.0755044,0.128577,0.089858,-0.0902006,0.126045}
,
{-0.112153,-0.0636728,-0.107534,-0.0497066,0.0461479,-0.204516}
,
{0.116189,0.0466366,-0.0405097,0.140077,0.00442809,-0.201781}
,
{0.27695,-0.0229204,0.0680571,-0.172353,0.0481307,-0.20037}
,
{0.155615,-0.188145,0.263708,0.112346,0.0113404,-0.043055}
,
{0.311907,-0.306107,0.0595575,0.0260795,0.055733,-0.207321}
,
{-0.148888,-0.0702921,0.228566,-0.123279,0.0325057,0.00794322}
,
{0.221579,-0.0927742,0.337575,-0.361283,0.451341,-0.243429}
,
{-0.108152,-0.0155089,0.0556522,0.00646329,-0.083246,0.0700362}
,
{0.0190788,-0.0798417,0.129698,-0.0322662,-0.0229087,-0.206814}
,
{0.185634,0.106369,-0.0642334,0.240259,-0.0129864,0.0869322}
,
{0.224335,0.0701254,0.07444,0.179517,-0.139404,-0.104288}
,
{-0.136162,-0.070149,-0.113218,0.0049152,0.120715,-0.110787}
,
{-0.107639,-0.000423369,-0.00937091,-0.0886103,0.0205691,0.00397221}
,
{0.11345,-0.00550101,0.0856974,0.0978994,-0.00378198,0.122917}
,
{-0.125744,0.137907,0.105396,-0.0733214,0.125609,0.0393438}
,
{0.0602389,0.0404557,-0.0151594,0.038934,0.0411932,-0.0214409}
,
{0.16048,-0.0853756,-0.0372782,0.136083,-0.0643351,0.0540254}
,
{0.11421,-0.171805,-0.0671306,0.115297,-0.00371202,0.215069}
,
{0.0194681,-0.00627827,0.196122,0.0307987,-0.0410913,0.122303}
,
{0.0919722,0.0730374,0.141796,0.0791511,0.0605503,0.132799}
,
{-0.0175872,0.0955435,0.151367,-0.0274626,0.0657372,0.16136}
,
{0.0147062,0.213718,0.158109,-0.00211369,0.0911042,-0.142378}
,
{0.0226996,-0.172979,-0.165114,0.0459589,-0.0673576,0.00128572}
,
{-0.150592,0.110147,0.199885,-0.132306,0.0583643,0.181749}
,
{-0.114414,0.0340426,-0.136118,-0.0713764,0.0923232,0.00883861}
,
{-0.0951809,-0.0810261,-0.0128856,-0.0535619,-0.0622934,0.014175}
,
{-0.133462,-0.087841,-0.14039,-0.0940878,-0.093559,-0.236818}
,
{0.0114963,0.0141498,-0.0169557,-0.00892138,0.0144306,-0.0342897}
,
{-0.0454103,-0.0694892,-0.124427,-0.0361803,0.00116328,0.0232173}
,
{0.0893778,-0.0341067,-0.0274459,0.0149142,-0.0437731,-0.0682806}
,
{-0.0165723,-0.0319245,-0.164488,-0.0217698,-0.0303153,-0.174672}
,
{-0.110258,-0.0852556,-0.169824,-0.0608515,0.0358985,0.0260215}
,
{0.0992184,-0.225321,0.17643,-0.233578,0.0140342,0.156371}
,
{-0.0459149,-0.109986,0.0648475,0.0102461,0.129752,0.0636151}
,
{-0.0203564,-0.163249,-0.0413852,-0.130827,0.126639,-0.0020844}
,
{-0.138071,-0.0835362,0.192253,0.0495253,-0.127563,0.249343}
,
{0.117076,0.0613794,-0.075736,0.0699585,-0.224061,-0.310728}
,
{0.146396,-0.0248424,0.167549,-0.102528,-0.261385,0.175364}
,
{-0.0913415,0.0745505,0.11699,0.00750452,-0.0661417,0.101065}
,
{0.0221282,0.278066,-0.0597401,0.0888123,-0.0541724,0.046684}
,
{-0.143073,0.356882,0.051477,0.161001,-0.298225,0.0893064}
,
{-0.0552625,-0.130667,-0.0256726,0.159019,-0.139215,0.0606353}
,
{-0.013974,-0.019998,-0.0273253,-0.190069,-0.102732,0.351574}
,
{0.0291696,-0.0151233,-0.0218934,0.0603755,0.0626069,-0.101479}
,
{-0.259405,0.115713,0.023193,-0.133488,0.0929202,-0.0213658}
,
{0.458214,-0.285886,0.667653,-0.486085,0.192313,0.0303812}
,
{0.0422187,-0.163936,0.0207286,-0.038622,0.14761,-0.304848}
,
{0.17623,0.316387,-0.387893,-0.0675679,0.00339736,0.234096}
,
{0.157272,0.149042,-0.0575497,0.149755,0.0669441,0.0789057}
,
{-0.103018,-0.153633,-0.1923,-0.16427,0.0949814,-0.203333}
,
{0.138444,-0.120752,0.33274,-0.089082,-0.0145457,0.155559}
,
{0.0933723,0.106022,-0.325211,0.085289,0.0296218,0.282023}
,
{0.295827,0.226173,0.0706904,0.0208203,-0.096041,-0.156313}
,
{0.011424,-0.0162992,-0.319593,0.0053566,0.0959627,-0.361723}
,
{-0.0680789,-0.352169,-0.0435432,0.117617,0.0717708,-0.313885}
,
{-0.0628491,0.169901,-0.141921,-0.0417646,-0.0152893,-0.0463397}
,
{-0.353144,0.0919473,-0.0207708,0.216134,-0.261314,-0.490518}
 };
  static const float bias2[1] = { 0.313659 };
  static const float weights2[][1] = { {-0.117688}
,
{0.0933447}
,
{-0.040362}
,
{0.149835}
,
{-0.11042}
,
{0.0287691}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_2_0(v, index);
}
static int assign_gen_lepton_prior_0_2_0() {
  global_gen_lepton_prior.at(0,2,0) = &specialized_gen_lepton_prior_0_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_2_0 = assign_gen_lepton_prior_0_2_0();

template<typename T> float gen_lepton_prior_0_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.241351,0.10775,0.0440149,-0.239328,-0.236829,-0.213497 };
  static const float weights1[][6] = { {0.342597,0.503243,0.313346,-0.0213623,-0.116527,0.0243426}
,
{0.093591,0.610756,-0.530134,-0.155943,0.233861,-0.132306}
,
{-0.115058,-0.0727354,-0.0850453,-0.0675959,-0.142369,-0.158888}
,
{0.0868464,0.318367,0.481017,-0.0865679,0.214159,-0.312201}
,
{0.427586,-0.0519766,0.0425605,-0.037785,-0.155872,-0.0304579}
,
{0.500302,0.0002839,-0.0501215,-0.190353,-0.311804,-0.295493}
,
{0.352855,0.22745,-0.0249265,-0.327263,-0.538846,0.0675035}
,
{-0.15326,-0.119974,0.0076786,-0.182827,0.0310204,0.0994028}
,
{-0.0563896,0.102227,0.201488,-0.0981063,-0.0547561,0.0289735}
,
{0.0296425,0.0277928,0.130547,0.00998174,-0.0103209,0.025192}
,
{0.156389,0.116258,0.129892,0.0728565,-0.160119,0.0100298}
,
{0.0295789,0.0157812,0.224637,0.130045,-0.158355,0.0547821}
,
{0.139374,0.0609074,0.1341,-0.0812173,-0.111991,-0.0973437}
,
{-0.042282,0.011974,0.127424,0.247058,-0.0892678,0.0687666}
,
{-0.0547775,-0.0317691,-0.09601,-0.023537,-0.170903,0.0617832}
,
{0.179981,-0.0627372,-0.0609661,-0.127777,0.0892402,0.104056}
,
{0.13662,0.1131,0.121519,-0.0938112,0.148904,-0.0845591}
,
{0.122795,-0.103555,0.149847,0.0409737,-0.218738,-0.09118}
,
{2.53936,0.869963,1.29337,-2.0166,-1.9452,1.16626}
,
{0.1419,-0.0832954,0.019797,-0.0309336,-0.189638,-0.105832}
,
{-0.00857762,-0.210932,-0.379725,0.143903,0.156158,-0.0758953}
,
{-0.0693445,-0.131818,-0.279076,-0.0871542,-0.00613722,-0.132344}
,
{-0.173699,-0.114445,0.0455216,0.0908554,0.0250266,-0.0068439}
,
{0.0656375,-0.052713,0.0940391,0.0418626,0.229715,0.0394077}
,
{0.208079,0.0754104,0.0695156,-0.0719695,-0.0323341,0.109161}
,
{0.147397,0.152579,0.222885,0.096589,0.0607088,-0.184671}
,
{0.218616,0.0801002,-0.124556,0.0597763,-0.122118,0.192856}
,
{0.239627,0.0454171,0.120171,-0.114183,0.163684,0.220398}
,
{0.144502,0.1837,0.185044,-0.169283,0.0766365,0.239822}
,
{0.113371,-0.11046,-0.130071,-0.012021,-0.0518055,0.0387016}
,
{-0.0789108,-0.0910563,-0.11002,-0.000922246,0.0694908,-0.0128676}
,
{0.067321,0.0566881,-0.0158204,-0.117418,0.121607,0.171547}
,
{-0.00190827,-0.117487,0.0527302,0.100565,-0.0841726,-0.00499959}
,
{0.113454,0.0698775,0.122334,-0.0488496,-0.0577561,0.0398985}
,
{0.0427275,-0.0035838,-0.0589185,0.153831,0.00166457,-0.0121919}
,
{-0.0083601,0.00235064,-0.0323574,0.0202483,-0.0281226,0.0265753}
,
{-0.021148,-0.0928002,0.155711,0.00792372,-0.0675962,-0.0651121}
,
{0.0442025,0.0406613,-0.0156261,0.108948,0.0255516,0.0652973}
,
{-0.0150975,-0.0016894,-0.0719784,-0.0509217,-0.00245891,0.0980424}
,
{0.0300949,-0.0328498,0.0544505,0.0101907,0.0390526,0.01216}
,
{0.0299884,-0.00878747,-0.0173559,0.143173,0.013292,-0.0830377}
,
{0.00634724,0.0762857,-0.104221,-0.0102724,0.0717207,-0.163539}
,
{0.0233179,0.0048672,0.000487321,0.00885763,0.043187,0.0156168}
,
{0.0398961,0.138448,-0.161978,0.0744082,0.0421047,0.108105}
,
{0.0101512,-0.110937,-0.0879956,0.123095,-0.00936388,0.0383521}
,
{-0.0326528,0.00697399,-0.0177853,-0.0683156,-0.0460228,-0.0448756}
,
{0.018873,0.0597906,0.185075,0.0215886,0.0640613,0.146833}
,
{0.044595,-0.0642332,0.102083,-0.134941,0.106645,-0.051801}
,
{-0.000649391,0.0353514,-0.0330351,0.0595678,0.00456576,0.136355}
,
{0.0543368,0.0556007,0.0370653,-0.0777353,0.0736778,0.0408124}
,
{0.0116953,-0.0331545,0.0277353,-0.0813377,0.0439268,0.136503}
,
{-0.0146095,0.0296779,-0.0545357,-0.0646587,0.0143707,0.0799259}
,
{-0.0127944,0.00995341,-0.0815307,-0.0452639,-0.0114851,0.036878}
,
{-0.0252795,-0.0413792,-0.0700855,0.0280421,-0.00703383,0.0457906}
,
{0.034305,-0.0203898,-0.0625043,-0.101613,-0.0423052,0.0162764}
,
{-0.20659,0.0119373,-0.0221468,-0.0513524,-0.0131269,0.165681}
,
{0.123696,0.0589166,0.0248634,0.0582312,0.0454483,-0.082118}
,
{-0.0618918,-0.00564839,0.00750898,0.146044,0.106294,0.236652}
,
{0.145157,-0.0499981,0.0562469,0.07484,-0.0674114,0.0522643}
,
{0.0948912,-0.0254406,-0.169901,0.188846,-0.165797,-0.222987}
,
{0.164283,0.0218628,-0.202235,0.128934,-0.139092,0.0224692}
,
{0.00560616,0.062016,0.110964,0.228152,0.0860077,0.185608}
,
{0.191083,-0.0625281,-0.0144784,0.00255783,-0.101193,0.093416}
,
{0.0179187,-0.0870264,-0.191929,-0.080913,-0.119573,0.225509}
,
{0.11153,0.133135,-0.104727,0.04625,0.0103974,-0.024418}
,
{0.26119,-0.132245,-0.0949022,-0.0241299,-0.160506,-0.0754651}
,
{0.0932425,0.116881,-0.0880192,0.0888884,-0.0370898,-0.0834186}
,
{-0.0111848,0.0617986,0.0140034,0.0894052,0.101379,-0.0426321}
,
{0.0421698,-0.102833,-0.0814842,-0.124646,0.0510489,0.0261246}
,
{0.0447383,-0.110846,-0.0308033,0.0133465,-0.0898193,0.1183}
,
{0.0955832,-0.066181,-0.055944,0.0964126,0.0268911,-0.0970723}
,
{-0.108845,0.0355949,0.144513,0.0588818,0.0705155,-0.100992}
,
{0.105813,-0.149022,-0.164588,0.118408,0.00965564,-0.0129288}
,
{0.185377,-0.133669,0.144822,-0.019916,0.122404,-0.140041}
,
{-0.0242775,0.0182171,0.0212326,0.132496,-0.0757734,0.232556}
,
{-0.104152,-0.0811127,0.0307057,-0.111919,0.0023639,0.118122}
,
{0.051558,-0.108296,0.020475,-0.0492426,0.147931,0.169705}
,
{0.139567,-0.0592873,0.00747461,-0.0491438,-0.0889547,0.229456}
,
{-0.107724,-0.0178939,-0.035945,-0.00693498,0.18627,0.219975}
 };
  static const float bias2[1] = { 0.413189 };
  static const float weights2[][1] = { {-0.219928}
,
{-0.24011}
,
{-0.144606}
,
{0.0886958}
,
{0.149192}
,
{-0.0307266}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_3_0(v, index);
}
static int assign_gen_lepton_prior_0_3_0() {
  global_gen_lepton_prior.at(0,3,0) = &specialized_gen_lepton_prior_0_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_3_0 = assign_gen_lepton_prior_0_3_0();

template<typename T> float gen_lepton_prior_0_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.546842,-0.337182,0.0666216,-0.645091,0.126479,-0.238889 };
  static const float weights1[][6] = { {-0.310626,-0.123278,0.108494,-0.417304,-0.021175,-0.0847932}
,
{0.221972,0.379279,0.0135153,0.0102976,0.0637538,0.373756}
,
{-0.322852,-0.223105,0.0253207,-0.804268,-0.405322,-0.13269}
,
{0.230118,0.787833,0.567347,0.587497,-0.0452716,0.263952}
,
{-0.39661,-0.151844,0.132827,-0.448217,-0.124073,-0.224855}
,
{-0.773324,-0.638057,-0.034952,-0.942501,0.221393,-0.485649}
,
{-0.909433,-0.690858,-0.16193,-1.08463,0.105071,-0.432293}
,
{0.0437454,0.122081,-0.0069647,0.0234611,0.110543,-0.195775}
,
{0.0383329,-0.0647973,0.0598523,0.0781034,0.225709,-0.171883}
,
{-0.048982,0.103717,-0.194034,0.137214,0.00528766,0.126946}
,
{0.0869695,-0.0494613,-0.0186506,0.14138,-0.0671992,-0.0657486}
,
{0.0621347,-0.115171,0.0598033,0.0272394,-0.0825085,-0.18412}
,
{-0.0630271,-0.218121,-0.0342711,-0.0352603,-0.0057551,0.0228335}
,
{-0.0880891,0.0537828,-0.0070435,0.0865382,0.0392582,-0.110855}
,
{0.123842,-0.0835583,0.0109353,-0.135234,-0.0118312,-0.0545071}
,
{-0.0689918,-0.0493682,0.156423,-0.0668836,0.00413018,0.003482}
,
{-0.0325678,0.0258751,-0.0606588,0.041659,0.0517207,-0.121793}
,
{0.072969,-0.0224091,0.126298,-0.0605017,0.145444,-0.211423}
,
{-0.826322,-1.37418,0.744659,-1.26178,1.36049,-1.10228}
,
{0.100632,-0.0423411,-0.00737979,-0.217578,-0.0741203,-0.0707338}
,
{0.180755,0.492814,-0.182212,0.354449,0.00119985,-0.0297873}
,
{0.00522924,0.0106647,-0.116536,0.166355,0.048547,-0.102855}
,
{-0.207635,-0.135628,-0.0212735,-0.138957,-0.0177491,-0.105017}
,
{0.0292113,0.187291,-0.0567885,0.120348,-0.354494,-0.0348462}
,
{-0.269061,-0.305044,0.110428,-0.197006,0.182092,-0.110417}
,
{-0.145988,-0.197158,0.0858902,-0.280634,0.0357974,0.0573962}
,
{-0.133973,-0.118782,0.109969,-0.148218,-0.121898,0.125449}
,
{-0.151496,-0.0265062,0.0912818,-0.102996,0.106987,-0.112413}
,
{-0.159883,0.0886138,0.0716656,-0.341113,0.105077,0.147147}
,
{-0.0827907,0.195651,0.166118,-0.0228025,-0.00295363,-0.0512127}
,
{-0.0978448,-0.140006,0.00830215,-0.121201,0.147967,-0.00678227}
,
{-0.231565,0.245248,-0.0129065,-0.0237317,0.080747,-0.0554012}
,
{-0.0270675,0.0682104,-0.248968,0.0770044,0.200115,-0.187609}
,
{0.116988,0.0652582,-0.0884274,0.151783,0.217871,-0.0378577}
,
{-0.0677606,0.185034,-0.0596302,-0.0502352,0.0164926,-0.314528}
,
{0.167844,-0.0681143,0.0720469,-0.0496271,-0.0842529,0.0342137}
,
{-0.0370212,0.130509,0.278449,-0.034176,0.0947966,0.0975039}
,
{0.0425718,0.00408537,0.110907,-0.0248009,-0.00463814,0.0274789}
,
{0.134863,0.120195,0.0134605,-0.167518,0.0485148,0.0825115}
,
{0.131526,-0.0161966,-0.0719503,-0.0541622,0.0744866,0.016501}
,
{-0.0666062,0.109355,-0.0287019,-0.0277632,0.109776,0.0347706}
,
{0.189881,0.0414971,-0.11089,0.0650629,0.247456,-0.1125}
,
{-0.15182,0.0140178,-0.0333015,0.0823039,0.12363,0.0692142}
,
{-0.182455,0.265661,0.0979836,-0.184738,0.206702,0.388971}
,
{-0.000536246,-0.0587568,-0.172443,-0.011718,-0.0075512,-0.0542626}
,
{0.0399944,-0.055841,0.0574772,0.0175092,-0.0550293,-0.041391}
,
{0.116509,0.100082,0.230448,-0.0789589,0.0686785,0.054169}
,
{-0.0187373,-0.0105635,-0.0531059,0.0666104,0.157882,0.0782908}
,
{0.0223533,-0.0674124,-0.0423558,-0.025709,0.106105,0.273994}
,
{-0.0313831,-0.084063,0.0780012,0.0312796,-0.101188,0.066398}
,
{0.0288815,0.0674694,0.120935,-0.0417879,0.0058758,0.0662397}
,
{0.0241793,-0.0290343,-0.0723365,-0.0306052,0.0137074,0.219847}
,
{0.0619445,-0.0784099,-0.139119,-0.0358555,-0.198521,-0.134108}
,
{0.00692299,0.145755,-0.0578762,-0.0421065,-0.116418,-0.0446992}
,
{0.0190411,-0.254147,-0.0311756,-0.041686,-0.00540707,-0.0134633}
,
{-0.0102674,-0.0818907,0.0554962,0.033885,-0.185811,-0.0719078}
,
{-0.0405959,-0.00140054,0.209103,-0.142995,-0.199701,-0.16229}
,
{-0.0792852,-0.0994124,0.186461,0.0380247,-0.0987543,-0.222076}
,
{0.0898834,-0.217697,-0.123711,0.118082,-0.0954735,0.0335686}
,
{-0.0726005,-0.053819,-0.226281,0.00168332,0.0653042,0.0216914}
,
{-0.00789311,0.0563769,-0.218586,-0.0577547,-0.234212,0.0268002}
,
{0.0529718,-0.054068,0.0937129,0.128808,-0.0918399,-0.112967}
,
{-0.12714,-0.105371,0.0841074,0.217695,0.14575,-0.171396}
,
{0.0198634,-0.0584681,0.0672651,-0.0153992,-0.0168247,-0.0282012}
,
{0.0726944,-0.0366139,0.0230547,-0.0561181,-0.0597906,0.159495}
,
{0.0330477,0.0475819,0.180956,0.0381635,-0.0303843,0.000665743}
,
{-0.108416,0.0346741,0.0825556,-0.204185,0.0880985,-0.161918}
,
{-0.326541,-0.233049,0.116733,-0.162544,-0.138238,-0.0665108}
,
{-0.197019,-0.0179317,-0.0683831,-0.0488893,-0.0274365,0.0190629}
,
{-0.0655085,0.106893,-0.0906478,-0.0149139,-0.126406,0.026254}
,
{-0.0358649,-0.0444967,-0.170544,-0.0405573,0.18421,-0.0103428}
,
{-0.0960306,-0.0333678,-0.0724465,-0.175067,0.131326,0.0717814}
,
{0.110794,0.0843527,0.0797091,-0.148964,0.0360073,0.00522887}
,
{0.044823,0.0178742,-0.114724,0.0420722,0.145472,0.0223858}
,
{0.0674736,-0.164471,0.0637239,0.1672,0.092833,0.182536}
,
{-0.0143878,-0.160631,0.0910184,0.139983,0.127015,-0.0350616}
,
{0.199095,-0.0608749,-0.171511,0.147518,0.121431,0.182821}
,
{-0.034946,0.074013,-0.138171,-0.0608169,0.114963,0.0863556}
,
{-0.1937,-0.131077,0.00560507,0.057365,0.137922,0.0954773}
 };
  static const float bias2[1] = { -0.299305 };
  static const float weights2[][1] = { {0.0451461}
,
{0.0346268}
,
{-0.0331377}
,
{0.0449786}
,
{-0.0326863}
,
{0.0270802}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_4_0(v, index);
}
static int assign_gen_lepton_prior_0_4_0() {
  global_gen_lepton_prior.at(0,4,0) = &specialized_gen_lepton_prior_0_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_4_0 = assign_gen_lepton_prior_0_4_0();

template<typename T> float gen_lepton_prior_0_5_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.015922,0.0236122,0.0228918,0.0167668,-0.0278711,-0.0298658 };
  static const float weights1[][6] = { {-0.0219531,0.0235045,-0.113562,-0.0304824,0.0949992,-0.0104409}
,
{0.185182,0.0647509,0.0979843,0.116055,-0.0668794,-0.0303024}
,
{0.139821,-0.0878479,0.232799,-0.125594,0.122277,0.046323}
,
{-0.0299835,0.119911,0.0406375,0.0843104,-0.0713083,-0.0390505}
,
{-0.118853,-0.0808248,-0.127753,0.221967,0.195121,-0.0260173}
,
{0.140547,0.0165525,-0.122734,0.104378,-0.14633,-0.15288}
,
{-0.136637,-0.122812,-0.0521862,-0.158013,0.0110166,-0.219191}
,
{-0.135611,0.105386,0.00204294,-0.173984,-0.220249,-0.12822}
,
{-0.1749,-0.0857723,-0.0692858,-0.00378837,-0.111809,-0.178482}
,
{-0.206699,-0.0963473,-0.00353662,0.0694136,-0.0844992,0.115374}
,
{0.164754,0.152534,0.0320554,-0.0270074,-0.112804,0.00497057}
,
{-0.174525,-0.143438,-0.0475211,0.161534,-0.12927,0.0306667}
,
{-0.0294579,-0.134954,-0.112279,-0.0675799,-0.140498,-0.134408}
,
{0.137039,-0.00865228,0.0167582,0.103276,-0.0123525,-0.1177}
,
{0.244828,0.122103,0.173946,0.0704046,0.0292304,-0.00278396}
,
{0.0145156,0.0404555,0.00154395,0.210206,0.13021,0.0834962}
,
{0.0834121,0.131983,-0.0363077,-0.127083,-0.03944,0.142099}
,
{0.082616,0.233514,0.134573,0.00838808,-0.067298,-0.185256}
,
{0.215431,0.194963,-0.236506,0.00603737,0.109133,0.0570564}
,
{0.0124413,0.0716165,0.0653115,0.0399783,0.0307764,0.0920357}
,
{0.00403486,0.137565,-0.11935,0.137453,0.0585993,-0.224831}
,
{0.114651,0.00160996,0.0135687,-0.218376,-0.0963118,0.18762}
,
{-0.0510055,-0.0704884,-0.233438,0.094895,0.151513,-0.0134492}
,
{0.0220326,0.104343,-0.205436,0.0143585,0.0238628,-0.0980114}
,
{0.0852197,-0.0931848,0.0939044,-0.150533,-0.25426,-0.0350356}
,
{0.0546733,0.167319,-0.197848,-0.0749474,-0.0296573,0.0519532}
,
{-0.054981,0.0606356,-0.106217,-0.0760548,0.130981,-0.10027}
,
{-0.0877446,0.165165,-0.180596,-0.0206048,-0.17502,0.074621}
,
{0.0649844,0.246833,0.21055,-0.150268,0.168433,-0.26277}
,
{0.0183051,0.136128,-0.00426076,-0.0206879,-0.028381,-0.00764652}
,
{-0.226179,-0.0145438,-0.0221166,0.0945088,0.0773543,-0.200479}
,
{0.00593517,-0.0598689,0.24028,-0.129789,-0.0144426,-0.244795}
,
{-0.152088,-0.160226,0.102351,-0.115732,-0.119957,0.201973}
,
{0.0151821,0.0885398,0.123688,0.0815653,0.0607511,-0.172789}
,
{0.152298,0.0371621,-0.163198,-0.131958,0.00287121,-0.167464}
,
{0.155732,-0.165206,0.148886,0.0216463,0.0102076,-0.0234814}
,
{0.115416,0.134592,-0.203668,0.0992183,-0.150333,-0.0605411}
,
{-0.0525319,0.134976,-0.011882,-0.155165,-0.175439,0.0334093}
,
{-0.0724289,0.117131,-0.215713,0.0280414,-0.183536,-0.184277}
,
{0.0746616,0.129673,-0.087866,0.0881597,0.0459325,0.190141}
,
{0.0634607,-0.00819942,0.00394912,0.160312,-0.147317,0.0563232}
,
{0.124988,-0.134264,0.018156,-0.0495944,-0.134385,-0.0793627}
,
{0.039782,-0.219996,-0.00762067,0.0771744,-0.0260308,-0.153285}
,
{-0.104919,0.145719,-0.00968424,0.164945,0.0978345,0.196251}
,
{-0.0105037,0.0722475,0.212258,0.0113205,-0.00783379,-0.0568878}
,
{-0.06506,0.0601819,-0.118209,0.0897934,-0.0882269,0.0856749}
,
{-0.111542,-0.0563205,-0.0769851,-0.132116,-0.156162,-0.163318}
,
{0.0411987,-0.015192,0.121961,0.0797002,0.0783281,0.165758}
,
{-0.0657555,-0.050652,-0.100626,0.0236803,0.185478,-0.114428}
,
{-0.00406943,-0.105761,0.14244,-0.109268,-0.125381,-0.00294574}
,
{0.000706018,-0.048405,-0.0198845,0.0319369,0.136153,-0.192349}
,
{-0.10903,-0.202678,-0.130532,0.139775,0.0932978,-0.0594415}
,
{-0.0402476,0.23662,-0.175194,-0.114439,0.0856268,-0.0700733}
,
{-0.10253,-0.0378057,-0.00823654,0.0380717,-0.0320989,-0.0917961}
,
{0.0783903,0.0648815,0.165,0.106619,0.22839,-0.0202806}
,
{-0.0587387,0.154903,0.0330908,0.0109469,0.0551326,-0.145733}
,
{0.234893,0.101117,-0.161716,0.195801,-0.101883,-0.0738667}
,
{-0.0188474,0.100531,-0.0553145,0.105485,-0.0417045,0.16274}
,
{0.0475842,0.0526694,0.0706178,0.0466704,-0.00243779,-0.0438972}
,
{0.131214,-0.124564,-0.138347,0.0622825,-0.00122959,-0.00824937}
,
{0.0204454,0.030754,-0.0702538,-0.132874,-0.192321,0.167389}
,
{-0.0743361,0.172493,0.0778272,-0.0665334,0.00452438,0.24053}
,
{0.00392538,0.10875,0.0210434,-0.140899,0.122845,-0.015754}
,
{0.207128,-0.028694,-0.00526335,0.173997,0.00412985,0.104808}
,
{0.00952289,0.129694,-0.188962,-0.248076,0.0299626,-0.0476732}
,
{-0.195629,0.0319466,-0.116296,0.0607655,0.0817237,0.0116739}
,
{0.0517116,0.20383,0.0878132,0.19158,0.0935888,-0.0989225}
,
{-0.102848,0.00344912,0.0976107,-0.113464,-0.165804,-0.179645}
,
{0.101107,-0.0544308,0.109897,-0.00182292,-0.0593661,0.0270472}
,
{-0.0513171,-0.0846934,-0.0482213,0.0911812,-0.0110076,-0.031025}
,
{-0.216876,0.0818171,-0.150194,0.0822775,-0.0206243,-0.101514}
,
{-0.150487,-0.0365004,0.0897965,0.118873,0.162136,0.0492686}
,
{0.0252114,-0.17297,0.0640526,-0.162122,0.167212,-0.100733}
,
{0.115947,0.244158,0.0586688,0.161811,0.157348,0.0910994}
,
{0.0455777,-0.128842,-0.0757912,0.232679,0.165599,-0.0532737}
,
{0.101719,0.066434,0.0301486,-0.120814,0.153268,-0.0420512}
,
{0.173587,-0.0208694,-0.060197,0.0359346,0.0665146,0.0442429}
,
{0.0572609,0.0108649,-0.0219045,0.212466,0.0988382,-0.0840032}
,
{0.123122,0.189492,-0.0848357,-0.0209914,-0.0895569,0.0139661}
 };
  static const float bias2[1] = { -0.0372247 };
  static const float weights2[][1] = { {-0.0215391}
,
{-0.143889}
,
{-0.240277}
,
{-0.0185947}
,
{0.00203027}
,
{0.0210182}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_5_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_5_0(v, index);
}
static int assign_gen_lepton_prior_0_5_0() {
  global_gen_lepton_prior.at(0,5,0) = &specialized_gen_lepton_prior_0_5_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_5_0 = assign_gen_lepton_prior_0_5_0();

template<typename T> float gen_lepton_prior_1_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.078656,-0.0561933,-0.0363038,-0.00964303,-0.048183,-0.0107692 };
  static const float weights1[][6] = { {0.193443,0.337189,0.050102,-0.0223218,0.206845,0.144274}
,
{-0.0608919,-0.0281259,0.0954829,0.0754759,-0.0103675,-0.40755}
,
{0.209717,-0.0805172,0.134532,0.0164613,-0.0822264,0.010425}
,
{0.0572195,0.0113322,0.122249,0.205015,-0.114994,-0.22888}
,
{0.095388,0.071811,-0.15172,0.00819496,-0.177618,0.0940153}
,
{0.128958,-0.0250078,0.0307257,-0.222549,0.185733,-0.0846253}
,
{0.166222,-0.117301,0.0854533,-0.13106,0.0843785,0.158481}
,
{0.122187,-0.0200006,-0.347017,-0.0943467,-0.19003,0.167949}
,
{0.0404438,-0.286977,-0.110811,0.0693576,-0.0738991,0.0571162}
,
{0.0737652,0.154044,-0.0180284,-0.124701,-0.0384551,0.169052}
,
{-0.108978,-0.171944,-0.0277514,-0.0496772,0.215323,0.202223}
,
{0.101904,0.181857,-0.0335142,-0.102319,0.15254,0.0544282}
,
{0.0237548,-0.119009,0.0548916,-0.139733,-0.00250525,0.162056}
,
{0.043696,0.116457,-0.0820334,0.0618658,-0.141822,0.155019}
,
{0.0347842,-0.114271,0.167153,-0.07845,0.0881522,-0.0234767}
,
{0.178283,0.0697731,-0.0899125,-0.0586053,0.0660521,-0.0236629}
,
{0.237364,0.403508,-0.0365451,-0.367395,0.136251,0.199046}
,
{0.130278,-0.013929,0.180539,-0.0426434,0.00967094,-0.0516909}
,
{0.0162216,-0.562868,-0.0595796,-0.0748194,0.0472011,-0.317786}
,
{0.153626,0.146969,0.0037813,-0.07326,-0.111751,0.24463}
,
{0.299247,-0.167814,-0.163727,0.107845,-0.295991,-0.0329307}
,
{0.251511,-0.0542482,0.0420042,-0.0120242,-0.0831214,0.120917}
,
{0.0983254,0.00932294,0.152216,0.0224557,0.0728914,-0.235177}
,
{0.03635,-0.205236,0.00706711,-0.121742,-0.103691,-0.0985887}
,
{0.0528194,-0.0224885,0.0822145,0.0182647,-0.117098,0.0367069}
,
{-0.00881678,0.201751,-0.440173,0.0566857,0.217999,-0.139005}
,
{0.0774401,0.100599,-0.141636,0.101935,-0.218403,0.0439244}
,
{-0.158721,-0.0784758,0.0807808,0.185111,-0.170607,0.176834}
,
{-0.230356,0.279079,-0.597266,0.397394,-0.0680015,0.379179}
,
{0.121864,-0.0331206,-0.00729913,-0.0123992,0.0290583,0.0196179}
,
{0.0688313,-0.183602,0.0483004,0.0231966,-0.206483,0.0612731}
,
{-0.0773703,-0.159156,0.203928,-0.0554247,0.209892,-0.088719}
,
{-0.159492,0.0615114,0.0421498,0.0923138,0.0215341,0.169615}
,
{-0.00648409,-0.0831594,-0.0560321,0.134347,-0.0563586,0.0914275}
,
{-0.118602,0.112756,-0.0254475,0.227686,-0.00808329,0.257844}
,
{0.0796433,0.19259,0.00527215,0.124211,-0.180923,0.0827188}
,
{0.424857,-0.00136198,-0.113618,0.040481,-0.245153,-0.173091}
,
{0.0430316,0.14007,0.11112,-0.0407461,-0.0806738,0.100124}
,
{0.131854,0.29473,-0.091892,-0.198245,-0.0476302,-0.156982}
,
{-0.0341595,-0.435061,0.0597708,-0.13165,-0.269318,0.114871}
,
{0.118923,-0.103935,0.0742933,-0.0790531,0.0538298,-0.0888098}
,
{-0.182177,0.0683893,-0.174775,-0.00669762,-0.0151277,0.118214}
,
{0.158762,-0.0926166,-0.116982,-0.0296681,0.0422603,-0.208142}
,
{-0.0130777,-0.0308602,0.170699,-0.012021,-0.00284978,0.121073}
,
{0.173577,0.121572,0.240628,-0.103022,0.0439786,-0.0354294}
,
{-0.110935,-0.0533209,-0.110089,0.0734761,0.104299,0.0942163}
,
{0.0866329,0.0310978,-0.0696,-0.144447,0.0559189,0.0951898}
,
{-0.20288,0.0737969,-0.0215419,0.0648509,-0.101542,0.0954355}
,
{-0.154173,-0.0530883,0.0633245,-0.0634836,-0.0758184,-0.159399}
,
{-0.0387418,0.229752,0.009447,0.128276,-0.00879697,-0.0613}
,
{0.206972,-0.209528,0.120892,-0.0738324,-0.0840849,0.0380082}
,
{0.0928578,-0.0587045,0.0511129,-0.253256,0.0411651,0.0157441}
,
{0.121609,-0.0118809,0.0582303,0.0692074,0.152073,-0.121627}
,
{0.145334,0.0957301,0.240842,0.0557579,0.0862632,0.0301034}
,
{0.0739565,0.115738,0.0841018,-0.0178236,-0.116418,0.104555}
,
{0.158537,0.0133267,0.13272,0.0211066,-0.0161694,0.0181218}
,
{-0.193079,-0.0777714,0.176565,-0.19703,0.246444,0.0135355}
,
{0.537234,0.284551,-0.413148,-0.462955,0.33074,0.196052}
,
{-0.212027,0.367306,0.144964,-0.0349017,-0.274089,0.0879008}
,
{0.170586,-0.00399837,-0.0720194,-0.180731,0.0701359,-0.115892}
,
{-0.0440396,-0.0859452,-0.069083,-0.141022,0.0231478,-0.15349}
,
{0.117296,-0.103604,-0.220051,0.1844,-0.0751376,0.0959061}
,
{-0.425384,0.201472,-0.0461674,0.339875,-0.45557,-0.346763}
,
{0.150268,0.000193034,-2.19887e-05,0.0347703,0.144259,-0.0184004}
,
{0.0627662,-0.0691151,0.10936,-0.054483,0.00775266,-0.103649}
,
{-0.10162,0.0189005,0.0451724,-0.135761,-0.10146,-0.0850309}
,
{-0.386777,0.0869594,0.112881,0.135099,0.0544038,0.038569}
,
{-0.170274,0.0156414,-0.172358,-0.0255388,-0.222432,0.134476}
,
{0.0162757,-0.0276266,-0.0928391,-0.0662735,0.0807596,-0.069309}
,
{-0.0434453,0.0237295,0.123433,0.123695,0.052927,0.0494042}
,
{0.184811,-0.00468542,-0.100919,-0.0297566,-0.0392447,-0.0744312}
,
{0.337807,-0.153722,-0.0989071,-0.0931885,0.0588302,0.0287225}
,
{-0.26056,0.10508,0.270863,-0.769949,0.123119,0.29999}
,
{0.0488574,0.120756,0.128794,0.0654088,0.000228084,0.125975}
,
{-0.151513,-0.605487,-0.102915,-0.0693451,0.150736,-0.278635}
,
{-0.0687556,0.0277834,-0.0701104,0.229297,0.286053,-0.0762212}
,
{0.193539,-0.500842,-0.907873,-0.0237435,0.0757919,0.0775714}
,
{-0.0351743,-0.128869,0.00322776,0.0732033,0.0431296,-0.0876612}
,
{-0.282918,0.0780976,-0.0896281,0.0999881,-0.593895,-0.245858}
 };
  static const float bias2[1] = { 0.080709 };
  static const float weights2[][1] = { {0.100647}
,
{0.0921097}
,
{-0.107753}
,
{-0.174981}
,
{0.124192}
,
{0.186398}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_0(v, index);
}
static int assign_gen_lepton_prior_1_0_0() {
  global_gen_lepton_prior.at(1,0,0) = &specialized_gen_lepton_prior_1_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_0 = assign_gen_lepton_prior_1_0_0();

template<typename T> float gen_lepton_prior_1_0_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.116154,-0.100091,0.0920981,0.394866,-0.0984969,-0.110287 };
  static const float weights1[][6] = { {0.149177,-0.0403615,-0.0313299,0.690839,-0.256103,0.0975528}
,
{0.0177055,-0.0841004,0.33361,0.36904,-0.12038,-0.133647}
,
{0.298232,-0.447802,0.235083,0.155633,0.00293542,-0.0720711}
,
{0.0528175,-0.225314,-0.385398,0.0623342,-0.132235,-0.118338}
,
{0.157422,0.0455829,0.094219,0.261845,-0.168847,-0.173495}
,
{0.151381,-0.0201212,-0.00407894,0.326454,-0.21383,-0.115363}
,
{-0.0304847,-0.193319,0.203537,0.250271,-0.235554,-0.161135}
,
{0.165798,0.105769,-0.319978,0.033148,0.0757899,0.0806528}
,
{0.271118,-0.0912082,-0.134144,0.00127069,0.117604,-0.168535}
,
{-0.0872892,0.104232,0.154465,-0.106375,-0.0432055,0.0700813}
,
{-0.113465,-0.090365,-0.142706,-0.190776,0.123156,-0.160306}
,
{0.0861049,0.0685406,-0.244616,0.0542987,0.0361187,0.0493235}
,
{0.161614,-0.318225,0.0163429,-0.108247,-0.240941,-0.134677}
,
{-0.00453671,-0.271043,-0.215276,-0.065586,-0.322828,-0.186503}
,
{-0.0870811,0.00356209,0.17018,-0.0414693,0.0217609,-0.0152972}
,
{0.132073,-0.0671798,-0.0466975,0.0418804,-0.117726,0.0207396}
,
{0.15068,0.0371351,-0.22483,0.434659,-0.165928,-0.355354}
,
{0.0633482,-0.29028,0.176392,0.0286317,-0.0533528,-0.135063}
,
{0.0776183,-0.508182,-0.000350825,0.139277,0.0477217,-0.0512348}
,
{-0.0981969,-0.00149204,-0.22801,0.0627638,-0.107074,-0.0204062}
,
{0.0794014,-0.132716,-0.0659482,-0.155158,-0.175064,-0.131881}
,
{-0.0395495,-0.167182,0.0267731,-0.0289198,0.0378403,-0.233564}
,
{-0.0182271,0.247434,-0.0934155,0.168374,0.14218,0.0689634}
,
{-0.070161,0.137227,0.0390844,0.0487017,0.0565882,-0.133102}
,
{-0.0557447,0.0670965,-0.0968702,-0.0180689,-0.221864,-0.00437699}
,
{0.0272882,-0.301499,-0.207387,0.00932073,0.166424,-0.0847309}
,
{0.11817,0.0217372,0.0238846,-0.242275,-0.0875975,-0.0751878}
,
{0.0240681,-0.0458112,-0.0612561,0.0637375,-0.0615217,-0.0358504}
,
{0.00325154,0.274276,0.599925,-0.0327474,0.387249,0.148645}
,
{-0.110054,-0.131963,0.0233977,-0.132075,-0.0112184,-0.0526567}
,
{-0.1278,0.00600359,-0.0344757,0.125992,-0.13942,0.0317001}
,
{-0.0252226,0.0529458,-0.0627493,-0.0410742,-0.0704465,-0.164735}
,
{-0.0497059,0.00849349,-0.0318678,0.093621,0.184605,0.0722997}
,
{0.112718,-0.126952,-0.202427,-0.0993118,-0.160384,-0.161937}
,
{0.125229,-0.236839,0.0303045,-0.00414319,-0.0742367,0.174583}
,
{-0.0294102,0.0222628,-0.0925083,-0.018476,0.0359975,0.0126734}
,
{0.0122262,0.0214918,-0.326769,-0.177457,-0.104052,-0.0386823}
,
{0.00266947,0.178998,-0.0582824,-0.142655,0.223422,0.125832}
,
{-0.30401,-0.0271946,-0.288713,0.245057,-0.566556,0.181729}
,
{-0.207422,-0.11706,-0.0549205,0.242412,-0.00902245,0.0801179}
,
{-0.0837116,0.0245915,0.00251723,-0.00629304,0.0986971,-0.0100338}
,
{0.073818,-0.301805,-0.341985,-0.125929,0.752851,0.099488}
,
{-0.11093,0.136337,0.0186196,0.0581933,-0.104252,0.100969}
,
{-0.0946785,0.177159,0.198221,0.0194245,-0.0527676,-0.0913074}
,
{0.0235602,0.0973716,0.117986,0.00804616,-0.359805,-0.0345057}
,
{0.0827209,-0.11082,0.115146,-0.0475761,0.264239,0.040368}
,
{0.321329,-0.0815363,-0.0453996,-0.153595,-0.246945,0.192942}
,
{0.189467,-0.225394,0.0423929,-0.0608656,0.179251,-0.091911}
,
{0.0142292,0.148882,0.0616028,0.0709981,-0.0169774,0.101225}
,
{0.2346,-0.195871,-0.144503,-0.0673279,-0.276289,-0.178732}
,
{0.0347493,-0.109172,-0.0631313,-0.00345357,-0.0050513,0.0316791}
,
{-0.0222968,-0.244584,-0.27628,0.145051,0.0703808,0.0110189}
,
{-0.0341957,-0.00334285,0.0587301,-0.0225503,-0.0048072,-0.0224931}
,
{-0.0147138,0.14941,0.153614,0.0611291,-0.262335,-0.154266}
,
{-0.0335463,-0.150045,-0.0376077,0.0320719,0.0137848,-0.0821307}
,
{-0.0183373,-0.0897147,-0.0624893,-0.0313846,0.0448754,-0.195726}
,
{0.107479,-0.690813,-0.301132,-0.13616,-0.549838,0.116661}
,
{-0.816055,-0.722785,0.0414909,0.206087,1.16129,0.515984}
,
{0.0355535,0.147396,-0.369011,0.066223,0.053738,-0.0236851}
,
{-0.241161,-0.0604164,-0.169572,0.17716,0.151647,-0.0146716}
,
{-0.0984334,-0.199784,0.0703972,-0.00659313,0.154089,-0.2342}
,
{-0.0519498,-0.014435,0.364681,-0.116608,0.07526,0.262917}
,
{0.446988,1.24761,-0.336956,0.246294,-0.232907,-0.484616}
,
{0.0953715,-0.0929093,0.0744485,0.0748649,0.103737,0.0837874}
,
{0.00191356,-0.219751,-0.195094,-0.188241,-0.143647,-0.281639}
,
{-0.0178763,0.0732832,0.0191124,0.0484002,-0.104133,0.0250331}
,
{-0.22694,0.392059,-0.418331,0.513252,0.618071,-0.284688}
,
{-0.309356,0.864415,-0.743122,-0.145029,0.267972,-0.290244}
,
{-0.0936598,0.39201,-0.012576,-0.109341,0.509959,0.0922298}
,
{0.102895,-0.0816283,-0.133388,-0.109848,0.0959206,-0.15455}
,
{-0.00284144,0.0460499,-0.085619,-0.036927,0.0370443,-0.010472}
,
{-0.254693,0.44224,0.139084,-0.171903,-0.345601,-0.228574}
,
{-0.0631997,-0.415038,0.00419896,-0.0119463,-0.34029,0.0903113}
,
{-0.0921217,-0.131636,0.209032,0.245891,0.303564,0.031201}
,
{-0.399864,-0.417494,0.765352,-0.0956264,0.00789877,0.533057}
,
{0.00758614,0.141539,0.0547153,-0.0807294,0.657079,0.258828}
,
{-0.140978,-0.074454,-0.071274,0.165513,0.0359308,0.0251051}
,
{0.0418017,-0.0504892,-0.0474462,0.0175605,-0.109594,0.0720944}
,
{0.0448946,0.841145,-0.0542631,0.623764,1.25757,0.612727}
 };
  static const float bias2[1] = { 0.0785879 };
  static const float weights2[][1] = { {0.149936}
,
{0.223451}
,
{-0.354926}
,
{0.158224}
,
{0.232679}
,
{-0.17579}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_1(v, index);
}
static int assign_gen_lepton_prior_1_0_1() {
  global_gen_lepton_prior.at(1,0,1) = &specialized_gen_lepton_prior_1_0_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_1 = assign_gen_lepton_prior_1_0_1();

template<typename T> float gen_lepton_prior_1_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0334582,-0.0378059,-0.0631325,-0.0136742,0.218028,0.218996 };
  static const float weights1[][6] = { {-0.042433,-0.023084,0.0287735,-0.18089,0.228632,0.131135}
,
{-0.367078,0.156656,-0.0697892,-0.200661,-0.124898,0.23597}
,
{0.0549678,-0.118735,0.014157,-0.191917,-0.261566,-0.00483986}
,
{-0.138473,0.147184,0.0726861,-0.0960659,0.34762,0.310421}
,
{-0.148186,-0.000593938,0.0552084,-0.101091,0.139081,0.0806912}
,
{-0.13838,-0.0363336,0.0134962,-0.0485019,0.0105679,0.362408}
,
{-0.0328762,-0.00845601,-0.272707,0.135574,-0.136612,0.368778}
,
{0.104086,-0.0166319,-0.13931,-0.020374,0.109608,0.147818}
,
{-0.103486,-0.280197,-0.138227,-0.154322,-0.16579,-0.113168}
,
{0.131899,0.238932,-0.208115,0.172207,-0.0225689,-0.0686113}
,
{0.0786191,0.132751,-0.0891506,-0.00632737,-0.153932,0.0563976}
,
{-0.0132645,-0.114153,-0.231192,0.0159445,-0.213057,0.0769815}
,
{-0.09578,-0.0754651,-0.0545632,-0.0957658,0.0784963,0.0325672}
,
{-0.0535321,-0.0471804,-0.249338,0.0173672,0.343931,0.144775}
,
{-0.0469508,-0.105172,-0.116013,0.044168,0.0127537,-0.125028}
,
{-0.179577,-0.0367186,0.00402917,-0.160165,0.0780502,-0.0296836}
,
{-0.0720465,-0.04899,-0.176513,0.0466505,0.146874,0.310825}
,
{-0.148569,-0.207746,0.00658028,-0.206465,-0.0197014,0.0532018}
,
{0.0341277,-0.0943093,0.0492496,-0.0552206,0.185734,0.21818}
,
{-0.0662098,-0.175552,0.00695613,-0.00112097,-0.134224,0.201036}
,
{0.082302,-0.0477095,-0.111336,-0.0433235,0.0807633,-0.0367097}
,
{-0.267889,-0.204909,0.0100502,0.0806403,-0.19179,0.0272033}
,
{-0.174479,-0.0909112,0.0553623,0.0611854,-0.165563,-0.154964}
,
{-0.183863,-0.0140604,-0.201746,-0.0349339,-0.119068,0.0337278}
,
{-0.0784385,-0.231395,-0.00564633,-0.00680332,0.263279,0.437807}
,
{-0.177842,0.0295989,-0.267434,-0.129501,0.174027,0.134123}
,
{-0.0985328,-0.210763,-0.192635,-0.0725382,0.153356,0.244109}
,
{-0.0801344,0.15461,-0.147505,-0.220538,0.180892,0.0737697}
,
{-0.0487002,0.0150572,0.0286694,-0.175782,-0.0504068,0.158792}
,
{-0.138195,0.108647,-0.120421,0.185159,-0.171333,-0.0267033}
,
{0.0457679,0.191839,0.0240824,0.164885,-0.104016,0.206528}
,
{0.094077,-0.0889673,-0.063113,-0.144505,0.0624222,-0.0139162}
,
{0.15824,0.0143356,-0.0156806,-0.0274984,0.0433737,0.0404716}
,
{-0.0401816,-0.107965,-0.0371222,-0.0446685,0.0469155,-0.180522}
,
{0.203572,0.0851177,-0.0560132,0.140166,0.0450844,-0.00312077}
,
{0.0410328,0.109374,0.00942695,0.0840104,0.244318,-0.085128}
,
{0.264389,-0.0262486,0.12162,-0.0891213,0.129413,-0.135307}
,
{-0.0266218,0.100645,-0.130311,-0.0894141,-0.0726072,0.0534373}
,
{-0.0601005,0.0780282,-0.0499556,0.220714,0.301133,-0.325888}
,
{-0.0665057,0.242684,-0.106389,-0.242616,0.136246,-0.0577875}
,
{-0.0654177,-0.181147,-0.0147975,0.205954,0.0192895,0.013606}
,
{0.214387,0.0321056,0.113007,-0.185798,-0.201392,0.361771}
,
{-0.0558737,-0.148805,-0.0236925,-0.0553892,-0.0820654,-0.00727498}
,
{0.0727497,0.116341,0.00331556,0.0749353,-0.200908,0.0223206}
,
{-0.177669,0.0556581,0.166217,-0.0593054,-0.0429157,0.00139201}
,
{-0.0501318,-0.0591747,0.017827,-0.188348,-0.0640805,0.0900794}
,
{-0.02554,0.0960475,-0.0591707,0.00562107,0.32942,0.066682}
,
{0.120287,-0.186721,-0.0238034,0.110109,0.176557,-0.0581337}
,
{0.070447,-0.122304,-0.0682745,-0.00407136,-0.0986399,-0.00472292}
,
{-0.12632,-0.0348103,0.107571,-0.0261157,-0.229842,-0.0134522}
,
{-0.037569,0.0650345,0.0338674,-0.173541,-0.221815,-0.00797995}
,
{0.138964,0.140416,-0.107437,-0.173995,0.207445,-0.033966}
,
{-0.0533151,-0.117144,-0.0747932,0.0834,-0.0222338,-0.0505585}
,
{-0.0663601,-0.122673,-0.0811736,-0.0961043,-0.0884651,-0.0623163}
,
{-0.183801,0.168421,-0.0444333,0.14003,-0.15649,-0.00660974}
,
{-0.135147,-0.0991165,-0.0965309,-0.0580749,0.0553184,0.0271015}
,
{0.121632,-0.158444,-0.00374277,0.0602391,0.0871475,0.0566843}
,
{-0.0457618,-0.0412492,-0.0780279,-0.0450464,-0.0529393,0.13699}
,
{-0.0679125,0.205739,-0.151247,-0.0185389,-0.22509,0.151052}
,
{-0.148079,-0.0454039,-0.0199053,-0.106649,-0.167107,-0.0442401}
,
{0.129934,-0.0417506,0.00436026,0.111064,-0.0720683,-0.053798}
,
{-0.0129389,0.184871,-0.269875,-0.247336,-0.0898163,0.103451}
,
{0.0344985,0.0392647,0.158624,0.12352,-0.0408022,-0.0574817}
,
{0.0267631,0.00535879,-0.0705609,-0.0234053,0.183658,0.0293414}
,
{0.0741644,-0.00480657,0.0389363,-0.209282,0.00604591,0.168699}
,
{-0.0150099,0.0713314,-0.00429375,-0.0294242,-0.032003,-0.172829}
,
{0.182744,-0.0853226,-0.018302,0.205065,-0.122741,0.0952077}
,
{0.141332,-0.167935,0.061985,0.0910404,-0.0985434,-0.127111}
,
{-0.0544719,0.0620679,0.190872,-0.084419,-0.0427813,0.00090301}
,
{0.00132939,0.0506002,0.0938908,0.176151,-0.118122,-0.226574}
,
{-0.116616,-0.173789,-0.0268019,0.121442,0.234653,-0.100068}
,
{-0.0199189,-0.0991242,0.0554724,-0.165195,-0.123175,0.0957796}
,
{0.173216,-0.12503,0.102244,-0.188321,-0.0559495,0.0814298}
,
{0.0339966,-0.072058,-0.13296,-0.1719,-0.0421699,-0.00518415}
,
{-0.00334641,-0.161062,-0.0982613,0.133677,0.172499,0.0432882}
,
{-0.119771,-0.0570508,-0.0231105,-0.353402,-0.112501,-0.162244}
,
{0.369337,-0.00655894,0.554,0.0999357,0.349474,0.485679}
,
{-0.20896,-0.245471,0.0886888,0.0647554,-0.0992101,-0.237124}
,
{0.132662,0.230566,-0.180002,-0.226534,-0.11504,0.113429}
 };
  static const float bias2[1] = { 0.145412 };
  static const float weights2[][1] = { {-0.0857876}
,
{0.0512844}
,
{-0.129527}
,
{0.0864523}
,
{0.147259}
,
{0.14711}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_2(v, index);
}
static int assign_gen_lepton_prior_1_0_2() {
  global_gen_lepton_prior.at(1,0,2) = &specialized_gen_lepton_prior_1_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_2 = assign_gen_lepton_prior_1_0_2();

template<typename T> float gen_lepton_prior_1_0_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.105733,-0.114596,-0.0567826,-0.0799803,0.182016,0.152677 };
  static const float weights1[][6] = { {-0.163582,0.11247,-0.171877,-0.105269,-0.278692,0.0202799}
,
{-0.266995,0.608273,0.0414328,0.0570302,0.110667,-0.00757848}
,
{0.343886,0.146895,-0.0559625,-0.121239,0.345977,0.172367}
,
{-0.143426,0.0744957,-0.0938617,-0.130962,0.350321,0.103428}
,
{-0.278289,-0.152627,-0.24057,-0.145098,0.137901,0.316172}
,
{-0.110044,-0.0874482,-0.0055262,0.0843992,0.191615,0.100302}
,
{0.0487872,-0.131574,0.0292402,-0.306161,0.0491848,0.22663}
,
{-0.0668482,0.0691822,-0.0362527,-0.21087,-0.0263571,-0.0328124}
,
{-0.0972612,0.0327251,-0.064347,-0.279571,0.145153,0.127134}
,
{0.131719,0.15053,-0.150355,0.195752,-0.021338,0.0937659}
,
{0.0976459,-0.0578647,-0.10591,-0.0250687,0.13223,0.240365}
,
{0.0798525,0.172601,-0.184557,-0.156916,-0.0301997,-0.0864801}
,
{-0.138783,-0.309098,-0.0680041,0.00732597,0.0200915,0.165431}
,
{0.182556,0.0414796,-0.0161855,-0.172642,-0.0222501,0.115335}
,
{-0.039195,0.0405165,-0.173975,0.160903,0.0117787,-0.00591103}
,
{0.0899203,-0.00649182,0.207076,-0.0690191,-0.163269,-0.0146381}
,
{-0.187921,0.0841078,0.0376534,-0.147594,0.580421,0.277202}
,
{-0.201297,0.0245857,-0.221115,-0.106088,0.0263,0.0293242}
,
{0.532846,0.175318,0.0718008,-0.131612,-0.192312,-0.317911}
,
{-0.0454237,-0.209466,0.136332,-0.189903,0.0979115,0.0735759}
,
{-0.184148,-0.177518,0.0833787,-0.30291,-0.128763,-0.0292786}
,
{-0.169444,-0.0720637,-0.182726,0.0193539,-0.00482367,-0.0170161}
,
{-0.117848,-0.0299286,0.0393361,0.00267007,0.125556,-0.0954022}
,
{0.0538408,-0.145345,-0.160029,-0.149866,-0.107736,0.101824}
,
{0.00082056,-0.213851,0.0303309,0.0199919,0.0400653,-0.0300349}
,
{-0.0743118,0.0747273,-0.0550664,-0.0493172,0.0238538,-0.135201}
,
{-0.277677,-0.201685,-0.0562997,-0.163289,-0.237201,-0.147107}
,
{0.290826,0.361492,-0.161289,-0.0691441,0.135991,0.113301}
,
{0.368425,-0.29415,-0.188499,-0.0440981,-0.4141,0.129434}
,
{-0.198417,-0.0722827,0.0446361,-0.0243383,0.0448265,0.0130876}
,
{0.10759,-0.19232,-0.0441075,0.0783688,0.0148472,-0.0558587}
,
{-0.20241,-0.0348592,0.160803,0.000578732,-0.052584,0.0524536}
,
{0.239657,0.0990474,0.105431,-0.00137317,-0.0544676,-0.0152836}
,
{0.0708702,-0.0379672,-0.0872465,-0.0302079,0.0868738,-0.0969645}
,
{-0.197946,0.368432,0.00947241,0.00591035,-0.0528086,0.0531868}
,
{0.0138534,-0.0583658,0.284997,-0.00982649,0.0365613,-0.0296437}
,
{0.476694,-0.110827,0.314945,-0.165167,0.0172867,0.169021}
,
{0.103792,-0.157671,0.114593,0.0663177,-0.0063155,-0.0164023}
,
{-0.29269,-0.306909,0.0288779,0.0011877,0.168008,-0.0865204}
,
{-0.194344,0.0844761,0.00916982,0.0741645,0.0340614,-0.152642}
,
{0.107001,-0.0407164,-0.175133,-0.0590788,-0.0996991,0.0445336}
,
{-0.0713564,-0.564454,-0.0891559,-0.126735,-0.444488,0.281711}
,
{0.01946,-0.158837,-0.103752,-0.110557,0.0539129,-0.0607278}
,
{0.429674,-0.0381766,0.00686641,-0.0109047,-0.130678,0.201175}
,
{-0.0939896,0.129334,0.184588,-0.134733,-0.11889,0.0760166}
,
{0.0894569,0.109866,0.0810898,-0.144298,0.125237,-0.104356}
,
{-0.545534,-0.492481,0.0820336,0.175699,-0.137864,0.198971}
,
{0.0664456,-0.103474,0.137072,0.137983,-0.106168,0.109076}
,
{-0.14704,-0.112627,-0.445864,-0.11738,0.356273,-0.149092}
,
{-0.0252487,0.03467,-0.219543,-0.116316,-0.10439,0.0975362}
,
{0.112819,-0.31587,0.143686,0.0517341,-0.0326671,0.0135428}
,
{-0.0316281,-0.153098,0.115723,0.119248,0.0176484,0.0709593}
,
{0.19494,-0.134773,-0.0514823,0.0734293,0.0306341,-0.0457399}
,
{0.120118,-0.165415,0.270043,0.189534,-0.134045,0.129277}
,
{0.0618019,0.222335,-0.110547,0.0792715,-0.135758,-0.0417237}
,
{0.223816,0.0762206,0.0342712,0.175034,-0.00877523,-0.0248782}
,
{-0.186606,0.261702,-0.122352,-0.0421288,-0.0605942,0.209374}
,
{-0.286565,0.502498,-0.106487,0.280905,-0.123739,-0.207128}
,
{-0.141482,0.0200672,-0.0859417,0.134807,0.722911,0.133417}
,
{0.095171,0.46397,0.0877353,-0.0641478,-0.013727,0.161865}
,
{0.192935,0.0849755,0.112262,0.0241973,0.119151,-0.0473186}
,
{-0.0408997,-0.536826,0.223696,0.0698118,0.0651306,-0.0199897}
,
{0.113889,-0.347515,-0.103843,-0.331057,0.950704,0.241338}
,
{-0.866514,1.13286,-0.205184,-0.0153686,-0.464562,-0.435865}
,
{-0.109903,-0.130702,-0.0294682,0.136271,-0.105204,0.163428}
,
{0.338538,0.40205,0.22316,-0.0824236,-0.263037,-0.175574}
,
{-0.249239,-0.177762,0.08325,0.0553556,-0.617949,-0.198415}
,
{-0.158459,0.248102,-0.0437363,0.118142,0.413338,-0.178107}
,
{0.532029,-1.12709,0.263524,0.0416729,-0.451774,-0.114153}
,
{0.326793,-0.0851793,0.0773706,-0.111751,-0.128561,0.0873286}
,
{-0.0240277,0.0920707,-0.165315,-0.0919422,0.247512,0.0705145}
,
{0.031763,0.182727,-0.104927,-0.0116203,-0.23079,-0.0150395}
,
{-0.149881,-0.300491,0.114463,0.0355093,0.587459,-0.135452}
,
{-0.112068,0.289928,0.00692467,-0.048248,0.160265,0.0264804}
,
{-0.524222,-0.295983,-0.259003,0.0129977,0.369075,0.149768}
,
{0.0827717,-0.239977,0.147933,-0.00177378,0.0418264,-0.378285}
,
{-0.215133,0.0191901,-0.154294,-0.064513,0.0425024,-0.23076}
,
{0.145003,0.219403,-0.0123245,-0.110601,0.161448,-0.221049}
,
{0.00688215,0.216354,0.0218121,0.0440829,0.226571,-0.051875}
 };
  static const float bias2[1] = { 0.0523236 };
  static const float weights2[][1] = { {0.311603}
,
{0.216277}
,
{0.0529378}
,
{-0.136966}
,
{0.123604}
,
{0.128404}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_3(v, index);
}
static int assign_gen_lepton_prior_1_0_3() {
  global_gen_lepton_prior.at(1,0,3) = &specialized_gen_lepton_prior_1_0_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_3 = assign_gen_lepton_prior_1_0_3();

template<typename T> float gen_lepton_prior_1_0_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0110664,0.0685144,0.156502,-0.0188754,0.00718197,0.207929 };
  static const float weights1[][6] = { {0.114657,0.0435705,0.123337,0.086527,-0.0080052,0.31939}
,
{-0.35302,-0.0541665,0.101948,0.0918833,-0.160043,-0.0461981}
,
{0.423312,-0.0369364,-0.00994746,-0.184177,-0.4126,0.207635}
,
{0.295253,0.169134,0.0978789,0.315487,0.0860348,0.602562}
,
{-0.0480749,0.167348,0.125415,0.0237807,-0.0239717,0.17637}
,
{0.14794,-0.0310704,0.320447,-0.0401763,0.0442022,-0.0775497}
,
{0.0235397,0.126727,-0.0289678,-0.063192,0.0743036,0.0697233}
,
{-0.147029,0.0317081,-0.00811331,0.078088,0.0397093,-0.0190607}
,
{-0.283594,0.152629,-0.124003,0.127062,0.103631,0.151283}
,
{-0.0185196,0.0842881,0.0456814,-0.227747,0.0956575,0.162409}
,
{-0.1735,-0.124396,-0.101678,0.203684,0.153124,-0.105886}
,
{0.0887255,0.0792501,0.155589,-0.180858,-0.165986,0.023306}
,
{0.127996,-0.0618203,0.176934,-0.0924351,0.0602584,0.0416347}
,
{-0.00487526,0.0917859,-0.185391,0.0493452,-0.24872,-0.0208361}
,
{0.219699,-0.092796,0.137369,-0.0287501,-0.158247,0.0884545}
,
{-0.165447,-0.00499558,0.096666,-0.0699545,-0.153647,-8.42357e-06}
,
{-0.0808983,-0.148047,0.109598,0.16044,-0.0349279,0.381823}
,
{0.0668472,0.173286,0.087425,0.11013,0.140964,-0.141501}
,
{0.0901584,-0.10128,0.175196,-0.0406556,-0.0283028,0.219569}
,
{-0.209493,-0.141346,0.0446677,-0.0769773,0.0669057,-0.0455174}
,
{-0.0820994,0.0806193,-0.101059,-0.169868,0.00862981,0.00447872}
,
{0.18682,0.0306766,0.0812191,-0.119439,0.0525984,0.0320999}
,
{0.135543,0.0351504,0.0419354,0.179219,-0.110948,-0.0216344}
,
{0.0730698,0.0595588,-0.0271579,0.0802916,-0.239904,-0.127548}
,
{-0.14244,-0.142145,0.10409,-0.0175999,-0.146612,0.0815886}
,
{0.0495456,-0.180314,0.0667109,0.0616096,-0.0269692,-0.058846}
,
{0.128853,0.0584378,-0.232667,0.000371726,0.00774411,0.314481}
,
{-0.105462,0.0636765,-0.0694611,-0.0453683,-0.151055,-0.11969}
,
{-0.0716891,0.379076,0.119278,-0.0445509,0.178565,-0.421665}
,
{-0.0320036,-0.0275046,0.0193344,0.0160748,-0.0459752,0.0207283}
,
{0.089117,-0.117803,0.154835,-0.00595513,0.111018,-0.0506852}
,
{0.0787546,0.0437438,-0.0939132,0.0771059,0.100934,0.0692206}
,
{-0.0637667,0.079135,-0.05883,-0.0596684,-0.0231229,0.0064959}
,
{0.0438294,-0.02163,0.0179918,0.132858,-0.00112211,0.0464109}
,
{0.146008,0.0123742,0.0631103,-0.00615279,0.04079,-0.0268505}
,
{0.0413687,0.0954735,-0.0794777,-0.0426322,-0.0263465,0.0466165}
,
{0.0350154,-0.468054,0.00633037,-0.175487,0.148763,0.316585}
,
{0.0195954,0.123221,-0.00855941,0.117357,-0.00585171,-0.067257}
,
{0.248513,0.0564058,0.0386715,0.239715,0.0604505,-0.172866}
,
{0.0952168,0.115845,0.156857,-0.29728,0.371451,-0.166367}
,
{-0.0557259,0.104221,-0.102509,-0.00688088,-0.0674896,0.0208458}
,
{0.190698,-0.12152,-0.028046,-0.0776271,0.339968,0.201136}
,
{0.0206536,0.078824,-0.122484,0.193448,0.105977,0.317423}
,
{0.208294,0.256594,0.0472612,-0.157629,0.214307,-0.379509}
,
{-0.0501034,0.0312909,-0.116829,-0.323473,0.0631151,0.103232}
,
{-0.0181492,-0.208817,0.100851,0.0931254,0.0957766,0.078746}
,
{0.159482,0.266014,0.140172,-0.104144,0.0882905,-0.46581}
,
{0.0813625,0.0377806,-0.0290606,-0.21637,-0.0357027,0.0535177}
,
{0.0912399,-0.0866908,-0.139924,-0.415538,-0.122866,-0.01628}
,
{-0.0557838,-0.0158138,0.139592,-0.183537,0.225621,-0.256855}
,
{0.128965,0.121627,-0.0242971,-0.0687031,0.0231125,-0.0654698}
,
{0.0333946,-0.196723,-0.134985,-0.442271,0.143388,0.40086}
,
{0.102948,0.10434,0.0602695,0.0755966,-0.0129051,-0.186664}
,
{0.447888,0.00447497,0.190639,-0.0235772,0.170705,-0.0374664}
,
{0.0892893,0.0277694,-0.284905,0.18978,-0.158087,0.0206017}
,
{0.15489,0.128616,-0.114666,-0.192817,0.038193,0.0729858}
,
{0.216462,-0.00255437,0.461399,-0.168181,0.150347,0.139435}
,
{-0.197544,0.068363,0.170634,0.0828848,0.162132,0.0551882}
,
{-0.240377,-0.0576584,0.0146755,-0.204849,-0.200275,-0.862765}
,
{0.119261,0.0752905,0.236264,-0.262384,0.111733,0.246922}
,
{-0.0573262,-0.00986497,0.0450961,0.08089,0.0583653,-0.113481}
,
{0.0417625,0.134578,-0.375033,0.17019,-0.271834,-0.251721}
,
{-0.170161,0.0360522,0.0583687,0.0560814,-0.09495,-0.154615}
,
{0.18351,-0.200329,-0.473471,0.277872,0.0331222,-0.330221}
,
{-0.103947,-0.233599,-0.242408,-0.148938,-0.0508249,0.329492}
,
{0.084517,-0.060287,0.0409558,0.0531921,0.00242077,0.291584}
,
{0.0414222,0.337293,-0.114613,-0.0477221,0.179497,-0.293705}
,
{-0.0331311,0.21774,0.00760327,-0.0102951,0.118217,-0.166188}
,
{-0.16334,-0.179663,0.0964834,0.233913,0.0894568,0.351265}
,
{0.0627227,-0.128853,0.103768,-0.00314828,0.196982,-0.422439}
,
{-0.07163,0.156186,-0.0189749,0.00341471,-0.173106,0.00203118}
,
{0.0640906,0.322631,0.187051,0.170624,0.0348337,0.303357}
,
{0.0553688,0.165635,0.317339,0.0196331,-0.0736016,0.0580247}
,
{-0.0472179,-0.383856,-0.0682652,0.107433,-0.0869967,-0.0208201}
,
{0.11255,-0.417798,0.029431,0.0320658,0.0685228,0.41689}
,
{-0.139649,0.0274183,0.26625,-0.0603889,0.145445,0.402008}
,
{-0.122656,0.207148,0.024505,-0.06644,-0.106025,-0.0139371}
,
{0.159674,0.597716,0.00221169,-0.0928494,-0.00125114,0.318282}
,
{-0.0537757,0.0243917,-0.0331685,-0.059214,0.0835722,-0.103712}
 };
  static const float bias2[1] = { 0.0709872 };
  static const float weights2[][1] = { {-0.160588}
,
{0.154338}
,
{0.271836}
,
{-0.199463}
,
{-0.322919}
,
{0.141314}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_4(v, index);
}
static int assign_gen_lepton_prior_1_0_4() {
  global_gen_lepton_prior.at(1,0,4) = &specialized_gen_lepton_prior_1_0_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_4 = assign_gen_lepton_prior_1_0_4();

template<typename T> float gen_lepton_prior_1_0_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.10757,-0.138281,0.0985482,0.0240357,-0.053636,-0.0167599}
,
{-0.0450294,0.102011,-0.167389,-0.0762305,-0.18389,-0.196769}
,
{0.0020409,-0.000316961,-0.0987613,0.0251055,-0.0206893,0.194433}
,
{-0.0416547,0.246556,-0.086474,-0.224191,0.0960904,-0.142428}
,
{0.202229,-0.145412,0.141025,0.138787,0.232968,-0.107627}
,
{-0.0335236,-0.00976892,0.114201,0.0671778,-0.0520917,-0.132963}
,
{-0.0913,-0.00874301,0.0162712,0.0832262,0.0730149,0.0880707}
,
{-0.0745075,-0.233652,-0.0754672,-0.0824732,0.151755,-0.00660729}
,
{-0.106711,0.0452007,0.0571306,-0.121062,-0.0396884,-0.00937057}
,
{0.0761219,-0.105509,0.0783079,-0.21203,0.073064,0.181357}
,
{-0.058647,-0.00408414,0.0444551,-0.181527,0.106861,-0.219809}
,
{-0.14617,0.100453,-0.0835931,-0.104099,-0.105022,0.110998}
,
{0.0126385,0.210017,0.190364,0.0529709,0.0311917,-0.028464}
,
{0.0773185,-0.157226,-0.0273105,-0.197978,-0.0707652,-0.116128}
,
{-0.129378,-0.0161422,-0.0226044,0.0758206,0.150355,0.000845088}
,
{-0.0321847,0.0770024,-0.102116,0.10564,-0.0136134,-0.140404}
,
{0.216651,0.0447018,0.0910346,0.0960987,0.156818,-0.121641}
,
{0.206714,-0.163103,0.201442,-0.172666,0.00560822,0.0799789}
,
{-0.022859,-0.12485,0.119611,-0.207399,0.112717,0.0737394}
,
{-0.0133273,0.119929,0.116212,0.0880011,-0.152821,0.158292}
,
{-0.0196768,0.162921,0.11811,-0.0986668,0.0458909,-0.126997}
,
{-0.243987,-0.129519,-0.00992229,-0.00254986,0.0816496,-0.00519921}
,
{-0.00757931,0.162475,0.0645617,-0.132546,0.0747419,-0.0851368}
,
{-0.0879914,0.100292,0.0824828,-0.0345275,0.12144,0.184428}
,
{-0.0874931,0.0146565,-0.211426,-0.047888,0.145781,-0.0603854}
,
{0.207411,0.0227817,0.0182779,0.019581,0.109829,-0.0792293}
,
{0.0725614,-0.0505624,0.0447257,0.122927,0.0805019,0.0100428}
,
{0.0966716,0.0105387,-0.0947318,0.0777351,0.191991,0.0769146}
,
{0.116015,-0.1245,-0.0299226,0.116514,0.0593418,0.115232}
,
{0.125093,-0.125571,0.190408,0.131026,-0.088768,-0.223985}
,
{0.0595252,-0.0481202,-0.0792305,0.0198107,-0.101176,0.100875}
,
{-0.0524254,0.0512077,-0.0135478,-0.00889588,0.0416015,-0.143761}
,
{-0.117262,0.00152516,-0.12114,-0.0669117,0.027578,-0.0224407}
,
{-0.00890188,-0.0483277,-0.0502114,-0.132854,-0.211029,-0.0450918}
,
{-0.126649,-0.0807597,-0.0202691,-0.0152101,0.102126,-0.111402}
,
{-0.131925,0.0731071,-0.0138287,0.00955483,-0.0792389,-0.126947}
,
{-0.0248985,-0.0484588,-0.0190983,0.0263084,-0.172901,-0.234246}
,
{0.101222,0.039523,0.0229567,-0.217279,-0.202517,0.120266}
,
{0.0202494,0.150833,0.0302273,0.126245,0.0534117,0.193967}
,
{0.170088,-0.0549233,-0.116371,0.112575,-0.0151471,0.00784284}
,
{0.119141,0.0489798,-0.0395618,-0.150446,0.0345017,-0.0443776}
,
{-0.129341,-0.106982,-0.0428483,-0.12393,0.125247,-0.181152}
,
{0.124029,0.00695251,0.0855132,0.00886975,-0.130296,0.162886}
,
{-0.136238,0.0600802,0.0201162,0.214529,0.0896538,-0.0181096}
,
{-0.0178931,-0.0800185,0.0407517,-0.0923563,0.0923277,-0.0659121}
,
{0.0190033,0.0263558,0.130542,-0.0854563,0.000760135,0.106925}
,
{-0.0437649,0.0489867,0.114944,-0.0878632,0.167097,-0.031762}
,
{0.014548,0.0759014,0.220494,0.0781891,0.0695453,-0.11285}
,
{-0.113074,-0.0086127,-0.139751,0.214346,0.0354634,0.183468}
,
{0.0385853,-0.160851,0.102438,0.0714177,-0.11839,-0.0797199}
,
{0.08382,0.014294,-0.0203045,-0.0106839,0.0128992,-0.0573411}
,
{0.0725738,-0.00380768,0.0541178,-0.0805102,0.130588,-0.216822}
,
{0.104868,-0.0261474,0.0551893,-0.0420747,-0.199285,-0.100165}
,
{0.0705247,0.024841,0.108435,0.208156,-0.0379272,-0.149262}
,
{-0.132232,-0.0798051,-0.00738748,-0.0967109,-0.0585606,0.00469202}
,
{-0.0199244,-0.159639,0.0639166,-0.161901,0.102435,0.0133761}
,
{0.0104582,-0.0929235,-0.199142,0.122675,-0.113286,0.105437}
,
{0.0864698,0.0851166,-0.246975,-0.129252,-0.0241762,0.0419479}
,
{0.00618575,-0.0908065,-0.00673353,-0.037968,0.215393,0.0205279}
,
{0.190668,-0.119079,0.0420346,0.0605287,0.153759,0.0734719}
,
{0.00425305,-0.0775878,-0.00249435,-0.219745,-0.128912,0.0117884}
,
{0.198098,0.00193892,0.037625,-0.0840194,0.0692196,0.0648204}
,
{-0.0516512,0.00159195,0.195216,-0.22045,-0.222141,0.0476953}
,
{0.0279471,0.177055,0.0883933,0.0175012,0.0206454,-0.173236}
,
{0.207274,0.112933,-0.0666115,0.0365106,0.111723,-0.0611172}
,
{-0.0951093,0.153026,-0.00463598,-0.0477678,0.149411,0.0247065}
,
{-0.177636,-0.0375717,-0.0883804,0.0429004,0.0849457,0.229066}
,
{-0.0560956,-0.0384996,0.151073,-0.124417,-0.0355024,0.00371266}
,
{-0.137301,0.239469,0.023505,-0.235263,-0.041758,-0.0464214}
,
{-0.0712328,-0.00259336,-0.131152,0.138186,0.0268804,0.063602}
,
{-0.196018,0.00302751,-0.0103854,0.0534665,0.0661137,0.0201196}
,
{-0.0617861,-0.0743609,-0.182332,-0.147356,-0.0658797,-0.11572}
,
{0.0307897,-0.180747,0.223202,-0.153898,0.149029,-0.0523672}
,
{-0.0568378,0.0506824,-0.227172,-0.163539,0.00896677,0.0515349}
,
{0.0349079,0.0164857,-0.202092,0.134715,0.0324401,0.117707}
,
{-0.149716,0.0122823,-0.0358907,0.153443,0.0245491,-0.19135}
,
{0.030405,0.09736,0.144814,-0.0926835,0.194459,-0.228079}
,
{0.047902,0.0494147,0.152052,-0.0527051,-0.0589056,-0.135237}
,
{0.0443468,-0.0814277,-0.0422204,-0.123208,0.101425,-0.0230752}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.113527}
,
{-0.13936}
,
{-0.105731}
,
{-0.00827998}
,
{-0.0601865}
,
{-0.0251964}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_5(v, index);
}
static int assign_gen_lepton_prior_1_0_5() {
  global_gen_lepton_prior.at(1,0,5) = &specialized_gen_lepton_prior_1_0_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_5 = assign_gen_lepton_prior_1_0_5();

template<typename T> float gen_lepton_prior_1_0_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0522054,-0.0343026,0.0118703,0.0412897,0.161119,-0.089422 };
  static const float weights1[][6] = { {0.125541,-0.0235271,-0.084958,-0.111384,-0.0252702,0.137465}
,
{0.189986,-0.0667433,0.00408564,-0.0271406,0.0022794,-0.0547052}
,
{0.103312,0.288533,-0.163017,-0.0476662,-0.025023,0.203001}
,
{0.255124,-0.698884,0.239777,-0.111492,0.30767,-0.0593832}
,
{0.089807,0.04526,-0.0592522,0.0913375,0.375566,-0.015304}
,
{-0.136974,0.117191,-0.19357,-0.00661471,0.217832,-0.231425}
,
{0.0711462,-0.0320577,-0.058587,0.00228181,0.193931,-0.334304}
,
{0.0489161,-0.0369214,-0.202209,0.0192627,-0.27098,0.000879014}
,
{0.250598,0.124853,-0.0316246,-0.080802,-0.0330405,-0.0443955}
,
{-0.11154,0.107219,-0.196828,-0.152774,-0.0493043,-0.163701}
,
{-0.103366,0.176932,0.0287098,-0.103728,0.0434717,-0.10805}
,
{0.025031,0.03449,-0.224479,0.163961,0.073425,-0.000809525}
,
{0.0111274,0.0548634,0.066472,0.0478716,0.0014644,0.0259342}
,
{-0.134657,-0.0107091,-0.190411,-0.0630254,-0.116716,-0.0149818}
,
{-0.0572748,0.111396,-0.000522722,0.0892564,-0.0489591,0.0690985}
,
{0.165104,-0.0701173,-0.124175,0.183331,0.16645,-0.145353}
,
{0.110613,0.0995375,0.227956,0.244672,0.164864,-0.127615}
,
{-0.0429645,-0.185792,-0.123698,0.194521,-0.0336734,0.0433677}
,
{0.0439151,-0.423334,0.0236857,0.259793,0.258546,-0.132392}
,
{-0.0341961,0.00225415,0.0699781,-0.0855136,0.076628,0.00670464}
,
{-0.0566426,-0.0962444,0.120909,0.0302538,-0.00732211,0.0896575}
,
{-0.0762271,0.0457714,0.0297442,0.0134098,0.043159,0.0986495}
,
{0.165084,0.0551314,-0.237372,-0.195949,0.0502413,-0.20839}
,
{0.0323884,0.0434018,0.0364476,-0.0480864,-0.0512327,-0.0214486}
,
{0.0617351,0.171827,0.0773848,-0.0993764,-0.173577,0.139479}
,
{0.0629268,0.0535609,-0.0736207,0.0594364,-0.17275,0.0916511}
,
{0.0432564,0.00218573,-0.134841,0.177724,-0.164199,-0.0778297}
,
{0.00098584,0.0377844,-0.118232,-0.00462623,-0.0689825,0.0426158}
,
{-0.10966,-0.211108,0.028858,0.0616143,-0.0528539,0.165986}
,
{-0.0726535,0.0995819,0.037061,-0.131688,-0.100977,0.0441309}
,
{0.0630099,-0.137501,-0.137562,0.232832,-0.353634,-0.00722105}
,
{0.116564,-0.0457178,0.0774489,-0.0993429,0.241368,-0.148604}
,
{-0.0595282,0.0174075,-0.0759585,-0.165896,-0.0585937,0.139382}
,
{-0.0825618,0.049892,0.139584,0.0593064,-0.0800039,-0.0505978}
,
{0.199455,-0.00490145,-0.177365,0.0488908,-0.0619133,-0.129857}
,
{-0.0830206,0.0681965,0.16746,-0.129011,0.140143,0.0814903}
,
{-0.254643,0.199456,0.0240014,0.0741401,0.0245386,0.117186}
,
{-0.469764,-0.150316,-0.154888,0.303507,0.0418846,-0.0322118}
,
{-0.266819,-0.00438109,0.0986856,-0.0117164,0.0615052,0.114898}
,
{0.26654,-0.201379,-0.0421492,-0.00558324,-0.150074,-0.172725}
,
{0.0282136,0.198242,-0.229748,-0.075688,0.0415866,-0.188387}
,
{-0.202347,0.0286944,-0.0306309,-0.0414427,-0.0121139,-0.186473}
,
{0.176628,0.209634,-0.181215,-0.00351141,-0.152531,-0.0505072}
,
{0.284649,-0.116381,0.194667,-0.0810586,-0.172818,-0.0871269}
,
{-0.227531,-0.110079,0.031189,-0.157101,0.0500079,-0.328979}
,
{-0.0349671,-0.0481261,-0.00359762,-0.1791,-0.10548,-0.316298}
,
{-0.042936,-0.515228,0.143926,0.0897259,0.0786982,0.0855378}
,
{0.0607426,0.426123,0.112065,-0.169502,-0.247541,-0.000534575}
,
{-0.147179,0.233567,0.104482,-0.0175366,0.1917,0.0930465}
,
{-0.00674005,0.183547,0.0448292,-0.0992428,-0.0854269,0.265466}
,
{0.00229634,0.013747,-0.036533,-0.114747,0.463795,-0.00793152}
,
{-0.11676,-0.572722,0.105827,-0.122493,0.128308,-0.367488}
,
{0.302941,-0.0891607,-0.0605117,-0.0820938,0.193092,-0.1218}
,
{-0.379326,0.0303409,0.171622,-0.153288,0.394212,-0.301664}
,
{0.00129747,-0.00082533,-0.0368662,0.0360598,0.014587,0.0495731}
,
{-0.0208005,-0.00090544,0.0230885,-0.100124,-0.0928175,-0.121481}
,
{0.103321,-0.0180638,0.0377268,-0.0384579,0.270866,0.0060476}
,
{-0.0480492,-0.105512,-0.0149854,0.0102659,0.0427651,-0.0613793}
,
{-0.010873,-0.0698958,-2.4851e-06,0.0616128,-0.11715,0.167619}
,
{0.105858,0.114699,0.151292,-0.20132,0.0305743,-0.0431753}
,
{-0.0350483,-0.0461002,-0.0612541,-0.182743,-0.0980129,0.0189251}
,
{-0.127331,-0.138258,0.0875911,-0.111457,0.173567,0.0904564}
,
{0.0460195,0.116626,-0.0295602,0.00599105,0.026892,-0.0848991}
,
{0.0584176,0.111945,-0.14525,-0.119886,-0.0155431,0.0567395}
,
{-0.0782747,0.100055,0.0870805,0.0367881,0.0605725,-0.0221055}
,
{-0.109326,-0.0336226,0.1291,0.0217727,0.0524497,-0.0828679}
,
{0.186129,0.114055,0.0709605,0.21594,0.0219097,-0.0405574}
,
{-0.0371017,-0.103177,-0.0337227,-0.00438279,-0.0821279,0.0011479}
,
{-0.0714569,-0.0639159,0.0907303,0.0457405,-0.147344,0.177494}
,
{-0.0179596,-0.156199,-0.166956,0.07179,-0.0470019,0.00952447}
,
{-0.108646,-0.00400861,-0.164559,-0.11863,0.153809,0.0752377}
,
{0.178442,-0.101753,0.0194,0.0223711,0.114157,0.114269}
,
{0.0398257,-0.167625,0.0796481,-0.185013,-0.046448,-0.0143133}
,
{0.01538,0.116373,0.214729,0.0543939,-0.0673595,-0.00141873}
,
{-0.00330868,0.125472,0.00085692,0.0480245,0.182405,-0.183639}
,
{0.128491,0.0554235,0.0801649,0.104473,-0.0449312,0.0155978}
,
{-0.0532574,0.051562,0.0668436,0.0970332,0.0061389,-0.0591252}
,
{0.031539,-0.0345208,0.0614607,0.111252,-0.0810837,-0.103901}
,
{-0.0332924,0.155877,-0.0343338,0.0946111,0.163652,-0.0236893}
 };
  static const float bias2[1] = { 0.0033461 };
  static const float weights2[][1] = { {0.532975}
,
{0.133159}
,
{0.11854}
,
{0.153037}
,
{0.0602771}
,
{-0.14764}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_6(v, index);
}
static int assign_gen_lepton_prior_1_0_6() {
  global_gen_lepton_prior.at(1,0,6) = &specialized_gen_lepton_prior_1_0_6;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_6 = assign_gen_lepton_prior_1_0_6();

template<typename T> float gen_lepton_prior_1_0_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.321393,-0.148099,-0.0276782,0.066478,0.0809866,-0.00418203 };
  static const float weights1[][6] = { {-0.0620687,-0.12037,-0.0374566,0.016677,-0.0941592,0.0743625}
,
{0.119387,-0.057707,0.127057,-0.0482404,0.158914,-0.206851}
,
{0.062113,-0.351226,0.476989,0.0947767,0.408844,0.122817}
,
{0.417315,-0.383852,0.0305415,-0.0016255,0.290877,0.0836057}
,
{0.284421,-0.342732,0.00270479,-0.128686,0.244894,-0.0794381}
,
{-0.0554271,-0.227473,0.00324235,0.138934,0.18399,0.120709}
,
{-0.0341024,-0.0170257,-0.0953854,-0.0996154,0.111416,-0.0488212}
,
{-0.00121191,-0.217454,0.150715,0.0938427,-0.0619524,-0.0798007}
,
{-0.168081,-0.0913729,0.147942,-0.0399267,0.263252,-0.185513}
,
{-0.0575549,-0.0526461,0.0684408,0.237662,0.100619,0.0873803}
,
{-0.102093,0.0151025,0.00206094,-0.0588374,0.209537,-0.0044675}
,
{0.177299,0.0792163,0.0723681,0.12186,0.0134202,-0.108292}
,
{0.00985494,0.126997,-0.0404761,0.167173,0.206053,0.122321}
,
{0.186449,0.113385,-0.114377,0.0231538,0.167603,-0.0854135}
,
{-0.0150775,0.172492,-0.191471,-0.0715949,0.112367,0.205697}
,
{-0.019271,-0.0594045,-0.00449154,0.114312,0.0298273,0.0639198}
,
{-0.00240783,-0.0562862,0.0257548,0.108122,-0.280888,-0.0550331}
,
{0.0852771,-0.298583,-0.0313611,-0.185403,-0.0342423,0.0515194}
,
{0.1834,-0.315296,-0.0803403,-0.0441397,-0.0662812,0.0244832}
,
{-0.0825634,-0.13936,-0.07212,-0.0351248,-0.235585,-0.0323656}
,
{0.109245,0.0777516,-0.152917,-0.166653,-0.0741722,0.124495}
,
{-0.0169054,0.262535,-0.0601609,0.164841,-0.0813547,-0.0846661}
,
{0.0284514,0.156706,0.0375288,0.0995871,-0.0625816,-0.0430029}
,
{-0.105364,0.00133366,0.0391304,0.166361,0.120356,-0.207781}
,
{-0.0126172,-0.0142928,0.0604661,-0.183354,-0.0167618,-0.111803}
,
{-0.112903,-0.0412501,0.00379368,0.0638403,0.00193022,-0.0312105}
,
{-0.035461,0.105674,-0.11002,-0.136298,0.0662585,0.0407288}
,
{0.0587237,0.055648,0.180144,-0.0357671,0.116877,-0.00242488}
,
{0.0632763,0.046082,-0.0487359,0.178061,0.117241,0.0689303}
,
{0.136838,-0.117002,-0.0134037,0.152029,0.000245977,-0.0783394}
,
{-0.057176,0.31196,-0.0452111,0.281295,0.179678,0.0782959}
,
{-0.116001,0.110008,-0.0155907,-0.0978535,0.0605258,-0.0401248}
,
{0.0738764,0.0607054,0.136298,-0.0587385,-0.0127931,-0.0150079}
,
{-0.0419989,0.227417,-0.196708,0.0699514,-0.00445246,-0.119325}
,
{-0.143083,-0.0286434,0.209688,0.224999,0.138095,0.121899}
,
{0.0213754,0.0355706,0.06034,-0.0561496,-0.158714,-0.00346708}
,
{0.188776,-0.0910192,-0.13273,-0.0985789,0.0377926,0.361747}
,
{-0.126956,-0.11676,0.0540346,0.0148126,-0.136474,-0.0135455}
,
{0.278352,0.132196,-0.153809,-0.300039,-0.298629,-0.202264}
,
{0.0885618,-0.032662,-0.271414,-0.0296475,0.147347,0.162996}
,
{-0.012824,0.150638,-0.220627,0.118133,0.0495898,0.135759}
,
{0.0755176,0.163086,0.487996,0.0936329,0.316678,0.0145367}
,
{0.156487,0.00572162,-0.192933,-0.195557,-0.0937064,0.184699}
,
{0.53902,-0.0164679,-0.126205,-0.525949,0.106179,-0.106245}
,
{-0.0117705,-0.220884,-0.0832207,-0.201954,-0.02426,0.0591279}
,
{-0.00685481,0.130829,0.0290678,0.0848355,-0.0950868,-0.0323521}
,
{-0.207553,0.0121364,0.253417,0.293182,0.290848,-0.194521}
,
{0.0680248,-0.0586259,0.0682683,-0.00914471,0.0774039,-0.0835602}
,
{0.121077,0.12662,-0.156804,-0.1646,-0.597131,-0.192879}
,
{-0.270861,-0.174425,-0.075582,0.151896,-0.0200526,0.0613247}
,
{-0.183433,0.0855694,-0.152978,0.168437,0.00406827,0.0375504}
,
{-0.49236,-0.535821,-0.203695,0.203225,0.00718566,0.0781125}
,
{-0.164372,-0.0431467,0.0773633,0.163017,0.0715257,-0.0717396}
,
{-0.265763,-0.0524748,-0.542599,0.162811,0.0168732,0.123493}
,
{0.139256,-0.0269439,-0.0599814,-0.208068,-0.132435,0.11451}
,
{0.00762352,0.0673999,0.21923,0.120621,-0.000191268,0.00211461}
,
{-0.0992673,0.0422245,0.151102,0.0196547,-0.0413063,-0.052771}
,
{0.149081,-0.0755491,-0.0647037,0.126963,-0.0622979,0.163267}
,
{0.101887,0.196993,-0.154267,-0.101823,0.00937171,-0.0305274}
,
{0.155173,-0.0382182,-0.178907,0.0154175,-0.0943313,-0.135686}
,
{0.0586389,-0.0276565,-0.0335639,-0.110161,-0.0203071,-0.0633766}
,
{0.0226223,0.0633464,-0.0483818,0.0503602,-0.0743783,0.144943}
,
{-0.0217159,0.108214,0.0996203,-0.187522,-0.14718,-0.00247986}
,
{-0.0383774,-0.0142394,-0.000733881,0.0362075,0.00349582,0.0116274}
,
{0.0288915,-0.0926711,-0.154822,-0.157604,-0.0836737,-0.0921957}
,
{0.042207,0.0470294,0.040708,0.0369034,0.0458265,-0.116757}
,
{-0.231604,-0.0282001,-0.110103,0.13207,-0.0481026,-0.0616669}
,
{-0.0954209,-0.103771,-0.0365789,0.00141176,-0.0120879,-0.0461585}
,
{0.00877256,-0.15284,0.134275,-0.0897032,-0.0901829,-0.174047}
,
{-0.0889257,-0.105468,0.01829,-0.191815,0.0902573,-0.0465958}
,
{-0.151578,0.0645321,0.0669668,0.10769,-0.159962,-0.00386001}
,
{0.123511,-0.140876,0.055945,0.0880781,0.0810887,-0.0758062}
,
{-0.0985952,-0.00109167,0.0557795,-0.0695012,0.165285,-0.0367731}
,
{-0.0979581,-0.0866119,-0.12463,0.171802,-0.000759419,-0.129465}
,
{-0.0760633,0.100076,0.225607,0.069206,-0.110955,-0.00741291}
,
{0.0816004,0.0174979,0.079547,-0.155855,0.003831,-0.216338}
,
{0.00432051,0.0807904,0.0191909,-0.109948,-0.119266,0.11179}
,
{-0.0591771,0.0121289,-0.0363493,-0.0847339,0.0605239,-0.0834368}
,
{0.0526556,0.15229,0.236375,-0.0165228,-0.0736568,-0.151079}
 };
  static const float bias2[1] = { 0.0778572 };
  static const float weights2[][1] = { {0.193957}
,
{-0.119446}
,
{-0.150478}
,
{0.150224}
,
{-0.770947}
,
{-0.22691}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_7(v, index);
}
static int assign_gen_lepton_prior_1_0_7() {
  global_gen_lepton_prior.at(1,0,7) = &specialized_gen_lepton_prior_1_0_7;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_7 = assign_gen_lepton_prior_1_0_7();

template<typename T> float gen_lepton_prior_1_0_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0808641,-0.0733111,0.165849,0.168261,-0.0533756,0.175591 };
  static const float weights1[][6] = { {0.187126,0.217488,0.124946,0.00825453,0.099835,0.196329}
,
{0.0521654,-0.405931,0.0817051,-0.052303,0.32761,-0.0980834}
,
{-0.030308,0.106889,0.0045955,0.0829109,-0.185394,-0.117751}
,
{-0.0684753,-0.168483,0.575348,0.256293,0.105832,0.116917}
,
{-0.112061,-0.0013977,0.0617183,-0.0549008,-0.110775,0.0619288}
,
{0.0240744,0.00441374,0.113604,0.137958,0.020707,0.0448836}
,
{0.123581,0.18831,-0.00360994,0.110147,-0.206849,0.150817}
,
{-0.260126,-0.0329042,0.354422,0.0088419,-0.105823,0.283412}
,
{0.144892,-0.181773,0.0511096,-0.148984,-0.222624,0.375298}
,
{-0.0683034,-0.0462411,-0.0333461,-0.130617,-0.0847379,0.0526031}
,
{0.0803852,-0.160414,-0.0557611,-0.0354151,0.124381,0.0526323}
,
{-0.0199414,0.181983,-0.00343845,0.270201,-0.0983009,-0.482174}
,
{0.0107193,0.0758208,-0.0731296,0.170091,0.115329,0.263559}
,
{-0.0422723,0.0405919,0.119866,0.377847,0.139278,0.0015665}
,
{0.188864,0.0752204,0.127375,-0.162633,-0.075346,-0.0678817}
,
{-0.205231,0.0541769,0.031708,0.0210401,-0.130559,0.0741336}
,
{-0.0141168,0.14952,0.186344,-0.0453649,0.0744038,-0.330521}
,
{0.00977195,-0.144079,0.14301,0.137843,-0.275008,0.274863}
,
{-0.0217157,-0.0753913,-0.108623,0.0178692,-0.108793,0.0472116}
,
{-0.136242,-0.0910827,0.0268198,-0.103971,-0.1101,-0.196903}
,
{-0.0945542,-0.149449,-0.135164,0.132384,-0.0626703,0.0320944}
,
{-0.00859533,-0.14962,0.013855,-0.0785854,-0.112068,-0.0648721}
,
{-0.185685,0.00514329,0.0501226,-0.0296413,-0.0465204,0.0988554}
,
{-0.00959806,-0.0687618,0.0454464,-0.0241624,0.0376522,0.0235342}
,
{0.0542795,-0.060717,-0.0341482,-0.0416882,0.176987,-0.220594}
,
{-0.0178538,0.0578857,-0.0993747,-0.0780404,0.0661582,-0.012753}
,
{0.210793,-0.108689,0.151763,-0.0380063,-0.0509848,-0.130455}
,
{0.101437,-0.0783092,-0.243663,-0.0324451,-0.212287,-0.0236503}
,
{0.0576888,0.114717,-0.0665784,0.021604,-0.030818,0.184203}
,
{-0.00511076,0.00530238,-0.0596975,0.145929,0.108597,0.0468479}
,
{0.00351043,0.0685502,-0.0732571,0.0716911,-0.126823,-0.265771}
,
{-0.126335,-0.165252,0.121515,0.142775,0.0147165,-0.154668}
,
{0.0251149,0.173898,0.134938,-0.200091,-0.0889984,-0.0712055}
,
{-0.155119,-0.163907,-0.0378242,-0.0447349,0.087455,0.140838}
,
{-0.275172,-0.249082,-0.0632061,0.282522,0.315192,0.0987114}
,
{0.115828,0.0362381,-0.089513,0.216683,-0.109828,0.0077381}
,
{-0.306376,-0.110227,-0.0165329,-0.207033,0.209894,-0.330785}
,
{-0.155099,0.195064,-0.0228967,-0.014725,0.169587,0.158027}
,
{-0.275908,0.16434,-0.0572936,0.0980028,-0.276899,-0.197703}
,
{0.199905,-0.0314381,0.0481448,0.0641459,0.0693176,0.140959}
,
{-0.115839,0.0162255,0.00204967,-0.0338783,-0.173834,-0.0142868}
,
{-0.432851,0.19495,0.293222,-0.194673,0.205654,0.203514}
,
{0.127671,-0.00602282,0.000967821,-0.0437621,-0.167302,0.0452177}
,
{0.177321,0.00892511,-0.0495619,-0.0171694,0.00335391,-0.063694}
,
{0.0132969,-0.0514109,-0.164143,0.361982,0.0677309,0.54194}
,
{0.165466,0.0973706,-0.154423,0.196452,0.0375724,-0.0941667}
,
{0.0488128,-0.253005,0.0887834,-0.0287264,-0.103638,-0.117885}
,
{0.223177,-0.114542,-0.0368827,0.105871,0.113403,-0.101292}
,
{-0.272727,-0.0152506,0.042437,-0.106694,-0.0615252,-0.625715}
,
{0.446727,-0.111176,0.113802,-0.0472767,0.2279,0.289196}
,
{-0.225917,0.159727,0.165659,-0.221185,0.135873,-0.0665235}
,
{0.051259,0.100084,0.117717,-0.037416,0.296614,0.449687}
,
{0.137377,-0.020644,0.168636,-0.31047,-0.092012,-0.0470277}
,
{0.0269589,0.0740993,-0.220119,0.109709,-0.159987,-0.134791}
,
{-0.0437345,-0.0545266,-0.170093,0.0797824,0.0587831,-0.0106341}
,
{0.0208216,-0.0386446,0.134247,0.0793255,0.090529,-0.105764}
,
{0.0287446,-0.153553,-0.0905047,-0.144358,-0.0540381,0.0927095}
,
{-0.0681762,0.0838877,-0.034699,-0.0412265,-0.0283196,-0.0296242}
,
{0.00526636,0.147069,-0.116515,0.0696014,0.0570944,0.126474}
,
{0.0492166,0.178093,0.0554125,0.0796956,-0.179432,-0.0741037}
,
{-0.0726447,0.154463,-0.0612229,0.107165,0.124124,-0.131362}
,
{0.0205197,0.17832,0.0632451,0.0241572,0.0586782,0.0674695}
,
{0.0281857,0.224278,-0.13209,0.0334598,-0.145807,-0.0504564}
,
{-0.0849125,-0.0568363,-0.0659777,0.105213,0.211606,0.157252}
,
{-0.20547,-0.176027,0.0214871,-0.0257834,-0.0881197,-0.117744}
,
{0.0178787,0.0535022,0.1205,0.110042,0.156801,0.0318664}
,
{-0.0348478,0.0217427,-0.0739856,0.18946,-0.0301631,0.107542}
,
{0.00909604,0.126867,-0.122565,0.11221,0.0645484,0.0337085}
,
{0.0209875,0.0564108,0.0111097,0.161252,0.00703967,-0.181219}
,
{0.115831,-0.0973272,0.0712418,0.0462442,0.046233,-0.188322}
,
{0.0128656,0.030181,0.128365,0.0564095,0.135374,0.0605636}
,
{-0.0472725,-0.0236173,0.0151845,0.0926993,-0.115795,0.182973}
,
{-0.159815,-0.0351162,-0.11996,-0.0412365,-0.144754,0.155341}
,
{-0.0892005,0.160289,0.215383,0.0228002,0.110246,0.0799374}
,
{0.044601,-0.186432,-0.223559,0.0620668,0.140974,0.199608}
,
{-0.0502167,-0.0637351,-0.0785171,0.0924516,-0.21184,-0.0749127}
,
{-0.012681,-0.112784,-0.0278193,-0.0304114,-0.125051,0.0327716}
,
{-0.237473,0.0536789,-0.0820744,-0.00693377,-0.171616,0.2008}
,
{0.0349167,0.0655568,0.0685649,0.138006,0.0292777,0.026266}
 };
  static const float bias2[1] = { 0.120304 };
  static const float weights2[][1] = { {-0.23608}
,
{-0.203408}
,
{0.188482}
,
{0.115189}
,
{-0.373993}
,
{-0.612655}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_8(v, index);
}
static int assign_gen_lepton_prior_1_0_8() {
  global_gen_lepton_prior.at(1,0,8) = &specialized_gen_lepton_prior_1_0_8;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_8 = assign_gen_lepton_prior_1_0_8();

template<typename T> float gen_lepton_prior_1_0_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.00583014,0.116856,0.28018,0.313637,0.189983,-0.0569464 };
  static const float weights1[][6] = { {-0.00157227,0.0999245,0.0119514,-0.261306,0.158724,-0.163306}
,
{-0.0536433,0.293304,-0.235331,-0.0572384,-0.178271,-0.00284912}
,
{0.0841403,0.299333,-0.109061,-0.118072,-0.0103413,-0.1584}
,
{0.0709826,0.330397,0.377641,0.258903,0.10157,-0.101246}
,
{0.196973,0.154291,0.269208,0.548675,0.265243,-0.160237}
,
{-0.098486,0.0746251,0.276948,0.514364,0.270819,0.0462319}
,
{-0.175336,0.0869918,0.296263,0.441498,0.181226,-0.0241452}
,
{-0.189878,-0.02126,-0.274311,-0.0523593,-0.000192311,-0.177489}
,
{-0.0251327,0.0720916,-0.112583,0.309525,0.220329,0.117667}
,
{0.121987,0.0520467,0.0512418,-0.150079,-0.0429276,0.0620033}
,
{-0.128521,0.188097,0.126302,0.0297235,0.109325,-0.066919}
,
{0.0463433,-0.153049,0.0187857,0.167042,0.294339,-0.240145}
,
{-0.184767,-0.105513,0.0735454,-0.0700814,-0.01669,-0.160085}
,
{0.181259,0.223796,0.153566,0.116324,-0.175055,-0.0279469}
,
{-0.143018,0.0834792,0.187896,-0.0677185,0.109819,-0.0499422}
,
{-0.216199,-0.016668,-0.0587839,-0.0386228,0.0423742,-0.0475646}
,
{-0.119232,0.152625,0.119804,0.320107,0.233841,-0.124504}
,
{-0.125245,0.0688501,0.0101012,0.0210499,0.0743078,0.18133}
,
{-0.0709613,-0.158389,-0.106195,-0.0791649,-0.0834783,0.0883692}
,
{-0.251144,0.125241,-0.033849,-0.212674,0.0473006,-0.132391}
,
{0.0289011,0.045639,-0.025265,-0.0284419,-0.0345504,-0.122763}
,
{-0.0872396,-0.0293984,-0.0468246,-0.01658,0.116971,0.0956852}
,
{0.187749,0.0187838,-0.137605,-0.00677393,0.0214964,-0.0216487}
,
{0.0798623,-0.0915917,-0.0357663,0.0213391,-0.0553263,-0.255544}
,
{-0.225002,-0.0593123,-0.0176001,0.0694449,0.157447,-0.0772921}
,
{0.0759211,7.24344e-06,-0.128221,0.126347,-0.0789851,0.116204}
,
{0.0589376,0.197234,-0.00179776,0.100192,0.22051,-0.143818}
,
{-0.0701761,0.0392116,-0.208826,0.149732,-0.0157818,0.00599545}
,
{-0.171501,0.0488587,-0.0486469,-0.0723824,-0.124214,0.126622}
,
{-0.164358,0.222729,0.0622424,-0.0592169,0.162454,0.117063}
,
{0.163896,0.0156141,0.0617998,0.101667,-0.0181266,0.0643622}
,
{0.117099,0.108594,-0.0623699,-0.0334342,0.0642637,0.105088}
,
{0.0145509,0.202775,-0.160796,-0.0379211,0.302727,-0.0370884}
,
{0.0137,-0.0420284,0.199572,0.0247281,0.148321,0.0206979}
,
{0.0733955,-0.199796,0.111385,0.0434561,-0.281113,-0.0955899}
,
{-0.00577255,0.120452,-0.153425,0.0576572,-0.0463725,0.00387193}
,
{-0.148122,-0.0251678,-0.270167,0.292561,0.619303,-0.138779}
,
{-0.0475899,-0.231887,0.170899,0.00965353,0.159145,0.0747038}
,
{-0.0436859,-0.49219,0.219753,0.179068,-0.0341064,0.0420504}
,
{0.120099,-0.224653,0.319333,0.121552,-0.0344228,0.100311}
,
{-0.0457401,0.0238972,-0.0243167,0.0497271,-0.185645,0.019195}
,
{-0.0137014,-0.246438,-0.457465,0.453333,0.268967,-0.119399}
,
{0.101433,0.0179657,0.0453288,-0.0841944,0.182687,0.0313652}
,
{-0.0613425,-0.385809,0.372023,0.34027,-0.265116,0.220733}
,
{0.00163988,-0.0338082,0.333086,-0.154963,0.0888457,-0.00492878}
,
{0.0943926,0.142032,0.0328317,-0.0873294,0.0462379,-0.0180527}
,
{0.0854163,-0.15329,-0.414638,0.447402,0.285664,-0.0271654}
,
{-0.0453392,-0.129095,-0.0567942,0.153081,-0.10264,0.0377163}
,
{0.193706,0.149282,-0.05097,0.223513,0.121774,0.14343}
,
{0.4808,0.0614703,0.162449,0.058485,-0.306094,-0.126903}
,
{0.0238313,-0.0163309,0.149745,-0.0374073,-0.0491532,-0.072415}
,
{-0.10138,-0.107112,0.109959,0.0538775,-0.0928287,0.131141}
,
{0.14983,0.0627618,0.127132,0.0419398,-0.435516,0.0503933}
,
{0.0403776,-0.319329,0.343116,0.0539804,-0.00592037,0.0579861}
,
{-0.0411613,-0.0548542,-0.186894,0.0723845,0.0543198,0.0833904}
,
{0.121598,-0.101062,-0.0108035,-0.279126,-0.133279,0.0452741}
,
{-0.167355,0.00218758,-0.151049,0.00115456,0.00400481,-0.131269}
,
{-0.100011,-0.00820002,-0.0565537,-0.0541117,0.0042215,-0.0353895}
,
{-0.0447059,-0.166002,-0.133934,0.184192,0.0332905,-0.0748215}
,
{-0.0891179,-0.174786,0.17943,-0.10676,-0.200621,0.230633}
,
{-0.232974,0.183249,-0.100531,-0.184938,-0.246812,-0.102177}
,
{3.72071e-05,-0.215801,-0.0720873,-0.17568,-0.0595723,-0.0537426}
,
{-0.132202,-0.0468043,-0.0186904,-0.316418,-0.25583,0.02223}
,
{0.188165,0.0474764,0.177691,-0.203159,0.0399389,-0.0173425}
,
{0.0112101,-0.0440542,0.0705009,0.0884289,0.0860573,-0.0734984}
,
{0.0629323,0.0244689,-0.180419,-0.0456259,-0.102934,-0.0916776}
,
{0.0432599,0.153013,-0.155567,-0.177353,-0.0740588,0.0411152}
,
{-0.189358,-0.107319,0.00474444,-0.0908576,-0.132434,0.0651828}
,
{-0.0112357,0.0879903,-0.0090674,0.211607,0.237089,-0.126063}
,
{0.231726,0.0972878,0.005739,-0.256537,-0.169728,-0.0253499}
,
{-0.0543225,-0.117114,-0.0328551,-0.129896,-0.0314693,-0.102178}
,
{0.173264,0.0870336,0.0874172,-0.119478,0.0919787,-0.0582628}
,
{0.0798991,0.0120304,-0.00479466,-0.171342,0.00245834,0.209329}
,
{0.13339,0.160916,-0.0698045,0.171307,-0.0292949,-0.14071}
,
{0.0220745,0.0341203,-0.06682,-0.0668563,0.163014,0.0431703}
,
{-0.0395345,0.0399046,-0.191047,-0.11277,-0.0289506,0.068696}
,
{0.0556244,0.11178,0.00345607,-0.00458103,0.114601,0.0999801}
,
{-0.101314,-0.00270645,0.102597,0.15676,-0.0796493,-0.157737}
,
{0.0523108,0.0568,0.0739855,-0.0759715,-0.167811,0.038876}
 };
  static const float bias2[1] = { 0.053367 };
  static const float weights2[][1] = { {-0.351576}
,
{0.107141}
,
{0.172633}
,
{0.15049}
,
{0.0415455}
,
{-0.168623}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_9(v, index);
}
static int assign_gen_lepton_prior_1_0_9() {
  global_gen_lepton_prior.at(1,0,9) = &specialized_gen_lepton_prior_1_0_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_9 = assign_gen_lepton_prior_1_0_9();

template<typename T> float gen_lepton_prior_1_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.204638,-0.0727176,0.309036,0.264148,0.118631,-0.0503484 };
  static const float weights1[][6] = { {-0.333543,0.0536967,-0.557943,0.576079,-0.266802,-0.247152}
,
{0.150879,-0.315301,-0.359972,0.039628,-0.233638,0.68193}
,
{0.459737,-0.0582804,0.00855825,0.130143,0.141745,0.344919}
,
{0.413783,-0.163806,0.35736,-0.162067,-0.128703,-0.947268}
,
{0.204761,0.100349,0.433902,0.0160453,0.255799,0.171103}
,
{0.0653675,-0.133598,0.145386,0.11042,0.13199,0.0639969}
,
{-0.118686,-0.00279424,0.186115,0.436553,-0.136961,0.0945277}
,
{0.0492542,-0.263755,-0.0740115,-0.35779,-0.0700006,0.0572335}
,
{0.083183,-0.0872299,-0.0101611,-0.101341,0.218965,0.0371407}
,
{-0.242546,-0.122581,0.00583433,-0.0390705,-0.122453,0.227189}
,
{0.121211,0.00413403,-0.0581479,-0.0590714,-0.0547548,0.111177}
,
{0.0103991,-0.178707,0.193208,-0.243917,0.0369127,-0.122315}
,
{-0.00947682,0.204234,0.122874,-0.012426,0.0107246,-0.0980788}
,
{0.00439928,-0.0884677,-0.0421501,-0.0207137,-0.149014,0.0555516}
,
{0.0406261,-0.0915314,0.114299,-0.0454521,0.0892439,0.014385}
,
{-0.0476707,0.186507,0.063108,-0.0401437,0.0171596,0.131313}
,
{0.254364,-0.306148,0.357962,-0.194712,-0.0309846,-0.0383236}
,
{0.0311523,0.183016,0.10617,-0.080854,0.0897374,-0.0477513}
,
{-0.157766,0.0167186,0.0746398,0.31,-0.118171,-0.199194}
,
{-0.121605,-0.129134,-0.0965927,0.043046,0.0631622,-0.163134}
,
{0.00938818,0.0345645,-0.199634,-0.349182,0.114769,-0.030936}
,
{0.0783898,-0.0145972,-0.209698,0.0361415,0.0484384,-0.180792}
,
{-0.101483,0.197257,0.0246231,0.132549,-0.0910776,0.160873}
,
{-0.143062,-0.149829,0.0129223,0.137391,0.0555262,0.196991}
,
{-0.00479337,0.182813,-0.0700361,0.21343,-0.0344066,-0.249421}
,
{-0.174004,-0.313581,-0.0559977,0.0449079,-0.186699,-0.213764}
,
{-0.14195,0.149622,-0.150035,-0.0502908,0.0690472,-0.266298}
,
{0.140132,0.0260247,-0.130488,0.118447,0.00377039,-0.0321491}
,
{0.357843,-0.0879702,0.339807,0.00244544,-0.0687353,-0.138269}
,
{-0.145941,-0.11588,-0.216856,0.0366692,0.110849,0.210446}
,
{-0.0601164,-0.0368435,-0.14386,-0.159982,-0.0715314,-0.215927}
,
{0.0709397,0.0710039,0.173343,0.00817834,-0.0462287,0.0915929}
,
{-0.210193,-0.0510171,0.046633,-0.00655525,0.0832602,-0.124093}
,
{0.00743703,0.0370503,0.0251953,-0.0913919,-0.0243123,-0.1331}
,
{-0.133621,-0.0349004,0.158441,0.0524355,0.114333,0.0286032}
,
{-0.00254389,0.166914,0.0849254,0.0978699,-0.062556,0.242511}
,
{0.0657737,-0.184653,-0.0124722,0.280553,-0.00179094,-0.0991899}
,
{0.0503487,-0.0491568,-0.101866,0.0656318,-0.021148,0.0852289}
,
{0.0822511,0.12498,0.0257396,0.432461,-0.0522317,0.0519713}
,
{0.0329156,0.0591313,0.222294,-0.00995673,-0.106751,0.143275}
,
{0.0431887,0.0806117,-0.0411151,-0.0838257,-0.0179672,-0.0530124}
,
{-0.0360767,0.265802,-0.0771986,0.189835,0.101635,0.030923}
,
{-0.121014,0.00277599,0.128913,-0.0747772,0.0801677,-0.167081}
,
{-0.0403107,-0.00453167,-0.011739,0.0843811,0.0112497,0.308373}
,
{-0.22501,-0.0175881,0.0804985,0.0655475,0.0920201,0.0809321}
,
{-0.0450556,-0.00403164,-0.0278542,0.018425,0.078999,0.046329}
,
{0.0423616,-0.0797894,-0.122201,0.234474,0.0166257,-0.156306}
,
{0.0593274,-0.00925017,0.0604838,0.00289146,-0.0430367,-0.0660485}
,
{0.135343,0.1981,-0.176159,0.255459,0.146658,-0.019662}
,
{-0.0521281,0.0681476,0.165274,-0.0866572,0.00581732,0.066971}
,
{0.210613,-0.173544,0.00507764,0.0769645,-0.145589,-0.00625289}
,
{0.208096,-0.0616887,0.281211,-0.0297586,-0.240989,-0.0600342}
,
{-0.098019,-0.00919664,-0.131875,-0.13388,0.120043,0.138325}
,
{-0.0753881,0.00469056,0.00255107,0.228773,0.116988,0.00454685}
,
{0.135096,-0.180192,-0.337494,-0.0169206,0.020889,-0.0255377}
,
{0.0181899,0.20636,0.0802442,0.0716351,-0.0407948,-0.0840666}
,
{0.0861006,-0.184765,-0.0771019,0.0839427,0.0991416,-0.120983}
,
{0.0226952,-0.0289236,0.904955,-0.268152,-0.358262,0.0121422}
,
{-0.0462896,0.435353,0.132217,-0.314377,0.143261,0.137253}
,
{-0.0823242,-0.119281,-0.0867665,-0.079716,-0.10002,-0.00601249}
,
{0.0530646,-0.122647,-0.0975533,-0.0147989,0.105922,0.128112}
,
{0.0990637,-0.0944598,0.340056,-0.138488,0.11032,0.0448927}
,
{0.129376,-0.139573,0.52835,-0.26994,-0.152714,0.52222}
,
{-0.0507543,-0.0389261,0.118033,0.0475478,0.184755,-0.144062}
,
{-0.150813,-0.239005,-0.100651,0.326987,0.129336,0.163287}
,
{0.0583222,-0.00182434,0.0322832,-0.138461,-0.26956,0.00976678}
,
{-0.174902,-0.0874992,0.223821,0.0112553,0.0123036,0.185372}
,
{-0.0106486,-0.776346,0.0687701,-0.509539,0.407411,-0.209486}
,
{0.0426308,0.0425122,-0.138318,-0.131869,-0.0834281,0.0601519}
,
{-0.0932429,0.180936,0.0231855,-0.138968,0.0926308,0.0807924}
,
{-0.108668,-0.0663854,0.0519882,-0.120708,-0.176224,-0.0738047}
,
{-0.131497,0.0842663,-0.193193,-0.137994,0.236002,0.00156532}
,
{0.393801,0.23131,-0.071096,-0.273888,-0.141345,-0.200865}
,
{0.00921615,-0.181969,0.0705752,-0.0784637,-0.0333626,-0.0672857}
,
{-0.271038,0.035281,-0.547805,-0.545388,0.188643,-0.413394}
,
{0.318887,-0.0887577,0.270499,0.217553,-0.149954,0.12851}
,
{0.322904,0.16269,-1.10778,0.513524,0.164863,-0.200715}
,
{0.0183805,-0.0555146,-0.133973,-0.00645374,0.0352946,0.161847}
,
{0.289527,-0.0884948,-0.299465,-0.465303,0.515346,0.110314}
 };
  static const float bias2[1] = { 0.0848645 };
  static const float weights2[][1] = { {0.1988}
,
{-0.200609}
,
{0.127719}
,
{-0.15354}
,
{0.132655}
,
{0.235769}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_0(v, index);
}
static int assign_gen_lepton_prior_1_1_0() {
  global_gen_lepton_prior.at(1,1,0) = &specialized_gen_lepton_prior_1_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_0 = assign_gen_lepton_prior_1_1_0();

template<typename T> float gen_lepton_prior_1_1_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0892128,0.0674484,-0.128843,-0.0297437,0.0672863,0.220193 };
  static const float weights1[][6] = { {0.402343,-0.357942,0.617607,0.85565,0.0395402,-0.262644}
,
{0.247491,-0.0222538,-0.227317,-0.16204,-0.106684,-0.478872}
,
{-0.361591,0.103119,-0.22845,-0.251729,-0.240109,-0.156666}
,
{-0.0202732,0.210215,-0.290379,-0.00898422,-0.192048,0.228848}
,
{0.0446628,0.175162,-0.266772,-0.204777,0.173841,0.268403}
,
{0.172136,-0.0652417,-0.0916449,-0.0767655,0.150896,0.157264}
,
{0.179929,-0.0157216,-0.239378,-0.0834008,0.00109139,-0.0853711}
,
{-0.192777,0.213694,-0.0346935,0.0798664,0.0848583,-0.0729342}
,
{-0.119114,-0.16124,-0.00330067,0.182917,-0.0695179,0.0784777}
,
{-0.0915468,0.00348414,-0.0292075,-0.115398,-0.0548101,0.0438732}
,
{0.128184,-0.156129,0.0649462,-0.0114762,0.140704,0.0263957}
,
{-0.096155,0.0270029,-0.0419712,0.0728432,0.00795597,0.0136716}
,
{-0.0450757,0.147608,-0.117821,0.0562057,0.19835,0.0036014}
,
{-0.220435,0.220828,-0.313176,-0.0201866,0.0465318,0.0130404}
,
{-0.111581,0.228794,0.0133776,0.00914242,0.113551,-0.102748}
,
{0.0840918,0.190266,-0.0380301,-0.0125324,0.00184384,-0.131092}
,
{0.192535,0.150952,0.21128,0.0747252,0.0127229,0.0330041}
,
{-0.0362813,-0.0481291,-0.118004,-0.0398813,-0.206035,0.134255}
,
{-0.254007,0.0813793,-0.0982639,0.142653,-0.511984,0.110195}
,
{-0.10945,0.161166,0.0467427,0.0709832,-0.00812447,-0.0424054}
,
{-0.0127027,-0.104918,-0.00235007,-0.170098,0.0544717,0.0705422}
,
{-0.0260333,0.128448,0.105836,0.0198144,-0.0421295,-0.108995}
,
{0.0421091,0.0817656,0.0614953,0.0784202,-0.0792745,0.00648485}
,
{-0.0163844,0.0105054,0.105877,0.00013921,0.0133763,0.0126621}
,
{0.220109,-0.326527,-0.134599,0.039267,0.218371,-0.471958}
,
{0.0363616,0.024342,0.285761,-0.0627205,-0.202525,0.0603128}
,
{0.173565,-0.211233,-0.0960611,0.042683,-0.298277,-0.0202402}
,
{0.0088699,-0.024802,-0.185888,0.0973058,0.0389394,0.280555}
,
{0.402974,0.0828248,-0.203424,0.493682,-0.324937,0.284041}
,
{-0.154188,0.0253494,-0.138023,-0.00741558,0.153534,0.110201}
,
{-0.0550598,-0.149163,0.00346179,-0.0861368,-0.06329,0.397327}
,
{0.122356,-0.0103296,-0.145222,0.19362,-0.088681,0.0913296}
,
{0.0204475,-0.0197961,0.211647,-0.0877889,-0.0373534,0.000922681}
,
{-0.00937635,-0.0587709,0.183354,-0.111192,0.0536434,0.0305291}
,
{-0.166095,-0.0975412,0.0692434,-0.127221,0.1119,0.0361252}
,
{0.102274,-0.0975065,-0.0970852,-0.0467057,0.0473416,0.0827233}
,
{-0.0325627,0.00633726,0.0436137,-0.267727,-0.119054,-0.0474142}
,
{-0.0149076,0.0335981,-0.0653524,0.104957,-0.0483033,0.0603674}
,
{0.0801878,0.254175,0.242899,0.0766084,0.0998458,-0.105248}
,
{0.122361,0.189007,0.206262,0.215083,-0.218259,0.189744}
,
{-0.0642805,0.069988,-0.0524077,0.053051,-0.0617823,-0.113538}
,
{-0.0443317,0.146093,0.57134,-0.173623,0.0101383,0.309239}
,
{0.0798497,-0.0166342,-0.011372,-0.0921161,-0.0521303,-7.43792e-05}
,
{-0.0811305,0.145884,-0.071713,-0.0187198,-0.0933829,-0.0614426}
,
{0.156772,-0.118817,-0.100773,-0.118576,0.0239414,0.0998548}
,
{-0.0511338,0.0404642,-0.0657824,-0.0300988,-0.0143311,-0.188944}
,
{-0.356287,-0.00525939,0.0677775,-0.425196,-0.028245,-0.0973012}
,
{0.276229,0.155831,0.012356,0.0446685,-0.190325,-0.0475773}
,
{0.324477,-0.216167,-0.158344,-0.295171,0.226762,-0.143801}
,
{0.0237079,-0.087951,-0.0110067,-0.0504048,0.148071,0.136253}
,
{0.105474,-0.047409,0.0615032,-0.102463,0.212293,-0.192065}
,
{0.111341,-0.178615,0.21332,0.0107856,0.0698061,-0.0131623}
,
{-0.127268,0.0408099,-0.122024,-0.0352734,-0.209355,-0.0242468}
,
{0.209681,-0.296381,-0.101532,-0.421706,0.410903,-0.087408}
,
{0.0107028,-0.0855521,-0.246793,-0.106532,0.157084,-0.373288}
,
{0.224324,0.101969,-0.009088,0.048488,-0.00276711,0.17591}
,
{0.33988,-0.379728,0.19193,0.621385,-0.201617,0.289517}
,
{0.0101968,-0.0225343,-0.0304841,-0.0846925,-0.0230709,0.17623}
,
{0.243747,0.275386,0.274158,-0.254743,-0.215816,0.267767}
,
{-0.129861,-0.0334712,-0.0292423,0.0212998,-0.0875371,0.107392}
,
{0.00281299,0.221397,-0.292589,0.0290697,-0.140119,-0.1593}
,
{0.385694,0.313454,-0.51254,-0.112129,0.229484,0.0344923}
,
{0.000618595,-0.0842727,-0.482518,-0.118992,0.401137,0.134324}
,
{-0.114609,-0.0701966,-0.0583097,-0.185419,-0.345286,0.163032}
,
{-0.0217224,0.012532,0.178837,0.12732,-0.0514889,-0.0941366}
,
{0.1403,-0.0867768,-0.11633,-0.0772813,-0.0373169,0.21781}
,
{0.24713,-0.152574,0.130516,0.682248,0.161722,-0.641807}
,
{0.251299,-0.0821297,0.377608,0.668932,-0.075302,-0.24704}
,
{0.169427,-0.128047,0.106601,0.0354633,0.011856,0.0277679}
,
{0.0729402,0.100055,-0.0932767,0.0373906,-0.0186466,0.0570891}
,
{-0.0782641,0.141403,0.0242156,0.13177,0.00529039,0.257559}
,
{0.339196,-0.0976158,-0.0227323,0.200776,-0.106789,0.00130175}
,
{0.285976,0.0149628,-0.0295495,0.367039,0.0653279,-0.221617}
,
{-0.339522,0.0384947,0.257212,0.131095,-0.00240115,0.00811006}
,
{-0.073363,0.591805,-0.187696,-0.345108,-0.554781,0.370858}
,
{-0.804603,0.261455,-0.621783,-0.0696988,0.167222,-0.211914}
,
{0.0450796,0.0300528,0.0529634,-0.0129298,-0.0289648,0.019206}
,
{0.21768,-0.0290726,-0.0965089,0.00150361,0.0114261,0.0328512}
,
{-0.241009,1.27255,-0.103175,-0.013111,0.0285407,-0.458096}
 };
  static const float bias2[1] = { 0.191231 };
  static const float weights2[][1] = { {-0.0803853}
,
{0.178744}
,
{-0.120189}
,
{-0.120823}
,
{0.1834}
,
{0.114104}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_1(v, index);
}
static int assign_gen_lepton_prior_1_1_1() {
  global_gen_lepton_prior.at(1,1,1) = &specialized_gen_lepton_prior_1_1_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_1 = assign_gen_lepton_prior_1_1_1();
