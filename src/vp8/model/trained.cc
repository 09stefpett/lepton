#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.31661,0.0567987,-0.12916,-0.058703,0.0515205,0.163163 };
  static const float weights1[][6] = { {0.0173633,-0.266877,0.0800723,-0.0252955,-0.0510179,-0.406603}
,
{-0.229933,-0.0309784,-0.105823,-0.263635,0.0169924,-0.0361688}
,
{-0.0461971,-0.0164361,0.11939,-0.165001,0.123206,0.772665}
,
{-0.485566,0.366983,-0.293886,0.213208,-0.220157,-0.053481}
,
{-0.174602,0.0277299,-0.302317,-0.106974,0.169387,0.262748}
,
{-0.116624,-0.0473399,0.0247544,-0.297323,0.173332,0.372974}
,
{-0.340786,0.00521747,0.2135,-0.307282,0.228404,0.361991}
,
{-0.037776,0.0261843,-0.0111238,0.0347286,0.035931,-0.102067}
,
{-0.100242,0.00408434,0.178188,-0.0743568,-0.0144435,-0.00722111}
,
{-0.124207,-0.214444,-0.122226,-0.0931869,-0.209839,0.093425}
,
{0.100625,-0.060526,-0.105462,-0.239003,0.00512755,0.0540857}
,
{0.17237,-0.103724,0.0934492,-0.0837063,-0.105263,-0.0358919}
,
{-0.027604,-0.0587746,0.0926243,-0.175352,-0.0526773,-0.0427868}
,
{-0.0525871,0.141928,-0.107954,0.0771492,-0.113691,0.00646008}
,
{0.104374,-0.021342,0.0112651,-0.123239,0.0877514,-0.167404}
,
{0.0711958,0.181149,0.143232,-0.0504612,0.0888599,-0.146856}
,
{-0.106259,0.0507574,0.0950208,0.0935967,0.0251465,-0.172978}
,
{-0.00673285,0.0163017,-0.0856721,-0.13836,0.0836149,0.0172934}
,
{0.296124,0.0676945,-0.0506202,-0.184152,-0.225479,-0.292994}
,
{-0.232515,0.0269585,-0.0831553,-0.212718,-0.0560011,0.0775624}
,
{0.0043058,0.107942,-0.147847,-0.0127693,-0.0453512,0.303313}
,
{-0.0307254,-0.000203831,0.00116339,-0.0293765,0.0706974,0.0218531}
,
{-0.141845,-0.0189042,-0.0013592,-0.0698683,-0.0666151,0.112207}
,
{0.127001,0.0680214,-0.263497,-0.256837,0.124299,0.107008}
,
{0.0332768,0.0105974,-0.0209016,-0.0420372,0.0823651,0.242454}
,
{-0.0406817,-0.189684,0.017374,0.0205357,-0.0189222,-0.0226769}
,
{0.0523393,-0.154938,0.00942581,-0.181993,0.150248,0.0761451}
,
{-0.127251,-0.060186,0.165699,-0.0389195,-0.135213,-0.0460208}
,
{0.264412,-0.19897,-0.2483,-0.212396,0.0913723,0.0214044}
,
{-0.094259,-0.146577,0.195717,-0.140988,0.181388,0.0346245}
,
{-0.00462797,-0.0129234,-0.130135,0.0859922,0.0364954,-0.214701}
,
{-0.101903,-0.120855,-0.119514,0.13723,-0.033391,0.0909979}
,
{-0.198229,-0.0430761,-0.0959601,-0.0713426,0.0927001,0.0459109}
,
{0.173963,0.15553,0.0534038,0.0827311,0.147489,0.0869742}
,
{0.0173613,0.0406496,-0.0510454,-0.0330769,-0.114576,-0.0415736}
,
{0.0639285,0.0818355,0.0258087,-0.0470083,-0.0178224,0.0216218}
,
{0.0813042,0.11418,-0.153554,-0.0941309,0.0693508,-0.0726794}
,
{-0.0412308,-0.0375594,0.0833915,-0.0275148,0.0777206,0.00784077}
,
{-0.0800079,-0.134274,0.0144596,0.172195,0.146099,0.0370428}
,
{0.00695497,0.025125,0.108006,0.11674,0.0618515,0.0362919}
,
{-0.161294,-0.152284,-0.0978447,0.0224467,0.124354,-0.111737}
,
{0.0503598,0.133344,-0.0114378,-0.0916169,0.131719,-0.0833562}
,
{-0.0616892,-0.0703529,0.0300492,-0.0362326,0.0513678,-0.0116591}
,
{0.105243,0.168835,0.172917,-0.0528843,0.19327,-0.0524604}
,
{0.0312582,0.0783516,-0.139982,-0.0208678,-0.255562,-0.00117737}
,
{-0.000296018,-0.0388392,0.0797947,-0.10092,-0.0795579,0.0795212}
,
{0.0742746,-0.0412707,0.10827,0.0135975,0.0582058,0.174601}
,
{0.0979112,0.0747978,0.00978103,-0.0262437,-0.100655,0.0990117}
,
{-0.00744054,-0.000543442,0.328031,-0.217304,-0.0426396,-0.0262893}
,
{-0.0990098,-0.105657,0.0545965,-0.00200949,-0.0296914,-0.00906807}
,
{-0.145703,-0.191525,0.0455568,0.104458,0.0508884,-0.0133252}
,
{-0.0324221,-0.0367166,0.215932,-0.0752725,0.300562,0.114883}
,
{-0.123665,-0.134998,-0.182365,-0.0706052,0.0669643,-0.158426}
,
{-0.0629797,-0.00911411,0.0777185,0.0602615,0.13571,-0.124008}
,
{0.109509,-0.108378,-0.17809,-0.00383117,-0.106,0.0453857}
,
{-0.00366091,-0.0538379,-0.168331,-0.0663601,0.0697149,-0.0544527}
,
{0.264069,-0.0603908,-0.062317,0.00963877,0.0725164,0.496885}
,
{0.0136893,0.315804,-0.0195195,-0.189771,0.0950945,0.0749765}
,
{0.0696404,-0.151801,-0.0996949,0.20388,0.00717005,-0.0503541}
,
{0.0629785,0.0342249,-0.0247545,-0.0773652,-0.165967,-0.0281934}
,
{-0.0496063,-0.00245166,-0.0109444,0.146567,-0.0415703,-0.0779528}
,
{-0.016121,-0.14239,-0.0345821,-0.119463,-0.170496,0.27938}
,
{0.0308867,0.0510531,0.0682036,0.113206,0.00397261,0.258902}
,
{-0.078588,-0.170548,-0.0195943,-0.0340192,-0.079635,0.145764}
,
{0.0712974,0.168157,0.0556684,0.119873,-0.0776527,-0.113659}
,
{0.0226398,0.0407706,-0.141626,-0.0329559,0.146681,-0.0459968}
,
{-0.108777,-0.207861,-0.439659,-0.0369566,-0.197462,0.139642}
,
{0.323216,-0.466295,0.102834,0.0868334,-0.38403,-0.241154}
,
{0.0189211,-0.0331118,0.0854746,0.0336435,-0.109589,-0.0896155}
,
{-0.145782,-0.052712,-0.108384,-0.0482469,-0.269481,-0.250884}
,
{0.053087,0.0721992,0.0186537,-0.00562984,-0.0199033,-0.0279343}
,
{0.0432012,-0.162538,0.144448,-0.221429,-0.163276,-0.041842}
,
{0.515728,-0.345377,-0.0643753,0.0495487,0.0234272,-0.0805811}
,
{-0.207581,-0.279275,0.0896124,-0.0997284,-0.224816,-0.0996825}
,
{-0.185146,-0.199131,0.359253,-0.216558,-0.096613,-0.666941}
,
{-0.0662611,-0.0337171,0.145711,0.215611,-0.227841,0.107472}
,
{-0.507578,0.73438,0.318039,-0.0130414,0.0592827,-0.531749}
,
{0.130671,0.0895312,0.113663,-0.0746714,-0.085537,-0.0792903}
,
{0.107035,-0.716973,0.774038,0.299966,0.066301,-0.89602}
 };
  static const float bias2[1] = { 0.307978 };
  static const float weights2[][1] = { {-0.097257}
,
{0.0725158}
,
{-0.0242003}
,
{0.00962835}
,
{0.00784573}
,
{0.0316508}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_0_0(v, index);
}
static int assign_gen_lepton_prior_0_0_0() {
  global_gen_lepton_prior.at(0,0,0) = &specialized_gen_lepton_prior_0_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_0_0 = assign_gen_lepton_prior_0_0_0();

template<typename T> float gen_lepton_prior_0_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0972178,-0.456023,0.302207,0.562833,-0.065231,-0.205144 };
  static const float weights1[][6] = { {-0.406362,1.43796,-0.996749,-1.26601,-0.514822,-0.341023}
,
{-0.141051,-0.0258121,-0.104848,-0.179403,-0.512963,0.091416}
,
{0.124,-0.0975134,0.178538,-0.00535876,-0.430346,-0.135592}
,
{0.178541,-0.835173,0.519496,1.04665,0.225841,-0.240977}
,
{0.0715962,-0.457289,0.364894,0.516024,-0.039512,-0.347899}
,
{0.251815,0.0200218,0.030453,0.194662,-0.255393,-0.262984}
,
{0.0298233,0.0804093,-0.0127563,0.328701,-0.269379,-0.23326}
,
{0.154226,0.199495,0.12691,0.157165,-0.0378201,-0.0935928}
,
{0.0194612,-0.020484,-0.248048,-0.0739283,-0.0472709,0.131263}
,
{-0.0888871,0.0584438,0.0720105,-0.0474149,-0.0874367,-0.0639991}
,
{-0.108031,0.00103648,-0.160682,-0.0998819,-0.151,0.113747}
,
{-0.109867,-0.0821853,0.0803643,-0.0838458,0.0711145,-0.109987}
,
{-0.032996,-0.0507149,0.16018,-0.057832,-0.0423967,0.11188}
,
{0.14701,0.047103,0.157314,0.0699973,-0.0585538,-0.00864058}
,
{-0.169332,0.0181303,-0.0194225,0.0194622,0.160523,0.108125}
,
{0.157091,-0.0849473,0.148691,-0.0341032,-0.0571394,-0.129223}
,
{-0.048963,-0.0707676,-0.0392094,-0.16217,0.0420667,-0.00802623}
,
{-0.00733496,-0.138663,0.00759918,0.163196,-0.0671899,-0.134871}
,
{-0.242056,0.530422,-0.266112,-0.668327,-0.475864,0.179708}
,
{-0.106339,0.0291882,0.0516575,-0.0324942,-0.17719,-0.155996}
,
{-0.0855131,0.0117245,0.140202,0.286331,-0.071443,0.0822806}
,
{0.169426,0.225663,0.0887637,0.19371,-0.268132,-0.00659466}
,
{-0.139953,-0.00329596,0.0341856,0.0132358,0.00642509,-0.215406}
,
{0.390929,0.116729,0.216243,0.0602193,-0.127896,0.256472}
,
{-0.0630187,-0.198804,-0.0333997,-0.255358,-0.0391118,-0.189059}
,
{0.066534,-0.11882,0.10679,-0.1929,0.144609,0.0795511}
,
{0.0908584,0.036064,-0.0665245,0.442004,0.0584196,-0.0318041}
,
{-0.205124,0.361796,0.0463433,0.108926,-0.0925075,-0.197646}
,
{0.384451,-0.529808,0.00449064,0.6971,0.180687,-0.334882}
,
{-0.105903,0.0726427,-0.0237526,-0.0660298,0.0406592,0.0194197}
,
{0.00377064,-0.0456509,0.013153,0.0822328,-0.0799288,-0.222584}
,
{-0.104228,-0.113405,0.208021,-0.0590246,0.00844445,0.022556}
,
{0.189148,-0.00992275,-0.0111332,-0.0694408,0.0808073,0.00316027}
,
{-0.116508,-0.0938301,0.10893,-0.186278,-0.0562075,-0.0458882}
,
{0.0427424,-0.0407899,-0.0574966,0.0333122,0.077942,0.114267}
,
{-0.0555441,0.00175153,0.00522803,0.0337437,0.0752423,0.0779939}
,
{-0.0952641,-0.141181,-0.119898,0.0936979,0.0319162,0.0704731}
,
{0.138197,-0.0163208,-0.0153881,-0.0197563,-0.0051062,0.0227068}
,
{-0.181134,-0.260733,-0.164997,-0.00252216,-0.0240327,0.0251713}
,
{0.204254,0.175427,-0.143558,0.174338,0.075781,-0.179437}
,
{0.183155,0.0768348,0.0327038,0.00305745,0.0407464,0.065698}
,
{0.0288539,-0.135911,-0.101325,-0.0500752,-0.321555,-0.0266163}
,
{-0.0814625,0.0321584,0.071834,0.0345205,-0.0440801,0.0626036}
,
{0.116729,0.127655,0.102599,0.0439018,-0.0396729,0.128085}
,
{0.185432,0.0116859,-0.100681,0.0540885,-0.166264,-0.0936244}
,
{-0.0795546,0.0407464,0.105877,-0.0310938,0.0876049,0.0429838}
,
{-0.0794273,0.0901668,0.151103,-0.050605,-0.14168,-0.0261553}
,
{-0.0227184,-0.020073,-0.0125168,0.0206209,0.0672245,0.0454244}
,
{0.403043,0.162557,-9.85948e-05,0.0366855,0.000554311,0.0052156}
,
{0.0578735,0.0550506,-0.0503865,0.155117,0.0460327,0.0688666}
,
{0.0661455,0.146152,0.0471455,0.0499502,0.0578312,-0.0402112}
,
{-0.116238,0.0868246,0.0689693,-0.0426,-0.328955,-0.276033}
,
{0.0522742,0.0243185,0.0159294,-0.0410917,-0.0498981,-0.111115}
,
{0.106202,-0.0562167,-0.106908,-0.0021912,0.121474,-0.0453739}
,
{-0.417213,-0.231246,0.0270774,-0.063431,-0.0697299,0.221186}
,
{0.0261647,-0.0621685,-0.0549182,0.0371618,-0.12175,-0.000976543}
,
{0.155055,0.168097,0.00777564,0.111996,0.521341,-0.0115852}
,
{-0.142644,0.353679,0.0100106,0.147318,0.372286,-0.0735012}
,
{-0.0437579,-0.082752,-0.0540073,-0.0637274,-0.0775201,-0.0517763}
,
{0.201605,-0.0466554,-0.179016,0.166627,-0.204188,-0.0690001}
,
{0.00978026,0.0348734,0.0472517,-0.0390975,0.00180913,-0.0117145}
,
{-0.0519463,-0.181141,0.0191655,-0.191783,0.0798179,0.0623766}
,
{0.393729,-0.0143965,0.0894183,-0.0605117,-0.480513,0.370919}
,
{0.0270376,-0.126066,0.0472407,-0.124573,0.0548634,0.0526701}
,
{-0.0799324,-0.110852,-0.0795543,0.0405719,0.0633451,0.138703}
,
{-0.0761472,-0.0530097,-0.0353806,0.0930217,0.0885877,0.164137}
,
{0.211337,-0.172414,-0.168175,0.163415,0.123642,0.13603}
,
{-0.160373,-0.173424,-0.277563,-0.349045,-0.721765,0.0084536}
,
{0.0574088,-0.0496653,-0.0301714,-0.0873652,0.130604,0.127079}
,
{0.140308,-0.0879625,-0.210898,0.0162236,-0.0650182,-0.18061}
,
{0.0189082,0.0583564,0.0544906,-0.0896969,0.233104,0.0174504}
,
{-0.436088,-0.453431,-0.325891,-0.187614,0.127271,0.0245699}
,
{-0.00247565,0.517607,0.0897746,0.219386,0.0225437,-0.111737}
,
{-0.0192353,-0.0940369,-0.0984227,0.0228309,-0.0490813,-0.0496072}
,
{0.436042,-0.0804203,0.136815,-0.395182,0.0922524,0.184399}
,
{-0.0188719,-0.241139,-0.0257915,-0.233143,0.468391,0.122972}
,
{-0.175798,-0.0587561,0.325044,0.32582,0.167749,-0.261353}
,
{-0.0254623,0.141767,0.137995,0.0995552,0.194871,0.193892}
,
{0.415823,0.183906,0.555143,-0.454389,0.143548,-0.164988}
 };
  static const float bias2[1] = { 0.176537 };
  static const float weights2[][1] = { {0.018954}
,
{-0.0673746}
,
{0.0708864}
,
{0.0554684}
,
{0.0143868}
,
{-0.0348524}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_1_0(v, index);
}
static int assign_gen_lepton_prior_0_1_0() {
  global_gen_lepton_prior.at(0,1,0) = &specialized_gen_lepton_prior_0_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_1_0 = assign_gen_lepton_prior_0_1_0();

template<typename T> float gen_lepton_prior_0_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.185146,0.454392,-0.173477,0.33306,0.4538,0.17324 };
  static const float weights1[][6] = { {1.00405,-1.44718,1.14075,-1.23274,1.54881,-0.418572}
,
{-0.00940282,0.0471582,-0.00762179,-0.111669,0.299626,-0.149055}
,
{-0.163048,0.556271,-0.0379303,-0.0865359,0.332647,-0.356353}
,
{-0.394997,0.701884,-0.337393,0.752126,0.108124,0.12248}
,
{-0.251264,0.415085,-0.21646,0.34022,0.470336,-0.0737856}
,
{-0.176285,0.316847,-0.0832416,0.18399,0.609806,0.0733891}
,
{-0.217435,0.410624,-0.250381,0.342804,0.319405,0.160448}
,
{0.0546094,0.063912,0.0562744,0.244508,0.0241663,0.0823974}
,
{0.117288,-0.0176492,-0.0308896,0.00242958,-0.0600947,-0.0853959}
,
{-0.0860798,-0.163027,0.13072,-0.0110288,0.0294081,-0.089062}
,
{0.106255,0.076092,0.0784231,-0.145206,0.0466229,-0.0205113}
,
{-0.040466,0.154841,0.181322,-0.177739,0.0319926,0.0724207}
,
{-0.201189,-0.0737315,0.166392,0.0323622,0.15524,0.1267}
,
{0.00799243,-0.0100261,0.132241,-0.0992687,-0.00547681,-0.116491}
,
{0.23282,-0.107845,-0.0264886,0.19357,0.123807,0.0486621}
,
{-0.0612433,-0.0833964,0.142544,0.0590161,0.129744,0.00113629}
,
{-0.0295233,0.0906516,-0.0204875,0.0252202,0.0188436,0.140699}
,
{-0.23266,0.106207,0.0684045,-0.0801823,-0.0988982,0.156499}
,
{1.06611,-1.34328,0.742428,-1.09177,1.17157,-1.15}
,
{-0.108655,-0.164733,0.0551449,0.210899,0.166944,-0.0145089}
,
{0.186583,0.0907369,-0.113497,0.211319,-0.180949,-0.108154}
,
{0.142798,0.0755044,0.128577,0.089858,-0.0902006,0.126045}
,
{-0.112153,-0.0636728,-0.107534,-0.0497066,0.0461479,-0.204516}
,
{0.116189,0.0466366,-0.0405097,0.140077,0.00442809,-0.201781}
,
{0.27695,-0.0229204,0.0680571,-0.172353,0.0481307,-0.20037}
,
{0.155615,-0.188145,0.263708,0.112346,0.0113404,-0.043055}
,
{0.311907,-0.306107,0.0595575,0.0260795,0.055733,-0.207321}
,
{-0.148888,-0.0702921,0.228566,-0.123279,0.0325057,0.00794322}
,
{0.221579,-0.0927742,0.337575,-0.361283,0.451341,-0.243429}
,
{-0.108152,-0.0155089,0.0556522,0.00646329,-0.083246,0.0700362}
,
{0.0190788,-0.0798417,0.129698,-0.0322662,-0.0229087,-0.206814}
,
{0.185634,0.106369,-0.0642334,0.240259,-0.0129864,0.0869322}
,
{0.224335,0.0701254,0.07444,0.179517,-0.139404,-0.104288}
,
{-0.136162,-0.070149,-0.113218,0.0049152,0.120715,-0.110787}
,
{-0.107639,-0.000423369,-0.00937091,-0.0886103,0.0205691,0.00397221}
,
{0.11345,-0.00550101,0.0856974,0.0978994,-0.00378198,0.122917}
,
{-0.125744,0.137907,0.105396,-0.0733214,0.125609,0.0393438}
,
{0.0602389,0.0404557,-0.0151594,0.038934,0.0411932,-0.0214409}
,
{0.16048,-0.0853756,-0.0372782,0.136083,-0.0643351,0.0540254}
,
{0.11421,-0.171805,-0.0671306,0.115297,-0.00371202,0.215069}
,
{0.0194681,-0.00627827,0.196122,0.0307987,-0.0410913,0.122303}
,
{0.0919722,0.0730374,0.141796,0.0791511,0.0605503,0.132799}
,
{-0.0175872,0.0955435,0.151367,-0.0274626,0.0657372,0.16136}
,
{0.0147062,0.213718,0.158109,-0.00211369,0.0911042,-0.142378}
,
{0.0226996,-0.172979,-0.165114,0.0459589,-0.0673576,0.00128572}
,
{-0.150592,0.110147,0.199885,-0.132306,0.0583643,0.181749}
,
{-0.114414,0.0340426,-0.136118,-0.0713764,0.0923232,0.00883861}
,
{-0.0951809,-0.0810261,-0.0128856,-0.0535619,-0.0622934,0.014175}
,
{-0.133462,-0.087841,-0.14039,-0.0940878,-0.093559,-0.236818}
,
{0.0114963,0.0141498,-0.0169557,-0.00892138,0.0144306,-0.0342897}
,
{-0.0454103,-0.0694892,-0.124427,-0.0361803,0.00116328,0.0232173}
,
{0.0893778,-0.0341067,-0.0274459,0.0149142,-0.0437731,-0.0682806}
,
{-0.0165723,-0.0319245,-0.164488,-0.0217698,-0.0303153,-0.174672}
,
{-0.110258,-0.0852556,-0.169824,-0.0608515,0.0358985,0.0260215}
,
{0.0992184,-0.225321,0.17643,-0.233578,0.0140342,0.156371}
,
{-0.0459149,-0.109986,0.0648475,0.0102461,0.129752,0.0636151}
,
{-0.0203564,-0.163249,-0.0413852,-0.130827,0.126639,-0.0020844}
,
{-0.138071,-0.0835362,0.192253,0.0495253,-0.127563,0.249343}
,
{0.117076,0.0613794,-0.075736,0.0699585,-0.224061,-0.310728}
,
{0.146396,-0.0248424,0.167549,-0.102528,-0.261385,0.175364}
,
{-0.0913415,0.0745505,0.11699,0.00750452,-0.0661417,0.101065}
,
{0.0221282,0.278066,-0.0597401,0.0888123,-0.0541724,0.046684}
,
{-0.143073,0.356882,0.051477,0.161001,-0.298225,0.0893064}
,
{-0.0552625,-0.130667,-0.0256726,0.159019,-0.139215,0.0606353}
,
{-0.013974,-0.019998,-0.0273253,-0.190069,-0.102732,0.351574}
,
{0.0291696,-0.0151233,-0.0218934,0.0603755,0.0626069,-0.101479}
,
{-0.259405,0.115713,0.023193,-0.133488,0.0929202,-0.0213658}
,
{0.458214,-0.285886,0.667653,-0.486085,0.192313,0.0303812}
,
{0.0422187,-0.163936,0.0207286,-0.038622,0.14761,-0.304848}
,
{0.17623,0.316387,-0.387893,-0.0675679,0.00339736,0.234096}
,
{0.157272,0.149042,-0.0575497,0.149755,0.0669441,0.0789057}
,
{-0.103018,-0.153633,-0.1923,-0.16427,0.0949814,-0.203333}
,
{0.138444,-0.120752,0.33274,-0.089082,-0.0145457,0.155559}
,
{0.0933723,0.106022,-0.325211,0.085289,0.0296218,0.282023}
,
{0.295827,0.226173,0.0706904,0.0208203,-0.096041,-0.156313}
,
{0.011424,-0.0162992,-0.319593,0.0053566,0.0959627,-0.361723}
,
{-0.0680789,-0.352169,-0.0435432,0.117617,0.0717708,-0.313885}
,
{-0.0628491,0.169901,-0.141921,-0.0417646,-0.0152893,-0.0463397}
,
{-0.353144,0.0919473,-0.0207708,0.216134,-0.261314,-0.490518}
 };
  static const float bias2[1] = { 0.313659 };
  static const float weights2[][1] = { {-0.117688}
,
{0.0933447}
,
{-0.040362}
,
{0.149835}
,
{-0.11042}
,
{0.0287691}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_2_0(v, index);
}
static int assign_gen_lepton_prior_0_2_0() {
  global_gen_lepton_prior.at(0,2,0) = &specialized_gen_lepton_prior_0_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_2_0 = assign_gen_lepton_prior_0_2_0();

template<typename T> float gen_lepton_prior_0_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.241351,0.10775,0.0440149,-0.239328,-0.236829,-0.213497 };
  static const float weights1[][6] = { {0.342597,0.503243,0.313346,-0.0213623,-0.116527,0.0243426}
,
{0.093591,0.610756,-0.530134,-0.155943,0.233861,-0.132306}
,
{-0.115058,-0.0727354,-0.0850453,-0.0675959,-0.142369,-0.158888}
,
{0.0868464,0.318367,0.481017,-0.0865679,0.214159,-0.312201}
,
{0.427586,-0.0519766,0.0425605,-0.037785,-0.155872,-0.0304579}
,
{0.500302,0.0002839,-0.0501215,-0.190353,-0.311804,-0.295493}
,
{0.352855,0.22745,-0.0249265,-0.327263,-0.538846,0.0675035}
,
{-0.15326,-0.119974,0.0076786,-0.182827,0.0310204,0.0994028}
,
{-0.0563896,0.102227,0.201488,-0.0981063,-0.0547561,0.0289735}
,
{0.0296425,0.0277928,0.130547,0.00998174,-0.0103209,0.025192}
,
{0.156389,0.116258,0.129892,0.0728565,-0.160119,0.0100298}
,
{0.0295789,0.0157812,0.224637,0.130045,-0.158355,0.0547821}
,
{0.139374,0.0609074,0.1341,-0.0812173,-0.111991,-0.0973437}
,
{-0.042282,0.011974,0.127424,0.247058,-0.0892678,0.0687666}
,
{-0.0547775,-0.0317691,-0.09601,-0.023537,-0.170903,0.0617832}
,
{0.179981,-0.0627372,-0.0609661,-0.127777,0.0892402,0.104056}
,
{0.13662,0.1131,0.121519,-0.0938112,0.148904,-0.0845591}
,
{0.122795,-0.103555,0.149847,0.0409737,-0.218738,-0.09118}
,
{2.53936,0.869963,1.29337,-2.0166,-1.9452,1.16626}
,
{0.1419,-0.0832954,0.019797,-0.0309336,-0.189638,-0.105832}
,
{-0.00857762,-0.210932,-0.379725,0.143903,0.156158,-0.0758953}
,
{-0.0693445,-0.131818,-0.279076,-0.0871542,-0.00613722,-0.132344}
,
{-0.173699,-0.114445,0.0455216,0.0908554,0.0250266,-0.0068439}
,
{0.0656375,-0.052713,0.0940391,0.0418626,0.229715,0.0394077}
,
{0.208079,0.0754104,0.0695156,-0.0719695,-0.0323341,0.109161}
,
{0.147397,0.152579,0.222885,0.096589,0.0607088,-0.184671}
,
{0.218616,0.0801002,-0.124556,0.0597763,-0.122118,0.192856}
,
{0.239627,0.0454171,0.120171,-0.114183,0.163684,0.220398}
,
{0.144502,0.1837,0.185044,-0.169283,0.0766365,0.239822}
,
{0.113371,-0.11046,-0.130071,-0.012021,-0.0518055,0.0387016}
,
{-0.0789108,-0.0910563,-0.11002,-0.000922246,0.0694908,-0.0128676}
,
{0.067321,0.0566881,-0.0158204,-0.117418,0.121607,0.171547}
,
{-0.00190827,-0.117487,0.0527302,0.100565,-0.0841726,-0.00499959}
,
{0.113454,0.0698775,0.122334,-0.0488496,-0.0577561,0.0398985}
,
{0.0427275,-0.0035838,-0.0589185,0.153831,0.00166457,-0.0121919}
,
{-0.0083601,0.00235064,-0.0323574,0.0202483,-0.0281226,0.0265753}
,
{-0.021148,-0.0928002,0.155711,0.00792372,-0.0675962,-0.0651121}
,
{0.0442025,0.0406613,-0.0156261,0.108948,0.0255516,0.0652973}
,
{-0.0150975,-0.0016894,-0.0719784,-0.0509217,-0.00245891,0.0980424}
,
{0.0300949,-0.0328498,0.0544505,0.0101907,0.0390526,0.01216}
,
{0.0299884,-0.00878747,-0.0173559,0.143173,0.013292,-0.0830377}
,
{0.00634724,0.0762857,-0.104221,-0.0102724,0.0717207,-0.163539}
,
{0.0233179,0.0048672,0.000487321,0.00885763,0.043187,0.0156168}
,
{0.0398961,0.138448,-0.161978,0.0744082,0.0421047,0.108105}
,
{0.0101512,-0.110937,-0.0879956,0.123095,-0.00936388,0.0383521}
,
{-0.0326528,0.00697399,-0.0177853,-0.0683156,-0.0460228,-0.0448756}
,
{0.018873,0.0597906,0.185075,0.0215886,0.0640613,0.146833}
,
{0.044595,-0.0642332,0.102083,-0.134941,0.106645,-0.051801}
,
{-0.000649391,0.0353514,-0.0330351,0.0595678,0.00456576,0.136355}
,
{0.0543368,0.0556007,0.0370653,-0.0777353,0.0736778,0.0408124}
,
{0.0116953,-0.0331545,0.0277353,-0.0813377,0.0439268,0.136503}
,
{-0.0146095,0.0296779,-0.0545357,-0.0646587,0.0143707,0.0799259}
,
{-0.0127944,0.00995341,-0.0815307,-0.0452639,-0.0114851,0.036878}
,
{-0.0252795,-0.0413792,-0.0700855,0.0280421,-0.00703383,0.0457906}
,
{0.034305,-0.0203898,-0.0625043,-0.101613,-0.0423052,0.0162764}
,
{-0.20659,0.0119373,-0.0221468,-0.0513524,-0.0131269,0.165681}
,
{0.123696,0.0589166,0.0248634,0.0582312,0.0454483,-0.082118}
,
{-0.0618918,-0.00564839,0.00750898,0.146044,0.106294,0.236652}
,
{0.145157,-0.0499981,0.0562469,0.07484,-0.0674114,0.0522643}
,
{0.0948912,-0.0254406,-0.169901,0.188846,-0.165797,-0.222987}
,
{0.164283,0.0218628,-0.202235,0.128934,-0.139092,0.0224692}
,
{0.00560616,0.062016,0.110964,0.228152,0.0860077,0.185608}
,
{0.191083,-0.0625281,-0.0144784,0.00255783,-0.101193,0.093416}
,
{0.0179187,-0.0870264,-0.191929,-0.080913,-0.119573,0.225509}
,
{0.11153,0.133135,-0.104727,0.04625,0.0103974,-0.024418}
,
{0.26119,-0.132245,-0.0949022,-0.0241299,-0.160506,-0.0754651}
,
{0.0932425,0.116881,-0.0880192,0.0888884,-0.0370898,-0.0834186}
,
{-0.0111848,0.0617986,0.0140034,0.0894052,0.101379,-0.0426321}
,
{0.0421698,-0.102833,-0.0814842,-0.124646,0.0510489,0.0261246}
,
{0.0447383,-0.110846,-0.0308033,0.0133465,-0.0898193,0.1183}
,
{0.0955832,-0.066181,-0.055944,0.0964126,0.0268911,-0.0970723}
,
{-0.108845,0.0355949,0.144513,0.0588818,0.0705155,-0.100992}
,
{0.105813,-0.149022,-0.164588,0.118408,0.00965564,-0.0129288}
,
{0.185377,-0.133669,0.144822,-0.019916,0.122404,-0.140041}
,
{-0.0242775,0.0182171,0.0212326,0.132496,-0.0757734,0.232556}
,
{-0.104152,-0.0811127,0.0307057,-0.111919,0.0023639,0.118122}
,
{0.051558,-0.108296,0.020475,-0.0492426,0.147931,0.169705}
,
{0.139567,-0.0592873,0.00747461,-0.0491438,-0.0889547,0.229456}
,
{-0.107724,-0.0178939,-0.035945,-0.00693498,0.18627,0.219975}
 };
  static const float bias2[1] = { 0.413189 };
  static const float weights2[][1] = { {-0.219928}
,
{-0.24011}
,
{-0.144606}
,
{0.0886958}
,
{0.149192}
,
{-0.0307266}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_3_0(v, index);
}
static int assign_gen_lepton_prior_0_3_0() {
  global_gen_lepton_prior.at(0,3,0) = &specialized_gen_lepton_prior_0_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_3_0 = assign_gen_lepton_prior_0_3_0();

template<typename T> float gen_lepton_prior_0_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.546842,-0.337182,0.0666216,-0.645091,0.126479,-0.238889 };
  static const float weights1[][6] = { {-0.310626,-0.123278,0.108494,-0.417304,-0.021175,-0.0847932}
,
{0.221972,0.379279,0.0135153,0.0102976,0.0637538,0.373756}
,
{-0.322852,-0.223105,0.0253207,-0.804268,-0.405322,-0.13269}
,
{0.230118,0.787833,0.567347,0.587497,-0.0452716,0.263952}
,
{-0.39661,-0.151844,0.132827,-0.448217,-0.124073,-0.224855}
,
{-0.773324,-0.638057,-0.034952,-0.942501,0.221393,-0.485649}
,
{-0.909433,-0.690858,-0.16193,-1.08463,0.105071,-0.432293}
,
{0.0437454,0.122081,-0.0069647,0.0234611,0.110543,-0.195775}
,
{0.0383329,-0.0647973,0.0598523,0.0781034,0.225709,-0.171883}
,
{-0.048982,0.103717,-0.194034,0.137214,0.00528766,0.126946}
,
{0.0869695,-0.0494613,-0.0186506,0.14138,-0.0671992,-0.0657486}
,
{0.0621347,-0.115171,0.0598033,0.0272394,-0.0825085,-0.18412}
,
{-0.0630271,-0.218121,-0.0342711,-0.0352603,-0.0057551,0.0228335}
,
{-0.0880891,0.0537828,-0.0070435,0.0865382,0.0392582,-0.110855}
,
{0.123842,-0.0835583,0.0109353,-0.135234,-0.0118312,-0.0545071}
,
{-0.0689918,-0.0493682,0.156423,-0.0668836,0.00413018,0.003482}
,
{-0.0325678,0.0258751,-0.0606588,0.041659,0.0517207,-0.121793}
,
{0.072969,-0.0224091,0.126298,-0.0605017,0.145444,-0.211423}
,
{-0.826322,-1.37418,0.744659,-1.26178,1.36049,-1.10228}
,
{0.100632,-0.0423411,-0.00737979,-0.217578,-0.0741203,-0.0707338}
,
{0.180755,0.492814,-0.182212,0.354449,0.00119985,-0.0297873}
,
{0.00522924,0.0106647,-0.116536,0.166355,0.048547,-0.102855}
,
{-0.207635,-0.135628,-0.0212735,-0.138957,-0.0177491,-0.105017}
,
{0.0292113,0.187291,-0.0567885,0.120348,-0.354494,-0.0348462}
,
{-0.269061,-0.305044,0.110428,-0.197006,0.182092,-0.110417}
,
{-0.145988,-0.197158,0.0858902,-0.280634,0.0357974,0.0573962}
,
{-0.133973,-0.118782,0.109969,-0.148218,-0.121898,0.125449}
,
{-0.151496,-0.0265062,0.0912818,-0.102996,0.106987,-0.112413}
,
{-0.159883,0.0886138,0.0716656,-0.341113,0.105077,0.147147}
,
{-0.0827907,0.195651,0.166118,-0.0228025,-0.00295363,-0.0512127}
,
{-0.0978448,-0.140006,0.00830215,-0.121201,0.147967,-0.00678227}
,
{-0.231565,0.245248,-0.0129065,-0.0237317,0.080747,-0.0554012}
,
{-0.0270675,0.0682104,-0.248968,0.0770044,0.200115,-0.187609}
,
{0.116988,0.0652582,-0.0884274,0.151783,0.217871,-0.0378577}
,
{-0.0677606,0.185034,-0.0596302,-0.0502352,0.0164926,-0.314528}
,
{0.167844,-0.0681143,0.0720469,-0.0496271,-0.0842529,0.0342137}
,
{-0.0370212,0.130509,0.278449,-0.034176,0.0947966,0.0975039}
,
{0.0425718,0.00408537,0.110907,-0.0248009,-0.00463814,0.0274789}
,
{0.134863,0.120195,0.0134605,-0.167518,0.0485148,0.0825115}
,
{0.131526,-0.0161966,-0.0719503,-0.0541622,0.0744866,0.016501}
,
{-0.0666062,0.109355,-0.0287019,-0.0277632,0.109776,0.0347706}
,
{0.189881,0.0414971,-0.11089,0.0650629,0.247456,-0.1125}
,
{-0.15182,0.0140178,-0.0333015,0.0823039,0.12363,0.0692142}
,
{-0.182455,0.265661,0.0979836,-0.184738,0.206702,0.388971}
,
{-0.000536246,-0.0587568,-0.172443,-0.011718,-0.0075512,-0.0542626}
,
{0.0399944,-0.055841,0.0574772,0.0175092,-0.0550293,-0.041391}
,
{0.116509,0.100082,0.230448,-0.0789589,0.0686785,0.054169}
,
{-0.0187373,-0.0105635,-0.0531059,0.0666104,0.157882,0.0782908}
,
{0.0223533,-0.0674124,-0.0423558,-0.025709,0.106105,0.273994}
,
{-0.0313831,-0.084063,0.0780012,0.0312796,-0.101188,0.066398}
,
{0.0288815,0.0674694,0.120935,-0.0417879,0.0058758,0.0662397}
,
{0.0241793,-0.0290343,-0.0723365,-0.0306052,0.0137074,0.219847}
,
{0.0619445,-0.0784099,-0.139119,-0.0358555,-0.198521,-0.134108}
,
{0.00692299,0.145755,-0.0578762,-0.0421065,-0.116418,-0.0446992}
,
{0.0190411,-0.254147,-0.0311756,-0.041686,-0.00540707,-0.0134633}
,
{-0.0102674,-0.0818907,0.0554962,0.033885,-0.185811,-0.0719078}
,
{-0.0405959,-0.00140054,0.209103,-0.142995,-0.199701,-0.16229}
,
{-0.0792852,-0.0994124,0.186461,0.0380247,-0.0987543,-0.222076}
,
{0.0898834,-0.217697,-0.123711,0.118082,-0.0954735,0.0335686}
,
{-0.0726005,-0.053819,-0.226281,0.00168332,0.0653042,0.0216914}
,
{-0.00789311,0.0563769,-0.218586,-0.0577547,-0.234212,0.0268002}
,
{0.0529718,-0.054068,0.0937129,0.128808,-0.0918399,-0.112967}
,
{-0.12714,-0.105371,0.0841074,0.217695,0.14575,-0.171396}
,
{0.0198634,-0.0584681,0.0672651,-0.0153992,-0.0168247,-0.0282012}
,
{0.0726944,-0.0366139,0.0230547,-0.0561181,-0.0597906,0.159495}
,
{0.0330477,0.0475819,0.180956,0.0381635,-0.0303843,0.000665743}
,
{-0.108416,0.0346741,0.0825556,-0.204185,0.0880985,-0.161918}
,
{-0.326541,-0.233049,0.116733,-0.162544,-0.138238,-0.0665108}
,
{-0.197019,-0.0179317,-0.0683831,-0.0488893,-0.0274365,0.0190629}
,
{-0.0655085,0.106893,-0.0906478,-0.0149139,-0.126406,0.026254}
,
{-0.0358649,-0.0444967,-0.170544,-0.0405573,0.18421,-0.0103428}
,
{-0.0960306,-0.0333678,-0.0724465,-0.175067,0.131326,0.0717814}
,
{0.110794,0.0843527,0.0797091,-0.148964,0.0360073,0.00522887}
,
{0.044823,0.0178742,-0.114724,0.0420722,0.145472,0.0223858}
,
{0.0674736,-0.164471,0.0637239,0.1672,0.092833,0.182536}
,
{-0.0143878,-0.160631,0.0910184,0.139983,0.127015,-0.0350616}
,
{0.199095,-0.0608749,-0.171511,0.147518,0.121431,0.182821}
,
{-0.034946,0.074013,-0.138171,-0.0608169,0.114963,0.0863556}
,
{-0.1937,-0.131077,0.00560507,0.057365,0.137922,0.0954773}
 };
  static const float bias2[1] = { -0.299305 };
  static const float weights2[][1] = { {0.0451461}
,
{0.0346268}
,
{-0.0331377}
,
{0.0449786}
,
{-0.0326863}
,
{0.0270802}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_4_0(v, index);
}
static int assign_gen_lepton_prior_0_4_0() {
  global_gen_lepton_prior.at(0,4,0) = &specialized_gen_lepton_prior_0_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_4_0 = assign_gen_lepton_prior_0_4_0();

template<typename T> float gen_lepton_prior_0_5_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.015922,0.0236122,0.0228918,0.0167668,-0.0278711,-0.0298658 };
  static const float weights1[][6] = { {-0.0219531,0.0235045,-0.113562,-0.0304824,0.0949992,-0.0104409}
,
{0.185182,0.0647509,0.0979843,0.116055,-0.0668794,-0.0303024}
,
{0.139821,-0.0878479,0.232799,-0.125594,0.122277,0.046323}
,
{-0.0299835,0.119911,0.0406375,0.0843104,-0.0713083,-0.0390505}
,
{-0.118853,-0.0808248,-0.127753,0.221967,0.195121,-0.0260173}
,
{0.140547,0.0165525,-0.122734,0.104378,-0.14633,-0.15288}
,
{-0.136637,-0.122812,-0.0521862,-0.158013,0.0110166,-0.219191}
,
{-0.135611,0.105386,0.00204294,-0.173984,-0.220249,-0.12822}
,
{-0.1749,-0.0857723,-0.0692858,-0.00378837,-0.111809,-0.178482}
,
{-0.206699,-0.0963473,-0.00353662,0.0694136,-0.0844992,0.115374}
,
{0.164754,0.152534,0.0320554,-0.0270074,-0.112804,0.00497057}
,
{-0.174525,-0.143438,-0.0475211,0.161534,-0.12927,0.0306667}
,
{-0.0294579,-0.134954,-0.112279,-0.0675799,-0.140498,-0.134408}
,
{0.137039,-0.00865228,0.0167582,0.103276,-0.0123525,-0.1177}
,
{0.244828,0.122103,0.173946,0.0704046,0.0292304,-0.00278396}
,
{0.0145156,0.0404555,0.00154395,0.210206,0.13021,0.0834962}
,
{0.0834121,0.131983,-0.0363077,-0.127083,-0.03944,0.142099}
,
{0.082616,0.233514,0.134573,0.00838808,-0.067298,-0.185256}
,
{0.215431,0.194963,-0.236506,0.00603737,0.109133,0.0570564}
,
{0.0124413,0.0716165,0.0653115,0.0399783,0.0307764,0.0920357}
,
{0.00403486,0.137565,-0.11935,0.137453,0.0585993,-0.224831}
,
{0.114651,0.00160996,0.0135687,-0.218376,-0.0963118,0.18762}
,
{-0.0510055,-0.0704884,-0.233438,0.094895,0.151513,-0.0134492}
,
{0.0220326,0.104343,-0.205436,0.0143585,0.0238628,-0.0980114}
,
{0.0852197,-0.0931848,0.0939044,-0.150533,-0.25426,-0.0350356}
,
{0.0546733,0.167319,-0.197848,-0.0749474,-0.0296573,0.0519532}
,
{-0.054981,0.0606356,-0.106217,-0.0760548,0.130981,-0.10027}
,
{-0.0877446,0.165165,-0.180596,-0.0206048,-0.17502,0.074621}
,
{0.0649844,0.246833,0.21055,-0.150268,0.168433,-0.26277}
,
{0.0183051,0.136128,-0.00426076,-0.0206879,-0.028381,-0.00764652}
,
{-0.226179,-0.0145438,-0.0221166,0.0945088,0.0773543,-0.200479}
,
{0.00593517,-0.0598689,0.24028,-0.129789,-0.0144426,-0.244795}
,
{-0.152088,-0.160226,0.102351,-0.115732,-0.119957,0.201973}
,
{0.0151821,0.0885398,0.123688,0.0815653,0.0607511,-0.172789}
,
{0.152298,0.0371621,-0.163198,-0.131958,0.00287121,-0.167464}
,
{0.155732,-0.165206,0.148886,0.0216463,0.0102076,-0.0234814}
,
{0.115416,0.134592,-0.203668,0.0992183,-0.150333,-0.0605411}
,
{-0.0525319,0.134976,-0.011882,-0.155165,-0.175439,0.0334093}
,
{-0.0724289,0.117131,-0.215713,0.0280414,-0.183536,-0.184277}
,
{0.0746616,0.129673,-0.087866,0.0881597,0.0459325,0.190141}
,
{0.0634607,-0.00819942,0.00394912,0.160312,-0.147317,0.0563232}
,
{0.124988,-0.134264,0.018156,-0.0495944,-0.134385,-0.0793627}
,
{0.039782,-0.219996,-0.00762067,0.0771744,-0.0260308,-0.153285}
,
{-0.104919,0.145719,-0.00968424,0.164945,0.0978345,0.196251}
,
{-0.0105037,0.0722475,0.212258,0.0113205,-0.00783379,-0.0568878}
,
{-0.06506,0.0601819,-0.118209,0.0897934,-0.0882269,0.0856749}
,
{-0.111542,-0.0563205,-0.0769851,-0.132116,-0.156162,-0.163318}
,
{0.0411987,-0.015192,0.121961,0.0797002,0.0783281,0.165758}
,
{-0.0657555,-0.050652,-0.100626,0.0236803,0.185478,-0.114428}
,
{-0.00406943,-0.105761,0.14244,-0.109268,-0.125381,-0.00294574}
,
{0.000706018,-0.048405,-0.0198845,0.0319369,0.136153,-0.192349}
,
{-0.10903,-0.202678,-0.130532,0.139775,0.0932978,-0.0594415}
,
{-0.0402476,0.23662,-0.175194,-0.114439,0.0856268,-0.0700733}
,
{-0.10253,-0.0378057,-0.00823654,0.0380717,-0.0320989,-0.0917961}
,
{0.0783903,0.0648815,0.165,0.106619,0.22839,-0.0202806}
,
{-0.0587387,0.154903,0.0330908,0.0109469,0.0551326,-0.145733}
,
{0.234893,0.101117,-0.161716,0.195801,-0.101883,-0.0738667}
,
{-0.0188474,0.100531,-0.0553145,0.105485,-0.0417045,0.16274}
,
{0.0475842,0.0526694,0.0706178,0.0466704,-0.00243779,-0.0438972}
,
{0.131214,-0.124564,-0.138347,0.0622825,-0.00122959,-0.00824937}
,
{0.0204454,0.030754,-0.0702538,-0.132874,-0.192321,0.167389}
,
{-0.0743361,0.172493,0.0778272,-0.0665334,0.00452438,0.24053}
,
{0.00392538,0.10875,0.0210434,-0.140899,0.122845,-0.015754}
,
{0.207128,-0.028694,-0.00526335,0.173997,0.00412985,0.104808}
,
{0.00952289,0.129694,-0.188962,-0.248076,0.0299626,-0.0476732}
,
{-0.195629,0.0319466,-0.116296,0.0607655,0.0817237,0.0116739}
,
{0.0517116,0.20383,0.0878132,0.19158,0.0935888,-0.0989225}
,
{-0.102848,0.00344912,0.0976107,-0.113464,-0.165804,-0.179645}
,
{0.101107,-0.0544308,0.109897,-0.00182292,-0.0593661,0.0270472}
,
{-0.0513171,-0.0846934,-0.0482213,0.0911812,-0.0110076,-0.031025}
,
{-0.216876,0.0818171,-0.150194,0.0822775,-0.0206243,-0.101514}
,
{-0.150487,-0.0365004,0.0897965,0.118873,0.162136,0.0492686}
,
{0.0252114,-0.17297,0.0640526,-0.162122,0.167212,-0.100733}
,
{0.115947,0.244158,0.0586688,0.161811,0.157348,0.0910994}
,
{0.0455777,-0.128842,-0.0757912,0.232679,0.165599,-0.0532737}
,
{0.101719,0.066434,0.0301486,-0.120814,0.153268,-0.0420512}
,
{0.173587,-0.0208694,-0.060197,0.0359346,0.0665146,0.0442429}
,
{0.0572609,0.0108649,-0.0219045,0.212466,0.0988382,-0.0840032}
,
{0.123122,0.189492,-0.0848357,-0.0209914,-0.0895569,0.0139661}
 };
  static const float bias2[1] = { -0.0372247 };
  static const float weights2[][1] = { {-0.0215391}
,
{-0.143889}
,
{-0.240277}
,
{-0.0185947}
,
{0.00203027}
,
{0.0210182}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_5_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_5_0(v, index);
}
static int assign_gen_lepton_prior_0_5_0() {
  global_gen_lepton_prior.at(0,5,0) = &specialized_gen_lepton_prior_0_5_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_5_0 = assign_gen_lepton_prior_0_5_0();

template<typename T> float gen_lepton_prior_1_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.078656,-0.0561933,-0.0363038,-0.00964303,-0.048183,-0.0107692 };
  static const float weights1[][6] = { {0.193443,0.337189,0.050102,-0.0223218,0.206845,0.144274}
,
{-0.0608919,-0.0281259,0.0954829,0.0754759,-0.0103675,-0.40755}
,
{0.209717,-0.0805172,0.134532,0.0164613,-0.0822264,0.010425}
,
{0.0572195,0.0113322,0.122249,0.205015,-0.114994,-0.22888}
,
{0.095388,0.071811,-0.15172,0.00819496,-0.177618,0.0940153}
,
{0.128958,-0.0250078,0.0307257,-0.222549,0.185733,-0.0846253}
,
{0.166222,-0.117301,0.0854533,-0.13106,0.0843785,0.158481}
,
{0.122187,-0.0200006,-0.347017,-0.0943467,-0.19003,0.167949}
,
{0.0404438,-0.286977,-0.110811,0.0693576,-0.0738991,0.0571162}
,
{0.0737652,0.154044,-0.0180284,-0.124701,-0.0384551,0.169052}
,
{-0.108978,-0.171944,-0.0277514,-0.0496772,0.215323,0.202223}
,
{0.101904,0.181857,-0.0335142,-0.102319,0.15254,0.0544282}
,
{0.0237548,-0.119009,0.0548916,-0.139733,-0.00250525,0.162056}
,
{0.043696,0.116457,-0.0820334,0.0618658,-0.141822,0.155019}
,
{0.0347842,-0.114271,0.167153,-0.07845,0.0881522,-0.0234767}
,
{0.178283,0.0697731,-0.0899125,-0.0586053,0.0660521,-0.0236629}
,
{0.237364,0.403508,-0.0365451,-0.367395,0.136251,0.199046}
,
{0.130278,-0.013929,0.180539,-0.0426434,0.00967094,-0.0516909}
,
{0.0162216,-0.562868,-0.0595796,-0.0748194,0.0472011,-0.317786}
,
{0.153626,0.146969,0.0037813,-0.07326,-0.111751,0.24463}
,
{0.299247,-0.167814,-0.163727,0.107845,-0.295991,-0.0329307}
,
{0.251511,-0.0542482,0.0420042,-0.0120242,-0.0831214,0.120917}
,
{0.0983254,0.00932294,0.152216,0.0224557,0.0728914,-0.235177}
,
{0.03635,-0.205236,0.00706711,-0.121742,-0.103691,-0.0985887}
,
{0.0528194,-0.0224885,0.0822145,0.0182647,-0.117098,0.0367069}
,
{-0.00881678,0.201751,-0.440173,0.0566857,0.217999,-0.139005}
,
{0.0774401,0.100599,-0.141636,0.101935,-0.218403,0.0439244}
,
{-0.158721,-0.0784758,0.0807808,0.185111,-0.170607,0.176834}
,
{-0.230356,0.279079,-0.597266,0.397394,-0.0680015,0.379179}
,
{0.121864,-0.0331206,-0.00729913,-0.0123992,0.0290583,0.0196179}
,
{0.0688313,-0.183602,0.0483004,0.0231966,-0.206483,0.0612731}
,
{-0.0773703,-0.159156,0.203928,-0.0554247,0.209892,-0.088719}
,
{-0.159492,0.0615114,0.0421498,0.0923138,0.0215341,0.169615}
,
{-0.00648409,-0.0831594,-0.0560321,0.134347,-0.0563586,0.0914275}
,
{-0.118602,0.112756,-0.0254475,0.227686,-0.00808329,0.257844}
,
{0.0796433,0.19259,0.00527215,0.124211,-0.180923,0.0827188}
,
{0.424857,-0.00136198,-0.113618,0.040481,-0.245153,-0.173091}
,
{0.0430316,0.14007,0.11112,-0.0407461,-0.0806738,0.100124}
,
{0.131854,0.29473,-0.091892,-0.198245,-0.0476302,-0.156982}
,
{-0.0341595,-0.435061,0.0597708,-0.13165,-0.269318,0.114871}
,
{0.118923,-0.103935,0.0742933,-0.0790531,0.0538298,-0.0888098}
,
{-0.182177,0.0683893,-0.174775,-0.00669762,-0.0151277,0.118214}
,
{0.158762,-0.0926166,-0.116982,-0.0296681,0.0422603,-0.208142}
,
{-0.0130777,-0.0308602,0.170699,-0.012021,-0.00284978,0.121073}
,
{0.173577,0.121572,0.240628,-0.103022,0.0439786,-0.0354294}
,
{-0.110935,-0.0533209,-0.110089,0.0734761,0.104299,0.0942163}
,
{0.0866329,0.0310978,-0.0696,-0.144447,0.0559189,0.0951898}
,
{-0.20288,0.0737969,-0.0215419,0.0648509,-0.101542,0.0954355}
,
{-0.154173,-0.0530883,0.0633245,-0.0634836,-0.0758184,-0.159399}
,
{-0.0387418,0.229752,0.009447,0.128276,-0.00879697,-0.0613}
,
{0.206972,-0.209528,0.120892,-0.0738324,-0.0840849,0.0380082}
,
{0.0928578,-0.0587045,0.0511129,-0.253256,0.0411651,0.0157441}
,
{0.121609,-0.0118809,0.0582303,0.0692074,0.152073,-0.121627}
,
{0.145334,0.0957301,0.240842,0.0557579,0.0862632,0.0301034}
,
{0.0739565,0.115738,0.0841018,-0.0178236,-0.116418,0.104555}
,
{0.158537,0.0133267,0.13272,0.0211066,-0.0161694,0.0181218}
,
{-0.193079,-0.0777714,0.176565,-0.19703,0.246444,0.0135355}
,
{0.537234,0.284551,-0.413148,-0.462955,0.33074,0.196052}
,
{-0.212027,0.367306,0.144964,-0.0349017,-0.274089,0.0879008}
,
{0.170586,-0.00399837,-0.0720194,-0.180731,0.0701359,-0.115892}
,
{-0.0440396,-0.0859452,-0.069083,-0.141022,0.0231478,-0.15349}
,
{0.117296,-0.103604,-0.220051,0.1844,-0.0751376,0.0959061}
,
{-0.425384,0.201472,-0.0461674,0.339875,-0.45557,-0.346763}
,
{0.150268,0.000193034,-2.19887e-05,0.0347703,0.144259,-0.0184004}
,
{0.0627662,-0.0691151,0.10936,-0.054483,0.00775266,-0.103649}
,
{-0.10162,0.0189005,0.0451724,-0.135761,-0.10146,-0.0850309}
,
{-0.386777,0.0869594,0.112881,0.135099,0.0544038,0.038569}
,
{-0.170274,0.0156414,-0.172358,-0.0255388,-0.222432,0.134476}
,
{0.0162757,-0.0276266,-0.0928391,-0.0662735,0.0807596,-0.069309}
,
{-0.0434453,0.0237295,0.123433,0.123695,0.052927,0.0494042}
,
{0.184811,-0.00468542,-0.100919,-0.0297566,-0.0392447,-0.0744312}
,
{0.337807,-0.153722,-0.0989071,-0.0931885,0.0588302,0.0287225}
,
{-0.26056,0.10508,0.270863,-0.769949,0.123119,0.29999}
,
{0.0488574,0.120756,0.128794,0.0654088,0.000228084,0.125975}
,
{-0.151513,-0.605487,-0.102915,-0.0693451,0.150736,-0.278635}
,
{-0.0687556,0.0277834,-0.0701104,0.229297,0.286053,-0.0762212}
,
{0.193539,-0.500842,-0.907873,-0.0237435,0.0757919,0.0775714}
,
{-0.0351743,-0.128869,0.00322776,0.0732033,0.0431296,-0.0876612}
,
{-0.282918,0.0780976,-0.0896281,0.0999881,-0.593895,-0.245858}
 };
  static const float bias2[1] = { 0.080709 };
  static const float weights2[][1] = { {0.100647}
,
{0.0921097}
,
{-0.107753}
,
{-0.174981}
,
{0.124192}
,
{0.186398}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_0(v, index);
}
static int assign_gen_lepton_prior_1_0_0() {
  global_gen_lepton_prior.at(1,0,0) = &specialized_gen_lepton_prior_1_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_0 = assign_gen_lepton_prior_1_0_0();

template<typename T> float gen_lepton_prior_1_0_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.116154,-0.100091,0.0920981,0.394866,-0.0984969,-0.110287 };
  static const float weights1[][6] = { {0.149177,-0.0403615,-0.0313299,0.690839,-0.256103,0.0975528}
,
{0.0177055,-0.0841004,0.33361,0.36904,-0.12038,-0.133647}
,
{0.298232,-0.447802,0.235083,0.155633,0.00293542,-0.0720711}
,
{0.0528175,-0.225314,-0.385398,0.0623342,-0.132235,-0.118338}
,
{0.157422,0.0455829,0.094219,0.261845,-0.168847,-0.173495}
,
{0.151381,-0.0201212,-0.00407894,0.326454,-0.21383,-0.115363}
,
{-0.0304847,-0.193319,0.203537,0.250271,-0.235554,-0.161135}
,
{0.165798,0.105769,-0.319978,0.033148,0.0757899,0.0806528}
,
{0.271118,-0.0912082,-0.134144,0.00127069,0.117604,-0.168535}
,
{-0.0872892,0.104232,0.154465,-0.106375,-0.0432055,0.0700813}
,
{-0.113465,-0.090365,-0.142706,-0.190776,0.123156,-0.160306}
,
{0.0861049,0.0685406,-0.244616,0.0542987,0.0361187,0.0493235}
,
{0.161614,-0.318225,0.0163429,-0.108247,-0.240941,-0.134677}
,
{-0.00453671,-0.271043,-0.215276,-0.065586,-0.322828,-0.186503}
,
{-0.0870811,0.00356209,0.17018,-0.0414693,0.0217609,-0.0152972}
,
{0.132073,-0.0671798,-0.0466975,0.0418804,-0.117726,0.0207396}
,
{0.15068,0.0371351,-0.22483,0.434659,-0.165928,-0.355354}
,
{0.0633482,-0.29028,0.176392,0.0286317,-0.0533528,-0.135063}
,
{0.0776183,-0.508182,-0.000350825,0.139277,0.0477217,-0.0512348}
,
{-0.0981969,-0.00149204,-0.22801,0.0627638,-0.107074,-0.0204062}
,
{0.0794014,-0.132716,-0.0659482,-0.155158,-0.175064,-0.131881}
,
{-0.0395495,-0.167182,0.0267731,-0.0289198,0.0378403,-0.233564}
,
{-0.0182271,0.247434,-0.0934155,0.168374,0.14218,0.0689634}
,
{-0.070161,0.137227,0.0390844,0.0487017,0.0565882,-0.133102}
,
{-0.0557447,0.0670965,-0.0968702,-0.0180689,-0.221864,-0.00437699}
,
{0.0272882,-0.301499,-0.207387,0.00932073,0.166424,-0.0847309}
,
{0.11817,0.0217372,0.0238846,-0.242275,-0.0875975,-0.0751878}
,
{0.0240681,-0.0458112,-0.0612561,0.0637375,-0.0615217,-0.0358504}
,
{0.00325154,0.274276,0.599925,-0.0327474,0.387249,0.148645}
,
{-0.110054,-0.131963,0.0233977,-0.132075,-0.0112184,-0.0526567}
,
{-0.1278,0.00600359,-0.0344757,0.125992,-0.13942,0.0317001}
,
{-0.0252226,0.0529458,-0.0627493,-0.0410742,-0.0704465,-0.164735}
,
{-0.0497059,0.00849349,-0.0318678,0.093621,0.184605,0.0722997}
,
{0.112718,-0.126952,-0.202427,-0.0993118,-0.160384,-0.161937}
,
{0.125229,-0.236839,0.0303045,-0.00414319,-0.0742367,0.174583}
,
{-0.0294102,0.0222628,-0.0925083,-0.018476,0.0359975,0.0126734}
,
{0.0122262,0.0214918,-0.326769,-0.177457,-0.104052,-0.0386823}
,
{0.00266947,0.178998,-0.0582824,-0.142655,0.223422,0.125832}
,
{-0.30401,-0.0271946,-0.288713,0.245057,-0.566556,0.181729}
,
{-0.207422,-0.11706,-0.0549205,0.242412,-0.00902245,0.0801179}
,
{-0.0837116,0.0245915,0.00251723,-0.00629304,0.0986971,-0.0100338}
,
{0.073818,-0.301805,-0.341985,-0.125929,0.752851,0.099488}
,
{-0.11093,0.136337,0.0186196,0.0581933,-0.104252,0.100969}
,
{-0.0946785,0.177159,0.198221,0.0194245,-0.0527676,-0.0913074}
,
{0.0235602,0.0973716,0.117986,0.00804616,-0.359805,-0.0345057}
,
{0.0827209,-0.11082,0.115146,-0.0475761,0.264239,0.040368}
,
{0.321329,-0.0815363,-0.0453996,-0.153595,-0.246945,0.192942}
,
{0.189467,-0.225394,0.0423929,-0.0608656,0.179251,-0.091911}
,
{0.0142292,0.148882,0.0616028,0.0709981,-0.0169774,0.101225}
,
{0.2346,-0.195871,-0.144503,-0.0673279,-0.276289,-0.178732}
,
{0.0347493,-0.109172,-0.0631313,-0.00345357,-0.0050513,0.0316791}
,
{-0.0222968,-0.244584,-0.27628,0.145051,0.0703808,0.0110189}
,
{-0.0341957,-0.00334285,0.0587301,-0.0225503,-0.0048072,-0.0224931}
,
{-0.0147138,0.14941,0.153614,0.0611291,-0.262335,-0.154266}
,
{-0.0335463,-0.150045,-0.0376077,0.0320719,0.0137848,-0.0821307}
,
{-0.0183373,-0.0897147,-0.0624893,-0.0313846,0.0448754,-0.195726}
,
{0.107479,-0.690813,-0.301132,-0.13616,-0.549838,0.116661}
,
{-0.816055,-0.722785,0.0414909,0.206087,1.16129,0.515984}
,
{0.0355535,0.147396,-0.369011,0.066223,0.053738,-0.0236851}
,
{-0.241161,-0.0604164,-0.169572,0.17716,0.151647,-0.0146716}
,
{-0.0984334,-0.199784,0.0703972,-0.00659313,0.154089,-0.2342}
,
{-0.0519498,-0.014435,0.364681,-0.116608,0.07526,0.262917}
,
{0.446988,1.24761,-0.336956,0.246294,-0.232907,-0.484616}
,
{0.0953715,-0.0929093,0.0744485,0.0748649,0.103737,0.0837874}
,
{0.00191356,-0.219751,-0.195094,-0.188241,-0.143647,-0.281639}
,
{-0.0178763,0.0732832,0.0191124,0.0484002,-0.104133,0.0250331}
,
{-0.22694,0.392059,-0.418331,0.513252,0.618071,-0.284688}
,
{-0.309356,0.864415,-0.743122,-0.145029,0.267972,-0.290244}
,
{-0.0936598,0.39201,-0.012576,-0.109341,0.509959,0.0922298}
,
{0.102895,-0.0816283,-0.133388,-0.109848,0.0959206,-0.15455}
,
{-0.00284144,0.0460499,-0.085619,-0.036927,0.0370443,-0.010472}
,
{-0.254693,0.44224,0.139084,-0.171903,-0.345601,-0.228574}
,
{-0.0631997,-0.415038,0.00419896,-0.0119463,-0.34029,0.0903113}
,
{-0.0921217,-0.131636,0.209032,0.245891,0.303564,0.031201}
,
{-0.399864,-0.417494,0.765352,-0.0956264,0.00789877,0.533057}
,
{0.00758614,0.141539,0.0547153,-0.0807294,0.657079,0.258828}
,
{-0.140978,-0.074454,-0.071274,0.165513,0.0359308,0.0251051}
,
{0.0418017,-0.0504892,-0.0474462,0.0175605,-0.109594,0.0720944}
,
{0.0448946,0.841145,-0.0542631,0.623764,1.25757,0.612727}
 };
  static const float bias2[1] = { 0.0785879 };
  static const float weights2[][1] = { {0.149936}
,
{0.223451}
,
{-0.354926}
,
{0.158224}
,
{0.232679}
,
{-0.17579}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_1(v, index);
}
static int assign_gen_lepton_prior_1_0_1() {
  global_gen_lepton_prior.at(1,0,1) = &specialized_gen_lepton_prior_1_0_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_1 = assign_gen_lepton_prior_1_0_1();

template<typename T> float gen_lepton_prior_1_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0334582,-0.0378059,-0.0631325,-0.0136742,0.218028,0.218996 };
  static const float weights1[][6] = { {-0.042433,-0.023084,0.0287735,-0.18089,0.228632,0.131135}
,
{-0.367078,0.156656,-0.0697892,-0.200661,-0.124898,0.23597}
,
{0.0549678,-0.118735,0.014157,-0.191917,-0.261566,-0.00483986}
,
{-0.138473,0.147184,0.0726861,-0.0960659,0.34762,0.310421}
,
{-0.148186,-0.000593938,0.0552084,-0.101091,0.139081,0.0806912}
,
{-0.13838,-0.0363336,0.0134962,-0.0485019,0.0105679,0.362408}
,
{-0.0328762,-0.00845601,-0.272707,0.135574,-0.136612,0.368778}
,
{0.104086,-0.0166319,-0.13931,-0.020374,0.109608,0.147818}
,
{-0.103486,-0.280197,-0.138227,-0.154322,-0.16579,-0.113168}
,
{0.131899,0.238932,-0.208115,0.172207,-0.0225689,-0.0686113}
,
{0.0786191,0.132751,-0.0891506,-0.00632737,-0.153932,0.0563976}
,
{-0.0132645,-0.114153,-0.231192,0.0159445,-0.213057,0.0769815}
,
{-0.09578,-0.0754651,-0.0545632,-0.0957658,0.0784963,0.0325672}
,
{-0.0535321,-0.0471804,-0.249338,0.0173672,0.343931,0.144775}
,
{-0.0469508,-0.105172,-0.116013,0.044168,0.0127537,-0.125028}
,
{-0.179577,-0.0367186,0.00402917,-0.160165,0.0780502,-0.0296836}
,
{-0.0720465,-0.04899,-0.176513,0.0466505,0.146874,0.310825}
,
{-0.148569,-0.207746,0.00658028,-0.206465,-0.0197014,0.0532018}
,
{0.0341277,-0.0943093,0.0492496,-0.0552206,0.185734,0.21818}
,
{-0.0662098,-0.175552,0.00695613,-0.00112097,-0.134224,0.201036}
,
{0.082302,-0.0477095,-0.111336,-0.0433235,0.0807633,-0.0367097}
,
{-0.267889,-0.204909,0.0100502,0.0806403,-0.19179,0.0272033}
,
{-0.174479,-0.0909112,0.0553623,0.0611854,-0.165563,-0.154964}
,
{-0.183863,-0.0140604,-0.201746,-0.0349339,-0.119068,0.0337278}
,
{-0.0784385,-0.231395,-0.00564633,-0.00680332,0.263279,0.437807}
,
{-0.177842,0.0295989,-0.267434,-0.129501,0.174027,0.134123}
,
{-0.0985328,-0.210763,-0.192635,-0.0725382,0.153356,0.244109}
,
{-0.0801344,0.15461,-0.147505,-0.220538,0.180892,0.0737697}
,
{-0.0487002,0.0150572,0.0286694,-0.175782,-0.0504068,0.158792}
,
{-0.138195,0.108647,-0.120421,0.185159,-0.171333,-0.0267033}
,
{0.0457679,0.191839,0.0240824,0.164885,-0.104016,0.206528}
,
{0.094077,-0.0889673,-0.063113,-0.144505,0.0624222,-0.0139162}
,
{0.15824,0.0143356,-0.0156806,-0.0274984,0.0433737,0.0404716}
,
{-0.0401816,-0.107965,-0.0371222,-0.0446685,0.0469155,-0.180522}
,
{0.203572,0.0851177,-0.0560132,0.140166,0.0450844,-0.00312077}
,
{0.0410328,0.109374,0.00942695,0.0840104,0.244318,-0.085128}
,
{0.264389,-0.0262486,0.12162,-0.0891213,0.129413,-0.135307}
,
{-0.0266218,0.100645,-0.130311,-0.0894141,-0.0726072,0.0534373}
,
{-0.0601005,0.0780282,-0.0499556,0.220714,0.301133,-0.325888}
,
{-0.0665057,0.242684,-0.106389,-0.242616,0.136246,-0.0577875}
,
{-0.0654177,-0.181147,-0.0147975,0.205954,0.0192895,0.013606}
,
{0.214387,0.0321056,0.113007,-0.185798,-0.201392,0.361771}
,
{-0.0558737,-0.148805,-0.0236925,-0.0553892,-0.0820654,-0.00727498}
,
{0.0727497,0.116341,0.00331556,0.0749353,-0.200908,0.0223206}
,
{-0.177669,0.0556581,0.166217,-0.0593054,-0.0429157,0.00139201}
,
{-0.0501318,-0.0591747,0.017827,-0.188348,-0.0640805,0.0900794}
,
{-0.02554,0.0960475,-0.0591707,0.00562107,0.32942,0.066682}
,
{0.120287,-0.186721,-0.0238034,0.110109,0.176557,-0.0581337}
,
{0.070447,-0.122304,-0.0682745,-0.00407136,-0.0986399,-0.00472292}
,
{-0.12632,-0.0348103,0.107571,-0.0261157,-0.229842,-0.0134522}
,
{-0.037569,0.0650345,0.0338674,-0.173541,-0.221815,-0.00797995}
,
{0.138964,0.140416,-0.107437,-0.173995,0.207445,-0.033966}
,
{-0.0533151,-0.117144,-0.0747932,0.0834,-0.0222338,-0.0505585}
,
{-0.0663601,-0.122673,-0.0811736,-0.0961043,-0.0884651,-0.0623163}
,
{-0.183801,0.168421,-0.0444333,0.14003,-0.15649,-0.00660974}
,
{-0.135147,-0.0991165,-0.0965309,-0.0580749,0.0553184,0.0271015}
,
{0.121632,-0.158444,-0.00374277,0.0602391,0.0871475,0.0566843}
,
{-0.0457618,-0.0412492,-0.0780279,-0.0450464,-0.0529393,0.13699}
,
{-0.0679125,0.205739,-0.151247,-0.0185389,-0.22509,0.151052}
,
{-0.148079,-0.0454039,-0.0199053,-0.106649,-0.167107,-0.0442401}
,
{0.129934,-0.0417506,0.00436026,0.111064,-0.0720683,-0.053798}
,
{-0.0129389,0.184871,-0.269875,-0.247336,-0.0898163,0.103451}
,
{0.0344985,0.0392647,0.158624,0.12352,-0.0408022,-0.0574817}
,
{0.0267631,0.00535879,-0.0705609,-0.0234053,0.183658,0.0293414}
,
{0.0741644,-0.00480657,0.0389363,-0.209282,0.00604591,0.168699}
,
{-0.0150099,0.0713314,-0.00429375,-0.0294242,-0.032003,-0.172829}
,
{0.182744,-0.0853226,-0.018302,0.205065,-0.122741,0.0952077}
,
{0.141332,-0.167935,0.061985,0.0910404,-0.0985434,-0.127111}
,
{-0.0544719,0.0620679,0.190872,-0.084419,-0.0427813,0.00090301}
,
{0.00132939,0.0506002,0.0938908,0.176151,-0.118122,-0.226574}
,
{-0.116616,-0.173789,-0.0268019,0.121442,0.234653,-0.100068}
,
{-0.0199189,-0.0991242,0.0554724,-0.165195,-0.123175,0.0957796}
,
{0.173216,-0.12503,0.102244,-0.188321,-0.0559495,0.0814298}
,
{0.0339966,-0.072058,-0.13296,-0.1719,-0.0421699,-0.00518415}
,
{-0.00334641,-0.161062,-0.0982613,0.133677,0.172499,0.0432882}
,
{-0.119771,-0.0570508,-0.0231105,-0.353402,-0.112501,-0.162244}
,
{0.369337,-0.00655894,0.554,0.0999357,0.349474,0.485679}
,
{-0.20896,-0.245471,0.0886888,0.0647554,-0.0992101,-0.237124}
,
{0.132662,0.230566,-0.180002,-0.226534,-0.11504,0.113429}
 };
  static const float bias2[1] = { 0.145412 };
  static const float weights2[][1] = { {-0.0857876}
,
{0.0512844}
,
{-0.129527}
,
{0.0864523}
,
{0.147259}
,
{0.14711}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_2(v, index);
}
static int assign_gen_lepton_prior_1_0_2() {
  global_gen_lepton_prior.at(1,0,2) = &specialized_gen_lepton_prior_1_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_2 = assign_gen_lepton_prior_1_0_2();

template<typename T> float gen_lepton_prior_1_0_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.105733,-0.114596,-0.0567826,-0.0799803,0.182016,0.152677 };
  static const float weights1[][6] = { {-0.163582,0.11247,-0.171877,-0.105269,-0.278692,0.0202799}
,
{-0.266995,0.608273,0.0414328,0.0570302,0.110667,-0.00757848}
,
{0.343886,0.146895,-0.0559625,-0.121239,0.345977,0.172367}
,
{-0.143426,0.0744957,-0.0938617,-0.130962,0.350321,0.103428}
,
{-0.278289,-0.152627,-0.24057,-0.145098,0.137901,0.316172}
,
{-0.110044,-0.0874482,-0.0055262,0.0843992,0.191615,0.100302}
,
{0.0487872,-0.131574,0.0292402,-0.306161,0.0491848,0.22663}
,
{-0.0668482,0.0691822,-0.0362527,-0.21087,-0.0263571,-0.0328124}
,
{-0.0972612,0.0327251,-0.064347,-0.279571,0.145153,0.127134}
,
{0.131719,0.15053,-0.150355,0.195752,-0.021338,0.0937659}
,
{0.0976459,-0.0578647,-0.10591,-0.0250687,0.13223,0.240365}
,
{0.0798525,0.172601,-0.184557,-0.156916,-0.0301997,-0.0864801}
,
{-0.138783,-0.309098,-0.0680041,0.00732597,0.0200915,0.165431}
,
{0.182556,0.0414796,-0.0161855,-0.172642,-0.0222501,0.115335}
,
{-0.039195,0.0405165,-0.173975,0.160903,0.0117787,-0.00591103}
,
{0.0899203,-0.00649182,0.207076,-0.0690191,-0.163269,-0.0146381}
,
{-0.187921,0.0841078,0.0376534,-0.147594,0.580421,0.277202}
,
{-0.201297,0.0245857,-0.221115,-0.106088,0.0263,0.0293242}
,
{0.532846,0.175318,0.0718008,-0.131612,-0.192312,-0.317911}
,
{-0.0454237,-0.209466,0.136332,-0.189903,0.0979115,0.0735759}
,
{-0.184148,-0.177518,0.0833787,-0.30291,-0.128763,-0.0292786}
,
{-0.169444,-0.0720637,-0.182726,0.0193539,-0.00482367,-0.0170161}
,
{-0.117848,-0.0299286,0.0393361,0.00267007,0.125556,-0.0954022}
,
{0.0538408,-0.145345,-0.160029,-0.149866,-0.107736,0.101824}
,
{0.00082056,-0.213851,0.0303309,0.0199919,0.0400653,-0.0300349}
,
{-0.0743118,0.0747273,-0.0550664,-0.0493172,0.0238538,-0.135201}
,
{-0.277677,-0.201685,-0.0562997,-0.163289,-0.237201,-0.147107}
,
{0.290826,0.361492,-0.161289,-0.0691441,0.135991,0.113301}
,
{0.368425,-0.29415,-0.188499,-0.0440981,-0.4141,0.129434}
,
{-0.198417,-0.0722827,0.0446361,-0.0243383,0.0448265,0.0130876}
,
{0.10759,-0.19232,-0.0441075,0.0783688,0.0148472,-0.0558587}
,
{-0.20241,-0.0348592,0.160803,0.000578732,-0.052584,0.0524536}
,
{0.239657,0.0990474,0.105431,-0.00137317,-0.0544676,-0.0152836}
,
{0.0708702,-0.0379672,-0.0872465,-0.0302079,0.0868738,-0.0969645}
,
{-0.197946,0.368432,0.00947241,0.00591035,-0.0528086,0.0531868}
,
{0.0138534,-0.0583658,0.284997,-0.00982649,0.0365613,-0.0296437}
,
{0.476694,-0.110827,0.314945,-0.165167,0.0172867,0.169021}
,
{0.103792,-0.157671,0.114593,0.0663177,-0.0063155,-0.0164023}
,
{-0.29269,-0.306909,0.0288779,0.0011877,0.168008,-0.0865204}
,
{-0.194344,0.0844761,0.00916982,0.0741645,0.0340614,-0.152642}
,
{0.107001,-0.0407164,-0.175133,-0.0590788,-0.0996991,0.0445336}
,
{-0.0713564,-0.564454,-0.0891559,-0.126735,-0.444488,0.281711}
,
{0.01946,-0.158837,-0.103752,-0.110557,0.0539129,-0.0607278}
,
{0.429674,-0.0381766,0.00686641,-0.0109047,-0.130678,0.201175}
,
{-0.0939896,0.129334,0.184588,-0.134733,-0.11889,0.0760166}
,
{0.0894569,0.109866,0.0810898,-0.144298,0.125237,-0.104356}
,
{-0.545534,-0.492481,0.0820336,0.175699,-0.137864,0.198971}
,
{0.0664456,-0.103474,0.137072,0.137983,-0.106168,0.109076}
,
{-0.14704,-0.112627,-0.445864,-0.11738,0.356273,-0.149092}
,
{-0.0252487,0.03467,-0.219543,-0.116316,-0.10439,0.0975362}
,
{0.112819,-0.31587,0.143686,0.0517341,-0.0326671,0.0135428}
,
{-0.0316281,-0.153098,0.115723,0.119248,0.0176484,0.0709593}
,
{0.19494,-0.134773,-0.0514823,0.0734293,0.0306341,-0.0457399}
,
{0.120118,-0.165415,0.270043,0.189534,-0.134045,0.129277}
,
{0.0618019,0.222335,-0.110547,0.0792715,-0.135758,-0.0417237}
,
{0.223816,0.0762206,0.0342712,0.175034,-0.00877523,-0.0248782}
,
{-0.186606,0.261702,-0.122352,-0.0421288,-0.0605942,0.209374}
,
{-0.286565,0.502498,-0.106487,0.280905,-0.123739,-0.207128}
,
{-0.141482,0.0200672,-0.0859417,0.134807,0.722911,0.133417}
,
{0.095171,0.46397,0.0877353,-0.0641478,-0.013727,0.161865}
,
{0.192935,0.0849755,0.112262,0.0241973,0.119151,-0.0473186}
,
{-0.0408997,-0.536826,0.223696,0.0698118,0.0651306,-0.0199897}
,
{0.113889,-0.347515,-0.103843,-0.331057,0.950704,0.241338}
,
{-0.866514,1.13286,-0.205184,-0.0153686,-0.464562,-0.435865}
,
{-0.109903,-0.130702,-0.0294682,0.136271,-0.105204,0.163428}
,
{0.338538,0.40205,0.22316,-0.0824236,-0.263037,-0.175574}
,
{-0.249239,-0.177762,0.08325,0.0553556,-0.617949,-0.198415}
,
{-0.158459,0.248102,-0.0437363,0.118142,0.413338,-0.178107}
,
{0.532029,-1.12709,0.263524,0.0416729,-0.451774,-0.114153}
,
{0.326793,-0.0851793,0.0773706,-0.111751,-0.128561,0.0873286}
,
{-0.0240277,0.0920707,-0.165315,-0.0919422,0.247512,0.0705145}
,
{0.031763,0.182727,-0.104927,-0.0116203,-0.23079,-0.0150395}
,
{-0.149881,-0.300491,0.114463,0.0355093,0.587459,-0.135452}
,
{-0.112068,0.289928,0.00692467,-0.048248,0.160265,0.0264804}
,
{-0.524222,-0.295983,-0.259003,0.0129977,0.369075,0.149768}
,
{0.0827717,-0.239977,0.147933,-0.00177378,0.0418264,-0.378285}
,
{-0.215133,0.0191901,-0.154294,-0.064513,0.0425024,-0.23076}
,
{0.145003,0.219403,-0.0123245,-0.110601,0.161448,-0.221049}
,
{0.00688215,0.216354,0.0218121,0.0440829,0.226571,-0.051875}
 };
  static const float bias2[1] = { 0.0523236 };
  static const float weights2[][1] = { {0.311603}
,
{0.216277}
,
{0.0529378}
,
{-0.136966}
,
{0.123604}
,
{0.128404}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_3(v, index);
}
static int assign_gen_lepton_prior_1_0_3() {
  global_gen_lepton_prior.at(1,0,3) = &specialized_gen_lepton_prior_1_0_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_3 = assign_gen_lepton_prior_1_0_3();

template<typename T> float gen_lepton_prior_1_0_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0110664,0.0685144,0.156502,-0.0188754,0.00718197,0.207929 };
  static const float weights1[][6] = { {0.114657,0.0435705,0.123337,0.086527,-0.0080052,0.31939}
,
{-0.35302,-0.0541665,0.101948,0.0918833,-0.160043,-0.0461981}
,
{0.423312,-0.0369364,-0.00994746,-0.184177,-0.4126,0.207635}
,
{0.295253,0.169134,0.0978789,0.315487,0.0860348,0.602562}
,
{-0.0480749,0.167348,0.125415,0.0237807,-0.0239717,0.17637}
,
{0.14794,-0.0310704,0.320447,-0.0401763,0.0442022,-0.0775497}
,
{0.0235397,0.126727,-0.0289678,-0.063192,0.0743036,0.0697233}
,
{-0.147029,0.0317081,-0.00811331,0.078088,0.0397093,-0.0190607}
,
{-0.283594,0.152629,-0.124003,0.127062,0.103631,0.151283}
,
{-0.0185196,0.0842881,0.0456814,-0.227747,0.0956575,0.162409}
,
{-0.1735,-0.124396,-0.101678,0.203684,0.153124,-0.105886}
,
{0.0887255,0.0792501,0.155589,-0.180858,-0.165986,0.023306}
,
{0.127996,-0.0618203,0.176934,-0.0924351,0.0602584,0.0416347}
,
{-0.00487526,0.0917859,-0.185391,0.0493452,-0.24872,-0.0208361}
,
{0.219699,-0.092796,0.137369,-0.0287501,-0.158247,0.0884545}
,
{-0.165447,-0.00499558,0.096666,-0.0699545,-0.153647,-8.42357e-06}
,
{-0.0808983,-0.148047,0.109598,0.16044,-0.0349279,0.381823}
,
{0.0668472,0.173286,0.087425,0.11013,0.140964,-0.141501}
,
{0.0901584,-0.10128,0.175196,-0.0406556,-0.0283028,0.219569}
,
{-0.209493,-0.141346,0.0446677,-0.0769773,0.0669057,-0.0455174}
,
{-0.0820994,0.0806193,-0.101059,-0.169868,0.00862981,0.00447872}
,
{0.18682,0.0306766,0.0812191,-0.119439,0.0525984,0.0320999}
,
{0.135543,0.0351504,0.0419354,0.179219,-0.110948,-0.0216344}
,
{0.0730698,0.0595588,-0.0271579,0.0802916,-0.239904,-0.127548}
,
{-0.14244,-0.142145,0.10409,-0.0175999,-0.146612,0.0815886}
,
{0.0495456,-0.180314,0.0667109,0.0616096,-0.0269692,-0.058846}
,
{0.128853,0.0584378,-0.232667,0.000371726,0.00774411,0.314481}
,
{-0.105462,0.0636765,-0.0694611,-0.0453683,-0.151055,-0.11969}
,
{-0.0716891,0.379076,0.119278,-0.0445509,0.178565,-0.421665}
,
{-0.0320036,-0.0275046,0.0193344,0.0160748,-0.0459752,0.0207283}
,
{0.089117,-0.117803,0.154835,-0.00595513,0.111018,-0.0506852}
,
{0.0787546,0.0437438,-0.0939132,0.0771059,0.100934,0.0692206}
,
{-0.0637667,0.079135,-0.05883,-0.0596684,-0.0231229,0.0064959}
,
{0.0438294,-0.02163,0.0179918,0.132858,-0.00112211,0.0464109}
,
{0.146008,0.0123742,0.0631103,-0.00615279,0.04079,-0.0268505}
,
{0.0413687,0.0954735,-0.0794777,-0.0426322,-0.0263465,0.0466165}
,
{0.0350154,-0.468054,0.00633037,-0.175487,0.148763,0.316585}
,
{0.0195954,0.123221,-0.00855941,0.117357,-0.00585171,-0.067257}
,
{0.248513,0.0564058,0.0386715,0.239715,0.0604505,-0.172866}
,
{0.0952168,0.115845,0.156857,-0.29728,0.371451,-0.166367}
,
{-0.0557259,0.104221,-0.102509,-0.00688088,-0.0674896,0.0208458}
,
{0.190698,-0.12152,-0.028046,-0.0776271,0.339968,0.201136}
,
{0.0206536,0.078824,-0.122484,0.193448,0.105977,0.317423}
,
{0.208294,0.256594,0.0472612,-0.157629,0.214307,-0.379509}
,
{-0.0501034,0.0312909,-0.116829,-0.323473,0.0631151,0.103232}
,
{-0.0181492,-0.208817,0.100851,0.0931254,0.0957766,0.078746}
,
{0.159482,0.266014,0.140172,-0.104144,0.0882905,-0.46581}
,
{0.0813625,0.0377806,-0.0290606,-0.21637,-0.0357027,0.0535177}
,
{0.0912399,-0.0866908,-0.139924,-0.415538,-0.122866,-0.01628}
,
{-0.0557838,-0.0158138,0.139592,-0.183537,0.225621,-0.256855}
,
{0.128965,0.121627,-0.0242971,-0.0687031,0.0231125,-0.0654698}
,
{0.0333946,-0.196723,-0.134985,-0.442271,0.143388,0.40086}
,
{0.102948,0.10434,0.0602695,0.0755966,-0.0129051,-0.186664}
,
{0.447888,0.00447497,0.190639,-0.0235772,0.170705,-0.0374664}
,
{0.0892893,0.0277694,-0.284905,0.18978,-0.158087,0.0206017}
,
{0.15489,0.128616,-0.114666,-0.192817,0.038193,0.0729858}
,
{0.216462,-0.00255437,0.461399,-0.168181,0.150347,0.139435}
,
{-0.197544,0.068363,0.170634,0.0828848,0.162132,0.0551882}
,
{-0.240377,-0.0576584,0.0146755,-0.204849,-0.200275,-0.862765}
,
{0.119261,0.0752905,0.236264,-0.262384,0.111733,0.246922}
,
{-0.0573262,-0.00986497,0.0450961,0.08089,0.0583653,-0.113481}
,
{0.0417625,0.134578,-0.375033,0.17019,-0.271834,-0.251721}
,
{-0.170161,0.0360522,0.0583687,0.0560814,-0.09495,-0.154615}
,
{0.18351,-0.200329,-0.473471,0.277872,0.0331222,-0.330221}
,
{-0.103947,-0.233599,-0.242408,-0.148938,-0.0508249,0.329492}
,
{0.084517,-0.060287,0.0409558,0.0531921,0.00242077,0.291584}
,
{0.0414222,0.337293,-0.114613,-0.0477221,0.179497,-0.293705}
,
{-0.0331311,0.21774,0.00760327,-0.0102951,0.118217,-0.166188}
,
{-0.16334,-0.179663,0.0964834,0.233913,0.0894568,0.351265}
,
{0.0627227,-0.128853,0.103768,-0.00314828,0.196982,-0.422439}
,
{-0.07163,0.156186,-0.0189749,0.00341471,-0.173106,0.00203118}
,
{0.0640906,0.322631,0.187051,0.170624,0.0348337,0.303357}
,
{0.0553688,0.165635,0.317339,0.0196331,-0.0736016,0.0580247}
,
{-0.0472179,-0.383856,-0.0682652,0.107433,-0.0869967,-0.0208201}
,
{0.11255,-0.417798,0.029431,0.0320658,0.0685228,0.41689}
,
{-0.139649,0.0274183,0.26625,-0.0603889,0.145445,0.402008}
,
{-0.122656,0.207148,0.024505,-0.06644,-0.106025,-0.0139371}
,
{0.159674,0.597716,0.00221169,-0.0928494,-0.00125114,0.318282}
,
{-0.0537757,0.0243917,-0.0331685,-0.059214,0.0835722,-0.103712}
 };
  static const float bias2[1] = { 0.0709872 };
  static const float weights2[][1] = { {-0.160588}
,
{0.154338}
,
{0.271836}
,
{-0.199463}
,
{-0.322919}
,
{0.141314}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_4(v, index);
}
static int assign_gen_lepton_prior_1_0_4() {
  global_gen_lepton_prior.at(1,0,4) = &specialized_gen_lepton_prior_1_0_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_4 = assign_gen_lepton_prior_1_0_4();

template<typename T> float gen_lepton_prior_1_0_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.10757,-0.138281,0.0985482,0.0240357,-0.053636,-0.0167599}
,
{-0.0450294,0.102011,-0.167389,-0.0762305,-0.18389,-0.196769}
,
{0.0020409,-0.000316961,-0.0987613,0.0251055,-0.0206893,0.194433}
,
{-0.0416547,0.246556,-0.086474,-0.224191,0.0960904,-0.142428}
,
{0.202229,-0.145412,0.141025,0.138787,0.232968,-0.107627}
,
{-0.0335236,-0.00976892,0.114201,0.0671778,-0.0520917,-0.132963}
,
{-0.0913,-0.00874301,0.0162712,0.0832262,0.0730149,0.0880707}
,
{-0.0745075,-0.233652,-0.0754672,-0.0824732,0.151755,-0.00660729}
,
{-0.106711,0.0452007,0.0571306,-0.121062,-0.0396884,-0.00937057}
,
{0.0761219,-0.105509,0.0783079,-0.21203,0.073064,0.181357}
,
{-0.058647,-0.00408414,0.0444551,-0.181527,0.106861,-0.219809}
,
{-0.14617,0.100453,-0.0835931,-0.104099,-0.105022,0.110998}
,
{0.0126385,0.210017,0.190364,0.0529709,0.0311917,-0.028464}
,
{0.0773185,-0.157226,-0.0273105,-0.197978,-0.0707652,-0.116128}
,
{-0.129378,-0.0161422,-0.0226044,0.0758206,0.150355,0.000845088}
,
{-0.0321847,0.0770024,-0.102116,0.10564,-0.0136134,-0.140404}
,
{0.216651,0.0447018,0.0910346,0.0960987,0.156818,-0.121641}
,
{0.206714,-0.163103,0.201442,-0.172666,0.00560822,0.0799789}
,
{-0.022859,-0.12485,0.119611,-0.207399,0.112717,0.0737394}
,
{-0.0133273,0.119929,0.116212,0.0880011,-0.152821,0.158292}
,
{-0.0196768,0.162921,0.11811,-0.0986668,0.0458909,-0.126997}
,
{-0.243987,-0.129519,-0.00992229,-0.00254986,0.0816496,-0.00519921}
,
{-0.00757931,0.162475,0.0645617,-0.132546,0.0747419,-0.0851368}
,
{-0.0879914,0.100292,0.0824828,-0.0345275,0.12144,0.184428}
,
{-0.0874931,0.0146565,-0.211426,-0.047888,0.145781,-0.0603854}
,
{0.207411,0.0227817,0.0182779,0.019581,0.109829,-0.0792293}
,
{0.0725614,-0.0505624,0.0447257,0.122927,0.0805019,0.0100428}
,
{0.0966716,0.0105387,-0.0947318,0.0777351,0.191991,0.0769146}
,
{0.116015,-0.1245,-0.0299226,0.116514,0.0593418,0.115232}
,
{0.125093,-0.125571,0.190408,0.131026,-0.088768,-0.223985}
,
{0.0595252,-0.0481202,-0.0792305,0.0198107,-0.101176,0.100875}
,
{-0.0524254,0.0512077,-0.0135478,-0.00889588,0.0416015,-0.143761}
,
{-0.117262,0.00152516,-0.12114,-0.0669117,0.027578,-0.0224407}
,
{-0.00890188,-0.0483277,-0.0502114,-0.132854,-0.211029,-0.0450918}
,
{-0.126649,-0.0807597,-0.0202691,-0.0152101,0.102126,-0.111402}
,
{-0.131925,0.0731071,-0.0138287,0.00955483,-0.0792389,-0.126947}
,
{-0.0248985,-0.0484588,-0.0190983,0.0263084,-0.172901,-0.234246}
,
{0.101222,0.039523,0.0229567,-0.217279,-0.202517,0.120266}
,
{0.0202494,0.150833,0.0302273,0.126245,0.0534117,0.193967}
,
{0.170088,-0.0549233,-0.116371,0.112575,-0.0151471,0.00784284}
,
{0.119141,0.0489798,-0.0395618,-0.150446,0.0345017,-0.0443776}
,
{-0.129341,-0.106982,-0.0428483,-0.12393,0.125247,-0.181152}
,
{0.124029,0.00695251,0.0855132,0.00886975,-0.130296,0.162886}
,
{-0.136238,0.0600802,0.0201162,0.214529,0.0896538,-0.0181096}
,
{-0.0178931,-0.0800185,0.0407517,-0.0923563,0.0923277,-0.0659121}
,
{0.0190033,0.0263558,0.130542,-0.0854563,0.000760135,0.106925}
,
{-0.0437649,0.0489867,0.114944,-0.0878632,0.167097,-0.031762}
,
{0.014548,0.0759014,0.220494,0.0781891,0.0695453,-0.11285}
,
{-0.113074,-0.0086127,-0.139751,0.214346,0.0354634,0.183468}
,
{0.0385853,-0.160851,0.102438,0.0714177,-0.11839,-0.0797199}
,
{0.08382,0.014294,-0.0203045,-0.0106839,0.0128992,-0.0573411}
,
{0.0725738,-0.00380768,0.0541178,-0.0805102,0.130588,-0.216822}
,
{0.104868,-0.0261474,0.0551893,-0.0420747,-0.199285,-0.100165}
,
{0.0705247,0.024841,0.108435,0.208156,-0.0379272,-0.149262}
,
{-0.132232,-0.0798051,-0.00738748,-0.0967109,-0.0585606,0.00469202}
,
{-0.0199244,-0.159639,0.0639166,-0.161901,0.102435,0.0133761}
,
{0.0104582,-0.0929235,-0.199142,0.122675,-0.113286,0.105437}
,
{0.0864698,0.0851166,-0.246975,-0.129252,-0.0241762,0.0419479}
,
{0.00618575,-0.0908065,-0.00673353,-0.037968,0.215393,0.0205279}
,
{0.190668,-0.119079,0.0420346,0.0605287,0.153759,0.0734719}
,
{0.00425305,-0.0775878,-0.00249435,-0.219745,-0.128912,0.0117884}
,
{0.198098,0.00193892,0.037625,-0.0840194,0.0692196,0.0648204}
,
{-0.0516512,0.00159195,0.195216,-0.22045,-0.222141,0.0476953}
,
{0.0279471,0.177055,0.0883933,0.0175012,0.0206454,-0.173236}
,
{0.207274,0.112933,-0.0666115,0.0365106,0.111723,-0.0611172}
,
{-0.0951093,0.153026,-0.00463598,-0.0477678,0.149411,0.0247065}
,
{-0.177636,-0.0375717,-0.0883804,0.0429004,0.0849457,0.229066}
,
{-0.0560956,-0.0384996,0.151073,-0.124417,-0.0355024,0.00371266}
,
{-0.137301,0.239469,0.023505,-0.235263,-0.041758,-0.0464214}
,
{-0.0712328,-0.00259336,-0.131152,0.138186,0.0268804,0.063602}
,
{-0.196018,0.00302751,-0.0103854,0.0534665,0.0661137,0.0201196}
,
{-0.0617861,-0.0743609,-0.182332,-0.147356,-0.0658797,-0.11572}
,
{0.0307897,-0.180747,0.223202,-0.153898,0.149029,-0.0523672}
,
{-0.0568378,0.0506824,-0.227172,-0.163539,0.00896677,0.0515349}
,
{0.0349079,0.0164857,-0.202092,0.134715,0.0324401,0.117707}
,
{-0.149716,0.0122823,-0.0358907,0.153443,0.0245491,-0.19135}
,
{0.030405,0.09736,0.144814,-0.0926835,0.194459,-0.228079}
,
{0.047902,0.0494147,0.152052,-0.0527051,-0.0589056,-0.135237}
,
{0.0443468,-0.0814277,-0.0422204,-0.123208,0.101425,-0.0230752}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.113527}
,
{-0.13936}
,
{-0.105731}
,
{-0.00827998}
,
{-0.0601865}
,
{-0.0251964}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_5(v, index);
}
static int assign_gen_lepton_prior_1_0_5() {
  global_gen_lepton_prior.at(1,0,5) = &specialized_gen_lepton_prior_1_0_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_5 = assign_gen_lepton_prior_1_0_5();

template<typename T> float gen_lepton_prior_1_0_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0522054,-0.0343026,0.0118703,0.0412897,0.161119,-0.089422 };
  static const float weights1[][6] = { {0.125541,-0.0235271,-0.084958,-0.111384,-0.0252702,0.137465}
,
{0.189986,-0.0667433,0.00408564,-0.0271406,0.0022794,-0.0547052}
,
{0.103312,0.288533,-0.163017,-0.0476662,-0.025023,0.203001}
,
{0.255124,-0.698884,0.239777,-0.111492,0.30767,-0.0593832}
,
{0.089807,0.04526,-0.0592522,0.0913375,0.375566,-0.015304}
,
{-0.136974,0.117191,-0.19357,-0.00661471,0.217832,-0.231425}
,
{0.0711462,-0.0320577,-0.058587,0.00228181,0.193931,-0.334304}
,
{0.0489161,-0.0369214,-0.202209,0.0192627,-0.27098,0.000879014}
,
{0.250598,0.124853,-0.0316246,-0.080802,-0.0330405,-0.0443955}
,
{-0.11154,0.107219,-0.196828,-0.152774,-0.0493043,-0.163701}
,
{-0.103366,0.176932,0.0287098,-0.103728,0.0434717,-0.10805}
,
{0.025031,0.03449,-0.224479,0.163961,0.073425,-0.000809525}
,
{0.0111274,0.0548634,0.066472,0.0478716,0.0014644,0.0259342}
,
{-0.134657,-0.0107091,-0.190411,-0.0630254,-0.116716,-0.0149818}
,
{-0.0572748,0.111396,-0.000522722,0.0892564,-0.0489591,0.0690985}
,
{0.165104,-0.0701173,-0.124175,0.183331,0.16645,-0.145353}
,
{0.110613,0.0995375,0.227956,0.244672,0.164864,-0.127615}
,
{-0.0429645,-0.185792,-0.123698,0.194521,-0.0336734,0.0433677}
,
{0.0439151,-0.423334,0.0236857,0.259793,0.258546,-0.132392}
,
{-0.0341961,0.00225415,0.0699781,-0.0855136,0.076628,0.00670464}
,
{-0.0566426,-0.0962444,0.120909,0.0302538,-0.00732211,0.0896575}
,
{-0.0762271,0.0457714,0.0297442,0.0134098,0.043159,0.0986495}
,
{0.165084,0.0551314,-0.237372,-0.195949,0.0502413,-0.20839}
,
{0.0323884,0.0434018,0.0364476,-0.0480864,-0.0512327,-0.0214486}
,
{0.0617351,0.171827,0.0773848,-0.0993764,-0.173577,0.139479}
,
{0.0629268,0.0535609,-0.0736207,0.0594364,-0.17275,0.0916511}
,
{0.0432564,0.00218573,-0.134841,0.177724,-0.164199,-0.0778297}
,
{0.00098584,0.0377844,-0.118232,-0.00462623,-0.0689825,0.0426158}
,
{-0.10966,-0.211108,0.028858,0.0616143,-0.0528539,0.165986}
,
{-0.0726535,0.0995819,0.037061,-0.131688,-0.100977,0.0441309}
,
{0.0630099,-0.137501,-0.137562,0.232832,-0.353634,-0.00722105}
,
{0.116564,-0.0457178,0.0774489,-0.0993429,0.241368,-0.148604}
,
{-0.0595282,0.0174075,-0.0759585,-0.165896,-0.0585937,0.139382}
,
{-0.0825618,0.049892,0.139584,0.0593064,-0.0800039,-0.0505978}
,
{0.199455,-0.00490145,-0.177365,0.0488908,-0.0619133,-0.129857}
,
{-0.0830206,0.0681965,0.16746,-0.129011,0.140143,0.0814903}
,
{-0.254643,0.199456,0.0240014,0.0741401,0.0245386,0.117186}
,
{-0.469764,-0.150316,-0.154888,0.303507,0.0418846,-0.0322118}
,
{-0.266819,-0.00438109,0.0986856,-0.0117164,0.0615052,0.114898}
,
{0.26654,-0.201379,-0.0421492,-0.00558324,-0.150074,-0.172725}
,
{0.0282136,0.198242,-0.229748,-0.075688,0.0415866,-0.188387}
,
{-0.202347,0.0286944,-0.0306309,-0.0414427,-0.0121139,-0.186473}
,
{0.176628,0.209634,-0.181215,-0.00351141,-0.152531,-0.0505072}
,
{0.284649,-0.116381,0.194667,-0.0810586,-0.172818,-0.0871269}
,
{-0.227531,-0.110079,0.031189,-0.157101,0.0500079,-0.328979}
,
{-0.0349671,-0.0481261,-0.00359762,-0.1791,-0.10548,-0.316298}
,
{-0.042936,-0.515228,0.143926,0.0897259,0.0786982,0.0855378}
,
{0.0607426,0.426123,0.112065,-0.169502,-0.247541,-0.000534575}
,
{-0.147179,0.233567,0.104482,-0.0175366,0.1917,0.0930465}
,
{-0.00674005,0.183547,0.0448292,-0.0992428,-0.0854269,0.265466}
,
{0.00229634,0.013747,-0.036533,-0.114747,0.463795,-0.00793152}
,
{-0.11676,-0.572722,0.105827,-0.122493,0.128308,-0.367488}
,
{0.302941,-0.0891607,-0.0605117,-0.0820938,0.193092,-0.1218}
,
{-0.379326,0.0303409,0.171622,-0.153288,0.394212,-0.301664}
,
{0.00129747,-0.00082533,-0.0368662,0.0360598,0.014587,0.0495731}
,
{-0.0208005,-0.00090544,0.0230885,-0.100124,-0.0928175,-0.121481}
,
{0.103321,-0.0180638,0.0377268,-0.0384579,0.270866,0.0060476}
,
{-0.0480492,-0.105512,-0.0149854,0.0102659,0.0427651,-0.0613793}
,
{-0.010873,-0.0698958,-2.4851e-06,0.0616128,-0.11715,0.167619}
,
{0.105858,0.114699,0.151292,-0.20132,0.0305743,-0.0431753}
,
{-0.0350483,-0.0461002,-0.0612541,-0.182743,-0.0980129,0.0189251}
,
{-0.127331,-0.138258,0.0875911,-0.111457,0.173567,0.0904564}
,
{0.0460195,0.116626,-0.0295602,0.00599105,0.026892,-0.0848991}
,
{0.0584176,0.111945,-0.14525,-0.119886,-0.0155431,0.0567395}
,
{-0.0782747,0.100055,0.0870805,0.0367881,0.0605725,-0.0221055}
,
{-0.109326,-0.0336226,0.1291,0.0217727,0.0524497,-0.0828679}
,
{0.186129,0.114055,0.0709605,0.21594,0.0219097,-0.0405574}
,
{-0.0371017,-0.103177,-0.0337227,-0.00438279,-0.0821279,0.0011479}
,
{-0.0714569,-0.0639159,0.0907303,0.0457405,-0.147344,0.177494}
,
{-0.0179596,-0.156199,-0.166956,0.07179,-0.0470019,0.00952447}
,
{-0.108646,-0.00400861,-0.164559,-0.11863,0.153809,0.0752377}
,
{0.178442,-0.101753,0.0194,0.0223711,0.114157,0.114269}
,
{0.0398257,-0.167625,0.0796481,-0.185013,-0.046448,-0.0143133}
,
{0.01538,0.116373,0.214729,0.0543939,-0.0673595,-0.00141873}
,
{-0.00330868,0.125472,0.00085692,0.0480245,0.182405,-0.183639}
,
{0.128491,0.0554235,0.0801649,0.104473,-0.0449312,0.0155978}
,
{-0.0532574,0.051562,0.0668436,0.0970332,0.0061389,-0.0591252}
,
{0.031539,-0.0345208,0.0614607,0.111252,-0.0810837,-0.103901}
,
{-0.0332924,0.155877,-0.0343338,0.0946111,0.163652,-0.0236893}
 };
  static const float bias2[1] = { 0.0033461 };
  static const float weights2[][1] = { {0.532975}
,
{0.133159}
,
{0.11854}
,
{0.153037}
,
{0.0602771}
,
{-0.14764}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_6(v, index);
}
static int assign_gen_lepton_prior_1_0_6() {
  global_gen_lepton_prior.at(1,0,6) = &specialized_gen_lepton_prior_1_0_6;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_6 = assign_gen_lepton_prior_1_0_6();

template<typename T> float gen_lepton_prior_1_0_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.321393,-0.148099,-0.0276782,0.066478,0.0809866,-0.00418203 };
  static const float weights1[][6] = { {-0.0620687,-0.12037,-0.0374566,0.016677,-0.0941592,0.0743625}
,
{0.119387,-0.057707,0.127057,-0.0482404,0.158914,-0.206851}
,
{0.062113,-0.351226,0.476989,0.0947767,0.408844,0.122817}
,
{0.417315,-0.383852,0.0305415,-0.0016255,0.290877,0.0836057}
,
{0.284421,-0.342732,0.00270479,-0.128686,0.244894,-0.0794381}
,
{-0.0554271,-0.227473,0.00324235,0.138934,0.18399,0.120709}
,
{-0.0341024,-0.0170257,-0.0953854,-0.0996154,0.111416,-0.0488212}
,
{-0.00121191,-0.217454,0.150715,0.0938427,-0.0619524,-0.0798007}
,
{-0.168081,-0.0913729,0.147942,-0.0399267,0.263252,-0.185513}
,
{-0.0575549,-0.0526461,0.0684408,0.237662,0.100619,0.0873803}
,
{-0.102093,0.0151025,0.00206094,-0.0588374,0.209537,-0.0044675}
,
{0.177299,0.0792163,0.0723681,0.12186,0.0134202,-0.108292}
,
{0.00985494,0.126997,-0.0404761,0.167173,0.206053,0.122321}
,
{0.186449,0.113385,-0.114377,0.0231538,0.167603,-0.0854135}
,
{-0.0150775,0.172492,-0.191471,-0.0715949,0.112367,0.205697}
,
{-0.019271,-0.0594045,-0.00449154,0.114312,0.0298273,0.0639198}
,
{-0.00240783,-0.0562862,0.0257548,0.108122,-0.280888,-0.0550331}
,
{0.0852771,-0.298583,-0.0313611,-0.185403,-0.0342423,0.0515194}
,
{0.1834,-0.315296,-0.0803403,-0.0441397,-0.0662812,0.0244832}
,
{-0.0825634,-0.13936,-0.07212,-0.0351248,-0.235585,-0.0323656}
,
{0.109245,0.0777516,-0.152917,-0.166653,-0.0741722,0.124495}
,
{-0.0169054,0.262535,-0.0601609,0.164841,-0.0813547,-0.0846661}
,
{0.0284514,0.156706,0.0375288,0.0995871,-0.0625816,-0.0430029}
,
{-0.105364,0.00133366,0.0391304,0.166361,0.120356,-0.207781}
,
{-0.0126172,-0.0142928,0.0604661,-0.183354,-0.0167618,-0.111803}
,
{-0.112903,-0.0412501,0.00379368,0.0638403,0.00193022,-0.0312105}
,
{-0.035461,0.105674,-0.11002,-0.136298,0.0662585,0.0407288}
,
{0.0587237,0.055648,0.180144,-0.0357671,0.116877,-0.00242488}
,
{0.0632763,0.046082,-0.0487359,0.178061,0.117241,0.0689303}
,
{0.136838,-0.117002,-0.0134037,0.152029,0.000245977,-0.0783394}
,
{-0.057176,0.31196,-0.0452111,0.281295,0.179678,0.0782959}
,
{-0.116001,0.110008,-0.0155907,-0.0978535,0.0605258,-0.0401248}
,
{0.0738764,0.0607054,0.136298,-0.0587385,-0.0127931,-0.0150079}
,
{-0.0419989,0.227417,-0.196708,0.0699514,-0.00445246,-0.119325}
,
{-0.143083,-0.0286434,0.209688,0.224999,0.138095,0.121899}
,
{0.0213754,0.0355706,0.06034,-0.0561496,-0.158714,-0.00346708}
,
{0.188776,-0.0910192,-0.13273,-0.0985789,0.0377926,0.361747}
,
{-0.126956,-0.11676,0.0540346,0.0148126,-0.136474,-0.0135455}
,
{0.278352,0.132196,-0.153809,-0.300039,-0.298629,-0.202264}
,
{0.0885618,-0.032662,-0.271414,-0.0296475,0.147347,0.162996}
,
{-0.012824,0.150638,-0.220627,0.118133,0.0495898,0.135759}
,
{0.0755176,0.163086,0.487996,0.0936329,0.316678,0.0145367}
,
{0.156487,0.00572162,-0.192933,-0.195557,-0.0937064,0.184699}
,
{0.53902,-0.0164679,-0.126205,-0.525949,0.106179,-0.106245}
,
{-0.0117705,-0.220884,-0.0832207,-0.201954,-0.02426,0.0591279}
,
{-0.00685481,0.130829,0.0290678,0.0848355,-0.0950868,-0.0323521}
,
{-0.207553,0.0121364,0.253417,0.293182,0.290848,-0.194521}
,
{0.0680248,-0.0586259,0.0682683,-0.00914471,0.0774039,-0.0835602}
,
{0.121077,0.12662,-0.156804,-0.1646,-0.597131,-0.192879}
,
{-0.270861,-0.174425,-0.075582,0.151896,-0.0200526,0.0613247}
,
{-0.183433,0.0855694,-0.152978,0.168437,0.00406827,0.0375504}
,
{-0.49236,-0.535821,-0.203695,0.203225,0.00718566,0.0781125}
,
{-0.164372,-0.0431467,0.0773633,0.163017,0.0715257,-0.0717396}
,
{-0.265763,-0.0524748,-0.542599,0.162811,0.0168732,0.123493}
,
{0.139256,-0.0269439,-0.0599814,-0.208068,-0.132435,0.11451}
,
{0.00762352,0.0673999,0.21923,0.120621,-0.000191268,0.00211461}
,
{-0.0992673,0.0422245,0.151102,0.0196547,-0.0413063,-0.052771}
,
{0.149081,-0.0755491,-0.0647037,0.126963,-0.0622979,0.163267}
,
{0.101887,0.196993,-0.154267,-0.101823,0.00937171,-0.0305274}
,
{0.155173,-0.0382182,-0.178907,0.0154175,-0.0943313,-0.135686}
,
{0.0586389,-0.0276565,-0.0335639,-0.110161,-0.0203071,-0.0633766}
,
{0.0226223,0.0633464,-0.0483818,0.0503602,-0.0743783,0.144943}
,
{-0.0217159,0.108214,0.0996203,-0.187522,-0.14718,-0.00247986}
,
{-0.0383774,-0.0142394,-0.000733881,0.0362075,0.00349582,0.0116274}
,
{0.0288915,-0.0926711,-0.154822,-0.157604,-0.0836737,-0.0921957}
,
{0.042207,0.0470294,0.040708,0.0369034,0.0458265,-0.116757}
,
{-0.231604,-0.0282001,-0.110103,0.13207,-0.0481026,-0.0616669}
,
{-0.0954209,-0.103771,-0.0365789,0.00141176,-0.0120879,-0.0461585}
,
{0.00877256,-0.15284,0.134275,-0.0897032,-0.0901829,-0.174047}
,
{-0.0889257,-0.105468,0.01829,-0.191815,0.0902573,-0.0465958}
,
{-0.151578,0.0645321,0.0669668,0.10769,-0.159962,-0.00386001}
,
{0.123511,-0.140876,0.055945,0.0880781,0.0810887,-0.0758062}
,
{-0.0985952,-0.00109167,0.0557795,-0.0695012,0.165285,-0.0367731}
,
{-0.0979581,-0.0866119,-0.12463,0.171802,-0.000759419,-0.129465}
,
{-0.0760633,0.100076,0.225607,0.069206,-0.110955,-0.00741291}
,
{0.0816004,0.0174979,0.079547,-0.155855,0.003831,-0.216338}
,
{0.00432051,0.0807904,0.0191909,-0.109948,-0.119266,0.11179}
,
{-0.0591771,0.0121289,-0.0363493,-0.0847339,0.0605239,-0.0834368}
,
{0.0526556,0.15229,0.236375,-0.0165228,-0.0736568,-0.151079}
 };
  static const float bias2[1] = { 0.0778572 };
  static const float weights2[][1] = { {0.193957}
,
{-0.119446}
,
{-0.150478}
,
{0.150224}
,
{-0.770947}
,
{-0.22691}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_7(v, index);
}
static int assign_gen_lepton_prior_1_0_7() {
  global_gen_lepton_prior.at(1,0,7) = &specialized_gen_lepton_prior_1_0_7;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_7 = assign_gen_lepton_prior_1_0_7();

template<typename T> float gen_lepton_prior_1_0_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0808641,-0.0733111,0.165849,0.168261,-0.0533756,0.175591 };
  static const float weights1[][6] = { {0.187126,0.217488,0.124946,0.00825453,0.099835,0.196329}
,
{0.0521654,-0.405931,0.0817051,-0.052303,0.32761,-0.0980834}
,
{-0.030308,0.106889,0.0045955,0.0829109,-0.185394,-0.117751}
,
{-0.0684753,-0.168483,0.575348,0.256293,0.105832,0.116917}
,
{-0.112061,-0.0013977,0.0617183,-0.0549008,-0.110775,0.0619288}
,
{0.0240744,0.00441374,0.113604,0.137958,0.020707,0.0448836}
,
{0.123581,0.18831,-0.00360994,0.110147,-0.206849,0.150817}
,
{-0.260126,-0.0329042,0.354422,0.0088419,-0.105823,0.283412}
,
{0.144892,-0.181773,0.0511096,-0.148984,-0.222624,0.375298}
,
{-0.0683034,-0.0462411,-0.0333461,-0.130617,-0.0847379,0.0526031}
,
{0.0803852,-0.160414,-0.0557611,-0.0354151,0.124381,0.0526323}
,
{-0.0199414,0.181983,-0.00343845,0.270201,-0.0983009,-0.482174}
,
{0.0107193,0.0758208,-0.0731296,0.170091,0.115329,0.263559}
,
{-0.0422723,0.0405919,0.119866,0.377847,0.139278,0.0015665}
,
{0.188864,0.0752204,0.127375,-0.162633,-0.075346,-0.0678817}
,
{-0.205231,0.0541769,0.031708,0.0210401,-0.130559,0.0741336}
,
{-0.0141168,0.14952,0.186344,-0.0453649,0.0744038,-0.330521}
,
{0.00977195,-0.144079,0.14301,0.137843,-0.275008,0.274863}
,
{-0.0217157,-0.0753913,-0.108623,0.0178692,-0.108793,0.0472116}
,
{-0.136242,-0.0910827,0.0268198,-0.103971,-0.1101,-0.196903}
,
{-0.0945542,-0.149449,-0.135164,0.132384,-0.0626703,0.0320944}
,
{-0.00859533,-0.14962,0.013855,-0.0785854,-0.112068,-0.0648721}
,
{-0.185685,0.00514329,0.0501226,-0.0296413,-0.0465204,0.0988554}
,
{-0.00959806,-0.0687618,0.0454464,-0.0241624,0.0376522,0.0235342}
,
{0.0542795,-0.060717,-0.0341482,-0.0416882,0.176987,-0.220594}
,
{-0.0178538,0.0578857,-0.0993747,-0.0780404,0.0661582,-0.012753}
,
{0.210793,-0.108689,0.151763,-0.0380063,-0.0509848,-0.130455}
,
{0.101437,-0.0783092,-0.243663,-0.0324451,-0.212287,-0.0236503}
,
{0.0576888,0.114717,-0.0665784,0.021604,-0.030818,0.184203}
,
{-0.00511076,0.00530238,-0.0596975,0.145929,0.108597,0.0468479}
,
{0.00351043,0.0685502,-0.0732571,0.0716911,-0.126823,-0.265771}
,
{-0.126335,-0.165252,0.121515,0.142775,0.0147165,-0.154668}
,
{0.0251149,0.173898,0.134938,-0.200091,-0.0889984,-0.0712055}
,
{-0.155119,-0.163907,-0.0378242,-0.0447349,0.087455,0.140838}
,
{-0.275172,-0.249082,-0.0632061,0.282522,0.315192,0.0987114}
,
{0.115828,0.0362381,-0.089513,0.216683,-0.109828,0.0077381}
,
{-0.306376,-0.110227,-0.0165329,-0.207033,0.209894,-0.330785}
,
{-0.155099,0.195064,-0.0228967,-0.014725,0.169587,0.158027}
,
{-0.275908,0.16434,-0.0572936,0.0980028,-0.276899,-0.197703}
,
{0.199905,-0.0314381,0.0481448,0.0641459,0.0693176,0.140959}
,
{-0.115839,0.0162255,0.00204967,-0.0338783,-0.173834,-0.0142868}
,
{-0.432851,0.19495,0.293222,-0.194673,0.205654,0.203514}
,
{0.127671,-0.00602282,0.000967821,-0.0437621,-0.167302,0.0452177}
,
{0.177321,0.00892511,-0.0495619,-0.0171694,0.00335391,-0.063694}
,
{0.0132969,-0.0514109,-0.164143,0.361982,0.0677309,0.54194}
,
{0.165466,0.0973706,-0.154423,0.196452,0.0375724,-0.0941667}
,
{0.0488128,-0.253005,0.0887834,-0.0287264,-0.103638,-0.117885}
,
{0.223177,-0.114542,-0.0368827,0.105871,0.113403,-0.101292}
,
{-0.272727,-0.0152506,0.042437,-0.106694,-0.0615252,-0.625715}
,
{0.446727,-0.111176,0.113802,-0.0472767,0.2279,0.289196}
,
{-0.225917,0.159727,0.165659,-0.221185,0.135873,-0.0665235}
,
{0.051259,0.100084,0.117717,-0.037416,0.296614,0.449687}
,
{0.137377,-0.020644,0.168636,-0.31047,-0.092012,-0.0470277}
,
{0.0269589,0.0740993,-0.220119,0.109709,-0.159987,-0.134791}
,
{-0.0437345,-0.0545266,-0.170093,0.0797824,0.0587831,-0.0106341}
,
{0.0208216,-0.0386446,0.134247,0.0793255,0.090529,-0.105764}
,
{0.0287446,-0.153553,-0.0905047,-0.144358,-0.0540381,0.0927095}
,
{-0.0681762,0.0838877,-0.034699,-0.0412265,-0.0283196,-0.0296242}
,
{0.00526636,0.147069,-0.116515,0.0696014,0.0570944,0.126474}
,
{0.0492166,0.178093,0.0554125,0.0796956,-0.179432,-0.0741037}
,
{-0.0726447,0.154463,-0.0612229,0.107165,0.124124,-0.131362}
,
{0.0205197,0.17832,0.0632451,0.0241572,0.0586782,0.0674695}
,
{0.0281857,0.224278,-0.13209,0.0334598,-0.145807,-0.0504564}
,
{-0.0849125,-0.0568363,-0.0659777,0.105213,0.211606,0.157252}
,
{-0.20547,-0.176027,0.0214871,-0.0257834,-0.0881197,-0.117744}
,
{0.0178787,0.0535022,0.1205,0.110042,0.156801,0.0318664}
,
{-0.0348478,0.0217427,-0.0739856,0.18946,-0.0301631,0.107542}
,
{0.00909604,0.126867,-0.122565,0.11221,0.0645484,0.0337085}
,
{0.0209875,0.0564108,0.0111097,0.161252,0.00703967,-0.181219}
,
{0.115831,-0.0973272,0.0712418,0.0462442,0.046233,-0.188322}
,
{0.0128656,0.030181,0.128365,0.0564095,0.135374,0.0605636}
,
{-0.0472725,-0.0236173,0.0151845,0.0926993,-0.115795,0.182973}
,
{-0.159815,-0.0351162,-0.11996,-0.0412365,-0.144754,0.155341}
,
{-0.0892005,0.160289,0.215383,0.0228002,0.110246,0.0799374}
,
{0.044601,-0.186432,-0.223559,0.0620668,0.140974,0.199608}
,
{-0.0502167,-0.0637351,-0.0785171,0.0924516,-0.21184,-0.0749127}
,
{-0.012681,-0.112784,-0.0278193,-0.0304114,-0.125051,0.0327716}
,
{-0.237473,0.0536789,-0.0820744,-0.00693377,-0.171616,0.2008}
,
{0.0349167,0.0655568,0.0685649,0.138006,0.0292777,0.026266}
 };
  static const float bias2[1] = { 0.120304 };
  static const float weights2[][1] = { {-0.23608}
,
{-0.203408}
,
{0.188482}
,
{0.115189}
,
{-0.373993}
,
{-0.612655}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_8(v, index);
}
static int assign_gen_lepton_prior_1_0_8() {
  global_gen_lepton_prior.at(1,0,8) = &specialized_gen_lepton_prior_1_0_8;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_8 = assign_gen_lepton_prior_1_0_8();

template<typename T> float gen_lepton_prior_1_0_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.00583014,0.116856,0.28018,0.313637,0.189983,-0.0569464 };
  static const float weights1[][6] = { {-0.00157227,0.0999245,0.0119514,-0.261306,0.158724,-0.163306}
,
{-0.0536433,0.293304,-0.235331,-0.0572384,-0.178271,-0.00284912}
,
{0.0841403,0.299333,-0.109061,-0.118072,-0.0103413,-0.1584}
,
{0.0709826,0.330397,0.377641,0.258903,0.10157,-0.101246}
,
{0.196973,0.154291,0.269208,0.548675,0.265243,-0.160237}
,
{-0.098486,0.0746251,0.276948,0.514364,0.270819,0.0462319}
,
{-0.175336,0.0869918,0.296263,0.441498,0.181226,-0.0241452}
,
{-0.189878,-0.02126,-0.274311,-0.0523593,-0.000192311,-0.177489}
,
{-0.0251327,0.0720916,-0.112583,0.309525,0.220329,0.117667}
,
{0.121987,0.0520467,0.0512418,-0.150079,-0.0429276,0.0620033}
,
{-0.128521,0.188097,0.126302,0.0297235,0.109325,-0.066919}
,
{0.0463433,-0.153049,0.0187857,0.167042,0.294339,-0.240145}
,
{-0.184767,-0.105513,0.0735454,-0.0700814,-0.01669,-0.160085}
,
{0.181259,0.223796,0.153566,0.116324,-0.175055,-0.0279469}
,
{-0.143018,0.0834792,0.187896,-0.0677185,0.109819,-0.0499422}
,
{-0.216199,-0.016668,-0.0587839,-0.0386228,0.0423742,-0.0475646}
,
{-0.119232,0.152625,0.119804,0.320107,0.233841,-0.124504}
,
{-0.125245,0.0688501,0.0101012,0.0210499,0.0743078,0.18133}
,
{-0.0709613,-0.158389,-0.106195,-0.0791649,-0.0834783,0.0883692}
,
{-0.251144,0.125241,-0.033849,-0.212674,0.0473006,-0.132391}
,
{0.0289011,0.045639,-0.025265,-0.0284419,-0.0345504,-0.122763}
,
{-0.0872396,-0.0293984,-0.0468246,-0.01658,0.116971,0.0956852}
,
{0.187749,0.0187838,-0.137605,-0.00677393,0.0214964,-0.0216487}
,
{0.0798623,-0.0915917,-0.0357663,0.0213391,-0.0553263,-0.255544}
,
{-0.225002,-0.0593123,-0.0176001,0.0694449,0.157447,-0.0772921}
,
{0.0759211,7.24344e-06,-0.128221,0.126347,-0.0789851,0.116204}
,
{0.0589376,0.197234,-0.00179776,0.100192,0.22051,-0.143818}
,
{-0.0701761,0.0392116,-0.208826,0.149732,-0.0157818,0.00599545}
,
{-0.171501,0.0488587,-0.0486469,-0.0723824,-0.124214,0.126622}
,
{-0.164358,0.222729,0.0622424,-0.0592169,0.162454,0.117063}
,
{0.163896,0.0156141,0.0617998,0.101667,-0.0181266,0.0643622}
,
{0.117099,0.108594,-0.0623699,-0.0334342,0.0642637,0.105088}
,
{0.0145509,0.202775,-0.160796,-0.0379211,0.302727,-0.0370884}
,
{0.0137,-0.0420284,0.199572,0.0247281,0.148321,0.0206979}
,
{0.0733955,-0.199796,0.111385,0.0434561,-0.281113,-0.0955899}
,
{-0.00577255,0.120452,-0.153425,0.0576572,-0.0463725,0.00387193}
,
{-0.148122,-0.0251678,-0.270167,0.292561,0.619303,-0.138779}
,
{-0.0475899,-0.231887,0.170899,0.00965353,0.159145,0.0747038}
,
{-0.0436859,-0.49219,0.219753,0.179068,-0.0341064,0.0420504}
,
{0.120099,-0.224653,0.319333,0.121552,-0.0344228,0.100311}
,
{-0.0457401,0.0238972,-0.0243167,0.0497271,-0.185645,0.019195}
,
{-0.0137014,-0.246438,-0.457465,0.453333,0.268967,-0.119399}
,
{0.101433,0.0179657,0.0453288,-0.0841944,0.182687,0.0313652}
,
{-0.0613425,-0.385809,0.372023,0.34027,-0.265116,0.220733}
,
{0.00163988,-0.0338082,0.333086,-0.154963,0.0888457,-0.00492878}
,
{0.0943926,0.142032,0.0328317,-0.0873294,0.0462379,-0.0180527}
,
{0.0854163,-0.15329,-0.414638,0.447402,0.285664,-0.0271654}
,
{-0.0453392,-0.129095,-0.0567942,0.153081,-0.10264,0.0377163}
,
{0.193706,0.149282,-0.05097,0.223513,0.121774,0.14343}
,
{0.4808,0.0614703,0.162449,0.058485,-0.306094,-0.126903}
,
{0.0238313,-0.0163309,0.149745,-0.0374073,-0.0491532,-0.072415}
,
{-0.10138,-0.107112,0.109959,0.0538775,-0.0928287,0.131141}
,
{0.14983,0.0627618,0.127132,0.0419398,-0.435516,0.0503933}
,
{0.0403776,-0.319329,0.343116,0.0539804,-0.00592037,0.0579861}
,
{-0.0411613,-0.0548542,-0.186894,0.0723845,0.0543198,0.0833904}
,
{0.121598,-0.101062,-0.0108035,-0.279126,-0.133279,0.0452741}
,
{-0.167355,0.00218758,-0.151049,0.00115456,0.00400481,-0.131269}
,
{-0.100011,-0.00820002,-0.0565537,-0.0541117,0.0042215,-0.0353895}
,
{-0.0447059,-0.166002,-0.133934,0.184192,0.0332905,-0.0748215}
,
{-0.0891179,-0.174786,0.17943,-0.10676,-0.200621,0.230633}
,
{-0.232974,0.183249,-0.100531,-0.184938,-0.246812,-0.102177}
,
{3.72071e-05,-0.215801,-0.0720873,-0.17568,-0.0595723,-0.0537426}
,
{-0.132202,-0.0468043,-0.0186904,-0.316418,-0.25583,0.02223}
,
{0.188165,0.0474764,0.177691,-0.203159,0.0399389,-0.0173425}
,
{0.0112101,-0.0440542,0.0705009,0.0884289,0.0860573,-0.0734984}
,
{0.0629323,0.0244689,-0.180419,-0.0456259,-0.102934,-0.0916776}
,
{0.0432599,0.153013,-0.155567,-0.177353,-0.0740588,0.0411152}
,
{-0.189358,-0.107319,0.00474444,-0.0908576,-0.132434,0.0651828}
,
{-0.0112357,0.0879903,-0.0090674,0.211607,0.237089,-0.126063}
,
{0.231726,0.0972878,0.005739,-0.256537,-0.169728,-0.0253499}
,
{-0.0543225,-0.117114,-0.0328551,-0.129896,-0.0314693,-0.102178}
,
{0.173264,0.0870336,0.0874172,-0.119478,0.0919787,-0.0582628}
,
{0.0798991,0.0120304,-0.00479466,-0.171342,0.00245834,0.209329}
,
{0.13339,0.160916,-0.0698045,0.171307,-0.0292949,-0.14071}
,
{0.0220745,0.0341203,-0.06682,-0.0668563,0.163014,0.0431703}
,
{-0.0395345,0.0399046,-0.191047,-0.11277,-0.0289506,0.068696}
,
{0.0556244,0.11178,0.00345607,-0.00458103,0.114601,0.0999801}
,
{-0.101314,-0.00270645,0.102597,0.15676,-0.0796493,-0.157737}
,
{0.0523108,0.0568,0.0739855,-0.0759715,-0.167811,0.038876}
 };
  static const float bias2[1] = { 0.053367 };
  static const float weights2[][1] = { {-0.351576}
,
{0.107141}
,
{0.172633}
,
{0.15049}
,
{0.0415455}
,
{-0.168623}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_9(v, index);
}
static int assign_gen_lepton_prior_1_0_9() {
  global_gen_lepton_prior.at(1,0,9) = &specialized_gen_lepton_prior_1_0_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_9 = assign_gen_lepton_prior_1_0_9();

template<typename T> float gen_lepton_prior_1_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.204638,-0.0727176,0.309036,0.264148,0.118631,-0.0503484 };
  static const float weights1[][6] = { {-0.333543,0.0536967,-0.557943,0.576079,-0.266802,-0.247152}
,
{0.150879,-0.315301,-0.359972,0.039628,-0.233638,0.68193}
,
{0.459737,-0.0582804,0.00855825,0.130143,0.141745,0.344919}
,
{0.413783,-0.163806,0.35736,-0.162067,-0.128703,-0.947268}
,
{0.204761,0.100349,0.433902,0.0160453,0.255799,0.171103}
,
{0.0653675,-0.133598,0.145386,0.11042,0.13199,0.0639969}
,
{-0.118686,-0.00279424,0.186115,0.436553,-0.136961,0.0945277}
,
{0.0492542,-0.263755,-0.0740115,-0.35779,-0.0700006,0.0572335}
,
{0.083183,-0.0872299,-0.0101611,-0.101341,0.218965,0.0371407}
,
{-0.242546,-0.122581,0.00583433,-0.0390705,-0.122453,0.227189}
,
{0.121211,0.00413403,-0.0581479,-0.0590714,-0.0547548,0.111177}
,
{0.0103991,-0.178707,0.193208,-0.243917,0.0369127,-0.122315}
,
{-0.00947682,0.204234,0.122874,-0.012426,0.0107246,-0.0980788}
,
{0.00439928,-0.0884677,-0.0421501,-0.0207137,-0.149014,0.0555516}
,
{0.0406261,-0.0915314,0.114299,-0.0454521,0.0892439,0.014385}
,
{-0.0476707,0.186507,0.063108,-0.0401437,0.0171596,0.131313}
,
{0.254364,-0.306148,0.357962,-0.194712,-0.0309846,-0.0383236}
,
{0.0311523,0.183016,0.10617,-0.080854,0.0897374,-0.0477513}
,
{-0.157766,0.0167186,0.0746398,0.31,-0.118171,-0.199194}
,
{-0.121605,-0.129134,-0.0965927,0.043046,0.0631622,-0.163134}
,
{0.00938818,0.0345645,-0.199634,-0.349182,0.114769,-0.030936}
,
{0.0783898,-0.0145972,-0.209698,0.0361415,0.0484384,-0.180792}
,
{-0.101483,0.197257,0.0246231,0.132549,-0.0910776,0.160873}
,
{-0.143062,-0.149829,0.0129223,0.137391,0.0555262,0.196991}
,
{-0.00479337,0.182813,-0.0700361,0.21343,-0.0344066,-0.249421}
,
{-0.174004,-0.313581,-0.0559977,0.0449079,-0.186699,-0.213764}
,
{-0.14195,0.149622,-0.150035,-0.0502908,0.0690472,-0.266298}
,
{0.140132,0.0260247,-0.130488,0.118447,0.00377039,-0.0321491}
,
{0.357843,-0.0879702,0.339807,0.00244544,-0.0687353,-0.138269}
,
{-0.145941,-0.11588,-0.216856,0.0366692,0.110849,0.210446}
,
{-0.0601164,-0.0368435,-0.14386,-0.159982,-0.0715314,-0.215927}
,
{0.0709397,0.0710039,0.173343,0.00817834,-0.0462287,0.0915929}
,
{-0.210193,-0.0510171,0.046633,-0.00655525,0.0832602,-0.124093}
,
{0.00743703,0.0370503,0.0251953,-0.0913919,-0.0243123,-0.1331}
,
{-0.133621,-0.0349004,0.158441,0.0524355,0.114333,0.0286032}
,
{-0.00254389,0.166914,0.0849254,0.0978699,-0.062556,0.242511}
,
{0.0657737,-0.184653,-0.0124722,0.280553,-0.00179094,-0.0991899}
,
{0.0503487,-0.0491568,-0.101866,0.0656318,-0.021148,0.0852289}
,
{0.0822511,0.12498,0.0257396,0.432461,-0.0522317,0.0519713}
,
{0.0329156,0.0591313,0.222294,-0.00995673,-0.106751,0.143275}
,
{0.0431887,0.0806117,-0.0411151,-0.0838257,-0.0179672,-0.0530124}
,
{-0.0360767,0.265802,-0.0771986,0.189835,0.101635,0.030923}
,
{-0.121014,0.00277599,0.128913,-0.0747772,0.0801677,-0.167081}
,
{-0.0403107,-0.00453167,-0.011739,0.0843811,0.0112497,0.308373}
,
{-0.22501,-0.0175881,0.0804985,0.0655475,0.0920201,0.0809321}
,
{-0.0450556,-0.00403164,-0.0278542,0.018425,0.078999,0.046329}
,
{0.0423616,-0.0797894,-0.122201,0.234474,0.0166257,-0.156306}
,
{0.0593274,-0.00925017,0.0604838,0.00289146,-0.0430367,-0.0660485}
,
{0.135343,0.1981,-0.176159,0.255459,0.146658,-0.019662}
,
{-0.0521281,0.0681476,0.165274,-0.0866572,0.00581732,0.066971}
,
{0.210613,-0.173544,0.00507764,0.0769645,-0.145589,-0.00625289}
,
{0.208096,-0.0616887,0.281211,-0.0297586,-0.240989,-0.0600342}
,
{-0.098019,-0.00919664,-0.131875,-0.13388,0.120043,0.138325}
,
{-0.0753881,0.00469056,0.00255107,0.228773,0.116988,0.00454685}
,
{0.135096,-0.180192,-0.337494,-0.0169206,0.020889,-0.0255377}
,
{0.0181899,0.20636,0.0802442,0.0716351,-0.0407948,-0.0840666}
,
{0.0861006,-0.184765,-0.0771019,0.0839427,0.0991416,-0.120983}
,
{0.0226952,-0.0289236,0.904955,-0.268152,-0.358262,0.0121422}
,
{-0.0462896,0.435353,0.132217,-0.314377,0.143261,0.137253}
,
{-0.0823242,-0.119281,-0.0867665,-0.079716,-0.10002,-0.00601249}
,
{0.0530646,-0.122647,-0.0975533,-0.0147989,0.105922,0.128112}
,
{0.0990637,-0.0944598,0.340056,-0.138488,0.11032,0.0448927}
,
{0.129376,-0.139573,0.52835,-0.26994,-0.152714,0.52222}
,
{-0.0507543,-0.0389261,0.118033,0.0475478,0.184755,-0.144062}
,
{-0.150813,-0.239005,-0.100651,0.326987,0.129336,0.163287}
,
{0.0583222,-0.00182434,0.0322832,-0.138461,-0.26956,0.00976678}
,
{-0.174902,-0.0874992,0.223821,0.0112553,0.0123036,0.185372}
,
{-0.0106486,-0.776346,0.0687701,-0.509539,0.407411,-0.209486}
,
{0.0426308,0.0425122,-0.138318,-0.131869,-0.0834281,0.0601519}
,
{-0.0932429,0.180936,0.0231855,-0.138968,0.0926308,0.0807924}
,
{-0.108668,-0.0663854,0.0519882,-0.120708,-0.176224,-0.0738047}
,
{-0.131497,0.0842663,-0.193193,-0.137994,0.236002,0.00156532}
,
{0.393801,0.23131,-0.071096,-0.273888,-0.141345,-0.200865}
,
{0.00921615,-0.181969,0.0705752,-0.0784637,-0.0333626,-0.0672857}
,
{-0.271038,0.035281,-0.547805,-0.545388,0.188643,-0.413394}
,
{0.318887,-0.0887577,0.270499,0.217553,-0.149954,0.12851}
,
{0.322904,0.16269,-1.10778,0.513524,0.164863,-0.200715}
,
{0.0183805,-0.0555146,-0.133973,-0.00645374,0.0352946,0.161847}
,
{0.289527,-0.0884948,-0.299465,-0.465303,0.515346,0.110314}
 };
  static const float bias2[1] = { 0.0848645 };
  static const float weights2[][1] = { {0.1988}
,
{-0.200609}
,
{0.127719}
,
{-0.15354}
,
{0.132655}
,
{0.235769}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_0(v, index);
}
static int assign_gen_lepton_prior_1_1_0() {
  global_gen_lepton_prior.at(1,1,0) = &specialized_gen_lepton_prior_1_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_0 = assign_gen_lepton_prior_1_1_0();

template<typename T> float gen_lepton_prior_1_1_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0892128,0.0674484,-0.128843,-0.0297437,0.0672863,0.220193 };
  static const float weights1[][6] = { {0.402343,-0.357942,0.617607,0.85565,0.0395402,-0.262644}
,
{0.247491,-0.0222538,-0.227317,-0.16204,-0.106684,-0.478872}
,
{-0.361591,0.103119,-0.22845,-0.251729,-0.240109,-0.156666}
,
{-0.0202732,0.210215,-0.290379,-0.00898422,-0.192048,0.228848}
,
{0.0446628,0.175162,-0.266772,-0.204777,0.173841,0.268403}
,
{0.172136,-0.0652417,-0.0916449,-0.0767655,0.150896,0.157264}
,
{0.179929,-0.0157216,-0.239378,-0.0834008,0.00109139,-0.0853711}
,
{-0.192777,0.213694,-0.0346935,0.0798664,0.0848583,-0.0729342}
,
{-0.119114,-0.16124,-0.00330067,0.182917,-0.0695179,0.0784777}
,
{-0.0915468,0.00348414,-0.0292075,-0.115398,-0.0548101,0.0438732}
,
{0.128184,-0.156129,0.0649462,-0.0114762,0.140704,0.0263957}
,
{-0.096155,0.0270029,-0.0419712,0.0728432,0.00795597,0.0136716}
,
{-0.0450757,0.147608,-0.117821,0.0562057,0.19835,0.0036014}
,
{-0.220435,0.220828,-0.313176,-0.0201866,0.0465318,0.0130404}
,
{-0.111581,0.228794,0.0133776,0.00914242,0.113551,-0.102748}
,
{0.0840918,0.190266,-0.0380301,-0.0125324,0.00184384,-0.131092}
,
{0.192535,0.150952,0.21128,0.0747252,0.0127229,0.0330041}
,
{-0.0362813,-0.0481291,-0.118004,-0.0398813,-0.206035,0.134255}
,
{-0.254007,0.0813793,-0.0982639,0.142653,-0.511984,0.110195}
,
{-0.10945,0.161166,0.0467427,0.0709832,-0.00812447,-0.0424054}
,
{-0.0127027,-0.104918,-0.00235007,-0.170098,0.0544717,0.0705422}
,
{-0.0260333,0.128448,0.105836,0.0198144,-0.0421295,-0.108995}
,
{0.0421091,0.0817656,0.0614953,0.0784202,-0.0792745,0.00648485}
,
{-0.0163844,0.0105054,0.105877,0.00013921,0.0133763,0.0126621}
,
{0.220109,-0.326527,-0.134599,0.039267,0.218371,-0.471958}
,
{0.0363616,0.024342,0.285761,-0.0627205,-0.202525,0.0603128}
,
{0.173565,-0.211233,-0.0960611,0.042683,-0.298277,-0.0202402}
,
{0.0088699,-0.024802,-0.185888,0.0973058,0.0389394,0.280555}
,
{0.402974,0.0828248,-0.203424,0.493682,-0.324937,0.284041}
,
{-0.154188,0.0253494,-0.138023,-0.00741558,0.153534,0.110201}
,
{-0.0550598,-0.149163,0.00346179,-0.0861368,-0.06329,0.397327}
,
{0.122356,-0.0103296,-0.145222,0.19362,-0.088681,0.0913296}
,
{0.0204475,-0.0197961,0.211647,-0.0877889,-0.0373534,0.000922681}
,
{-0.00937635,-0.0587709,0.183354,-0.111192,0.0536434,0.0305291}
,
{-0.166095,-0.0975412,0.0692434,-0.127221,0.1119,0.0361252}
,
{0.102274,-0.0975065,-0.0970852,-0.0467057,0.0473416,0.0827233}
,
{-0.0325627,0.00633726,0.0436137,-0.267727,-0.119054,-0.0474142}
,
{-0.0149076,0.0335981,-0.0653524,0.104957,-0.0483033,0.0603674}
,
{0.0801878,0.254175,0.242899,0.0766084,0.0998458,-0.105248}
,
{0.122361,0.189007,0.206262,0.215083,-0.218259,0.189744}
,
{-0.0642805,0.069988,-0.0524077,0.053051,-0.0617823,-0.113538}
,
{-0.0443317,0.146093,0.57134,-0.173623,0.0101383,0.309239}
,
{0.0798497,-0.0166342,-0.011372,-0.0921161,-0.0521303,-7.43792e-05}
,
{-0.0811305,0.145884,-0.071713,-0.0187198,-0.0933829,-0.0614426}
,
{0.156772,-0.118817,-0.100773,-0.118576,0.0239414,0.0998548}
,
{-0.0511338,0.0404642,-0.0657824,-0.0300988,-0.0143311,-0.188944}
,
{-0.356287,-0.00525939,0.0677775,-0.425196,-0.028245,-0.0973012}
,
{0.276229,0.155831,0.012356,0.0446685,-0.190325,-0.0475773}
,
{0.324477,-0.216167,-0.158344,-0.295171,0.226762,-0.143801}
,
{0.0237079,-0.087951,-0.0110067,-0.0504048,0.148071,0.136253}
,
{0.105474,-0.047409,0.0615032,-0.102463,0.212293,-0.192065}
,
{0.111341,-0.178615,0.21332,0.0107856,0.0698061,-0.0131623}
,
{-0.127268,0.0408099,-0.122024,-0.0352734,-0.209355,-0.0242468}
,
{0.209681,-0.296381,-0.101532,-0.421706,0.410903,-0.087408}
,
{0.0107028,-0.0855521,-0.246793,-0.106532,0.157084,-0.373288}
,
{0.224324,0.101969,-0.009088,0.048488,-0.00276711,0.17591}
,
{0.33988,-0.379728,0.19193,0.621385,-0.201617,0.289517}
,
{0.0101968,-0.0225343,-0.0304841,-0.0846925,-0.0230709,0.17623}
,
{0.243747,0.275386,0.274158,-0.254743,-0.215816,0.267767}
,
{-0.129861,-0.0334712,-0.0292423,0.0212998,-0.0875371,0.107392}
,
{0.00281299,0.221397,-0.292589,0.0290697,-0.140119,-0.1593}
,
{0.385694,0.313454,-0.51254,-0.112129,0.229484,0.0344923}
,
{0.000618595,-0.0842727,-0.482518,-0.118992,0.401137,0.134324}
,
{-0.114609,-0.0701966,-0.0583097,-0.185419,-0.345286,0.163032}
,
{-0.0217224,0.012532,0.178837,0.12732,-0.0514889,-0.0941366}
,
{0.1403,-0.0867768,-0.11633,-0.0772813,-0.0373169,0.21781}
,
{0.24713,-0.152574,0.130516,0.682248,0.161722,-0.641807}
,
{0.251299,-0.0821297,0.377608,0.668932,-0.075302,-0.24704}
,
{0.169427,-0.128047,0.106601,0.0354633,0.011856,0.0277679}
,
{0.0729402,0.100055,-0.0932767,0.0373906,-0.0186466,0.0570891}
,
{-0.0782641,0.141403,0.0242156,0.13177,0.00529039,0.257559}
,
{0.339196,-0.0976158,-0.0227323,0.200776,-0.106789,0.00130175}
,
{0.285976,0.0149628,-0.0295495,0.367039,0.0653279,-0.221617}
,
{-0.339522,0.0384947,0.257212,0.131095,-0.00240115,0.00811006}
,
{-0.073363,0.591805,-0.187696,-0.345108,-0.554781,0.370858}
,
{-0.804603,0.261455,-0.621783,-0.0696988,0.167222,-0.211914}
,
{0.0450796,0.0300528,0.0529634,-0.0129298,-0.0289648,0.019206}
,
{0.21768,-0.0290726,-0.0965089,0.00150361,0.0114261,0.0328512}
,
{-0.241009,1.27255,-0.103175,-0.013111,0.0285407,-0.458096}
 };
  static const float bias2[1] = { 0.191231 };
  static const float weights2[][1] = { {-0.0803853}
,
{0.178744}
,
{-0.120189}
,
{-0.120823}
,
{0.1834}
,
{0.114104}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_1(v, index);
}
static int assign_gen_lepton_prior_1_1_1() {
  global_gen_lepton_prior.at(1,1,1) = &specialized_gen_lepton_prior_1_1_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_1 = assign_gen_lepton_prior_1_1_1();

template<typename T> float gen_lepton_prior_1_1_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.296597,0.00390601,0.305428,0.198647,-0.0123561,0.232463 };
  static const float weights1[][6] = { {-0.0123838,-0.224412,0.0802917,0.265859,-0.0195151,0.277377}
,
{-0.0197223,0.190223,0.129932,-0.406894,0.227744,0.430739}
,
{-0.207828,0.00278417,-0.229363,0.601471,0.196282,0.172827}
,
{0.20548,0.166548,0.194464,-0.109896,-0.470049,0.241523}
,
{0.384064,0.216772,0.274041,0.0525567,0.0357197,0.410548}
,
{0.22107,-0.103775,0.0708385,0.234121,0.0750438,0.106203}
,
{0.14217,-0.0225059,0.0098036,0.398426,0.159024,0.056025}
,
{-0.0510118,-0.225076,0.0234808,-0.342004,0.116998,-0.0517929}
,
{-0.00229455,-0.125458,-0.260989,0.187,0.182465,-0.0120539}
,
{0.129267,0.088366,0.0913237,-0.104003,0.0802934,0.194856}
,
{-0.0449632,0.122452,-0.0627517,-0.00973892,0.0445097,0.144312}
,
{0.00605209,-0.0898225,0.0802167,-0.191835,-0.151565,-0.105431}
,
{-0.118768,0.0110348,0.178934,0.558197,0.250435,0.186165}
,
{0.124163,0.1043,0.490213,0.23603,0.0628049,0.0872016}
,
{0.166285,-0.0674962,-0.000665317,-0.109122,0.0941576,0.0399595}
,
{-0.0646228,0.186609,0.143483,-0.116206,0.183967,0.187964}
,
{0.00511149,0.12463,0.0360496,-0.125709,-0.154818,-0.279604}
,
{-0.251088,-0.0369677,0.110681,0.158127,-0.113906,-0.0960164}
,
{-0.182559,0.146357,-0.0350685,-0.0886114,-0.638005,0.284337}
,
{-0.0110138,-0.0761552,0.177006,-0.0433797,-0.0713965,-0.0822224}
,
{0.129463,-0.0838135,-0.170695,-0.146453,0.184621,-0.387693}
,
{0.0913623,-0.107348,0.037524,-0.30536,-0.0929438,-0.19782}
,
{-0.00632785,-0.184464,0.122425,0.0287031,0.023746,0.124688}
,
{-0.0371958,-0.198311,-0.0179927,-0.0432786,-0.132716,-0.111345}
,
{-0.121888,-0.0611845,-0.178365,0.0495209,-0.134548,0.0328662}
,
{0.250779,-0.0453859,-0.330905,-0.0877676,-0.06245,0.151889}
,
{-0.0671601,-0.182981,-0.191615,0.0966848,-0.238923,0.0753382}
,
{-0.17406,-0.0473373,-0.212273,0.213554,-0.132431,-0.0614283}
,
{-0.0503546,-0.399057,-0.107853,0.0667031,0.121818,-0.144136}
,
{0.186465,-0.160289,-0.0898909,0.0177911,-0.0215633,0.0780524}
,
{-0.115681,-0.157297,0.0445449,-0.202088,0.0217898,-0.116721}
,
{-0.068879,0.0367382,0.0147311,-0.220588,0.0862685,-0.161697}
,
{-0.0611537,-0.0534461,0.0353222,0.179529,0.0962231,0.0869435}
,
{-0.222863,-0.00755706,-0.0117906,0.138439,-0.103009,-0.119698}
,
{0.092242,0.177978,-0.00718806,0.261573,-0.0814415,-0.00776048}
,
{0.0734515,0.0817631,-0.0693445,0.0485827,-0.0035683,-0.0695587}
,
{-0.0123974,0.194847,0.124139,0.505352,0.0451585,-0.0260434}
,
{0.0571252,0.00797397,-0.0665927,-0.0777293,-0.0293592,-0.0367005}
,
{-0.14108,-0.0410732,0.197917,-0.403616,-0.137681,-0.0117892}
,
{-0.110797,0.0280781,0.0694734,0.0547744,0.111934,0.0409269}
,
{-0.0967667,-0.0707923,0.159031,0.100689,0.0707778,-0.0693669}
,
{0.0207154,0.0499551,0.0559994,-0.29251,-0.164534,-0.07876}
,
{0.106523,0.0700377,-0.165958,0.128957,0.115442,0.0294927}
,
{-0.144822,-0.00269405,-0.0881768,0.176216,0.00591959,0.0719647}
,
{-0.0340709,0.0389474,-0.0158309,-0.249417,-0.134535,0.056913}
,
{0.0791504,0.13525,0.0303986,-0.0568647,-0.246397,0.0373565}
,
{0.00321233,0.0727636,-0.220588,-0.254529,0.308885,0.125357}
,
{0.114433,-0.00712174,-0.0167585,0.113669,-0.0360861,-0.00664222}
,
{0.138605,0.206902,-0.0704026,-0.11613,-0.118031,-0.00733594}
,
{0.0955311,0.0364093,-0.121859,0.0475379,-0.0512473,0.019697}
,
{-0.0688414,-0.0885702,0.0615554,0.0270344,0.0250453,0.131037}
,
{0.260937,0.0919054,-0.197071,0.0307436,-0.038898,-0.0530526}
,
{0.0241507,0.0898154,-0.0685657,0.00710575,-0.0513466,-0.0276891}
,
{-0.0975538,0.0473501,0.106415,0.0399414,-0.447298,0.0281353}
,
{0.0947033,-0.171089,0.232767,0.107488,0.00122496,-0.0444336}
,
{0.151839,0.153036,-0.0921526,0.073566,0.0787051,-0.0265538}
,
{0.169064,0.00908733,-0.155118,-0.0214938,-0.0221543,0.158851}
,
{0.031788,0.107003,-0.264813,0.00158628,-0.0703134,0.0112712}
,
{-0.0391064,0.00814879,-0.0813554,0.237651,-0.0392292,0.130464}
,
{-0.0215563,-0.0333802,-0.018028,0.157468,-0.0762219,-0.0142884}
,
{0.0651219,-0.0319569,0.00691925,0.105605,-0.103291,-0.0348937}
,
{-0.0839133,-0.0170514,0.154982,0.031813,-0.065814,-0.182941}
,
{-0.120956,-0.156907,-0.0206439,-0.0160295,-0.137978,-0.203287}
,
{-0.135995,-0.00109682,0.207517,0.198462,0.226088,0.0131292}
,
{0.0682748,0.131947,-0.0637284,-0.115175,0.0353966,-0.12982}
,
{0.0723486,0.0603405,-0.0506931,0.0174929,-0.0240225,-0.0146123}
,
{0.077152,-0.0226298,0.0268979,-0.145389,0.0930549,-0.0327569}
,
{0.17508,-0.205138,-0.0219594,0.120468,-0.121758,-0.0546779}
,
{0.00404813,0.077608,-0.138739,-0.00676778,-0.0492265,-0.0770074}
,
{-0.000821041,-0.0198665,0.0779637,0.331304,-0.0444332,0.253684}
,
{0.097629,0.255722,-0.0334163,-0.141224,-0.053153,-0.0352444}
,
{0.481448,-0.210829,-0.0205402,-0.18969,-0.0373353,-0.0718182}
,
{-0.00420644,-0.104633,0.0254114,-0.0350824,0.0597245,0.00486644}
,
{0.0147044,0.0436761,-0.00927801,0.220332,0.0667679,0.115521}
,
{0.0642302,-0.572562,-0.201785,-0.401409,0.202921,-0.270766}
,
{-0.316375,0.0821076,0.146169,0.351529,-0.314804,0.290505}
,
{-0.736386,-0.212112,-0.0333522,0.720021,0.0667577,0.273363}
,
{0.110762,0.210578,0.113019,0.142259,-0.178056,-0.108353}
,
{-0.449707,-0.0345513,-0.184866,0.580207,-0.0527902,0.250962}
 };
  static const float bias2[1] = { 0.235261 };
  static const float weights2[][1] = { {0.165206}
,
{-0.175896}
,
{0.146065}
,
{-0.149449}
,
{0.377942}
,
{-0.273637}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_2(v, index);
}
static int assign_gen_lepton_prior_1_1_2() {
  global_gen_lepton_prior.at(1,1,2) = &specialized_gen_lepton_prior_1_1_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_2 = assign_gen_lepton_prior_1_1_2();

template<typename T> float gen_lepton_prior_1_1_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.00293437,-0.074153,-0.0251473,-0.0366871,-0.0750467,-0.229566 };
  static const float weights1[][6] = { {-0.0958704,0.030747,-0.0775049,-0.205995,0.0208624,0.141655}
,
{-0.488821,0.719747,-0.0300181,0.839137,0.203458,-0.1291}
,
{0.762342,-0.447364,0.521043,-0.619379,-0.278664,0.39842}
,
{0.27531,0.329729,0.0344363,0.321041,-0.127783,-0.457812}
,
{0.138778,0.0499833,0.0938074,0.118671,-0.0218329,-0.11122}
,
{0.0976353,0.0988779,0.0921816,-0.0901707,0.091138,-0.300389}
,
{-0.280352,-0.101144,-0.17849,-0.245653,-0.031532,-0.10383}
,
{0.154135,-0.401321,-0.131477,0.205602,-0.0535276,-0.39357}
,
{-0.321317,-0.00415335,-0.0717269,-0.3975,-0.215896,0.0551697}
,
{0.00195087,0.0521331,0.123799,0.0855082,-0.00392598,0.139823}
,
{-0.122105,-0.101705,-0.181647,0.0692068,0.0138567,0.0410308}
,
{0.0691592,0.252907,-0.0208866,-0.0897491,0.130449,-0.138745}
,
{0.0105793,0.000212068,-0.0857476,-0.583821,-0.21108,-0.0214047}
,
{0.190628,0.16083,0.0837806,0.283196,-0.0711711,-0.0370281}
,
{0.0170251,-0.0325389,0.051603,0.0233686,0.0238249,0.0777996}
,
{0.0242497,-0.122553,-0.0596532,0.128955,-0.139963,-0.000340172}
,
{0.182203,-0.143241,0.13774,0.0167104,-0.226045,0.0784493}
,
{-0.153734,0.119438,0.0782977,-0.0587892,-0.300437,0.413396}
,
{-0.484673,-0.126093,-0.116309,0.208462,-0.274132,-0.491211}
,
{0.0722484,-0.144421,0.112393,0.0617553,-0.0443438,-0.294702}
,
{0.146338,-0.188136,-0.0107294,-0.0916081,0.0523931,0.0475665}
,
{-0.0596801,0.126524,0.0743,0.0609144,0.0147733,0.231933}
,
{0.11084,-0.094609,0.138807,0.0286116,0.197866,-0.0864878}
,
{0.0988798,-0.0663814,-0.134268,0.0793451,0.077934,-0.0553066}
,
{0.016289,0.0232987,0.0837253,-0.1031,0.0675933,0.0580124}
,
{0.0965363,-0.0901933,0.0137856,-0.0547668,0.15258,0.186611}
,
{-0.0927802,-0.0929949,-0.351099,-0.185702,-0.0244231,0.0212489}
,
{-0.13598,-0.0536517,0.096784,0.110385,0.059637,-0.0115352}
,
{-0.297064,-0.0880222,-0.240205,-0.0571221,0.352735,0.364678}
,
{0.101465,0.05064,0.0833258,0.219723,0.131177,-0.00625798}
,
{0.249614,0.105513,-0.172722,0.221646,0.13262,-0.00459369}
,
{-0.0157669,-0.157137,0.0167679,0.15154,0.0335224,0.146398}
,
{0.144599,-0.119575,-0.0032635,-0.126661,0.075775,-0.0371224}
,
{-0.0971339,-0.245222,0.156432,-0.175412,0.103561,0.0887231}
,
{-0.243969,-0.105582,0.0215231,0.282431,-0.0563535,-0.0644557}
,
{0.0760908,-0.112253,-0.085906,-0.0508489,-0.0311427,-0.0669739}
,
{0.20959,-0.052123,-0.325284,-0.215469,-0.0754212,-0.0424365}
,
{0.0768398,-0.10419,-0.163587,0.145095,-0.0076904,0.116598}
,
{-0.121503,0.248216,-0.197943,-0.140777,-0.304251,-0.610448}
,
{0.151375,0.360752,-0.233056,0.00610504,0.391655,-0.267555}
,
{-0.11522,-0.0518643,0.0425119,0.0236258,-0.0384076,-0.195819}
,
{0.040082,0.183063,-0.434475,0.61776,0.0700804,-0.00855302}
,
{0.0111911,-0.0404345,-0.0170832,-0.123762,-0.153495,-0.0992865}
,
{0.369479,0.126105,-0.0951187,-0.274581,0.0020268,0.350747}
,
{0.0247157,-0.0020991,-0.0757541,0.0170519,0.172503,-0.0686127}
,
{-0.0629894,-0.00177243,0.117303,-0.0483015,-0.000602276,-0.0405347}
,
{0.242842,-0.16225,-0.215013,-0.0677741,0.0141866,-0.220007}
,
{0.0291409,-0.000453133,-0.060041,-0.0273701,0.019201,-0.0697791}
,
{-0.0982677,0.184253,-0.0306251,-0.120426,0.0158712,-0.173287}
,
{0.184537,0.0940558,0.113656,-0.209621,-0.0173743,-0.0171941}
,
{0.0795043,0.211376,-0.269219,-0.0618883,0.0534126,0.0288204}
,
{-0.0322935,-0.27356,-0.0652829,0.377761,0.392839,0.397864}
,
{0.0363995,-0.033567,-0.0604599,0.162773,0.0362725,0.0708313}
,
{-0.353511,0.360209,-0.210155,0.414403,-0.235148,0.540572}
,
{0.198523,0.0243315,0.21338,0.0428293,-0.14644,-0.143937}
,
{0.150015,-0.0332114,0.0100375,0.131198,0.00424312,0.0494216}
,
{-0.235581,-0.0289028,0.0809396,0.242529,0.017959,0.502056}
,
{0.0967385,0.0428771,0.0721447,-0.0398756,0.194075,0.0845528}
,
{0.177471,0.157144,0.16447,0.316832,-0.112758,-0.251875}
,
{0.100417,-0.0554882,-0.236288,0.105054,0.27914,-0.227419}
,
{0.137336,0.03946,0.000306046,-0.195318,-0.137754,0.0556046}
,
{0.20126,0.10058,0.160083,-0.0273848,-0.184723,-0.335706}
,
{0.696608,0.00345038,0.161369,0.235295,-0.324227,-0.531932}
,
{-0.324027,0.0454498,-0.0977742,0.185864,-0.0326295,0.0896116}
,
{-0.151338,0.128269,-0.0252087,-0.0496154,-0.225256,0.0166972}
,
{-0.0127718,-0.0870415,-0.12398,0.0750155,0.0356976,0.0227791}
,
{0.188991,0.147153,-0.0686228,0.181038,-0.0450866,-0.0547147}
,
{-0.0559684,-0.0243477,-0.263704,0.00610743,-0.13509,0.109288}
,
{0.0948461,0.212649,0.0269049,-0.0474254,0.00584997,-0.0894234}
,
{-0.0734199,-0.0355991,0.0393361,-0.00777894,0.0437104,0.0210181}
,
{0.0886189,0.0275017,-0.044635,-0.15316,-0.162023,0.0989755}
,
{-0.0490338,0.145627,-0.02041,0.0346109,0.1828,-0.0211912}
,
{0.245577,0.0526575,0.0848166,0.202646,-0.0170833,-0.0435099}
,
{0.0240269,0.16582,-0.037204,0.136984,0.0753489,-0.224923}
,
{-0.658165,-0.200319,-0.34408,-0.103012,0.216127,0.630411}
,
{-0.13892,-0.131667,-0.0441854,0.0388335,0.0166445,0.945632}
,
{-0.09993,-0.128672,-0.0903278,0.125602,-0.0454431,-0.20342}
,
{0.231777,0.0516445,-0.16883,-0.132367,-0.0471717,-0.228861}
,
{-0.135694,0.0858634,0.0797524,0.125752,0.218834,0.205209}
 };
  static const float bias2[1] = { -0.047599 };
  static const float weights2[][1] = { {0.100502}
,
{0.231832}
,
{0.110935}
,
{0.161895}
,
{-0.128774}
,
{-0.146465}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_3(v, index);
}
static int assign_gen_lepton_prior_1_1_3() {
  global_gen_lepton_prior.at(1,1,3) = &specialized_gen_lepton_prior_1_1_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_3 = assign_gen_lepton_prior_1_1_3();

template<typename T> float gen_lepton_prior_1_1_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0947303,0.043761,-0.0791223,-0.101018,-0.0453643,-0.129637 };
  static const float weights1[][6] = { {-0.0246279,-0.129756,0.0134947,-0.314241,0.0257414,0.0904715}
,
{-0.0429773,0.163698,-0.912192,0.0299315,0.0938324,-0.426825}
,
{-0.150049,-0.114521,0.0162537,-0.225486,0.0296201,0.540511}
,
{-0.0828775,-0.00474993,0.663904,-0.104465,-0.0680413,-0.210601}
,
{-0.0593782,-0.0649576,-0.131262,-0.207265,0.088404,-0.0845259}
,
{0.0155376,0.0863619,-0.0432931,-0.221699,-0.19622,-0.106959}
,
{-0.00687077,0.226661,-0.287305,-0.117925,-0.085198,0.0202792}
,
{-0.311632,0.173792,-0.054575,-0.000674099,0.00893678,-0.0708389}
,
{0.102132,0.00884835,0.12766,0.0444747,0.147296,0.0919303}
,
{-0.18568,-0.057263,0.165786,-0.125397,0.0286926,0.00339017}
,
{0.185864,-0.0483558,-0.146892,0.150783,-0.0663796,0.124524}
,
{-0.110546,-0.162064,-0.275394,0.0869968,-0.246166,-0.213993}
,
{0.384775,0.0266264,0.184092,0.115978,-0.0073467,-0.113869}
,
{0.333869,-0.0357182,-0.066956,0.0578582,-0.183685,-0.208261}
,
{-0.00629505,0.114032,0.108731,0.0318661,0.0805368,-0.0181568}
,
{0.100123,-0.167988,-0.0110137,0.119897,0.0989069,0.120999}
,
{0.252601,0.0570885,-0.180038,0.515957,-0.0685807,-0.0787986}
,
{0.229536,-0.0531298,-0.0852123,-0.19302,0.245953,-0.166064}
,
{-0.323308,0.0997876,-0.254191,-0.133135,-0.061729,0.159213}
,
{0.011107,0.128282,-0.097025,0.104301,-0.169914,-0.0882939}
,
{-0.0975466,0.149108,0.099484,-0.0912681,0.140843,0.156622}
,
{0.0674552,-0.00545034,0.197101,-0.0941077,0.155397,-0.0802441}
,
{0.185913,0.208138,-0.101165,0.140979,0.181371,0.060525}
,
{-0.0563088,-0.029125,-0.145148,0.0447373,-0.106561,-0.0238639}
,
{0.0384394,-0.00627754,0.124043,0.0591599,-0.0622341,0.0252698}
,
{-0.20141,0.0275186,0.106014,-0.150165,0.0341594,0.112086}
,
{-0.00836019,0.0737341,-0.0360027,-0.101818,-0.244169,0.132239}
,
{-0.10384,-0.0946376,0.0109742,-0.142342,0.078087,0.000886562}
,
{-0.174243,-0.127327,-0.0267234,0.0360368,0.715984,-0.0159859}
,
{-0.01935,-0.0172585,0.0487434,0.147658,-0.0654189,-0.0678672}
,
{0.0102563,0.0367989,0.138851,-0.0344186,0.166299,0.0233601}
,
{-0.20473,0.0570956,0.228036,0.0851744,-0.146663,0.0625583}
,
{0.214648,0.0350543,-0.0665359,-0.145253,-0.121212,0.117126}
,
{0.199679,0.175282,-0.0684884,-0.0833116,0.0735778,-0.0129928}
,
{-0.155714,0.0142594,0.168034,0.0834859,0.0414783,-0.115569}
,
{-0.043502,-0.10838,-0.149481,0.1095,-0.0612774,0.0345885}
,
{-0.425004,0.0157452,0.0627067,0.0187288,-0.0269774,-0.00584652}
,
{0.0343998,-0.133841,-0.0686727,0.0686166,0.108492,0.175634}
,
{-0.0529892,-0.00932248,-0.2771,-0.0635454,0.0586551,0.121241}
,
{-0.146132,0.183329,0.311455,-0.137439,0.186935,0.120803}
,
{-0.0649583,0.0409493,0.0446925,-0.0577162,0.0673348,-0.115421}
,
{0.057751,-0.0206122,0.323447,-0.096126,0.1292,-0.222336}
,
{-0.0161773,0.00165127,0.0254223,0.0381595,0.0739197,0.156559}
,
{0.162014,-0.0922421,0.151791,0.32908,-0.254035,0.366219}
,
{-0.0649934,0.242909,-0.127517,-0.159568,-0.158391,-0.0396737}
,
{0.0183328,-0.107199,-0.0614144,0.172934,-0.0635705,0.125964}
,
{0.536333,0.019305,0.252746,-0.298124,0.121415,-0.149037}
,
{0.0264472,0.0377931,-0.0585074,-0.0650824,0.0469554,0.115844}
,
{-0.0509866,0.215133,-0.159736,-0.399569,0.261586,-0.279884}
,
{0.0666177,0.0554911,-0.0421413,-0.0638551,-0.182582,0.00590297}
,
{-0.0160552,0.107563,0.0616514,-0.120307,-0.0276881,-0.178183}
,
{0.090158,-0.234984,-0.0224471,0.263357,-0.0551447,0.119625}
,
{0.0312859,-0.111593,0.0176133,0.143725,0.0714478,0.0535951}
,
{0.474596,-0.112638,0.352516,-0.669948,0.521004,-0.21857}
,
{-0.14136,-0.0466183,-0.135431,0.0922148,-0.0187173,0.193536}
,
{-0.0317095,-0.122243,0.104688,-0.0142742,0.146978,-0.184777}
,
{0.0804651,0.15138,-0.132349,0.219929,0.120856,0.0736565}
,
{0.102725,-0.0645956,-0.00879967,-0.0951913,-0.170299,-0.146416}
,
{-0.135198,-0.0778809,0.010777,-0.170469,-0.0289039,-0.136723}
,
{-0.0835764,0.0234088,0.075095,-0.117471,-0.185793,-0.00685238}
,
{-0.0556503,0.0620948,0.100984,0.0873437,0.0731103,0.23397}
,
{-0.193818,-0.0766926,0.233603,0.135025,0.146864,-0.204502}
,
{-0.0401019,-0.00539571,0.149652,-0.152598,-0.0750654,-0.0479052}
,
{0.0796892,-0.139742,0.0379215,-0.068412,-0.0323774,-0.100862}
,
{0.0403044,-0.0134007,-0.0506574,-0.152132,-0.148694,-0.05242}
,
{-0.0288915,-0.216613,-0.239548,0.0618936,0.134336,-0.00434821}
,
{0.13614,-0.109658,0.116556,-0.062695,-0.0198608,-0.144403}
,
{0.105286,0.0991743,-0.0251075,0.119739,0.111872,-0.201723}
,
{0.10884,-0.0654387,-0.157025,-0.171518,-0.109348,0.0870828}
,
{-0.117092,0.100957,-0.00613924,0.153329,0.0873623,-0.0655672}
,
{0.181816,0.101461,0.119354,-0.0566727,-0.116066,0.191572}
,
{-0.16285,0.153583,-0.093327,0.0476093,0.0915536,-0.0895412}
,
{-0.231692,0.216614,0.183483,-0.0899732,0.235466,0.254007}
,
{-0.15129,-0.0177586,0.041416,-0.212074,0.0757913,-0.0466119}
,
{0.208754,0.0541477,0.0381832,-0.106894,0.934464,-0.0613068}
,
{-0.193278,-0.0643099,-0.164721,0.0871519,0.0755563,-0.0323026}
,
{-0.0157836,-0.072195,0.152106,0.00524672,0.0630748,0.0903943}
,
{-0.115976,0.00602141,0.0215447,-0.0672725,-0.224204,-0.00475098}
,
{0.162168,-0.0058706,-0.112539,0.147295,0.0988057,0.234008}
 };
  static const float bias2[1] = { -0.11585 };
  static const float weights2[][1] = { {0.13009}
,
{0.0962342}
,
{-0.201879}
,
{0.110088}
,
{0.193139}
,
{-0.144181}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_4(v, index);
}
static int assign_gen_lepton_prior_1_1_4() {
  global_gen_lepton_prior.at(1,1,4) = &specialized_gen_lepton_prior_1_1_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_4 = assign_gen_lepton_prior_1_1_4();

template<typename T> float gen_lepton_prior_1_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.138687,0.18495,-0.264975,-0.155674,-0.15005,0.194272 };
  static const float weights1[][6] = { {-0.0828241,-0.132931,0.0572297,0.340789,0.0759854,-0.0942081}
,
{-0.218256,0.58118,0.0738505,0.143131,-0.0651898,0.709124}
,
{0.137629,0.382584,0.581331,-0.21586,-0.372998,0.600611}
,
{-0.0774388,0.21362,-0.0530459,-0.896763,0.632475,0.204318}
,
{-0.409074,0.258362,-0.384014,-0.0649051,-0.119643,0.506421}
,
{-0.192962,0.176215,-0.255266,-0.0339144,-0.167005,0.12878}
,
{0.0705706,0.0263344,-0.110246,-0.00555566,-0.426861,0.120687}
,
{0.0291942,0.0597371,-0.231911,-0.0484431,0.270861,0.234498}
,
{-0.156818,-0.27441,0.249452,0.109276,-0.0528893,-0.106312}
,
{-0.148259,0.0915594,-0.131059,0.108887,0.164141,-0.146263}
,
{0.0367964,-0.059444,0.186306,-0.0729126,0.112821,-0.161144}
,
{-0.0390599,0.322451,0.050095,0.00575157,-0.06189,0.188249}
,
{-0.208197,-0.10131,0.158909,-0.202055,-0.0227473,0.0341001}
,
{-0.0832337,-0.0393545,-0.0301277,-0.0274829,-0.026424,-0.0566978}
,
{-0.0816028,-0.023929,-0.153164,0.0255387,-0.175046,0.0271394}
,
{-0.0415591,-0.104583,0.138616,0.00195786,-0.0143951,-0.025097}
,
{-0.196295,0.155289,-0.147396,0.0326609,-0.178408,0.194021}
,
{-0.0666661,-0.0778743,0.0476271,0.187925,0.152397,0.104865}
,
{0.0241851,-0.49693,-0.240417,0.0333611,0.0358017,-0.234704}
,
{0.186259,0.119605,0.0983236,0.018616,-0.068334,-0.0562529}
,
{0.0204936,-0.0519096,-0.0181993,-0.344601,-0.104443,0.085724}
,
{-0.106386,0.0404777,-0.0649329,-0.103725,-0.0049829,-0.191334}
,
{0.126742,0.164949,-0.137139,-0.0420855,-0.101889,-0.0114366}
,
{0.0825228,0.0155203,-0.0969699,-0.316797,0.0696535,0.0369701}
,
{0.0138035,-0.096245,-0.0207165,-0.0913293,-0.328629,0.330961}
,
{-0.0672166,-0.0319349,-0.138863,0.203905,-0.135644,0.0789413}
,
{0.132813,-0.144955,0.340468,0.0210429,-0.164921,-0.246972}
,
{-0.180588,-0.143706,-0.0380708,-0.224424,-0.190554,-0.0565562}
,
{-0.125694,0.101598,0.0346984,0.436501,-0.0234721,-0.808459}
,
{0.0337381,0.0340666,0.124762,0.0383438,0.0307687,0.00734772}
,
{0.100566,0.045543,0.127134,0.00518776,-0.134414,-0.129696}
,
{-0.0258572,0.0183567,-0.13347,-0.123076,-0.0427842,0.0873613}
,
{0.0385711,0.0607675,-0.191279,0.102561,-0.19441,-0.154986}
,
{-0.126753,0.0281223,0.000131558,-0.0395674,0.203092,-0.0241431}
,
{0.165063,0.0574022,-0.0544082,0.280739,0.0940725,-0.0318508}
,
{-0.0684456,-0.0835465,-0.0950985,0.0750738,0.15514,-0.0793667}
,
{-0.101771,-0.0679935,-0.173221,0.124728,0.273991,-0.175821}
,
{-0.0054043,-0.0338903,0.00869093,-0.00330439,0.0339108,0.0278384}
,
{0.0364212,-0.0267749,0.0757008,-0.0482755,0.0180471,0.151177}
,
{0.0261903,0.0176048,0.169597,0.109708,-0.0521894,0.0383225}
,
{-0.167807,-0.181534,0.0654436,-0.118334,-0.0665732,0.162836}
,
{0.324357,0.266982,0.145864,-0.0770499,0.105763,-0.0223225}
,
{0.0371269,0.0151926,0.00549639,0.0772056,0.0830585,-0.00574373}
,
{0.00300097,0.0654064,-0.189182,-0.18938,-0.0539538,-0.207194}
,
{0.250738,0.00608068,-0.0439166,-0.0473939,0.197133,-0.0227548}
,
{-0.0552698,0.00986073,-0.0147436,0.0835431,-0.111847,0.0267493}
,
{-0.195246,-0.0225873,-0.0814708,-0.183823,-0.0284327,-0.148142}
,
{0.0175222,-0.0219247,-0.0697046,0.105701,0.0824911,-0.00494161}
,
{-0.157924,-0.0844105,-0.0655531,-0.295244,-0.315961,-0.0846879}
,
{0.0665467,-0.0546207,0.0662415,-0.162933,-0.0677672,0.112246}
,
{0.100886,0.028934,0.0113253,-0.040212,0.0763377,-0.0746544}
,
{0.0412503,-0.123235,0.156243,0.346156,0.225468,0.14036}
,
{-0.0421485,0.00246829,0.0398268,0.039574,-0.00190527,0.0336916}
,
{-0.0816419,-0.0271313,0.0406718,-0.315098,-0.167535,0.0381973}
,
{-0.0477558,0.520566,-0.16992,0.145243,-0.123302,-0.297071}
,
{0.024586,0.0223377,0.229025,-0.0707583,0.0191647,-0.0899757}
,
{0.0797034,-0.162322,0.0428329,0.17365,0.0496326,-0.352862}
,
{0.00486946,-0.0629527,0.467232,-0.528522,-0.0267951,0.622534}
,
{0.127368,0.0564697,-0.133917,0.210932,0.0417364,-0.00790622}
,
{-0.0571921,-0.225948,0.255258,-0.0142347,0.150026,0.0489238}
,
{-0.049584,0.0934389,0.293181,-0.0857567,0.0418371,0.0423224}
,
{0.0204601,0.269119,0.115427,-0.0470644,-0.0258546,-0.236419}
,
{0.160637,0.393976,-0.238278,0.6638,-0.106603,-0.829179}
,
{0.00984887,-0.212393,0.118903,0.118636,-0.00325215,0.529446}
,
{-0.0138919,0.0608344,0.0828795,-0.109099,-0.124198,-0.0186164}
,
{0.107099,-0.0856134,-0.083427,-0.157876,0.0336581,0.0333617}
,
{-0.124922,0.00927388,0.0761107,0.22224,-0.165576,-0.130091}
,
{0.00642866,0.142392,0.105834,-0.147527,-0.136675,0.620388}
,
{-0.157584,-0.0133523,-0.0950221,-0.158733,-0.120954,0.139833}
,
{-0.134004,-0.0611937,-0.187199,0.14687,0.0970015,-0.0812481}
,
{-0.00166672,-0.0350925,-0.0578106,-0.0196508,-0.00822783,-0.133049}
,
{-0.0327319,0.0758237,-0.164151,0.0118715,-0.156564,0.0802969}
,
{-0.240709,-0.0632603,0.249123,-0.0719393,-0.147272,-0.129928}
,
{0.208741,-0.0664194,-0.101462,0.0718014,-0.0575414,-0.113573}
,
{-0.0510323,0.463706,-0.446551,0.118444,0.216579,-0.0131669}
,
{0.137219,-0.0215939,0.527381,-0.276891,0.122474,0.128199}
,
{-0.0251695,0.0252268,-0.28171,-0.565933,0.0708353,0.202408}
,
{-0.0664046,-0.019098,-0.0837965,0.0320932,0.0164345,0.0187968}
,
{-0.0812592,0.354822,-0.674004,-0.334877,0.207017,0.394703}
 };
  static const float bias2[1] = { 0.141027 };
  static const float weights2[][1] = { {-0.0466239}
,
{0.0579754}
,
{-0.0655264}
,
{-0.0854119}
,
{0.115331}
,
{0.0498076}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_0(v, index);
}
static int assign_gen_lepton_prior_1_2_0() {
  global_gen_lepton_prior.at(1,2,0) = &specialized_gen_lepton_prior_1_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_0 = assign_gen_lepton_prior_1_2_0();

template<typename T> float gen_lepton_prior_1_2_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0800853,0.0123918,-0.0582832,0.141378,0.205767,-0.0143798 };
  static const float weights1[][6] = { {0.119316,-0.0948668,-0.0463433,-0.430678,-0.0818186,-0.043376}
,
{-0.0879939,0.353613,0.239648,-0.335569,0.36773,0.336108}
,
{0.2618,0.560255,0.121219,-0.586395,-0.0853064,0.105487}
,
{-0.269711,0.21473,-0.451856,0.208426,0.597159,0.206877}
,
{-0.0175552,0.167252,-0.200789,-0.0443134,0.110779,-0.0623095}
,
{0.118363,0.219724,-0.16764,0.236739,0.139463,0.151688}
,
{-0.041458,-0.0147995,-0.0521038,0.0881457,0.325965,0.026751}
,
{-0.310642,7.3256e-05,0.114785,-0.266242,0.186916,0.105077}
,
{-0.193706,0.0366574,-0.0535723,0.0941232,-0.128401,-0.235282}
,
{0.00167578,0.0119277,0.0410281,-0.027113,-0.0545099,0.218446}
,
{0.117502,-0.12629,-0.0409099,0.03427,0.179812,0.128149}
,
{0.137019,0.0909564,0.0651557,-0.105569,0.00365071,0.0438561}
,
{0.0337162,0.0871403,0.0149263,0.169151,-0.0385837,-0.183185}
,
{-0.0277936,0.0480393,0.000788938,-0.0295288,0.194677,0.0955771}
,
{0.0309193,-0.0520383,0.205279,0.182434,0.0741367,-0.0177031}
,
{-0.152246,0.0969898,0.182284,-0.0715648,0.0117579,0.0101698}
,
{0.0540824,-0.0749771,-0.216749,0.194965,-0.0784176,0.185458}
,
{-0.0328339,-0.0292183,-0.0362073,0.125842,-0.161102,-0.0220319}
,
{-0.230173,-0.236578,0.332002,-0.401528,-0.00335206,-0.0745051}
,
{-0.106719,-0.00759946,0.0814333,0.102559,0.150531,0.0904469}
,
{-0.0110407,0.00363545,0.125191,0.245404,-0.0645546,-0.143709}
,
{-0.0434794,-0.0261617,-0.0914314,-0.107792,0.107835,-0.183852}
,
{-0.217707,-0.0155874,-0.0841362,-0.0366521,0.00335372,0.0227465}
,
{0.00815343,0.0120569,0.0591846,-0.0581961,0.0996585,0.164379}
,
{-0.064868,0.0555971,0.0399868,-0.166841,-0.00609151,-0.286077}
,
{0.176873,-0.117808,0.00409963,-0.139769,-0.0766788,-0.0478171}
,
{0.259199,0.0526109,-0.0620804,0.133364,-0.0636145,0.132357}
,
{0.251015,0.0765821,-0.0220545,-0.31014,-0.24863,0.0587222}
,
{-0.0873873,0.0381267,-0.0086538,-0.783379,-0.169774,0.327889}
,
{-0.1146,-0.110775,-0.0054177,0.10594,0.0120685,0.130781}
,
{0.138447,-0.0494273,-0.0422371,-0.0553154,-0.0540665,0.139552}
,
{-0.00451715,0.070215,-0.053261,-0.0368816,0.0603251,0.070578}
,
{-0.0237164,-0.483457,-0.0191693,0.078165,0.0757395,-0.00965208}
,
{-0.0722807,-0.183099,0.175756,-0.135817,-0.00281343,0.148685}
,
{-0.0694705,-0.0265981,0.1937,-0.0635628,0.106787,0.0268124}
,
{0.0738925,0.104608,-0.0828479,0.0284813,-0.111871,0.00249117}
,
{0.274875,0.0465021,-0.14157,0.0564649,0.167081,-0.51078}
,
{-0.111421,0.0948282,0.055584,-0.0171349,-0.0760443,0.0110184}
,
{0.00760125,0.0217716,-0.0526341,0.170865,-0.326717,0.195334}
,
{0.00946468,0.110516,0.0490177,-0.0786223,-0.122313,0.17313}
,
{0.140448,-0.13583,-0.0814088,-0.0115705,0.0178863,-0.0798048}
,
{0.369191,0.182001,0.0403818,-0.303349,0.116025,-0.001114}
,
{0.0280795,0.171952,-0.0195799,-0.0498081,0.00412666,-0.00755349}
,
{0.0571715,0.0929864,-0.527616,-0.426871,0.1495,0.0844054}
,
{-0.0399969,0.0547999,0.12503,0.0159354,-0.0381324,-0.0170805}
,
{-0.119609,0.0631648,0.0283555,0.129969,-0.152638,0.0962835}
,
{-0.197201,-0.298023,-0.0364452,0.495415,0.0247953,-0.0764724}
,
{-0.0443183,-0.0201832,0.07979,0.0415627,0.0967973,-0.1484}
,
{0.054591,0.218667,0.1286,-0.210748,0.0638523,-0.135997}
,
{-0.211016,-0.0840127,0.301215,0.114329,-0.0621099,0.189486}
,
{-0.119393,0.161667,-0.0829898,0.0426204,-0.0901779,-0.105949}
,
{0.000984316,0.216679,0.321232,0.294751,0.177696,-0.270362}
,
{0.0452986,0.1196,0.146594,0.0758584,-0.0276915,0.0163528}
,
{0.264854,0.00797703,-0.240026,0.16468,-0.201116,-0.259642}
,
{-0.0120052,0.0295846,0.0460889,0.122863,0.0992338,-0.0794433}
,
{0.0526428,0.159572,0.221723,0.170871,-0.0761642,0.0540111}
,
{0.000603262,0.112671,-0.181742,-0.176751,-0.141154,-0.0677803}
,
{-0.0190978,-0.00284928,0.253101,-0.00140981,-0.0182224,-0.0628652}
,
{0.0463455,-0.174799,-0.0370997,-0.094992,-0.23699,-0.041328}
,
{-0.0991336,-0.0104721,0.198658,0.015599,0.0406127,0.00371358}
,
{-0.0605625,-0.194147,0.133741,-0.0955871,0.0391726,0.0287821}
,
{0.00692359,-0.266837,0.224054,0.0777317,-0.407045,0.131647}
,
{0.155641,0.102311,-0.188701,-0.130183,-0.00415404,0.064019}
,
{-0.109063,0.0880607,-0.102749,0.130868,0.209355,-0.151255}
,
{0.164012,-0.0176798,-0.166101,-0.0699889,0.0391914,-0.0368759}
,
{-0.0877605,-0.00798236,-0.035743,-0.0945858,0.051503,-0.00906069}
,
{-0.121656,0.00396984,0.0403513,0.131482,-0.142767,0.0987171}
,
{-0.039665,-0.0483202,0.121636,-0.0896423,-0.0115805,0.177864}
,
{-0.058022,0.170759,-0.229899,-0.0247818,0.0527267,-0.0121547}
,
{-0.127132,-0.0791169,0.0400617,0.0698785,-0.0357283,0.0993652}
,
{0.120665,-0.0566753,-0.0772847,-0.0470765,0.0222004,0.0632133}
,
{-0.13351,-0.167041,0.0358559,0.15711,-0.205068,-0.00181192}
,
{0.13311,0.162213,0.23537,-0.00644995,0.0158977,0.0352429}
,
{0.173313,0.145253,-0.191245,0.014812,0.221189,0.0976414}
,
{-0.189319,0.403962,-0.10897,1.09415,-0.0605455,0.140026}
,
{-0.316901,0.337128,-0.170149,-0.305909,0.265235,0.530802}
,
{-0.0120564,0.355213,0.262581,-0.429315,-0.0281405,-0.121004}
,
{0.221046,-0.00986449,0.1949,0.0205224,0.0689213,0.0755979}
,
{-0.43254,0.518199,0.151341,-0.111166,0.30329,0.512514}
 };
  static const float bias2[1] = { -0.105863 };
  static const float weights2[][1] = { {-0.113075}
,
{0.0792807}
,
{-0.081957}
,
{0.133146}
,
{0.0934145}
,
{0.166422}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_2(v, index);
}
static int assign_gen_lepton_prior_1_2_2() {
  global_gen_lepton_prior.at(1,2,2) = &specialized_gen_lepton_prior_1_2_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_2 = assign_gen_lepton_prior_1_2_2();

template<typename T> float gen_lepton_prior_3_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.239328,-0.0971221,0.0221766,0.102985,-0.105652,0.299637 };
  static const float weights1[][6] = { {0.157934,0.113344,0.0888512,-0.117751,0.324016,0.0746902}
,
{0.40012,0.16655,0.493434,0.167824,0.209218,0.0869374}
,
{0.0424875,0.107083,0.109965,0.120715,0.0112948,-0.00616871}
,
{0.609748,-0.158605,0.306803,0.540101,-0.00768995,0.635205}
,
{0.240836,0.0918913,0.0119999,0.316849,-0.0894199,0.266548}
,
{0.0505532,0.199453,-0.165905,0.108599,-0.288232,-0.0521011}
,
{-0.0294189,0.0871198,-0.0214907,-0.16649,-0.223406,0.342699}
,
{0.111138,0.0723512,-0.233566,-0.20896,-0.0710961,0.0399386}
,
{-0.0311149,-0.140942,-0.263038,0.364889,-0.247154,-0.0275157}
,
{-0.147108,0.00788319,0.0677522,0.121756,-0.111372,-0.183811}
,
{-0.157178,0.175476,-0.210733,-0.178449,0.0253494,0.187938}
,
{-0.143532,-0.0949552,0.177256,-0.421059,0.0605604,-0.0176629}
,
{0.3302,-0.209409,0.00869458,0.198745,0.0363007,0.450417}
,
{0.335575,-0.143257,-0.0949363,0.109708,-0.191225,0.199248}
,
{0.182488,-0.121059,0.0897789,-0.171189,-0.0629251,-0.111183}
,
{-0.0861097,0.168737,0.201587,0.0808159,0.0304553,0.100169}
,
{0.0845209,0.153223,-0.00120379,-0.0510505,0.0173635,0.371485}
,
{0.108532,-0.134782,-0.279354,0.195599,0.0708436,0.0453537}
,
{-0.194813,-0.0438071,-0.00986248,0.0849551,-0.208555,-0.0164471}
,
{0.102532,0.0644278,-0.215299,-0.296168,0.0375514,0.0611607}
,
{0.0983372,0.0114184,-0.150157,-0.151657,0.00434932,0.00919599}
,
{0.0109837,0.00801007,-0.0520907,-0.104477,0.00884914,0.123426}
,
{0.151561,-0.0786171,-0.037078,0.169463,-0.184451,0.035416}
,
{0.0675419,0.0320198,-0.0327765,-0.101529,-0.125865,0.0543227}
,
{-0.0921822,0.244046,0.130198,0.427779,-0.137861,0.00204844}
,
{0.0851988,-0.0697986,0.0782856,-0.0841085,-0.0193613,0.0338669}
,
{0.25933,-0.198753,-0.0164235,-0.28484,-0.0701753,0.156485}
,
{0.085846,0.233448,-0.0337313,-0.253798,-0.161227,-0.172675}
,
{0.316933,-0.217186,0.20338,0.063586,0.49497,0.279069}
,
{0.137809,0.0376497,-0.0346367,0.0868622,0.051258,0.0354025}
,
{0.175735,0.0818903,0.00137684,0.032683,-0.225898,0.0124797}
,
{0.0220853,0.070416,-0.0193916,0.0424273,-0.113628,0.160886}
,
{0.0444079,0.105044,0.0601755,-0.0298151,0.178797,-0.00649133}
,
{0.0748684,-0.199739,-0.0101479,-0.00373737,-0.219276,0.218505}
,
{0.149339,0.111734,0.086238,-0.00311257,0.120068,0.0918145}
,
{-0.0656299,-0.00227881,0.0127978,0.0831616,-0.0652901,0.050169}
,
{0.0294743,-0.0804462,-0.29026,0.157011,-0.106156,-0.0740263}
,
{0.0482015,0.0271633,-0.0586046,0.031382,0.049373,0.0551754}
,
{-0.071585,-0.0101535,-0.0961322,0.00195563,-0.0244218,0.0960312}
,
{0.00700053,-0.0477411,-0.20299,-0.137312,-0.110657,-0.142089}
,
{0.0541296,0.0251243,0.12699,0.0349511,-0.0641578,-0.00975543}
,
{0.0629231,0.266495,-0.0240818,0.206062,-0.0524124,0.383815}
,
{-0.0772127,-0.0465137,0.111323,0.0552371,-0.0888655,-0.0748465}
,
{0.0487799,-0.158071,-0.0580114,0.154259,-0.0935691,-0.175917}
,
{0.101172,0.0392616,0.0100433,0.00976458,-0.0436424,0.0387595}
,
{-0.0276685,-0.0241782,-0.0715525,0.0180183,0.0541491,-0.000327571}
,
{0.220381,0.215983,0.114748,0.0597311,0.135101,-0.0949645}
,
{0.101133,0.00113266,-0.0285345,0.00506391,0.0705132,-0.070457}
,
{0.0624529,-0.0401043,0.00839681,0.0208931,-0.0101054,-0.0369935}
,
{-0.114142,-0.0847932,-0.0793438,-0.129937,-0.124144,-0.109023}
,
{-0.00259416,0.0512324,0.0484161,-0.0655192,-0.0627208,-0.012238}
,
{-0.071969,0.126513,0.293603,-0.230924,-0.321774,0.179466}
,
{-0.10781,0.0330044,0.0494196,0.0154415,-0.0924936,0.0650059}
,
{-0.0651225,0.020806,-0.0413491,-0.347111,-0.104188,-0.0420856}
,
{0.0598564,-0.047333,0.087903,-0.256909,-0.0607694,-0.0750373}
,
{0.0822349,0.238105,0.116627,-0.0325648,-0.0854149,0.0774123}
,
{-0.427926,0.32887,-0.582298,0.376988,-0.152086,-0.452899}
,
{-0.0690141,0.0338502,-0.179743,-0.278748,-0.0108779,-0.247639}
,
{-0.148848,0.271408,-0.0605537,-0.0983858,-0.168154,-0.489214}
,
{0.0281092,0.0392915,-0.0956839,0.326367,0.19995,0.15453}
,
{-0.144027,-0.0858599,-0.0277778,-0.0460314,0.101246,-0.111109}
,
{0.238773,-0.247114,0.20995,-0.0410338,-0.181335,0.0501803}
,
{0.168634,-0.0086039,-0.368927,0.59939,0.280202,-0.204559}
,
{0.0217117,-0.132877,-0.00856495,0.235258,0.224439,0.063977}
,
{0.171927,-0.159845,0.00444309,0.0585501,-0.046329,-0.0643867}
,
{-0.018609,0.0418761,0.0804596,0.109267,-0.219759,0.163858}
,
{-0.409803,-0.166301,0.0830686,-0.0248662,0.234104,0.297074}
,
{0.035921,-0.0698721,0.213112,-0.308935,-0.0933377,0.0948223}
,
{-0.343316,0.294608,-0.286266,0.13432,0.199116,-0.258333}
,
{-0.118898,-0.0861375,0.0160276,-0.116424,0.0872357,-0.0129876}
,
{-0.0109035,0.170136,0.146682,0.0395518,0.0639875,0.171613}
,
{-0.00888801,-0.0880574,-0.217672,0.323916,0.249074,0.119516}
,
{-0.00848006,0.00267621,-0.175099,0.509188,-0.0342689,-0.040254}
,
{0.0656514,0.113829,0.119287,0.165862,0.24949,0.160877}
,
{0.331226,-0.034093,0.295722,-0.927621,-0.195342,0.668729}
,
{0.197908,0.322294,0.170575,-0.121471,-0.404502,0.128661}
,
{-0.297749,0.159056,-0.190138,0.207065,-0.131367,-0.517914}
,
{-0.0971002,-0.0515385,-0.114205,-0.00978866,0.056209,-0.0803766}
,
{0.0907524,-0.0831966,0.234694,0.412171,-0.0248152,0.351888}
 };
  static const float bias2[1] = { 0.204057 };
  static const float weights2[][1] = { {0.0454908}
,
{-0.0790004}
,
{0.0483482}
,
{-0.202134}
,
{-0.0382402}
,
{0.0357382}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_0(v, index);
}
static int assign_gen_lepton_prior_3_0_0() {
  global_gen_lepton_prior.at(3,0,0) = &specialized_gen_lepton_prior_3_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_0 = assign_gen_lepton_prior_3_0_0();

template<typename T> float gen_lepton_prior_3_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0991388,-0.0844147,-0.179277,0.245877,-0.108987,-0.0798329 };
  static const float weights1[][6] = { {0.00186661,-0.241849,-0.217395,0.369644,-0.0425524,0.127709}
,
{-0.477038,-0.0207115,-0.0296428,-0.251292,-0.843615,-0.579633}
,
{-0.0779083,-0.366705,-0.109357,0.545246,-0.166706,0.551784}
,
{0.0241628,-0.293094,-0.380869,0.202622,-0.0270524,0.410097}
,
{0.119324,-0.191125,-0.167164,0.231138,-0.244663,0.0629258}
,
{0.022292,0.23227,-0.0221749,0.178267,0.0661374,-0.195054}
,
{0.196622,0.098784,0.0294227,0.143407,-0.0554135,0.100307}
,
{-0.0282834,0.0283495,0.0478774,-0.0816174,-0.00166653,-0.122503}
,
{0.0744225,0.220506,-0.0984414,0.198725,-0.078067,-0.347322}
,
{0.223378,0.00878381,0.0390745,-0.0599926,0.0894008,0.046116}
,
{0.0119759,-0.212724,-0.00180862,0.00975971,0.214553,-0.056843}
,
{-0.193391,0.0928335,-0.233841,-0.0789745,-0.124285,0.176432}
,
{0.185855,-0.26053,-0.0977797,0.0570668,-0.217269,0.0868941}
,
{-0.0261836,-0.231317,-0.144606,0.207212,0.0880495,-0.0190217}
,
{-0.0474232,0.115035,-0.0150021,0.129431,0.1375,-0.154088}
,
{-0.0659802,-0.0169715,-0.0732212,0.0502416,-0.0839836,-0.0838497}
,
{0.221743,-0.143018,-0.209082,0.310612,0.101117,-0.156793}
,
{-0.0222751,0.238587,-0.248945,0.00455444,-0.123952,-0.244363}
,
{0.0195166,-0.205871,0.167812,-0.0448672,-0.0925526,-0.336803}
,
{0.0953936,0.0652485,-0.0539192,0.252289,-0.172961,-0.0120007}
,
{-0.0638358,-0.232964,-0.137089,-0.115635,-0.159086,0.0763738}
,
{-0.0797824,-0.255024,0.00184761,0.108293,0.0998127,-0.0247678}
,
{-0.0755881,0.0257577,0.0130413,0.0128025,-0.0347475,0.248392}
,
{0.0241496,-0.20137,-0.180981,-0.205125,-0.066401,-0.100768}
,
{-0.176477,-0.179471,-0.0519389,0.183349,-0.0684,0.13425}
,
{-0.217061,-0.0438896,0.0648641,-0.292493,0.0273996,0.0275038}
,
{-0.105027,0.147161,0.127873,-0.053003,-0.0432097,0.0629376}
,
{0.083994,-0.0804342,0.0761395,-0.313597,0.0843916,0.211013}
,
{-0.140364,-0.406725,-0.163822,-0.109994,0.131855,-0.244884}
,
{0.223249,-0.0706182,-0.122568,-0.0272289,-0.087011,-0.137717}
,
{0.0968018,0.0240585,0.242984,0.139755,0.0142564,-0.17626}
,
{0.0783963,0.0415708,0.133022,-0.145398,0.162131,-0.116979}
,
{-0.0391941,-0.0462011,-0.0117436,0.0106657,0.0338643,-0.0499984}
,
{-0.0157929,0.0224355,-0.219797,-0.0247307,-0.0959954,0.00541468}
,
{-0.155487,-0.0460293,-0.253515,0.0793735,-0.123782,0.0642337}
,
{-0.0824171,0.0497557,-0.0880997,0.0636405,-0.134893,-0.0721824}
,
{0.277575,-0.394884,0.31227,-0.434739,-0.270404,-0.487522}
,
{-0.0322634,0.0567905,0.139989,0.0941188,-0.0753546,0.0189656}
,
{-0.21322,0.274749,0.0391981,0.139266,-0.13026,-0.124362}
,
{0.0863175,-0.00448488,0.0949735,-0.0985149,0.00628918,-0.15181}
,
{0.00650042,0.0379666,0.0624024,-0.0576674,0.041549,0.0522878}
,
{0.0139121,-0.13564,0.208585,-0.0643858,-0.0708272,-0.23139}
,
{0.0107993,-0.230827,0.00628656,0.0290885,0.102199,0.130124}
,
{0.0974403,0.00102984,0.114869,-0.125554,-0.170965,-0.262778}
,
{7.39129e-06,0.0380162,-0.00439261,-0.0194645,-0.132111,-0.100127}
,
{0.0352248,-0.0538554,0.102122,0.0251747,0.0412948,0.026626}
,
{-0.00577949,0.153077,0.0801681,-0.117248,-0.11654,-0.343256}
,
{-0.070391,-0.11187,-0.0924275,0.110989,-0.0337735,0.0584784}
,
{0.249252,-0.0299923,-0.118091,-0.25524,0.0209282,0.0654929}
,
{-0.0652827,0.0133931,0.086295,0.196209,-0.060435,0.0047776}
,
{0.0277049,-0.0506193,0.0434883,-0.084424,0.0351296,-0.146081}
,
{-0.0902769,-0.355964,-0.490894,0.119686,-0.212338,0.207588}
,
{0.0275173,-0.106821,-0.0725553,-0.0360646,-0.0115719,-0.0491331}
,
{-0.000120404,0.26096,0.0515628,-0.0179937,-0.135734,-0.211647}
,
{-0.187687,0.114177,-0.0812675,-0.0169229,-0.0148674,-0.200913}
,
{-0.131953,0.121599,0.00897969,0.0294371,-0.0334215,0.0594958}
,
{0.0119588,0.0602204,0.217073,0.384062,0.0653463,-0.177884}
,
{0.0396167,0.00248999,0.0895279,-0.0809068,0.0145313,0.148941}
,
{0.0341258,0.0791904,0.0410682,0.136215,0.084738,0.0307865}
,
{0.0584756,-0.0395708,0.116387,0.17668,0.212234,0.0627922}
,
{-0.100545,-0.0621522,0.278628,0.470857,0.055333,0.225586}
,
{-0.0112991,0.0679772,0.0668093,-0.047864,0.10738,0.209393}
,
{0.0748162,0.102181,0.240708,0.318363,0.0908502,-0.202199}
,
{-0.165645,-0.05375,-0.0928407,0.404295,-0.17692,0.0907713}
,
{-0.0851814,0.0509397,-0.0910764,-0.296436,-0.205552,0.0452312}
,
{-0.144348,0.0787528,-0.0120727,-0.130178,0.16414,0.104349}
,
{-0.0241432,-0.019119,-0.228832,0.061601,0.157326,-0.111126}
,
{-0.0246503,0.00241113,0.0392733,0.093272,0.00762545,-0.182076}
,
{0.19163,-0.030661,0.195008,0.224817,0.132119,-0.272156}
,
{-0.149409,-0.0553808,-0.117926,0.0918167,-0.0225902,0.250394}
,
{-0.100228,-0.124637,0.18487,0.0126459,-0.106346,-0.0644453}
,
{0.0652498,-0.0650488,0.129641,0.0952505,0.127585,-0.0803724}
,
{-0.150948,-0.0722883,0.141458,0.0979074,-0.0177411,0.029326}
,
{-0.225374,-0.0993572,-0.20339,0.189011,0.0410611,-0.0331108}
,
{-0.122231,-0.24086,-0.149674,0.0751675,0.296439,-0.387756}
,
{-0.0381059,0.33135,0.223791,-0.070199,-0.32948,0.130371}
,
{-0.157113,0.230446,-0.223665,0.0567103,0.150447,-0.108907}
,
{0.0501223,-0.244559,-0.387798,0.117401,0.279546,-0.376238}
,
{0.237608,-0.00388114,-0.0198754,-0.028502,0.00302944,-0.00672777}
 };
  static const float bias2[1] = { 0.155993 };
  static const float weights2[][1] = { {0.123425}
,
{-0.309615}
,
{-0.279082}
,
{0.0571624}
,
{0.361129}
,
{-0.186162}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_2(v, index);
}
static int assign_gen_lepton_prior_3_0_2() {
  global_gen_lepton_prior.at(3,0,2) = &specialized_gen_lepton_prior_3_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_2 = assign_gen_lepton_prior_3_0_2();

template<typename T> float gen_lepton_prior_4_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.161134,0.232851,0.0613652,-0.316894,-0.524178,0.174822 };
  static const float weights1[][6] = { {-0.0882926,0.276099,0.177796,0.383423,-0.146811,0.0668181}
,
{-0.265339,-0.155574,-0.285522,-0.246497,-0.306601,0.160015}
,
{-0.0244648,-0.150354,-0.0764584,-0.165047,0.0140078,0.0651678}
,
{-0.616964,0.329297,0.124463,-0.779762,-0.811074,0.172572}
,
{-0.101148,0.290257,-0.0404641,-0.273611,-0.420437,0.205649}
,
{-0.193942,0.0783007,0.117491,-0.150561,-0.411778,-0.0113777}
,
{0.191666,0.269391,-0.0615091,-0.122112,-0.16652,-0.050925}
,
{-0.383877,-0.241113,0.0932712,0.178868,0.0662443,0.256025}
,
{-0.170389,0.179818,0.169695,-0.268659,0.107859,0.167621}
,
{0.0990733,0.0453099,0.0959351,0.108055,-0.0193503,0.0294977}
,
{-0.0276336,0.0981003,-0.0795502,-0.111595,0.156059,0.175016}
,
{-0.0936139,-0.0143324,0.0363839,-0.139649,-0.13329,-0.117161}
,
{7.76542e-05,0.294411,0.147934,0.0597712,-0.195335,0.273195}
,
{-0.11822,0.3013,0.0267421,0.0109038,-0.109944,0.0717533}
,
{0.155536,0.0236072,0.155427,0.0153429,-0.00569728,0.00298336}
,
{-0.138636,0.0486233,0.0873532,-0.118714,-0.203778,-0.0332132}
,
{-0.13729,0.550425,0.388164,-0.0725566,-0.384024,0.100128}
,
{0.320382,0.338606,0.299254,0.016679,-0.00903636,-0.106094}
,
{0.475626,-1.73337,-0.826105,1.19369,1.31887,-0.795422}
,
{0.126614,0.0453333,0.0618541,0.113784,0.0342858,0.190807}
,
{0.0438952,0.0831419,0.0828344,0.165472,0.110376,0.178275}
,
{-0.0296997,0.212257,0.0149264,0.180896,-0.0248181,0.118226}
,
{-0.112959,0.159635,-0.19234,-0.0518793,0.00408766,0.196925}
,
{0.0763369,0.0490757,0.107862,0.0995942,0.083119,-0.00341242}
,
{0.00327023,0.177445,-0.0720106,0.125401,0.234679,0.021693}
,
{-0.14904,-0.0163675,0.263081,0.0800634,0.0152295,0.0848868}
,
{0.128247,0.0790778,0.0360967,-0.106703,0.167757,-0.221927}
,
{-0.0166317,-0.0605335,-0.0405251,-0.00341235,-0.122566,0.160416}
,
{-0.0443868,-0.308656,-0.0572966,-0.0182129,-0.000984469,-0.572065}
,
{-0.267183,-0.0106267,0.224274,-0.0135224,0.141435,-0.0941842}
,
{-0.15308,-0.176763,-0.166747,0.122073,0.0311646,0.208276}
,
{-0.0637702,-0.00478216,-0.0349923,-0.0153179,-0.0976154,-0.0355004}
,
{-0.031629,0.0934393,-0.105429,-0.0980954,-0.047538,0.105683}
,
{-0.160805,-0.131069,0.0146602,-0.118313,-0.0058231,-0.044694}
,
{-0.0347017,0.0972807,-0.0012318,0.137522,0.0303993,0.0289164}
,
{0.10842,0.0322336,-0.141384,0.0353942,-0.1119,0.0383025}
,
{0.325201,0.155671,0.114398,0.00955617,0.154851,-0.0443239}
,
{0.015822,0.0728698,0.101483,0.0951526,0.100804,0.0254343}
,
{0.0471264,0.0577275,-0.0413262,0.116465,-0.0816671,0.0750153}
,
{-0.0769037,-0.0190408,0.0164207,-0.0312798,0.191027,0.00504151}
,
{0.122307,-0.0516758,-0.120307,-0.0790358,-0.106718,0.0214121}
,
{-0.0311401,-0.103727,-0.016832,-0.0828033,-0.032256,0.0196056}
,
{0.0101243,0.0965409,-0.00991713,0.111443,-0.0126282,0.0184163}
,
{-0.0737347,0.127377,0.0830553,0.17819,0.0319932,0.0142365}
,
{-0.0532815,0.0361272,-0.148801,0.0451313,-0.0329438,0.0234467}
,
{0.00840784,0.0449052,0.0273557,0.0493885,0.00211804,-0.0110164}
,
{0.148008,0.0463069,-0.111237,0.186326,-0.0626194,0.180912}
,
{-0.0274994,0.023903,0.131482,0.00831307,0.0944106,-0.0411433}
,
{-0.0997412,-0.0789332,0.0464747,-0.120961,-0.032159,-0.0761689}
,
{0.0284965,-0.0912018,-0.0350287,-0.0957531,0.0890452,0.0332519}
,
{-0.00811845,0.106596,-0.026408,0.161768,0.0386372,0.0564682}
,
{-0.246253,0.0910888,-0.0760657,0.0185958,0.159828,-0.0810719}
,
{-0.0483979,0.014925,0.0333736,0.0186605,0.00611148,-0.0148685}
,
{-0.0731165,-0.162278,-0.0884189,-0.163273,-0.064802,-0.0026426}
,
{-0.0529082,0.07639,-0.0730495,-0.0306329,0.0757234,-0.111393}
,
{0.105548,0.0201022,0.0499305,-0.131765,0.030384,-0.18344}
,
{-0.00194328,0.23957,0.00149627,0.0911982,0.279128,-0.19664}
,
{-0.158293,-0.158545,-0.014872,-0.217234,0.145524,0.299419}
,
{-0.152454,-0.08341,0.0500676,0.083908,-0.0569605,0.112846}
,
{-0.00272799,-0.0299211,-0.0466275,-0.0692529,-0.152127,-0.064122}
,
{-0.0460693,-0.0194271,0.13701,0.00479006,0.124016,0.0255778}
,
{-0.104284,0.0880818,-0.222587,-0.00995162,0.18672,0.0351304}
,
{-0.0517352,-0.328281,-0.0490423,0.179918,0.122818,0.067021}
,
{-0.116428,0.00765541,-0.0609235,-0.122784,-0.0436312,-0.198318}
,
{0.138918,0.00316947,0.0332027,-0.0228996,-0.121169,0.00660242}
,
{-0.0589097,0.0139196,-0.0718018,0.0122931,-0.0827767,-0.00539066}
,
{0.0890084,0.150136,0.131422,0.180576,0.0389759,0.0112319}
,
{0.221768,-0.0475977,0.12493,0.187906,-0.385781,-0.036157}
,
{-0.0223218,-0.160034,0.019209,0.0409833,-0.272323,0.167403}
,
{0.00455211,0.015454,-0.0125632,-0.100803,-0.266477,-0.245223}
,
{-0.0244165,-0.0380997,-0.0455866,-0.0506914,-0.0281164,-0.0319417}
,
{-0.0922244,-0.146999,0.0123215,-0.208226,-0.0833587,-0.0996314}
,
{0.150964,0.100761,-0.205204,0.102369,-0.194238,-0.273245}
,
{-0.251547,-0.0321556,-0.16589,0.0589912,-0.107456,-0.0117861}
,
{-0.334044,-0.123824,-0.479546,0.175034,-0.392251,-0.0764811}
,
{0.333184,0.0962713,0.00662067,0.0197792,0.0852069,-0.0631392}
,
{0.245885,-0.177418,-0.0445851,-0.176543,0.928524,0.311722}
,
{-0.14785,0.112476,-0.170854,0.0256033,-0.0500289,0.0989947}
,
{0.142473,-0.35416,-0.0885409,-0.161558,-0.0126428,0.165961}
 };
  static const float bias2[1] = { 0.158162 };
  static const float weights2[][1] = { {-0.0322265}
,
{0.101886}
,
{0.0506293}
,
{-0.0965817}
,
{-0.0567466}
,
{0.0838981}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_0_0(v, index);
}
static int assign_gen_lepton_prior_4_0_0() {
  global_gen_lepton_prior.at(4,0,0) = &specialized_gen_lepton_prior_4_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_0_0 = assign_gen_lepton_prior_4_0_0();

template<typename T> float gen_lepton_prior_4_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.139187,0.0311768,0.0274654,0.288482,-0.0522347,-0.104389 };
  static const float weights1[][6] = { {-0.153399,0.212793,-0.146513,-0.02095,-0.377725,0.388398}
,
{-0.00691299,0.236436,-0.226124,0.347952,0.145396,-0.14018}
,
{-0.158439,0.243034,-0.212932,0.334316,-0.184583,0.0317038}
,
{-0.206526,0.165162,0.0206283,0.117301,0.294454,-0.0868113}
,
{-0.267478,-0.0771477,-0.0904567,0.319358,0.013813,-0.136131}
,
{-0.0328496,-0.0690643,0.151131,0.259182,0.004113,-0.0610019}
,
{-0.0697122,-0.00392864,0.147881,0.261753,-0.0154108,-0.0804663}
,
{-0.242997,-0.298448,-0.233713,0.419104,0.0946224,0.0687073}
,
{-0.0802129,0.0978567,0.231828,0.378784,0.340342,-0.323436}
,
{0.124712,0.0247816,3.91008e-05,0.106104,-0.112203,0.0857115}
,
{0.048136,0.101925,-0.0849298,0.22694,0.0337966,-0.116583}
,
{-0.0102576,0.0843455,0.0435569,-0.0554261,-0.122982,0.0537228}
,
{0.0495213,0.0368671,0.166454,0.128265,0.196739,-0.144943}
,
{-0.0991433,0.098574,0.273927,0.0074819,0.141955,0.266652}
,
{0.0833555,-0.149731,0.128832,-0.0992251,-0.200297,0.00784806}
,
{0.00941905,0.0620864,-0.0681921,0.0669472,0.15811,-0.070514}
,
{-0.139336,0.0187741,0.723052,0.201894,0.613404,-0.479693}
,
{-0.215381,-0.0713392,-0.0110553,0.280729,0.189583,0.0769073}
,
{0.693398,-1.2014,-2.24928,0.959589,-1.78344,2.09959}
,
{-0.0132027,0.179357,-0.013139,0.151088,0.118597,0.00204478}
,
{-0.00147314,0.233526,-0.0426459,0.0089838,0.362028,0.24895}
,
{-0.0156198,-0.114992,0.0911307,0.0056051,0.0826229,0.0425085}
,
{-0.135161,-0.132496,-0.18423,0.128738,0.132227,-0.0119665}
,
{-0.0974271,0.0102572,0.0562942,-0.0103637,0.131001,0.0809766}
,
{0.0626968,0.0134456,0.0911809,0.109415,-0.135852,-0.0674481}
,
{-0.104159,0.00245704,-0.110617,-0.15701,0.16817,-0.0145354}
,
{-0.0978534,0.0294995,-0.006201,-0.0987191,-0.0794447,-0.011963}
,
{-0.110766,0.0952967,-0.0662796,0.163997,-0.00443746,0.0635248}
,
{-0.17852,-0.0763509,0.305727,-0.224661,-0.412486,-0.353898}
,
{-0.0252287,0.120726,0.00504747,0.167208,-0.0392088,0.00330696}
,
{-0.135558,0.0807761,0.0792439,-0.214882,0.0567825,-0.138579}
,
{-0.0201939,-0.0347081,-0.0285901,0.103242,0.00161949,-0.0190112}
,
{-0.0596813,0.0634648,-0.048891,-0.00467007,0.231082,0.109653}
,
{0.0495051,0.121419,0.00549633,0.016822,0.232911,0.155578}
,
{-0.0128804,0.00911859,-0.0118956,0.0824444,-0.151752,-0.078564}
,
{0.0160118,-0.00169044,0.00223306,0.0850085,-0.0501404,-0.0237506}
,
{0.0848012,-0.0440796,-0.0136029,-0.0398783,-0.0543338,-0.0674033}
,
{0.0460958,-0.0987906,0.0137074,0.0286062,-0.0219403,-0.0416859}
,
{-0.100793,0.0447562,-0.0349353,-0.131278,-0.0354058,-0.0102036}
,
{-0.0330235,0.0650834,-0.0754988,-0.150907,-0.0531258,-0.0525669}
,
{0.0203744,0.117638,-0.0392805,-0.115121,-0.0389227,-0.00831485}
,
{-0.0841272,0.0443891,-0.013112,-0.0264931,-0.161604,-0.0617964}
,
{0.000640582,-0.0210998,0.00963936,-0.0201024,-0.128629,-0.0614953}
,
{-0.132056,0.0949636,-0.0136184,-0.00823799,-0.122168,-0.0330605}
,
{-0.0678413,0.072395,-0.0432377,-0.218792,-0.0620171,-0.0301562}
,
{-0.026138,-0.10491,0.0292814,-0.134519,0.0610067,0.0266578}
,
{-0.0814449,-0.037555,0.0148388,0.0789772,-0.0705575,-0.0371053}
,
{-0.0556925,-0.0608907,-0.00369652,-0.052991,0.0188412,-0.0045664}
,
{-0.119617,-0.0144109,0.00686079,-0.104503,0.0313191,0.0350916}
,
{0.0243765,-0.101781,-0.0154629,0.116435,-0.0543896,-0.0781235}
,
{0.172575,-0.0645069,0.0265802,0.0132155,0.018888,-0.0138489}
,
{-0.124175,0.0151631,-0.0620265,-0.239311,0.0202033,-0.0083175}
,
{-0.0522331,-0.0273523,0.00817665,0.0184395,-0.0824246,-0.0334811}
,
{-0.0739378,0.118304,-0.00419842,0.396988,-0.0983958,-0.0462632}
,
{0.0548997,0.0191343,-0.0547535,-0.0224051,-0.0466259,-0.100949}
,
{0.0199808,0.0231051,0.0169563,0.0665186,-0.136203,-0.0917851}
,
{-0.157365,0.27722,-0.148865,-0.390591,-0.351064,-0.127825}
,
{0.287775,0.132084,-0.325729,0.0885144,-0.0720872,0.253374}
,
{-0.283041,-0.0398861,0.0157844,0.386174,-0.0291026,-0.111311}
,
{-0.0202645,-0.00113342,0.0833612,-0.116847,-0.258729,-0.117595}
,
{-0.0963552,-0.0124607,-0.018481,-0.117004,0.0194343,0.0404602}
,
{-0.135253,-0.0609375,0.0161543,-0.171654,-0.0395586,0.0321978}
,
{-0.323901,-0.205479,-0.0674001,-0.590743,0.0921319,-0.404075}
,
{0.0369796,0.101187,-0.0231282,0.124594,-0.0803982,-0.0749058}
,
{0.0625152,-0.026881,-0.0191826,-0.0368918,-0.0338215,-0.0843738}
,
{-0.011431,-0.0123119,0.00226912,-0.000485631,0.0892925,0.014391}
,
{-0.149702,0.058721,-0.0141323,-0.0962813,0.092233,-0.0316416}
,
{0.117642,-0.26736,-0.119311,0.0869892,-0.289847,-0.197857}
,
{-0.0121727,-0.0164626,0.0554434,-0.0234983,-0.0879737,-0.00587335}
,
{0.0216455,-0.0871042,0.0539179,0.194899,0.0390472,-0.0484595}
,
{-0.0190119,0.0167187,-0.0120358,0.00581526,0.0408976,0.0534998}
,
{-0.0481609,-0.0514126,0.0862162,-0.125582,-0.149191,0.0306129}
,
{0.0203355,-0.433597,0.237044,0.543901,-0.0917083,0.0689141}
,
{0.0599432,-0.0173276,-0.022116,-0.244445,0.130787,0.0618352}
,
{0.0306455,0.017953,-0.660038,-0.261402,0.424993,-0.051901}
,
{0.0801294,-0.0318389,0.0186705,0.0245714,-0.00155216,0.0203456}
,
{0.0519942,-0.341425,0.566549,0.321789,-0.536154,0.556206}
,
{0.157618,0.0151735,0.0460696,0.0162988,-0.194095,-0.117447}
,
{0.106699,-0.216174,0.40838,-0.337072,-0.180171,-0.000537397}
 };
  static const float bias2[1] = { 0.118474 };
  static const float weights2[][1] = { {-0.0326653}
,
{0.0753306}
,
{0.171145}
,
{-0.0293707}
,
{0.109257}
,
{-0.212503}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_1_0(v, index);
}
static int assign_gen_lepton_prior_4_1_0() {
  global_gen_lepton_prior.at(4,1,0) = &specialized_gen_lepton_prior_4_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_1_0 = assign_gen_lepton_prior_4_1_0();

template<typename T> float gen_lepton_prior_4_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.0537366,-0.17509,-0.0390741,0.0573797,0.177777,0.127674}
,
{0.0777842,0.18704,-0.121727,0.13882,-0.170205,0.21945}
,
{-0.0292802,0.116165,-0.00319431,0.132052,-0.0815686,0.0392869}
,
{0.191977,0.127031,-0.0743626,-0.115046,-0.0673809,0.0421274}
,
{0.139969,0.0541208,-0.0773801,0.088477,0.0962262,-0.0459724}
,
{0.0658972,0.0781888,0.0507555,-0.241996,-0.186123,0.0668553}
,
{-0.0280612,-0.0249712,-0.0088568,-0.225291,-0.106388,0.148313}
,
{0.129125,-0.0883709,0.155381,-0.00591277,-0.0657275,0.0815541}
,
{0.0893104,0.0760962,-0.01152,0.0291362,-0.0213537,0.11368}
,
{0.0923966,-0.0120227,0.165022,0.0420956,0.0747767,-0.0155812}
,
{-0.146952,0.0552744,0.00743973,-0.0971594,0.0217404,0.072388}
,
{0.0226373,-0.13576,-0.068846,0.0245536,-0.0371927,-0.021555}
,
{-0.128263,-0.0643941,0.0376227,-0.165834,-0.0855871,-0.100562}
,
{0.14735,0.071066,-0.0528113,0.0568677,-0.00432291,-0.0108036}
,
{-0.122913,0.128517,0.0327114,0.0164658,0.070264,-0.151572}
,
{-0.0741522,-0.00694007,0.121212,-0.0575944,0.064424,0.0206499}
,
{0.0479294,0.101733,0.0940759,-0.163561,0.0668177,-0.0218989}
,
{0.157841,0.126409,0.00897084,0.0834243,-0.196661,0.040394}
,
{0.0661686,0.00582934,0.069255,0.0455866,-0.0578172,0.0931767}
,
{0.221683,-0.0578753,0.214326,-0.0638941,0.142132,-0.0525902}
,
{-0.133366,0.191469,-0.0496994,-0.0547243,0.0273533,0.0898654}
,
{0.2435,0.158913,-0.200014,-0.0708309,-0.0108371,-0.0934497}
,
{-0.110384,0.190433,-0.0503913,-0.147862,0.201139,-0.0448988}
,
{-0.00493154,0.0598035,0.0651617,0.0876577,0.107999,-0.128599}
,
{-0.0389496,0.190938,-0.021932,-0.0278219,-0.0208897,0.0267125}
,
{0.175674,0.0533092,0.0272546,-0.120347,-0.0341905,-0.0725768}
,
{-0.059337,0.0377804,-0.0905155,0.015196,-0.144895,-0.14058}
,
{0.0326047,-0.0359205,-0.205734,-0.00324066,0.0350551,-0.118645}
,
{0.0458978,-0.116502,-0.07672,0.124625,0.210161,-0.22662}
,
{0.0808477,0.130761,0.00275297,0.123003,-0.169702,0.0718905}
,
{0.110309,0.0624129,-0.0222859,0.126676,-0.023872,0.0036888}
,
{0.163962,-0.242336,-0.0972973,0.0214886,-0.235238,0.0900827}
,
{-0.00775514,-0.165508,0.0853508,0.111832,-0.185001,-0.207737}
,
{0.0645621,-0.10186,-0.247999,-0.035205,0.0412275,-0.0790767}
,
{-0.0430563,0.0347568,0.0534661,-0.0983038,0.0441026,-0.0844586}
,
{-0.21575,0.094771,-0.204338,0.0360248,-0.0590828,0.0772547}
,
{-0.0572768,-0.0553454,-0.151635,-0.13005,-0.0761057,-0.172936}
,
{-0.203855,-0.0219663,-0.119173,0.0690131,0.154616,0.00675961}
,
{-0.0982679,-0.0153156,-0.0157809,0.0180283,-0.149243,-0.116166}
,
{-0.0145765,0.00394227,0.030138,-0.195842,0.0283326,0.0634702}
,
{-0.0859801,-0.078028,0.0111825,0.0272975,-0.0383171,-0.0354777}
,
{-0.197489,0.156172,0.0744399,0.0348554,-0.0481088,-0.065554}
,
{-0.060075,0.0356748,-0.10136,-0.0357388,0.165557,0.083045}
,
{0.0426832,-0.0220265,0.140055,-0.104919,0.0375809,-0.0340778}
,
{-0.0831237,-0.0833254,0.000528631,0.128414,0.0886975,-0.156639}
,
{0.182258,-0.171198,-0.00787207,-0.14156,0.139894,0.0610154}
,
{-0.177229,-0.213882,0.208944,-0.14022,0.0800089,0.00167697}
,
{-0.106777,0.0465959,0.0486303,-0.0508731,0.244925,0.215473}
,
{-0.118848,0.0272417,0.0797199,0.0228281,0.198394,0.0944263}
,
{0.216585,0.196967,0.00614421,0.0629112,-0.140791,0.0295564}
,
{-0.0265916,0.0636621,-0.0739454,-0.168058,-0.177461,-0.0271129}
,
{-0.0114593,-0.0841678,-0.0739052,-0.242299,0.0268417,-0.176614}
,
{0.174993,-0.0644177,0.0460704,0.0766585,0.0537907,0.174019}
,
{0.228228,-0.0882393,0.0589972,-0.0676162,0.12644,-0.0260113}
,
{-0.0457567,-0.00849363,0.13598,-0.0308233,-0.23996,0.0340012}
,
{0.152537,0.0594339,-0.130987,-0.00348605,0.145493,-0.115231}
,
{-0.0487347,0.213132,-0.139985,-0.0600959,0.102706,0.0457301}
,
{0.0565809,-0.121916,0.0404292,0.107677,-0.0915769,0.159125}
,
{0.096166,-0.0239547,0.112911,0.0359746,-0.0912392,-0.0922832}
,
{-0.0280204,0.185587,-0.196892,0.241011,-0.0859301,-0.103357}
,
{-0.00545477,-0.0838826,-0.0490419,0.121808,0.127023,0.19045}
,
{-0.119842,-0.07801,0.1161,0.0798454,0.200534,0.0652415}
,
{-0.112082,0.00713155,-0.120404,0.167228,0.106541,0.131273}
,
{0.147932,-0.0555937,0.150731,-0.0508625,-0.0300544,0.123954}
,
{-0.0199043,0.0610489,-0.00197931,0.119503,-0.0210044,0.00376189}
,
{0.0378643,0.00324091,0.217678,0.172846,-0.101657,-0.0452361}
,
{0.0497622,0.0132274,0.0300994,-0.00414072,0.166445,0.0725893}
,
{-0.0264418,0.00137544,0.00641165,0.0828171,0.0417323,-0.135607}
,
{0.0311887,-0.0283665,0.0798927,-0.0217043,-0.0448772,-0.0944911}
,
{0.102911,0.0345158,0.00932866,0.154299,0.0390636,0.0202837}
,
{-0.199013,0.0199935,-0.0992268,0.0892124,0.224506,0.130415}
,
{0.12858,0.0426006,0.0940155,0.0929808,0.0254404,-0.155663}
,
{0.0185818,-0.231437,-0.0926573,-0.14946,-0.0535728,-0.0768386}
,
{-0.142577,0.0848985,-0.0730003,-0.151431,-0.154954,-0.0191132}
,
{0.0665476,-0.0438102,-0.0173119,-0.134611,0.156603,0.0175809}
,
{-0.0505088,-0.0329443,0.0202976,-0.0532608,0.0742076,-0.0482542}
,
{-0.0909803,0.115982,0.113317,0.0032411,0.0539809,0.130694}
,
{-0.154216,0.0342589,0.11664,0.204595,-0.0366564,0.0188879}
,
{0.222783,0.0836575,-0.0294839,0.126237,-0.0461803,0.0737753}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0566705}
,
{-0.014234}
,
{-0.134777}
,
{-0.00298928}
,
{-0.0151002}
,
{-0.172464}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_2_0(v, index);
}
static int assign_gen_lepton_prior_4_2_0() {
  global_gen_lepton_prior.at(4,2,0) = &specialized_gen_lepton_prior_4_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_2_0 = assign_gen_lepton_prior_4_2_0();

template<typename T> float gen_lepton_prior_5_0_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0952843,0.154395,0.099613,0.0784437,-0.0629939,-0.0644932 };
  static const float weights1[][6] = { {-0.109458,0.0944704,-0.0782342,-0.0893863,0.0974387,0.00719144}
,
{0.0528893,0.0666479,0.104903,0.124018,0.0383783,-0.0892964}
,
{0.10666,0.077208,-0.0304096,0.168852,-0.133588,-0.230255}
,
{0.0523179,-0.0245866,0.176438,0.0967681,0.0656194,-0.0360999}
,
{0.0851984,0.114981,0.137569,-0.146657,-0.0984023,0.0440124}
,
{0.0644887,-0.00453869,0.268399,0.149328,0.0943512,0.0384717}
,
{0.300078,0.154148,0.0579299,0.0374518,-0.0495523,-0.118853}
,
{-0.0394246,-0.0484537,-0.0940066,0.0552696,0.156156,0.0209469}
,
{0.0892852,-0.0659648,-0.115811,0.213513,-0.0574168,-0.00339057}
,
{0.0439445,0.0691864,-0.0806275,-0.233731,-0.103032,-0.0654656}
,
{0.202126,-0.0606294,0.031672,-0.206663,-0.085394,-0.0766053}
,
{0.0311885,-0.0338069,0.0537318,0.22214,0.0142546,0.00133357}
,
{0.243729,0.101033,0.238717,0.106457,0.0268646,-0.134352}
,
{0.122607,0.260132,0.0613252,0.0989795,-0.0904945,0.102218}
,
{-0.0258698,0.257517,0.246111,-0.169076,0.0248333,-0.0125195}
,
{-0.0634565,0.0269567,0.0835359,0.0326195,0.00180814,-0.155647}
,
{0.0731626,0.208545,0.101944,0.0953486,0.0406513,0.181964}
,
{-0.0300361,0.0580368,0.0452441,0.126083,-0.216004,0.0707241}
,
{0.230098,0.0962159,-0.105287,0.146035,0.0724589,-0.0265077}
,
{0.297334,0.0344761,0.010794,0.0486422,0.142448,-0.0727124}
,
{0.19617,-0.0794483,0.230709,0.237125,-0.0861943,-0.0683504}
,
{-0.027551,-0.0467638,0.191691,-0.132002,-0.0106895,-0.0822652}
,
{-0.00824299,-0.0751947,0.2136,-0.0151628,-0.242029,0.107697}
,
{0.0949157,-0.0604306,0.114393,-0.159866,-0.013223,0.115125}
,
{0.0240433,0.129015,0.285552,0.0278854,0.0537567,-0.0221754}
,
{0.158117,0.145473,0.0835922,-0.106464,-0.0592795,-0.318782}
,
{0.0472721,0.00922099,0.148491,-0.0028848,0.122884,-0.193681}
,
{0.000810375,0.240466,0.0713371,0.108862,0.100618,-0.108847}
,
{0.155213,0.0429777,0.214353,-0.0568405,0.105037,-0.286127}
,
{0.0626769,0.0747109,-0.0830343,-0.0635708,-0.240511,0.178099}
,
{0.0387312,-0.0850938,-0.106336,0.0465309,0.0400018,-0.163214}
,
{-0.163983,0.193725,0.0198416,-0.0951313,0.0685278,0.0971785}
,
{-0.0352223,-0.0394012,0.13846,-0.0370068,0.0459031,-0.218981}
,
{-0.0721886,-0.0513101,0.215985,-0.0369131,0.164141,-0.109938}
,
{0.0702702,0.0872935,-0.122821,0.147391,0.0582681,0.180045}
,
{-0.0173826,-0.267371,-0.0411679,0.15408,-0.00604441,0.00776846}
,
{0.0406563,-0.0711835,-0.122267,-0.0611202,0.0308241,-0.07242}
,
{0.124079,-0.0255509,0.0107303,-0.035968,-0.0636964,0.109484}
,
{-0.152687,-0.016659,0.0527069,-0.15097,-0.0729891,0.024344}
,
{0.0711508,-0.0687622,-0.131814,-0.0133529,-0.0511176,0.0169842}
,
{-0.180067,0.134088,0.1639,-0.010031,0.0887589,0.138067}
,
{0.127625,-0.18889,0.00208559,0.171959,-0.0607034,0.205718}
,
{0.0599451,-0.0907093,-0.129549,-0.0641576,0.195372,0.0134377}
,
{-0.125431,0.161785,-0.24142,0.0763177,0.0672902,-0.0856618}
,
{-0.141261,0.0989695,-0.0981525,0.135384,0.0732809,-0.0839503}
,
{0.132716,0.0293299,-0.0842905,0.205478,-0.0463233,0.002553}
,
{0.213379,0.212064,0.206352,-0.0329725,-0.0272469,-0.0972691}
,
{-0.0207313,-0.193144,-0.193849,0.0400877,0.0451868,0.247905}
,
{0.105709,-0.182844,-0.00403389,0.0178934,0.144671,0.017164}
,
{0.00943435,-0.177798,0.120647,-0.146146,0.156465,-0.0132239}
,
{-0.222795,-0.0721905,0.0584114,0.0354229,0.0548573,-0.0922515}
,
{-0.0287618,-0.0186352,0.0270844,-0.132156,-0.112643,0.0502297}
,
{-0.0485999,-0.187646,0.167983,0.145416,-0.203662,0.0399557}
,
{-0.0441057,-0.0443335,-0.0808316,0.190869,-0.119455,-0.0789982}
,
{-0.035504,-0.0685741,-0.00998078,0.0205079,-0.064116,0.0186405}
,
{0.0432541,0.0114928,-0.169126,-0.01147,-0.00826604,-0.107002}
,
{-0.0190358,-0.0304358,-0.0635673,-0.15177,0.0304102,-0.101864}
,
{0.0799843,0.0221486,-0.0283529,-0.0957653,-0.111299,-0.0337977}
,
{0.115101,-0.187567,0.0276921,-0.0250446,0.0380939,0.064916}
,
{0.102098,0.0727376,0.169933,-0.0297697,0.0826347,0.0628642}
,
{0.164198,-0.0529308,0.00880784,-0.125957,0.0481991,-0.088598}
,
{-0.108925,0.0196563,0.0877108,-0.221102,0.0818926,0.00730885}
,
{0.0293146,-0.221733,0.0454082,0.15516,-0.0244962,-0.0803399}
,
{-0.0656073,0.0202871,0.000211732,-0.0888201,-0.0588348,-0.0385528}
,
{0.0123968,-0.037942,-0.146718,0.135448,-0.0185868,-0.219014}
,
{0.0440927,0.138232,0.0277888,-0.0667257,0.0284161,0.0295867}
,
{-0.0213584,0.0676168,0.131806,0.12857,0.140916,0.128424}
,
{-0.210325,-0.126672,-0.0614726,0.103353,0.152071,0.0371226}
,
{0.0273882,0.00382224,-0.0843401,0.0412169,0.0887859,0.0693396}
,
{-0.0444541,0.141496,0.0214073,0.0673329,-0.0911729,-0.177845}
,
{-0.133634,0.285984,-0.0574124,-0.104989,0.0807602,-0.0337185}
,
{-0.0295109,-0.189028,-0.21029,0.070076,0.221997,0.197911}
,
{0.157839,0.216373,-0.0821589,-0.172434,-0.18268,-0.061785}
,
{0.0315204,0.0159219,-0.0175184,-0.0658417,-0.0205618,-0.00674829}
,
{-0.01647,-0.123925,0.0809914,-0.0164749,0.0047252,-0.0445923}
,
{0.0226978,-0.0212311,0.182208,-0.0790351,0.0243054,0.0462606}
,
{-0.0550054,-0.10486,-0.119663,-0.156919,-0.0723164,0.0357452}
,
{-0.122243,0.0880005,0.193111,-0.135026,-0.0607959,-0.0438398}
,
{-0.0639876,0.00835168,0.127068,0.0490284,-0.135023,0.0234086}
 };
  static const float bias2[1] = { 0.0899887 };
  static const float weights2[][1] = { {0.124353}
,
{0.064331}
,
{0.0803589}
,
{0.197247}
,
{-0.0597641}
,
{-0.103095}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_50(v, index);
}
static int assign_gen_lepton_prior_5_0_50() {
  global_gen_lepton_prior.at(5,0,50) = &specialized_gen_lepton_prior_5_0_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_50 = assign_gen_lepton_prior_5_0_50();

template<typename T> float gen_lepton_prior_5_0_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0749484,-0.0571639,-0.103456,0.0123775,0.155964,-0.000947689 };
  static const float weights1[][6] = { {0.0671397,0.634271,0.0213267,0.37319,0.199229,-0.0240158}
,
{-0.277849,-0.07983,-0.214513,0.0718947,0.104492,-0.274273}
,
{-0.218308,-0.00728843,0.140069,-0.4949,-0.498174,-0.193719}
,
{0.119669,-0.504481,-0.148133,0.303602,0.493954,0.29198}
,
{-0.202216,-0.0145072,-0.117075,0.119797,0.0205497,-0.128649}
,
{-0.119876,-0.00950242,-0.130861,-0.123976,0.136885,-0.192325}
,
{-0.190523,0.272833,-0.0757874,-0.154109,-0.121454,-0.139865}
,
{0.132087,0.0303108,0.0414872,-0.113196,0.0889905,0.103748}
,
{-0.190909,-0.202708,0.0922284,-0.0798343,-0.165193,-0.0834258}
,
{-0.00853128,0.0654962,-0.0560589,-0.0154524,0.0824359,-0.0755829}
,
{-0.0858662,-0.115718,0.0618224,-0.0162712,0.208634,-0.117767}
,
{0.000444438,0.0781454,-0.17478,0.0310949,-0.149576,0.0257929}
,
{-0.0995371,0.23788,-0.105225,0.327667,0.380745,-0.0527233}
,
{0.0418723,-0.197416,0.0710658,0.0613746,-0.106521,-0.297752}
,
{-0.169936,0.410089,-0.192854,0.347134,0.417547,-0.201678}
,
{0.124271,0.16296,0.102067,0.172577,0.0599939,-0.0401964}
,
{-0.161614,0.374788,-0.0165406,0.279128,0.326225,-0.0905735}
,
{0.0577337,0.256272,-0.232542,0.0202928,-0.0148661,-0.168247}
,
{-0.079266,-0.266022,-0.109774,-0.0936144,0.143733,-0.0150976}
,
{-0.113343,-0.21856,0.0342175,0.017102,0.215303,0.000113865}
,
{-0.0588311,-0.102113,-0.189558,-0.0240555,-0.0869423,0.0717086}
,
{0.00742194,-0.0964259,-0.226629,0.113165,0.0987147,-0.0255787}
,
{0.0333716,0.0909699,0.249719,-0.0519434,-0.0817348,-0.0648887}
,
{-0.074766,0.191456,-0.296016,-0.0266566,0.100994,-0.0860733}
,
{0.00615769,-0.25725,0.0926042,0.0486517,0.165427,0.162692}
,
{-0.0886149,0.0729983,0.157076,-0.108156,0.0349151,-0.00799176}
,
{-0.0653951,0.11478,-0.235822,-0.0644515,0.173089,-0.0360264}
,
{-0.127852,0.154663,-0.21746,0.268157,0.116268,-0.140916}
,
{-0.106653,-0.449551,-0.164611,-0.243382,-0.30178,-0.829233}
,
{0.197476,0.0298105,-0.0234337,0.023911,-0.0611233,-0.164018}
,
{-0.0429074,-0.0322344,-0.0800737,-0.116856,0.0388619,0.137592}
,
{-0.133804,0.110128,0.12658,0.0443736,-0.16653,-0.101013}
,
{0.0657371,-0.0669264,0.224544,-0.109183,0.0474584,-0.227059}
,
{0.0170299,-0.0353145,0.030798,0.0752881,0.0180956,0.148003}
,
{0.0790153,-0.132706,0.170324,-0.054586,0.0833883,-0.073215}
,
{-0.0975826,0.0803773,0.151579,-0.0167635,0.0992898,-0.127516}
,
{-0.136871,-0.0685476,0.0193565,0.0613507,0.0547692,0.117304}
,
{0.175501,-0.118038,-0.0154438,-0.106477,0.0779258,0.157608}
,
{0.0400637,-0.195301,0.0424127,0.134228,0.0421792,-0.1849}
,
{-0.0328738,-0.0711489,0.12121,-0.0830358,-0.187915,0.069281}
,
{-0.116106,-0.0773368,-0.206659,-0.137663,0.119899,-0.147401}
,
{-0.109623,-0.535462,-0.165824,0.285075,0.0896856,0.211763}
,
{0.0882694,0.073382,0.110012,-0.113696,0.205356,0.0768575}
,
{0.10316,-0.348837,0.0559354,0.219118,0.0110195,0.0240484}
,
{-0.175449,0.0604146,0.0876949,-0.0693925,0.0789275,-0.030212}
,
{0.144574,-0.0489765,-0.0311169,-0.0450647,0.036169,0.115926}
,
{0.0516131,-0.31922,-0.110111,0.0209877,-0.0500276,0.0565256}
,
{-0.0432268,0.147126,-0.0757094,0.00751018,-0.0693804,-0.0842425}
,
{0.1696,-0.347036,0.0542944,0.0957036,0.168369,-0.2525}
,
{0.0755228,0.185239,0.0669109,0.0657824,-0.161116,0.181568}
,
{-0.0462452,-0.216317,-0.14935,-0.25608,0.20289,-0.157339}
,
{0.0793358,0.12386,-0.0586017,-0.149521,-0.105813,0.000622998}
,
{0.0378854,0.229194,0.22247,0.0492547,-0.0384314,0.126672}
,
{0.0387304,0.12344,-0.13599,0.173569,-0.0904654,0.159641}
,
{-0.321653,0.0928156,0.112647,-0.0466673,-0.139935,-0.0801908}
,
{-0.00997658,0.0539517,-0.0381597,-0.300405,-0.113218,0.231275}
,
{0.244586,0.0863874,-0.0259331,-0.407012,0.333973,1.02859}
,
{-0.0925761,-0.173914,-0.133361,-0.0968078,0.0645213,0.0820331}
,
{-0.310679,0.0574711,0.108948,0.203642,-0.0832316,0.0355519}
,
{0.041324,-0.0207669,-0.221112,-0.0286316,0.136584,0.0537347}
,
{-0.00944055,0.136251,-0.141407,0.0660418,-0.0241631,-0.144851}
,
{0.321529,-0.2256,0.0468663,-0.0427987,0.15619,-0.498058}
,
{-0.0987595,-0.184734,0.0449079,-0.266134,0.139747,0.109822}
,
{0.151186,-0.160382,0.0565608,-0.134168,0.144184,-0.0441832}
,
{0.00731249,-0.253281,-0.0625203,0.0172676,0.0775955,0.0452329}
,
{0.107848,0.0798945,0.0334553,0.0959009,-0.0485307,0.0602482}
,
{0.0450179,0.407381,-0.0268118,-0.158775,0.179135,-0.0663612}
,
{-0.106682,0.156076,-0.131185,0.0444522,-0.0176353,0.163877}
,
{0.185558,-0.134768,0.127954,0.128514,0.165518,-0.17738}
,
{-0.0572825,-0.205545,0.0964197,-0.0029562,-0.0421855,-0.0423716}
,
{0.155591,-0.155078,-0.0865547,-0.0742635,0.34582,0.0321247}
,
{-0.112913,0.353938,-0.11782,-0.0896154,0.0716361,0.0416214}
,
{-0.138354,0.0258617,0.124302,-0.119745,0.109369,0.184997}
,
{0.065706,-0.145549,-0.159345,0.0581669,0.0281415,0.0301025}
,
{-0.00663989,0.435708,0.134732,-0.208121,0.385353,0.301018}
,
{-0.109439,0.503746,0.165207,-0.130086,-0.351571,0.28048}
,
{0.0528863,0.00379337,-0.160433,-0.0308735,0.0213256,-0.0894521}
,
{0.0745791,0.340919,0.118724,-0.334401,0.13777,0.0920359}
,
{0.108188,0.119821,-0.130677,-0.0239591,0.364071,0.179363}
 };
  static const float bias2[1] = { 0.112234 };
  static const float weights2[][1] = { {-0.122263}
,
{0.199621}
,
{-0.0330206}
,
{0.0815566}
,
{0.129568}
,
{0.162108}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_51(v, index);
}
static int assign_gen_lepton_prior_5_0_51() {
  global_gen_lepton_prior.at(5,0,51) = &specialized_gen_lepton_prior_5_0_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_51 = assign_gen_lepton_prior_5_0_51();

template<typename T> float gen_lepton_prior_5_0_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.279136,-0.075044,-0.0586761,0.0820458,0.0817657,-0.0741999 };
  static const float weights1[][6] = { {0.270379,-0.0206042,-0.268543,0.175531,0.377422,-0.263578}
,
{-0.385836,-0.104483,-0.160304,0.0621504,-0.285946,-0.138431}
,
{-0.0749568,0.10302,0.130856,-0.0291471,0.385495,0.0911634}
,
{0.27613,-0.124033,0.15232,0.0886842,0.181161,-0.092818}
,
{0.41537,-0.0103799,-0.0132888,0.137969,0.120453,-0.258835}
,
{0.197989,-0.0188433,-0.28745,0.267126,0.177861,-0.0933562}
,
{0.220252,-0.162281,-0.0534654,0.00784249,0.20467,-0.179208}
,
{0.0814019,-0.0455641,0.0349301,0.0583096,-0.232303,-0.177899}
,
{0.122452,-0.142778,-0.124733,0.0693699,-0.290794,-0.19067}
,
{0.151577,0.0615258,0.181331,0.0888009,0.0474246,-0.183221}
,
{0.130865,0.0582204,0.035619,-0.0433338,-0.141742,0.0166904}
,
{-0.0854846,-0.104924,-0.220769,-0.236437,-0.103487,0.0176018}
,
{-0.0456375,-0.127864,-0.0909345,0.0226945,0.119827,0.0190088}
,
{0.0370083,0.0247979,-0.175992,0.0237038,-0.117079,-0.0944066}
,
{0.347674,-0.0704252,-0.0595818,0.034135,0.291338,-0.20217}
,
{0.109903,0.143593,0.0406891,0.228516,0.00435161,-0.036698}
,
{0.5144,0.0297484,-0.192856,0.228273,0.321519,0.121311}
,
{0.314021,-0.182705,0.00608237,-0.0877253,0.0555924,-0.172932}
,
{-0.0565177,-0.251132,-0.0126065,0.163695,-0.208728,0.0923037}
,
{-0.0212129,-0.0902803,-0.0142481,-0.0196128,-0.0467933,-0.153418}
,
{-0.0343864,0.0957023,0.0396117,0.153957,-0.158308,-0.080893}
,
{0.000447837,0.0120571,-0.0366741,0.0271139,0.0804129,-0.11476}
,
{0.0047469,-0.0734388,0.204494,-0.0124716,0.116403,-0.051323}
,
{0.0103747,-0.0313452,-0.0214205,-0.0497602,-0.143238,0.0416021}
,
{0.145201,0.021311,-0.179654,-0.00116305,0.190015,-0.0711658}
,
{0.244978,-0.0438961,0.0259551,0.252751,0.114965,-0.11706}
,
{0.10673,-0.062539,0.0790743,0.0233161,0.00721262,-0.079084}
,
{0.188566,-0.0613816,-0.166737,0.18734,0.110888,0.026744}
,
{0.315958,-0.208385,-0.160151,0.233825,0.10893,0.145459}
,
{-0.128095,-0.0784828,0.0958617,0.222196,0.100943,-0.0883817}
,
{0.0429983,0.132795,-0.041233,-0.0824174,0.229495,0.0653561}
,
{-0.171623,-0.0520949,0.0487027,-0.0630853,0.0546573,0.178315}
,
{0.0553682,0.107305,0.00253506,-0.188375,-0.18354,-0.101311}
,
{0.198711,-0.0434476,0.143667,0.141551,0.104624,0.00579321}
,
{0.184809,-0.151365,0.0379977,-0.100208,-0.199328,0.189708}
,
{-0.196139,0.00578399,-0.0350767,0.011944,0.100169,-0.00480437}
,
{-0.152654,-0.055905,-0.177061,0.122546,0.133658,-0.000135088}
,
{0.0223733,0.0588917,-0.0207772,0.031553,-0.238311,-0.198465}
,
{0.2548,0.00474425,0.179709,-0.131644,0.105015,0.0356958}
,
{0.144411,-0.238373,-0.167853,0.149239,-0.255594,0.0650892}
,
{-0.230706,0.140417,-0.013597,0.0815252,0.0120274,-0.0442014}
,
{-0.0198175,-0.125452,0.0269088,0.151521,0.0549989,0.021498}
,
{0.150046,-0.194759,-0.0425776,0.0212078,-0.0838746,0.0573314}
,
{0.0702102,-0.0772095,0.120271,0.0208748,0.0927972,-0.21539}
,
{0.170195,-0.0342169,-0.1163,-0.0102525,0.239693,-0.0432534}
,
{-0.0845658,-0.0111405,-0.0290725,0.0851904,-0.202334,-0.0296874}
,
{0.11065,-0.11569,-0.122075,-0.0454261,0.48951,-0.184941}
,
{0.0445197,0.0304283,0.0985602,-0.0367279,0.22584,-0.0471405}
,
{-0.151905,-0.00797454,0.0746498,-0.138168,0.637055,-0.131357}
,
{-0.309642,-0.0692202,0.0555123,-0.0479161,0.146094,-0.0125679}
,
{-0.155637,-0.0414686,0.0284662,0.163417,-0.142949,-0.16253}
,
{-0.0547583,-0.0150224,0.00817555,0.240782,-0.282161,0.100321}
,
{-0.0993777,0.0691304,-0.106461,0.00931294,-0.0735038,-0.0107238}
,
{-0.15919,-0.229921,0.0277432,0.0214063,-0.0946156,0.18058}
,
{0.169966,0.0665307,0.0190187,-0.066482,0.0212265,-0.00340942}
,
{-0.0906365,0.135924,0.113812,0.24603,-0.0559608,-0.0116999}
,
{-0.132506,-0.0506733,0.135121,-0.141827,-0.0467979,-0.158036}
,
{-0.149719,-0.0553395,-0.0730703,-0.0116228,-0.0157644,-0.0514647}
,
{0.00074922,-0.143465,-0.0169662,0.197991,-0.0356802,0.00490022}
,
{-0.0290233,0.084033,-0.0300794,-0.0544538,-0.115496,0.0679127}
,
{0.116647,0.00701036,-0.0476232,-0.123031,0.0124904,-0.0535635}
,
{0.0861493,0.0349177,0.0780956,-0.251536,-0.0523557,0.124615}
,
{0.0507592,-0.0288802,-0.0258435,0.0489619,-0.0044374,-0.146539}
,
{0.0307374,-0.224956,0.129056,0.0701777,-0.00466599,-0.0464353}
,
{0.218335,0.18946,0.0876903,-0.0803614,-0.0467836,0.255076}
,
{-0.113916,0.0439713,0.0476674,-0.0570936,0.0261522,-0.0420832}
,
{-0.0818879,0.0220875,0.15791,0.0832112,-0.0914185,-0.0960621}
,
{-0.072251,-0.0825709,0.156631,-0.0711157,0.127948,-0.0290205}
,
{0.0559207,0.132929,0.0409497,-0.0501267,0.0560247,-0.128309}
,
{-0.130909,0.128028,0.0403693,-0.0811093,0.176059,-0.094398}
,
{0.00432767,-0.223309,0.00956653,-0.129472,0.0370203,-0.128759}
,
{-0.0333078,-0.105777,0.030988,0.0743724,-0.1238,-0.0833464}
,
{0.181933,-0.176407,0.15515,-0.162591,0.211986,0.0957491}
,
{0.147524,-0.116823,-0.0875481,0.175695,0.0509705,0.119629}
,
{-0.058266,-0.203867,-0.0916028,-0.0033705,0.126237,-0.0395725}
,
{-0.0663756,-0.0317872,-0.283799,-0.0403962,0.0639805,0.0609001}
,
{0.173394,0.156861,0.0765079,-0.135036,-0.0277676,0.111608}
,
{0.193889,0.0284279,-0.204354,-0.244168,0.0482929,0.196464}
,
{-0.0648784,0.0653995,0.104526,-0.136707,0.146163,0.105718}
 };
  static const float bias2[1] = { 0.081458 };
  static const float weights2[][1] = { {0.198732}
,
{-0.0950933}
,
{-0.126485}
,
{0.244855}
,
{0.441637}
,
{-0.149412}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_52(v, index);
}
static int assign_gen_lepton_prior_5_0_52() {
  global_gen_lepton_prior.at(5,0,52) = &specialized_gen_lepton_prior_5_0_52;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_52 = assign_gen_lepton_prior_5_0_52();

template<typename T> float gen_lepton_prior_5_1_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0303169,0.142496,-0.0444309,0.116925,0.0847083,0.0298777 };
  static const float weights1[][6] = { {0.00840358,0.220888,0.0331114,0.110471,0.00977657,-0.164873}
,
{-0.110613,0.23121,-0.0225027,-0.129026,0.239336,0.0750835}
,
{-0.0580201,-0.00145673,0.0157066,0.10643,0.284939,0.369003}
,
{-0.0556409,0.365138,-0.178224,0.400051,0.237815,0.251361}
,
{-0.0274798,-0.0199929,-0.0120637,-0.0245635,0.0245386,0.130899}
,
{0.0840235,-0.015591,-0.150308,0.159443,-0.0645833,0.0189509}
,
{-0.0153872,0.0193639,0.0228316,-0.104371,-0.190768,0.0759409}
,
{-0.0591159,-0.143825,-0.1237,0.0136951,0.15156,-0.00668804}
,
{0.123525,-0.133481,0.0395108,-0.0181517,-0.0721537,-0.0209289}
,
{-0.127824,-0.132348,0.0267006,-0.165299,0.0281752,-0.137244}
,
{-0.0678839,-0.135489,-0.138551,-0.0255161,0.0611067,-0.00707125}
,
{-0.00375579,-0.0748803,-0.000917255,0.126509,0.16292,0.182069}
,
{-0.0314905,0.287428,0.0521884,0.137705,0.0341004,-0.14126}
,
{-0.0702528,0.0894598,-0.0286717,0.138474,0.0316851,0.0210958}
,
{-0.122262,0.214775,-0.127409,0.199373,0.0233797,0.0418097}
,
{-0.0521102,0.0989097,0.190025,0.00128984,0.146418,0.127468}
,
{-0.00525081,-0.0339609,-0.186346,0.203408,-0.0161334,-0.13353}
,
{-0.179505,0.0145261,-0.113841,0.00681063,-0.227324,-0.270629}
,
{0.208819,0.00831311,-0.191786,-0.0111607,0.27039,0.137277}
,
{-0.00889062,0.127247,-0.156383,0.180768,-0.148682,-0.165949}
,
{-0.260401,-0.0431016,-0.0643216,-0.122247,-0.00578705,0.270025}
,
{-0.0062898,0.0834195,-0.0744471,0.194713,-0.0399473,0.0275479}
,
{-0.139064,0.00595626,0.217789,-0.0650798,-0.112756,-0.119032}
,
{0.0350172,0.0976146,-0.0283773,0.0332823,-0.120694,0.0297179}
,
{0.0989729,-0.110251,-0.133143,-0.107605,0.0157482,0.0603365}
,
{-0.28431,0.0412124,-0.223324,-0.0432634,-0.198064,0.0141965}
,
{-0.119935,-0.0921337,-0.19008,0.0650699,-0.0877093,-0.0242368}
,
{-0.0624281,0.0945356,-0.0195342,0.0291449,0.033902,-0.0243762}
,
{0.331991,-0.210547,-0.315748,0.182916,0.121623,0.0295913}
,
{0.0873281,0.0415354,-0.144284,0.201476,-0.0165796,-0.0254151}
,
{0.197423,-0.099342,0.10778,0.0312903,0.179449,0.0365846}
,
{-0.030581,0.0109466,0.0844822,-0.111495,0.200119,0.114135}
,
{-0.144206,-0.0913319,0.0225911,-0.177409,0.0233918,-0.0872183}
,
{-0.229084,-0.0539745,0.0464143,0.0794617,0.0370758,0.142698}
,
{-0.067292,0.234945,0.17517,-0.140583,-0.00438524,0.140937}
,
{-0.169612,-0.0252443,0.0772958,0.0788507,-0.108123,0.0801393}
,
{-0.12545,-0.0276249,-0.0432987,0.0133948,-0.0521163,-0.00473311}
,
{0.0255585,0.245253,0.0842104,-0.0346793,0.03537,0.0103932}
,
{0.00190552,-0.0695568,-0.0557554,-0.0157861,-0.110688,0.116184}
,
{0.0207338,0.0327903,0.116715,0.193142,-0.0964273,0.015964}
,
{-0.0306314,-0.0326695,-0.0648243,-0.012337,0.00213382,-0.0200212}
,
{-0.187265,-0.0156646,0.109104,0.0331394,-0.140918,-0.267385}
,
{-0.10455,-0.109442,0.103169,-0.0423027,0.042795,-0.0445732}
,
{0.117107,0.133763,-0.00473656,-0.14524,0.0311143,-0.0771511}
,
{-0.063626,-0.192067,-0.211477,-0.0664024,-0.100857,0.156139}
,
{0.0511337,0.0617017,-0.216029,-0.199431,0.0021852,0.261789}
,
{0.139413,0.069532,0.0680662,0.171618,-0.121477,0.164252}
,
{0.0349689,0.000364421,0.0815976,0.0538767,-0.207852,0.205163}
,
{0.0797128,-0.108786,-0.0100679,0.0333561,0.143054,-0.0780368}
,
{-0.239533,0.0194256,0.188277,-0.0896059,-0.0193313,-0.0641157}
,
{0.0997895,-0.155651,0.103298,0.0123372,0.130426,0.00139619}
,
{-0.169417,0.116257,-0.186396,-0.0835384,-0.105479,-0.2697}
,
{0.119526,0.048674,0.100969,0.0366935,0.178358,0.0683506}
,
{0.168372,-0.0836598,0.182736,-0.227461,0.0193925,0.115771}
,
{0.121291,-0.0529169,-0.176032,0.114201,0.136948,-0.0848789}
,
{0.13657,0.0574325,-0.0343932,0.204599,-0.103489,-0.247305}
,
{-0.374459,-0.00406538,-0.180139,-0.0802587,-0.0174825,-0.0288813}
,
{0.177944,-0.0324216,0.079179,-0.114994,0.0221156,0.168952}
,
{0.0158682,0.098984,-0.173175,0.0505037,0.00763423,0.183969}
,
{-0.0775819,0.111796,-0.114369,-0.299971,-0.0978413,-0.163309}
,
{0.0662171,-0.254607,0.0406613,-0.103014,0.0304147,-0.0306642}
,
{-0.445238,-0.173627,0.0210103,-0.263228,-0.0217878,0.0132567}
,
{0.113338,-0.0198273,-0.17114,-0.145077,0.070161,-0.0573455}
,
{0.0537348,-0.0265717,0.0855679,-0.264709,-0.0448604,0.197608}
,
{0.0511534,0.0917492,-0.0387059,-0.0823701,0.0680698,0.173277}
,
{-0.050019,-0.076717,0.0135443,0.0649335,0.0134183,-0.272418}
,
{-0.0213286,0.154828,-0.155802,0.294149,-0.00916781,0.247959}
,
{-0.193031,0.0398887,0.0347425,-0.0300159,0.137945,-0.027376}
,
{-0.221327,0.00822393,-0.178555,0.00276798,-0.128505,-0.0850318}
,
{0.186744,0.0520587,-0.155677,-0.0559158,0.076755,0.0310523}
,
{0.0867783,-0.0358418,-0.135639,0.15007,0.0570198,0.172001}
,
{-0.0575408,-0.137377,-0.297841,0.191994,-0.067959,-0.155143}
,
{0.181407,0.0853236,-0.0313149,0.00385763,0.0129484,-0.138279}
,
{0.039418,-0.00465014,0.0733819,-0.0630792,-0.107988,0.194234}
,
{-0.00674622,-0.0323369,-0.173391,0.0323249,-0.202018,-0.0257473}
,
{0.15303,0.210675,-0.122903,0.217497,-0.0719149,-0.128634}
,
{-0.0551386,0.189007,0.00310585,0.0577003,-0.11107,0.227034}
,
{0.000169065,-0.195878,0.0769642,0.147793,-0.114019,-0.0624849}
,
{0.0944285,-0.0272023,0.0731257,0.224444,-0.080383,0.0508562}
 };
  static const float bias2[1] = { 0.188953 };
  static const float weights2[][1] = { {0.0165759}
,
{0.0819667}
,
{-0.056855}
,
{0.132795}
,
{0.147931}
,
{0.0431544}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_50(v, index);
}
static int assign_gen_lepton_prior_5_1_50() {
  global_gen_lepton_prior.at(5,1,50) = &specialized_gen_lepton_prior_5_1_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_50 = assign_gen_lepton_prior_5_1_50();

template<typename T> float gen_lepton_prior_5_1_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.362286,0.141403,0.219526,-0.0105315,0.525775,0.060159 };
  static const float weights1[][6] = { {-0.489916,-0.549712,-0.69206,-0.173271,-0.383538,0.602051}
,
{0.193031,-0.0538846,0.0407009,-0.496505,-0.0754251,0.172708}
,
{0.151722,0.688842,-0.0956268,-0.299203,0.322515,-0.1761}
,
{0.638563,0.108184,0.288669,-0.514577,0.97468,0.172058}
,
{0.296439,0.316361,0.00517956,0.0773522,0.2195,0.185724}
,
{0.320866,0.166377,0.273865,-0.020308,-0.0235758,-0.0143519}
,
{0.109926,-0.112232,0.187966,0.0766177,0.0981217,0.0321289}
,
{0.0172096,-0.0924885,0.0918033,-0.0526152,-0.272851,-0.0292492}
,
{0.0815201,0.154991,0.0412882,0.337166,-0.0149397,-0.0977872}
,
{-0.161893,-0.107079,0.193548,-0.063082,-0.0217131,0.122806}
,
{0.00158237,0.0985086,0.021037,0.0287638,0.0637752,-0.201548}
,
{-0.102692,-0.0281545,-0.227523,0.0222646,0.1826,0.176559}
,
{0.0791986,0.0740352,0.000907511,-0.00296327,0.0965909,0.0307018}
,
{-0.0656914,-0.0641397,-0.0691271,-0.0649317,0.275097,-0.143127}
,
{0.0805832,-0.0520285,0.168656,-0.109546,0.0966973,0.0619048}
,
{0.0244644,-0.0115726,0.0992868,-0.0618454,-0.10577,-0.0367289}
,
{0.0642292,-0.296798,0.0838292,0.00301432,0.155682,0.0160853}
,
{0.116373,-0.158957,0.08224,-0.119684,-0.405362,-0.260912}
,
{-0.115092,0.0887389,0.0372005,-0.0891828,-0.0430737,-0.214824}
,
{0.00496128,-0.196934,0.0373238,0.0615536,0.054829,0.0597583}
,
{0.167733,-0.129242,-0.0553047,-0.0615847,-0.165955,-0.090363}
,
{0.0254244,0.139605,-0.0177128,-0.237645,-0.129639,-0.199956}
,
{0.175944,-0.150865,0.197466,0.0334248,-0.0326148,0.175224}
,
{-0.0199429,0.0737187,0.100191,-0.0247145,-0.230103,0.0125013}
,
{-0.298833,-0.341545,-0.0259205,-0.082152,0.0168193,-0.00921541}
,
{-0.244871,0.23696,-0.0486519,0.0292184,-0.0844285,-0.172306}
,
{-0.128243,-0.0570638,0.0467687,0.0806537,-0.241189,-0.0345634}
,
{0.556444,-0.0768541,-0.199232,-0.0145889,-0.547084,0.2488}
,
{-0.150379,-0.231607,0.249247,-0.718465,-0.402234,-0.31443}
,
{-0.0642631,-0.129961,-0.0798575,0.0030936,0.126061,-0.0789455}
,
{-0.147907,-0.0214337,0.115845,-0.0913335,0.0181489,0.104684}
,
{-0.167453,-0.0337656,0.0164144,0.033592,0.0280375,0.022189}
,
{0.129856,0.101489,-0.0662937,-0.168615,0.0961883,0.159933}
,
{0.0777808,-0.400742,-0.00716723,0.414381,-0.0182615,0.0796716}
,
{-0.0375645,0.0542146,0.0680541,0.242547,0.00959666,-0.00918076}
,
{-0.125525,0.21036,0.012083,-0.0733581,0.0193569,-0.0167405}
,
{-0.109981,0.272829,-0.0925488,0.234064,-0.0216413,0.58887}
,
{0.0523621,-0.268186,0.0609104,-0.12625,-0.0118937,-0.0301929}
,
{-0.0187985,0.103139,-0.086234,0.198863,-0.0645062,-0.0662543}
,
{-0.109499,0.122472,0.0897993,0.132743,0.205052,0.00348388}
,
{0.202377,-0.197377,-0.0179675,-0.188436,-0.0520403,-0.0161244}
,
{-0.219914,0.0744653,-0.0760298,0.18456,0.337257,-0.0706096}
,
{-0.0991694,0.121249,-0.131727,-0.0422884,-0.035946,-0.0122098}
,
{-0.0707665,0.0353782,-0.104739,0.167047,0.0612933,0.246353}
,
{0.0361525,-0.047142,0.0518566,-0.13295,-0.0701634,0.0164125}
,
{0.106132,-0.0471607,-0.0503857,-0.0150437,0.152759,0.0782919}
,
{-0.192977,0.0586226,0.233049,0.249164,-0.0768301,-0.350237}
,
{-0.0303564,-0.198862,0.110283,-0.111601,-0.0823786,-0.0381071}
,
{0.242205,-0.0912556,-0.0884907,0.118819,-0.0153919,0.100016}
,
{-0.116517,0.0659282,0.144055,-0.0466612,-0.0353325,-0.0412903}
,
{0.0496693,-0.0377949,0.018043,-0.0675199,-0.0378727,0.031502}
,
{0.320891,0.0350477,0.1112,-0.499552,-0.323166,-0.0766745}
,
{0.120477,0.0405446,-0.130413,-0.0484257,-0.173977,0.0811766}
,
{0.179704,-0.0555696,-0.0181928,-0.0471644,-0.331132,0.181667}
,
{0.130488,-0.0403927,-0.173858,-0.149504,0.164316,-0.0688082}
,
{-0.0267907,-0.00405361,0.0829813,-0.029152,-0.0370014,0.000450222}
,
{0.50216,-0.329791,0.369344,-0.427168,0.0611327,-0.555428}
,
{-0.0922907,0.0099771,-0.111769,0.171543,-0.154551,-0.0722568}
,
{0.00690155,-0.100464,0.135353,-0.148607,-0.128213,-0.286154}
,
{0.0148348,0.0160475,0.0346845,-0.0606429,0.0871357,-0.144035}
,
{0.0293539,0.0101273,-0.153431,0.0230292,0.0153148,-0.144522}
,
{-0.103461,0.325926,0.189826,-0.623045,-0.0125502,-0.0586522}
,
{0.0101889,-0.0383404,-0.0391209,0.101825,-0.00648069,0.0629305}
,
{0.172544,0.115736,-0.136479,0.018583,-0.0254942,0.111699}
,
{0.0955836,0.0360493,-0.117573,-0.0827135,-0.108268,-0.0841767}
,
{0.00916159,0.128065,-0.0616247,-0.0647883,-0.0676406,0.00453859}
,
{-0.578085,-0.758479,-0.347623,-0.499262,0.321501,-0.0279697}
,
{0.0743803,-0.0451491,-0.0390432,0.119609,-0.0787461,-0.0619715}
,
{0.0287991,0.0443128,-0.157838,0.0795802,0.00924027,0.0660506}
,
{-0.0439311,0.0941048,-0.216225,-0.0913542,-0.138926,0.0268979}
,
{-0.0862909,0.0556666,-0.108351,0.0245838,-0.0269289,-0.181936}
,
{-0.0725651,-0.243755,-0.359503,-0.0933643,0.592657,-0.0451063}
,
{0.0204004,0.0983012,0.0788243,-0.088728,-0.152391,-0.159005}
,
{0.0727778,0.0458096,-0.0474085,0.00353318,0.0979104,-0.170379}
,
{-0.334423,-0.422611,0.123477,-0.00181741,-0.0599745,-0.251045}
,
{0.183427,0.0835885,-0.137717,0.482,-0.106905,0.0931949}
,
{0.00483019,0.0803275,-0.0812794,0.0829232,0.13759,0.0390348}
,
{-0.378754,-0.296914,0.2246,0.214591,-0.148597,-0.101626}
,
{-0.395891,-0.463446,0.275709,0.171572,-0.0133294,-0.191277}
 };
  static const float bias2[1] = { 0.0123467 };
  static const float weights2[][1] = { {0.075955}
,
{0.140385}
,
{0.171616}
,
{0.117071}
,
{0.191106}
,
{-0.267219}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_51(v, index);
}
static int assign_gen_lepton_prior_5_1_51() {
  global_gen_lepton_prior.at(5,1,51) = &specialized_gen_lepton_prior_5_1_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_51 = assign_gen_lepton_prior_5_1_51();

template<typename T> float gen_lepton_prior_5_1_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.128695,-0.183953,-0.0152104,0.32991,-0.0512493,0.0325041 };
  static const float weights1[][6] = { {-0.238037,-0.242393,-0.448987,-0.087648,0.141765,-0.246182}
,
{1.01484,0.445607,-0.284003,-0.363847,0.0317576,0.308375}
,
{-0.0203639,-0.359315,0.0810012,0.0659932,-0.0907626,0.339648}
,
{-0.264677,0.369899,-0.0206395,0.647639,-0.326188,-0.909886}
,
{0.0095487,-0.178665,0.0875866,0.377387,0.00298477,0.154754}
,
{0.0226988,-0.420838,0.040421,0.0270777,-0.0091033,0.0652324}
,
{-0.0894692,-0.346598,-0.199359,-0.0290391,0.157322,-0.00349169}
,
{-0.200353,0.0933338,-0.148181,0.0591679,-0.215752,0.0270493}
,
{0.211942,0.429625,-0.35318,0.378746,-0.353151,-0.248295}
,
{-0.11098,-0.0370341,0.167853,0.00197396,0.000378406,0.105913}
,
{-0.0758186,-0.214918,-0.00247913,-0.0619379,0.00230916,0.0500226}
,
{0.181667,0.0384581,0.0735345,0.10222,0.0971584,0.129979}
,
{-0.124619,0.099629,0.150821,-0.152154,-0.026441,0.171718}
,
{0.0379853,-0.116093,0.0118781,-0.0529205,0.0936601,-0.439948}
,
{-0.249306,-0.00540336,0.0311913,-0.185908,-0.15142,0.133986}
,
{-0.037587,-0.187868,0.0690919,-0.0117451,-0.0362933,0.16739}
,
{-0.145665,0.221057,0.131386,-0.157068,-0.122702,0.16653}
,
{-0.0871717,0.0701358,0.0119971,0.11368,-0.159224,0.0107371}
,
{0.0134707,-0.0213439,-0.0148916,0.0157358,0.012899,-0.188493}
,
{-0.0126595,0.0911163,0.106213,0.0506959,0.0112131,0.132404}
,
{-0.0550825,0.113886,0.0928078,0.0100846,0.144155,-0.189496}
,
{0.0305241,-0.111374,0.0959455,-0.129744,-0.168235,0.0265576}
,
{0.209968,-0.189669,-0.214377,-0.123235,0.02824,0.0325083}
,
{-0.316783,-0.0587136,-0.0701204,0.00119416,-0.0856807,0.0882579}
,
{-0.0647785,-0.0611223,-0.108757,-0.0618072,0.244239,-0.0346752}
,
{-0.0371702,-0.174304,-0.184588,-0.231712,0.123093,0.0200589}
,
{-0.174953,-0.206902,-0.29294,-0.0746934,0.0989138,-0.0396731}
,
{-0.0985907,-0.0262912,-0.0746097,-0.166388,0.209888,0.108238}
,
{-0.103944,-0.224845,-0.184899,0.00780205,0.483238,-0.469841}
,
{-0.137119,0.118605,-0.022238,-0.232102,-0.0402034,-0.0343726}
,
{-0.118843,0.123586,0.0311861,-0.0310262,0.0627175,-0.137141}
,
{0.0054054,-0.0643573,-0.0555264,0.0520182,0.181086,-0.051322}
,
{0.0531166,-0.0457028,0.177261,-0.0956224,-0.0645279,0.0648206}
,
{0.086208,0.0588543,0.196341,-0.106749,0.139897,-0.288248}
,
{-0.0870231,0.088697,0.112548,-0.0532732,-0.0176904,-0.296953}
,
{-0.0520998,-0.0157805,-0.0181794,0.130088,0.110698,-0.0416409}
,
{0.0505952,0.193836,-0.0151491,-0.0621722,0.210852,-0.424979}
,
{0.118611,0.0531418,-0.0220182,-0.0267223,0.103273,-0.153252}
,
{-0.0962318,-0.070474,0.156204,-0.192992,-0.0358741,0.159774}
,
{-0.244551,0.182155,-0.0777047,0.0477525,0.113441,0.0691571}
,
{-0.0153141,-0.00573617,0.0476057,-0.0377488,0.00023363,-0.108608}
,
{0.721056,0.476246,-0.0767182,-0.091938,-0.212327,-0.0543607}
,
{-0.135213,-0.0626954,-0.000239648,-0.0154082,-0.125651,-0.0176806}
,
{-0.32684,-0.207803,-0.0403117,0.231338,0.170593,-0.0163488}
,
{-0.0946294,-0.059714,-0.137188,0.12678,0.0485242,-0.034538}
,
{-0.0654916,0.021597,-0.0719092,0.0438074,-0.0255126,0.0306579}
,
{0.0647552,-0.100317,0.198911,-0.201489,0.440373,0.454662}
,
{-0.168113,-0.109003,-0.0592278,0.288868,-0.177771,0.123475}
,
{0.0772144,-0.0667126,0.196061,-0.519223,0.254897,0.63344}
,
{-0.0912755,-0.127074,0.00262513,-0.0310766,0.0702494,0.014214}
,
{-0.121628,-0.110342,0.16343,-0.0559551,0.148609,-0.0114344}
,
{-0.7318,-0.218493,-0.28316,0.292564,0.397514,0.467663}
,
{0.241803,0.0980433,-0.0414965,-0.130485,-0.0784847,0.0194643}
,
{0.0829828,-0.0635299,0.137421,-0.0641644,0.281252,0.00487194}
,
{0.0533721,-0.133777,0.0358747,0.0213825,0.100556,-0.115488}
,
{-0.0681267,-0.021277,0.0314535,0.0294733,-0.132247,-0.012774}
,
{0.129181,0.14915,0.0328573,-0.154836,0.225594,-0.294213}
,
{0.0455227,0.14139,0.0342248,0.14221,-0.0151962,0.312476}
,
{0.160287,-0.0428781,-0.0255933,0.0548524,0.132824,0.112157}
,
{0.0303853,0.108126,-0.0996569,0.0530235,0.142017,0.255908}
,
{0.073785,0.0820616,0.0192285,0.0174895,0.268068,0.136216}
,
{-0.181881,0.0858581,-0.204419,-0.0467221,0.024762,0.143166}
,
{0.00956931,-0.078528,0.12076,-0.062262,0.0341012,0.269644}
,
{-0.000486357,-0.0537651,0.0273723,-0.144162,0.181399,0.121166}
,
{0.169516,-0.2017,0.12955,-0.025198,0.258362,0.0554254}
,
{0.0515901,0.0839383,0.118027,0.0617054,0.228561,-0.013617}
,
{-0.161688,0.271866,0.0357375,0.0209689,-0.18935,-0.0689413}
,
{-0.0556593,0.064217,-0.0535019,0.00988547,0.25936,0.0542172}
,
{0.00227427,-0.0303752,0.00921934,-0.0399886,0.201372,-0.247159}
,
{0.171777,0.000746135,0.0419853,0.0618659,-0.125688,0.13308}
,
{-0.00549126,-0.0693023,-0.0429226,-0.0565912,0.139155,0.169638}
,
{-0.129855,-0.0636622,-0.0246722,0.0232321,-0.142663,0.297573}
,
{0.003318,-0.18408,0.0235223,0.0890189,-0.157829,0.445201}
,
{-0.140206,0.217268,-0.0054549,0.105941,0.00968742,0.174103}
,
{0.00600379,0.175884,0.238338,0.062442,0.113815,-0.52518}
,
{0.0744575,-0.0715895,-0.10884,0.0200045,0.315838,-0.107326}
,
{0.098557,-0.131428,-0.0160316,-0.0421873,0.0769769,0.00637254}
,
{0.0289001,-0.0170169,0.201477,0.225489,0.174323,-0.417746}
,
{-0.177154,-0.0542422,0.250578,0.0605603,0.265049,-0.618154}
 };
  static const float bias2[1] = { -0.0182598 };
  static const float weights2[][1] = { {0.657636}
,
{0.0948578}
,
{0.0996621}
,
{0.132364}
,
{-0.13168}
,
{0.134817}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_52(v, index);
}
static int assign_gen_lepton_prior_5_1_52() {
  global_gen_lepton_prior.at(5,1,52) = &specialized_gen_lepton_prior_5_1_52;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_52 = assign_gen_lepton_prior_5_1_52();

template<typename T> float gen_lepton_prior_5_2_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.104294,0.00793696,-0.097608,-0.210976,-0.046916,-0.0550126 };
  static const float weights1[][6] = { {0.0192496,-0.0806515,-0.0662511,-0.142112,0.0172352,-0.0305927}
,
{-0.0660214,0.0939705,-0.208256,0.31793,-0.345124,-0.0328477}
,
{0.0319416,-0.058526,0.00613477,0.0042694,-0.0658436,-0.143489}
,
{0.157969,0.120975,0.0263775,-0.388362,0.130824,0.0747719}
,
{0.192949,-0.0977222,-0.00416781,-0.104235,-0.0869252,-0.0798104}
,
{-0.0739214,0.0601015,-0.0346164,-0.114543,-0.0372804,-0.0573554}
,
{0.0535692,0.00329545,-0.0104715,-0.0396068,-0.0121369,-0.0936178}
,
{-0.106904,-0.0841201,-0.209336,-0.145685,0.0119017,-0.080302}
,
{-0.105998,0.0379003,0.127273,-0.0686537,-0.0599432,-0.153096}
,
{-0.128777,-0.123678,0.140451,-0.0459476,0.0981888,0.101242}
,
{-0.128631,-0.0307961,0.0268726,0.060646,-0.0219843,0.233145}
,
{0.0090966,0.0815406,-0.0453077,-0.0236008,-0.109947,0.0639656}
,
{-0.182824,0.0238955,0.124102,-0.0835125,-0.0916865,0.150933}
,
{-0.00918429,-0.0655517,0.0179741,0.184963,-0.133065,-0.211435}
,
{0.0622878,0.163756,0.197645,0.0926885,-0.0260471,0.0260729}
,
{0.148622,0.10841,-0.105429,-0.177623,-0.248366,0.00607112}
,
{-0.29201,0.0973436,-0.0725484,0.0689653,-0.192401,0.0482088}
,
{-0.0571839,-0.0450806,-0.0693809,0.0446452,-0.0375907,-0.285316}
,
{-0.145688,0.186333,-0.0527107,-0.136388,-0.16292,-0.00280872}
,
{-0.0882936,0.205654,0.0958754,0.187655,-0.278803,-0.126868}
,
{-0.0982757,0.0136485,-0.130732,0.0686278,-0.256165,0.0433045}
,
{0.059541,0.201055,0.25192,-0.0854284,-0.119241,0.0528054}
,
{-0.0500392,0.0560703,0.165758,-0.0031744,0.0993527,0.211363}
,
{-0.0951278,0.134854,0.0438518,-0.00113281,-0.171932,0.0721406}
,
{0.106282,-0.132345,0.12218,-0.00619936,-0.0560179,-0.137254}
,
{0.323658,-0.130106,-0.0548701,-0.195343,-0.113593,-0.167742}
,
{-0.0972353,0.020981,-0.0814449,-0.0451529,-0.195966,-0.00133459}
,
{0.0611091,-0.277293,-0.170937,-0.0846438,0.119573,-0.0856196}
,
{0.308567,-0.0490073,-0.00921337,0.194613,0.187994,-0.192445}
,
{-0.137877,0.132362,0.0420931,-0.11157,0.0206992,-0.0397561}
,
{-0.165551,-0.0771062,0.101981,-0.0999527,0.0375742,-0.00142855}
,
{-0.153892,0.0129712,0.0846551,0.0047218,-0.241071,0.068781}
,
{-0.112336,-0.233018,0.113374,-0.121959,-0.00756166,0.136806}
,
{0.0331635,0.0860411,-0.0656006,-0.208437,0.00642024,-0.0438299}
,
{0.0820986,-0.0263191,-0.213198,0.0340829,-0.0471061,-0.0626483}
,
{-0.0085518,0.131864,-0.0627975,0.0968673,-0.0187056,0.0214418}
,
{0.089611,-0.122375,0.101081,0.217567,-0.110335,-0.160422}
,
{-0.166662,0.217895,-0.126371,-0.109747,-0.00211506,0.015586}
,
{-0.0202929,-0.103061,-0.248305,0.0770385,0.0836681,0.0416584}
,
{0.143949,-0.00780963,0.00833447,-0.0979167,0.170651,0.154668}
,
{-0.035337,0.108017,-0.191878,-0.154761,-0.256819,-0.0980625}
,
{0.0878118,-0.0473121,0.0932592,0.0125457,-0.0928542,0.0398906}
,
{0.210236,-0.202196,-0.0094146,-0.130012,-0.0967558,-0.175371}
,
{0.0434674,-0.0751238,0.032707,0.0813714,0.171723,0.00260731}
,
{0.104522,-0.112966,0.049106,-0.22947,0.180963,0.0418571}
,
{-0.112395,0.193675,-0.0815049,-0.0983985,0.0527569,0.0317171}
,
{0.0209731,0.15123,0.0978801,0.112728,0.153304,0.0151702}
,
{0.122849,0.186924,-0.0996018,-0.0951732,-0.00181595,0.0777989}
,
{-0.0545297,-0.0294778,-0.249941,0.172161,-0.13755,-0.137752}
,
{-0.0378567,-0.0290343,-0.186778,-0.040263,0.0100478,0.0544019}
,
{0.0134075,-0.0861532,-0.136232,0.279478,0.129272,0.14694}
,
{0.132638,-0.0371823,0.11926,-0.158255,0.199056,0.156873}
,
{0.124724,-0.0932008,-0.0801209,0.0452663,0.127515,0.0855816}
,
{0.0730596,0.0201317,0.0253281,0.0919392,0.12629,0.0298421}
,
{0.149535,0.0595847,0.135847,0.0953753,-0.0646122,0.212138}
,
{-0.25815,0.0184949,-0.000330815,-0.105856,0.0303714,-0.0282588}
,
{0.24053,0.187698,0.0720236,-0.0635908,0.202893,0.165479}
,
{0.186731,0.136132,-0.0567123,0.183674,-0.0243447,0.106722}
,
{-0.027175,0.140215,0.167239,-0.0297393,-0.00422506,0.0359878}
,
{0.193152,0.131704,-0.175645,-0.133766,-0.131041,0.244573}
,
{-0.0622208,-0.123746,0.149823,0.0447843,-0.256429,0.012319}
,
{-0.122911,0.211635,-0.131175,0.469151,-0.0989331,-0.157506}
,
{-0.0112587,-0.140309,-0.120358,0.0933383,-0.0672025,0.0302884}
,
{0.0439951,0.258158,-0.103352,-0.0507182,-0.310166,-0.00708219}
,
{0.0396127,-0.116456,-0.121921,0.216105,0.099847,-0.0439228}
,
{-0.000692278,0.0166657,-0.214441,-0.0457978,0.0656719,-0.0788178}
,
{-0.412667,0.194581,0.0867979,-0.132075,-0.22989,0.33535}
,
{0.28681,0.203377,-0.115325,-0.147031,0.188611,-0.069905}
,
{0.223651,-0.038683,-0.0648561,0.00553187,-0.104757,0.137205}
,
{-0.0907082,0.0565712,-0.00660409,-0.0808512,-0.0379408,-0.0384762}
,
{0.000149462,-0.164791,-0.116939,0.0865304,0.0266966,0.00202037}
,
{-0.0455413,0.0537462,-0.154289,-0.00624597,-0.0440148,0.118946}
,
{-0.195643,0.0610618,-0.116361,0.0380754,0.036589,-0.114663}
,
{0.145131,-9.1337e-05,0.0519854,-0.127835,0.0828755,-0.0217205}
,
{-0.0858533,0.0111904,0.0852165,0.0238903,-0.189992,0.0124831}
,
{0.15366,0.0546245,-0.204536,0.149305,-0.0775792,0.0938768}
,
{0.0981813,0.0202699,-0.264323,-0.591457,-0.0946566,0.170104}
,
{0.0727947,0.355021,-0.120646,0.00104713,-0.0398743,0.113093}
,
{0.0234642,0.0899408,0.302474,0.0679314,-0.0292008,-0.0696291}
 };
  static const float bias2[1] = { 0.271799 };
  static const float weights2[][1] = { {-0.0745817}
,
{0.249223}
,
{0.240914}
,
{0.0532257}
,
{-0.144543}
,
{0.0357886}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_2_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_2_50(v, index);
}
static int assign_gen_lepton_prior_5_2_50() {
  global_gen_lepton_prior.at(5,2,50) = &specialized_gen_lepton_prior_5_2_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_2_50 = assign_gen_lepton_prior_5_2_50();

template<typename T> float gen_lepton_prior_5_2_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0950537,0.244333,0.281441,0.14258,0.126842,-0.291217 };
  static const float weights1[][6] = { {-0.233394,-0.471659,-0.321783,-0.497051,-0.30794,0.307223}
,
{-0.113183,0.315102,0.053271,-0.545935,-0.388314,-0.0129904}
,
{-0.161334,-0.0849072,-0.625953,0.331402,0.374888,0.496186}
,
{0.335791,0.758271,0.0250386,0.132463,0.890305,-1.125}
,
{0.0850558,0.177155,0.162741,0.0795067,0.00374962,-0.123721}
,
{-0.301509,-0.159958,0.224453,0.288648,-0.33468,0.00392471}
,
{-0.468569,-0.143602,0.268194,0.051005,-0.481236,-0.0605182}
,
{-0.0448692,-0.00812724,-0.234485,0.132755,-0.0502483,-0.248299}
,
{0.267675,-0.132147,-0.173176,0.422775,0.565547,-0.0472534}
,
{-0.0680486,-0.0862325,0.0586591,-0.0215245,0.188131,-0.193816}
,
{0.106857,-0.239675,0.00298235,-0.0451008,-0.0725831,-0.137315}
,
{0.107316,0.00702199,-0.101554,0.0062368,-0.179578,-0.0687977}
,
{-0.113254,0.0457945,-0.0112284,0.271596,0.270626,-0.259115}
,
{-0.225537,-0.178557,-0.0848599,0.093284,-0.178612,0.117779}
,
{0.0714153,0.19686,-0.231352,0.149075,0.0371406,0.150555}
,
{-0.128049,-0.128717,-0.0640884,-0.0336715,-0.05368,0.151303}
,
{-0.0199535,0.0425092,-0.230262,0.0771834,0.193306,0.00756911}
,
{-0.0444555,0.0268012,0.331284,0.126362,-0.231156,-0.189207}
,
{0.00775771,0.0175717,-0.0387405,0.0511139,0.0222265,0.0287332}
,
{0.108785,0.0931302,0.209211,-0.137294,-0.0584458,-0.0707522}
,
{-0.0379779,-0.0512172,0.00354101,0.0648402,-0.0573043,-0.13208}
,
{-0.125612,0.222144,-0.259343,0.233462,-0.253583,-0.061897}
,
{-0.0331738,-0.0899628,0.080758,0.100324,-0.0746755,0.0917116}
,
{-0.0361941,0.11671,0.0375127,-0.120612,0.0722528,0.250648}
,
{0.0637521,0.0126884,-0.0159202,-0.26078,-0.478155,0.191684}
,
{-0.244907,-0.0800473,-0.118245,0.214389,-0.120901,-0.133555}
,
{0.0268569,-0.319108,-0.278621,-0.078815,-0.184345,-0.209434}
,
{-0.149171,-0.259553,-0.209243,-0.221111,-0.165835,-0.0253039}
,
{-0.0299897,-0.283301,-0.188088,-0.535436,-0.479671,0.25287}
,
{-0.0726493,0.113592,-0.202523,0.177617,-0.120178,-0.0673566}
,
{0.0245876,0.0917005,-0.0668467,0.018335,-0.00686167,0.0931792}
,
{-0.192489,-0.133275,-0.0671895,0.0692866,0.190069,0.0394659}
,
{-0.180472,-0.176557,-0.141941,0.00657573,0.215078,0.229504}
,
{0.0705373,-0.220775,-0.293471,0.167296,0.295142,-0.0441587}
,
{0.234389,-0.107029,-0.154905,0.159287,0.0985356,-0.0991119}
,
{-0.0357069,0.0522657,0.0503094,-0.026905,0.0490099,0.167504}
,
{-0.0299891,0.28625,-0.225845,-0.19878,0.372148,0.099881}
,
{-0.11301,-0.0228202,0.0713023,0.0698954,-0.26497,-0.0891492}
,
{0.0765086,-0.133321,0.0861539,0.180713,-0.0652436,0.19916}
,
{0.0977745,0.189391,-0.0375135,-0.0242233,-0.0493546,0.0025552}
,
{-0.00995001,0.106274,0.00871275,-0.0967377,0.067113,0.0356524}
,
{0.379586,0.0541352,0.156679,0.301835,-0.471553,0.218291}
,
{-0.0569145,-0.0868671,0.0228483,-0.0168169,0.0866605,0.135723}
,
{-0.252181,-0.07401,-0.0995395,0.179077,0.198854,0.00806894}
,
{0.0165275,0.078653,0.154677,0.150371,-0.0408999,0.0207154}
,
{-0.0232416,-0.0116335,0.0558547,-0.00486178,0.00793836,0.0402537}
,
{0.0290048,-0.179906,0.0283997,0.344703,0.1131,0.292198}
,
{0.172377,-0.0304323,-0.0313683,-0.145991,-0.0392339,0.112986}
,
{0.13292,0.180698,-0.0382583,-0.139518,-0.118603,0.00432738}
,
{0.0809596,0.0435264,0.0485702,0.0587889,0.0231183,-0.0457705}
,
{0.0682774,0.101325,-0.0147519,-0.0654056,0.0196689,0.0692933}
,
{-0.0583964,0.206724,-0.264501,-0.208203,0.0730925,0.035352}
,
{-0.0352826,0.161786,-0.210904,-0.211522,-0.148536,-0.174582}
,
{0.0962206,0.176526,0.0523125,-0.108878,-0.126139,0.022868}
,
{-0.257382,0.0641064,-0.138894,0.0348702,-0.0822013,-0.146066}
,
{0.0340037,-0.0307905,0.0155602,-0.0421004,0.135981,-0.073672}
,
{-0.310673,-0.177441,-0.0261783,-0.326629,0.202812,0.13233}
,
{0.103158,0.0126773,0.126787,-0.0509574,-0.0166881,-0.177119}
,
{-0.0521068,0.0667031,-0.0348286,0.156214,0.00572277,-0.398503}
,
{0.0265973,-0.0294304,0.0029023,0.0892039,-0.108103,-0.13581}
,
{-0.029007,-0.0581983,0.024806,-0.234951,0.0255342,-0.313353}
,
{-0.167874,-0.571961,0.240954,-0.886942,0.216989,-0.171172}
,
{0.0173945,0.0656807,0.0644956,-0.114339,0.137571,-0.00289638}
,
{0.139644,-0.0701052,-0.0501303,-0.0692831,0.141762,-0.0310488}
,
{0.1218,0.00448739,-0.0866306,-0.0822504,-0.015355,0.133194}
,
{-0.104438,0.147702,-0.00296126,0.139821,-0.00314357,0.147366}
,
{0.0256056,-0.428121,0.113518,-0.651088,0.180552,-0.125245}
,
{0.000957107,0.25675,-0.0530852,0.0432536,-0.0417996,0.140696}
,
{0.0693271,0.16287,-0.0748338,0.237495,0.137591,-0.105303}
,
{-0.0747839,0.0581931,-0.119128,0.0300381,0.00887881,0.0468599}
,
{0.0279579,-0.0246411,-0.0137944,-0.0136927,-0.0110852,-0.0282568}
,
{-0.0216407,-0.040898,0.158968,-0.501477,-0.0983087,-0.0445316}
,
{-0.116204,-0.00687241,0.00348219,-0.0388607,0.0368074,0.0104282}
,
{-0.0596886,0.0319213,0.0234195,-0.0443578,-0.139547,0.023535}
,
{-0.150143,0.0526983,-0.13452,0.333154,-0.0744052,0.00230235}
,
{0.143913,-0.171839,-0.0710739,-0.0912741,0.129494,0.28684}
,
{-0.099553,0.003415,0.00262441,0.0542116,-0.100983,-0.101546}
,
{-0.09359,0.212337,-0.200148,0.0940848,-0.177161,0.0213884}
,
{-0.13459,0.141794,-0.0284115,0.244881,-0.374983,-0.0957734}
 };
  static const float bias2[1] = { -0.0611375 };
  static const float weights2[][1] = { {0.322243}
,
{0.0586597}
,
{0.118325}
,
{0.0601039}
,
{0.136176}
,
{-0.0745188}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_2_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_2_51(v, index);
}
static int assign_gen_lepton_prior_5_2_51() {
  global_gen_lepton_prior.at(5,2,51) = &specialized_gen_lepton_prior_5_2_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_2_51 = assign_gen_lepton_prior_5_2_51();

template<typename T> float gen_lepton_prior_5_3_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0038681,0.216653,-0.0818564,-0.00146736,0.0538477,-0.220741 };
  static const float weights1[][6] = { {-0.404837,-0.797703,0.27103,-0.511947,-0.32966,0.306978}
,
{0.43761,0.845649,-0.596259,0.406611,-0.0450253,0.705574}
,
{-0.120443,-0.104241,-0.0906822,-0.0332961,-0.23608,-0.107865}
,
{0.115659,0.253079,-0.133334,0.0490594,-0.0702605,-0.184873}
,
{0.121713,0.216696,-0.068999,-0.154231,0.0108129,-0.150264}
,
{-0.293736,-0.215048,-0.147282,-0.0342441,-0.234041,0.00629273}
,
{-0.168052,-0.101718,-0.118363,-0.151617,-0.135423,-0.190738}
,
{-0.0830195,0.039225,0.0804937,0.0148945,0.146175,-0.0409296}
,
{-0.297874,0.0470421,-0.0449684,0.0827584,-0.0689246,0.0445594}
,
{0.0745872,-0.0364283,0.0555558,0.17372,0.151458,-0.079858}
,
{-0.0319531,0.0371243,-0.209931,-0.101167,-0.109446,0.039616}
,
{0.0691609,0.171177,-0.0366834,-0.0261573,0.151914,-0.123021}
,
{0.300576,0.261012,-0.431967,-0.00567223,0.0434905,-0.413228}
,
{0.145259,-0.106037,-0.148819,0.106634,-0.0680636,-0.622062}
,
{0.095435,0.240555,-0.057772,-0.0419292,0.192108,-0.527092}
,
{-0.00387994,-0.0687824,-0.055019,0.00766026,-0.170565,-0.00455508}
,
{0.274801,0.264015,-0.362153,0.0292702,0.0757629,-0.224475}
,
{-0.59109,-0.0786172,0.219504,-0.200017,-0.129267,-0.305314}
,
{0.169419,0.161697,-0.320396,-0.028364,-0.0194394,-0.494922}
,
{0.187601,-0.142492,0.142296,0.00181065,-0.0794072,-0.54901}
,
{0.0368803,0.053454,0.00797105,0.0287585,0.170717,-0.24648}
,
{0.0683176,-0.151319,-0.0883171,0.054738,0.144035,-0.128465}
,
{-0.129187,-0.203786,-0.13108,0.20686,0.0795072,-0.0697167}
,
{0.108135,0.102761,-0.0131911,0.0626619,0.0567135,-0.319555}
,
{0.0803571,-0.216254,-0.468707,-0.311259,-0.127144,-0.291906}
,
{-0.00305728,-0.0725722,-0.15983,0.0421626,-0.173297,0.0757411}
,
{-0.113776,-0.285171,-0.00266335,-0.162496,-0.264333,0.130981}
,
{-0.203125,-0.388176,0.139238,-0.217056,-0.0681197,0.216885}
,
{0.494908,0.152718,-0.515112,-0.263213,-0.0379833,0.151659}
,
{0.00464364,0.189967,-0.0220025,0.133281,0.126217,0.134312}
,
{0.0621662,0.0566544,-0.169559,-0.0198771,-0.0900419,0.148559}
,
{-0.107956,0.0349637,-0.0932885,-0.000298083,-0.00552603,0.0426964}
,
{0.106966,-0.0622646,0.133705,-0.0632494,-0.096408,0.169348}
,
{-0.0305595,0.62192,0.0958453,0.0446205,-0.11717,0.104124}
,
{-0.0190601,-0.0536098,-0.103249,-0.286586,0.0757676,0.0668424}
,
{-0.0914334,0.00539318,-0.0832574,-0.003264,0.00392363,0.025108}
,
{0.369503,0.0296017,-0.093854,-0.0714365,-0.239603,0.0686224}
,
{0.0351676,0.00184204,-0.0660373,-0.0403324,0.0293283,-0.0732512}
,
{0.170531,-0.148657,0.215541,-0.198534,0.0294759,0.0204081}
,
{-0.016768,-0.0327353,0.203435,-0.0616875,-0.134354,-0.000621065}
,
{-0.13499,0.125561,-0.0968424,0.132117,-0.0664925,-0.0329671}
,
{-0.431928,-0.100227,0.0162728,-0.0714757,-0.00188221,-0.0427506}
,
{-0.36338,-0.129931,-0.013884,-0.154156,0.0422224,-0.109369}
,
{0.0444597,-0.0302176,0.0166881,0.26987,-0.00577024,0.0514473}
,
{0.169782,0.0290237,-0.0663998,-0.107756,-0.0161037,0.104648}
,
{-0.125753,0.00971421,-0.118095,0.0497814,0.0885219,0.122819}
,
{0.149444,-0.146783,-0.161625,-0.0104143,-0.0597979,-0.139901}
,
{-0.0304923,0.129434,-0.0135866,0.0246521,0.278456,0.0150133}
,
{-0.0466386,-0.301727,-0.085577,-0.0218598,0.13982,-0.128505}
,
{-0.185144,-0.0247968,0.235201,-0.199083,0.106842,0.104196}
,
{0.0154043,-0.0749583,0.065202,-0.00831667,-0.169235,-0.0489539}
,
{-0.0964676,0.0875084,0.105118,0.00975495,-0.195373,-0.101679}
,
{0.105711,-0.0136328,-0.095457,-0.189832,-0.00683176,-0.204825}
,
{-0.209843,0.258052,0.0245776,0.271285,-0.143493,0.127926}
,
{-0.0587658,0.119286,-0.0471536,-0.13564,0.131442,-0.0265366}
,
{-0.0194719,-0.0349358,-0.0966008,0.0171294,-2.51228e-05,-0.057818}
,
{0.365863,0.12552,-0.0670359,-0.354552,0.155661,0.187317}
,
{-0.0317274,-0.140016,-0.0349704,0.192346,-0.0466141,0.100271}
,
{-0.14288,-0.024244,0.00819225,-0.103191,-0.00500207,-0.278474}
,
{0.128723,-0.115409,-0.143618,-0.0354366,-0.105951,0.176604}
,
{-0.0242803,0.0391534,0.0170307,-0.0114689,-0.0326702,0.0367222}
,
{-0.0953306,0.182452,0.314506,0.0820851,0.13295,0.0880119}
,
{-0.0123677,-0.165319,-0.108208,-0.19711,0.175185,0.0721224}
,
{0.242471,-0.0803588,-0.239757,0.180858,-0.0663654,0.0766121}
,
{-0.00371957,0.0100859,-0.175099,-0.0456212,-0.00949213,-0.129718}
,
{0.225534,0.00988034,0.00156504,-0.0528771,0.0972553,0.0927747}
,
{-0.0222463,-0.0114418,0.0898872,-0.0549746,-0.230296,-0.13936}
,
{0.302586,0.0754323,0.0290924,-0.209191,-0.00950745,-0.0725522}
,
{-0.101118,-0.192675,-0.0139264,-0.215282,0.0651528,0.110289}
,
{-0.0108695,0.068733,-0.0445868,0.22684,-0.0831229,-0.134776}
,
{-0.0303593,0.00430081,-0.219096,0.0855104,-0.0511171,0.078814}
,
{0.205522,-0.547512,0.257463,-0.425269,0.0589207,0.211086}
,
{0.0472451,0.000384783,0.0632826,0.19586,-0.0522376,-0.0488459}
,
{-0.036068,0.0114303,0.145653,0.235515,0.00259056,-0.289328}
,
{-0.219862,0.116104,-0.0912686,-0.291387,-0.101754,0.00181604}
,
{-0.104518,0.143644,0.13672,-0.0391492,-0.0223986,-0.136303}
,
{0.663031,1.23057,-0.957043,0.450863,0.170737,0.214842}
,
{-0.301425,-0.0250085,-0.0853986,-0.0476295,-0.135985,-0.0872367}
,
{-0.0166968,-0.153069,-0.159838,0.157806,-0.228772,-0.086045}
 };
  static const float bias2[1] = { 0.0297485 };
  static const float weights2[][1] = { {0.039685}
,
{0.0517965}
,
{-0.0490456}
,
{0.0991961}
,
{0.0965985}
,
{-0.10644}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_3_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_3_50(v, index);
}
static int assign_gen_lepton_prior_5_3_50() {
  global_gen_lepton_prior.at(5,3,50) = &specialized_gen_lepton_prior_5_3_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_3_50 = assign_gen_lepton_prior_5_3_50();

template<typename T> float gen_lepton_prior_7_0_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0524635,-0.115978,-0.0610318,-0.063147,-0.115206,-0.0858116 };
  static const float weights1[][6] = { {-0.0975602,-0.301158,0.043486,-0.346787,0.0130188,-0.21428}
,
{-0.155741,0.122515,-0.0929545,0.372252,-0.0900938,0.250876}
,
{-0.274217,-0.226684,-0.00780702,-0.189019,-0.247631,0.101711}
,
{0.215265,-0.261556,-0.33042,-0.0497748,-0.606352,0.126324}
,
{0.192747,-0.329345,-0.0626086,-0.192445,-0.127122,-0.2644}
,
{-0.133859,-0.18123,0.0288073,-0.220495,0.0784055,0.0574881}
,
{-0.223201,0.0589067,-0.0133534,-0.124275,0.0579732,-0.100874}
,
{0.117682,0.279136,0.115928,-0.261975,0.0744363,0.154252}
,
{-0.251388,0.247087,-0.0789593,-0.120425,-0.122845,-0.0962921}
,
{0.0233432,0.0152399,0.0574314,0.114804,0.106363,0.0723717}
,
{0.144371,-0.220889,0.237829,0.087793,0.144428,0.0390628}
,
{-0.189225,0.0214855,0.0579346,0.145503,-0.00724312,-0.149993}
,
{-0.128173,-0.172501,-0.207771,0.147747,0.0551815,-0.0512012}
,
{-0.00203724,-0.209053,-0.105763,0.200456,-0.155937,0.0676072}
,
{0.220003,-0.256537,-0.272208,0.0369599,-0.105878,0.142305}
,
{0.184056,0.113638,0.0492241,-0.10474,0.0188941,0.0342791}
,
{0.314884,-0.014907,-0.274594,0.0827966,0.0836334,-0.190976}
,
{-0.0619946,0.0735068,-0.180704,-0.0923025,0.119893,0.00940623}
,
{-0.113651,0.0839042,0.085463,-0.190342,-0.125825,0.027264}
,
{0.00898934,-0.0905112,-0.0555314,0.0272129,-0.143665,-0.152399}
,
{-0.0939687,-0.384838,0.0119879,0.169685,-0.0693259,-0.0723756}
,
{-0.155733,-0.0797377,0.0622586,0.077602,-0.00107548,0.00542898}
,
{0.139357,-0.18931,-0.112808,0.0776335,0.164677,0.210566}
,
{0.0725393,0.0171852,-0.0229952,-0.0619216,0.0298156,-0.0396098}
,
{-0.15654,-0.320648,0.210356,-0.173833,-0.214028,-0.180887}
,
{-0.123923,-0.270468,0.228819,-0.200264,-0.121768,-0.103982}
,
{0.0110661,-0.324897,-0.149717,-0.330415,-0.15731,-0.0431389}
,
{-0.186373,-0.254848,-0.00854295,-0.353533,-0.175756,-0.13926}
,
{0.205643,0.197886,-0.522917,0.199586,0.0299917,-0.165707}
,
{0.0501537,0.212807,-0.00887191,0.217928,0.11634,0.113433}
,
{0.134582,-0.00139558,0.127649,0.0886301,0.209711,-0.20942}
,
{-0.145497,0.0694435,0.217922,0.113339,0.031682,-0.0194419}
,
{0.0822427,0.0166127,-0.190806,-0.0657181,0.0739482,-0.164228}
,
{0.104302,0.00883012,0.0498994,0.138238,0.0866425,-0.0028727}
,
{-0.117852,0.117372,-0.0837149,-0.206472,0.0222845,-0.045136}
,
{-0.18574,-0.00362361,-0.192654,0.00637142,0.00849239,-0.000118343}
,
{-0.289006,-0.0567033,0.0116695,-0.0593879,-0.108385,0.116378}
,
{0.0533676,-0.00915176,-0.039976,-0.025877,-0.0377153,0.0746212}
,
{0.0183406,0.205619,-0.218452,-0.0789658,0.115076,0.0167001}
,
{-0.107298,-0.0949618,0.0204824,-0.129492,-0.165081,-0.173961}
,
{0.0874766,0.0286392,0.033172,0.0040816,-0.0107477,-0.0467874}
,
{0.371824,-0.268052,-0.0928063,0.150684,-0.0462001,-0.204016}
,
{-0.101395,-0.0865936,-0.163006,-0.0191444,-0.0296701,0.0964075}
,
{-0.0656579,-0.086197,0.0443186,0.0533015,-0.0118901,-0.00538545}
,
{-0.0926883,0.105841,-0.0474915,0.123603,0.016609,-0.106955}
,
{-0.106064,-0.0169782,-0.103182,0.0393474,-0.114418,-0.123746}
,
{-0.0735634,-0.121225,-0.0580715,0.23684,-0.0270976,0.0161973}
,
{0.152249,0.067166,-0.0324931,-0.0283665,-0.0575978,-0.188734}
,
{0.0297046,0.0314908,-0.00134385,-0.230099,-0.0546784,0.0385902}
,
{0.179886,-0.0857382,0.108493,0.185223,0.161707,0.0976788}
,
{0.0582415,-0.0560848,0.0593655,-0.107919,-0.0677346,-0.0423632}
,
{-0.118741,0.147342,-0.00939147,-0.0044742,-0.0534751,-0.0413854}
,
{0.131101,-0.205455,0.121254,0.125941,0.117569,0.0661877}
,
{0.162572,0.0645119,-0.196703,0.108592,0.233643,-0.104144}
,
{0.0153716,-0.114383,0.0914365,0.07822,-0.163108,0.0463597}
,
{0.0963334,0.0651913,0.105307,0.136206,-0.140111,0.0354047}
,
{0.0130602,-0.00492423,0.172562,-0.127649,-0.174239,-0.0347857}
,
{0.026972,0.0690021,-0.120201,-0.13059,0.070363,0.135828}
,
{-0.0499822,-0.0504917,0.183079,-0.157672,0.164249,0.211609}
,
{-0.0552899,0.170901,0.00412843,0.189216,-0.0147249,0.164228}
,
{-0.152103,-0.0657313,-0.00448569,0.0255935,0.0395382,-0.0853758}
,
{-0.117893,0.100368,-0.206806,0.188204,0.128713,0.13279}
,
{-0.0102462,-0.0422374,0.0973028,-0.00903284,0.185911,0.053167}
,
{0.0212146,0.232443,-0.071443,0.187776,-0.0880584,0.156814}
,
{-0.117016,0.068917,-0.0350833,0.0714802,0.0613769,0.221134}
,
{0.126884,0.040506,0.0878435,-0.0930163,0.191462,0.148257}
,
{0.151939,-0.191995,0.15437,0.118624,-3.21961e-05,0.0729247}
,
{-0.027923,-0.0127264,0.0851259,0.154697,0.0543761,0.077607}
,
{-0.0231025,-0.00716241,-0.0848794,0.00469356,0.236136,0.0604786}
,
{0.158364,0.111583,-0.0149348,-0.0887542,-0.0291288,0.191331}
,
{0.0898797,-0.053146,-0.0018878,-0.0158285,-0.000968636,0.0390185}
,
{-0.0243687,-0.287519,0.28871,-0.0393032,0.128824,-0.157583}
,
{0.0153588,-0.120973,-0.168959,0.0518031,-0.0349506,-0.178436}
,
{-0.228349,0.0125323,-0.0107731,-0.17724,0.0494463,0.0812872}
,
{-0.264139,0.141728,0.471158,-0.00106336,0.295787,0.0581939}
,
{0.33906,-0.123969,-0.0274341,-0.00960211,0.191516,-0.0907825}
,
{0.412262,0.0245913,0.141994,-0.486598,0.141093,-0.154659}
,
{-0.245861,-0.0105524,0.207834,-0.0528035,0.102982,0.175232}
,
{-0.103625,0.1414,0.311052,-0.0723792,0.426521,-0.0600318}
 };
  static const float bias2[1] = { 0.434601 };
  static const float weights2[][1] = { {0.0291873}
,
{0.0166932}
,
{-0.027848}
,
{0.0187516}
,
{-0.0500132}
,
{0.0408034}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_0_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_0_50(v, index);
}
static int assign_gen_lepton_prior_7_0_50() {
  global_gen_lepton_prior.at(7,0,50) = &specialized_gen_lepton_prior_7_0_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_0_50 = assign_gen_lepton_prior_7_0_50();

template<typename T> float gen_lepton_prior_7_0_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.200849,-0.0471816,0.320372,-0.216167,0.231258,-0.211631 };
  static const float weights1[][6] = { {0.22571,-0.124419,0.371292,-0.25296,-0.0234219,-0.0745838}
,
{0.233327,0.111066,0.297179,-0.0739766,0.0540134,-0.416926}
,
{0.0651075,0.207124,0.167791,0.962187,-0.159554,0.317644}
,
{-0.142524,0.102281,0.184331,0.214128,0.159126,0.267082}
,
{-0.136998,0.117367,0.251674,-0.185358,0.281429,-0.433102}
,
{-0.0157277,-0.0844141,0.270936,-0.41135,0.0692642,-0.33998}
,
{0.0250509,-0.254855,0.204473,-0.456552,0.0988923,-0.268423}
,
{0.164227,-0.101147,0.0221749,-0.124781,0.141033,0.0371276}
,
{-0.0263114,-0.0291522,0.124042,-0.275883,0.017685,0.285173}
,
{0.101017,-0.0216458,-0.138269,-0.233417,0.237855,-0.0481207}
,
{0.159603,0.12471,-0.0298769,-0.139421,-0.114941,-0.057836}
,
{0.0667281,-0.124064,0.0663189,0.0252099,0.0542741,-0.0535721}
,
{0.0551696,-0.0713938,-0.0362261,-0.0766932,0.278488,-0.128779}
,
{-0.0525852,0.0335845,0.113563,-0.0549213,-0.0381125,-0.239624}
,
{0.0148919,0.194134,-0.254095,0.108208,-0.0153611,-0.129477}
,
{-0.0995334,-0.0584627,0.0318588,0.0493904,0.00505795,-0.187756}
,
{-0.0506536,-0.00010017,0.166632,0.0315252,-0.0426205,-0.0798788}
,
{-0.00602907,-0.0472598,0.417394,-0.212965,-0.0776904,-0.235674}
,
{0.0364539,-0.164306,0.100197,-0.0869455,-0.0271225,0.0787197}
,
{-0.118684,-0.0542456,0.135116,0.0538708,-0.0999408,-0.0731455}
,
{0.0874565,0.064384,-0.187765,-0.0459152,0.0598939,-0.156216}
,
{0.143992,-0.159013,-0.241555,-0.0703063,0.16227,-0.0729103}
,
{0.162936,0.043048,0.0311856,-0.0281919,-0.0156,0.129498}
,
{0.051976,0.0119887,0.0823213,-0.282477,0.0766002,-0.0399181}
,
{0.187092,-0.239005,-0.054839,0.0478867,-0.126832,0.147142}
,
{0.191085,-0.111692,0.0489906,-0.0673324,-0.145711,0.0710048}
,
{0.0395356,-0.160437,-0.212243,-0.0839675,-0.0220899,-0.000142468}
,
{-0.0304654,-0.124933,-0.222793,-0.0743428,-0.128627,0.114029}
,
{0.301254,-0.0465042,-0.41737,-0.12674,-0.0995443,0.0474745}
,
{-0.189104,-0.0158799,0.0242172,0.00482589,-0.0425026,-0.0567737}
,
{0.126852,0.0542612,-0.0366334,-0.096059,0.104207,0.0394598}
,
{-0.0417664,-0.135892,-0.0715788,0.248313,-0.163612,0.0234024}
,
{-0.228707,-0.0390882,0.132063,-0.126189,-0.0961354,-0.0271051}
,
{-0.0635797,-0.0838849,-0.121075,0.208607,-0.0400381,-0.00106983}
,
{0.120169,-0.116508,0.0703984,-0.0731395,0.111799,-0.121682}
,
{0.026146,-0.0110607,-0.0212385,0.0360779,0.0297753,0.0383611}
,
{0.028712,-0.335693,0.20138,0.468567,-0.063305,-0.0232357}
,
{0.0212764,0.171782,-0.0918144,-0.0772937,0.0117995,-0.0233276}
,
{-0.0235085,0.0626574,-0.129588,0.133088,-0.023521,-0.154219}
,
{-0.0633604,-0.0264958,0.0094583,-0.0964372,-0.0145152,0.0137789}
,
{-0.0857549,-0.0131207,-0.0234415,0.178027,-0.0649385,0.0720151}
,
{0.0858437,0.0717255,0.17031,-0.112679,0.00733598,-0.225174}
,
{0.0726332,-0.0566549,-0.033061,0.10608,0.0415183,0.0759616}
,
{-0.00397524,0.0252331,0.11262,0.0925545,0.0164974,0.255002}
,
{0.0112356,0.149653,-0.0660122,0.147144,0.158346,0.0620326}
,
{0.053027,-0.00470337,-0.0022187,-0.0051225,0.0358083,-0.0328116}
,
{-0.245081,0.13162,-0.0303708,-0.173286,-0.122176,0.343589}
,
{0.0394428,-0.110282,-0.081807,-0.137976,-0.0978046,-0.0177463}
,
{0.096683,0.0302353,-0.0623523,-0.00391794,0.0829177,-0.0416174}
,
{0.126592,-0.118807,-0.040375,-0.0583871,0.0169702,-0.03115}
,
{0.0695308,-0.0603373,-0.0373438,-0.0207922,0.0667189,-0.116996}
,
{0.0803751,-0.204163,-0.384262,-0.302349,0.0984845,-0.342738}
,
{-0.0238369,-0.013992,-0.0336664,-0.0782291,0.101876,-0.02389}
,
{0.0238943,0.116009,-0.00748286,0.166695,-0.00414968,-0.131933}
,
{-0.0566513,-0.034651,0.0556819,-0.118197,0.0997164,0.0361724}
,
{-0.0260231,-0.0938339,0.0470187,-0.0896633,0.0514651,0.149301}
,
{0.0168553,-0.0695099,-0.581136,0.0273723,-0.148801,0.205958}
,
{0.126435,-0.0848085,0.144833,-0.0653779,0.0416495,0.241663}
,
{0.114909,-0.00060244,-0.220622,-0.0907971,0.021434,0.192602}
,
{0.0809816,-0.111511,0.22828,-0.00219378,0.0461695,0.0651808}
,
{0.0104083,-0.0567524,0.268238,-0.00826803,-0.00055802,0.179842}
,
{0.0510981,-0.290218,0.405925,0.0943076,0.0816722,-0.0164821}
,
{0.0384954,0.0953353,0.268044,0.0867111,0.0751975,0.00294844}
,
{-0.102686,-0.256496,0.354092,0.0585366,0.0687984,0.223523}
,
{0.127785,0.135938,0.0831325,0.0588468,0.119726,-0.0843455}
,
{0.139072,0.0275308,0.0715596,0.0552966,-0.141789,-0.253231}
,
{0.0649738,-0.0426065,0.155424,-0.267219,-0.0361891,-0.17725}
,
{0.169299,0.0293749,0.0431761,0.068725,-0.0553623,0.0726299}
,
{0.103576,-0.0705253,0.000274603,-0.0780236,0.149134,-0.0347353}
,
{0.00169365,0.0398369,0.0369279,-0.133264,0.0737307,0.0978132}
,
{0.106734,-0.0706567,0.224091,-0.00254986,-0.0480859,0.310608}
,
{-0.0170969,0.0859073,0.13258,-0.172,0.136553,0.130831}
,
{-0.010738,0.0188708,-0.0773057,-0.0546333,-0.0383515,-0.0824856}
,
{-0.0548423,0.0213266,0.128756,0.0701838,0.0367896,0.10592}
,
{0.0871724,-0.155984,0.51841,-0.167137,-0.15662,-0.04227}
,
{-0.356259,0.00216138,0.987865,-0.199741,-0.170356,-0.186155}
,
{-0.0620047,-0.101464,-0.0616175,-0.120934,0.0351756,0.141716}
,
{0.12432,-0.0808098,0.510605,0.0296567,-0.0874358,-0.0200437}
,
{0.129942,-0.203061,0.474869,0.0215758,-0.20477,-0.114574}
 };
  static const float bias2[1] = { 0.176963 };
  static const float weights2[][1] = { {-0.153783}
,
{0.110916}
,
{0.0472288}
,
{0.190596}
,
{0.16381}
,
{-0.135503}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_0_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_0_51(v, index);
}
static int assign_gen_lepton_prior_7_0_51() {
  global_gen_lepton_prior.at(7,0,51) = &specialized_gen_lepton_prior_7_0_51;
  return 0;
}
static int initialize_gen_lepton_prior_7_0_51 = assign_gen_lepton_prior_7_0_51();

template<typename T> float gen_lepton_prior_7_1_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0431863,-0.208254,-0.0725321,-0.139182,-0.326535,0.0397092 };
  static const float weights1[][6] = { {-0.179691,-0.317902,0.176742,-0.210761,-0.596323,0.102692}
,
{-0.112722,-0.0839826,0.193188,-0.0802136,0.243654,0.381903}
,
{0.166223,0.0924915,-0.070753,-0.154302,0.24617,-4.61193e-05}
,
{0.263934,-0.0662558,-0.0313037,-0.243647,-0.74909,0.156107}
,
{-0.0986274,-0.179851,-0.310681,-0.06804,-0.231777,0.0851108}
,
{-0.110251,-0.102862,0.107981,-0.0406232,0.0714392,-0.207106}
,
{-0.0891429,0.183113,0.259117,-0.150682,0.0598926,-0.138656}
,
{-0.109409,0.0836872,-0.143588,0.0402928,-0.227686,0.109478}
,
{-0.116866,-0.0939512,0.0647772,-0.00440158,0.381589,-0.0227973}
,
{-0.00832832,0.115558,0.0994568,0.0738906,-0.119179,-0.00682545}
,
{0.131511,0.110079,0.0298351,-0.037143,0.0717128,0.0163067}
,
{-0.0139348,0.0275963,0.0945302,0.196678,0.021581,-0.0305402}
,
{-0.00261031,-0.109476,0.284463,-0.0199169,-0.164172,-0.0638952}
,
{0.0706048,-0.177203,0.00541823,0.0341033,-0.124074,0.0745065}
,
{0.0409552,-0.277775,0.159221,0.121624,-0.032348,0.408528}
,
{-0.0551603,0.102844,0.170824,-0.0198635,0.0413446,-0.20321}
,
{-0.306694,-0.351875,0.144185,-0.224723,-0.0854017,0.211369}
,
{-0.254243,-0.151125,-0.03202,0.212592,0.12134,-0.202162}
,
{-0.363498,0.00126818,0.161526,0.108401,-0.000120463,0.0517746}
,
{-0.125585,0.0783155,0.219247,0.017085,0.045534,0.0993768}
,
{0.0399873,-0.047626,-0.160847,0.03109,-0.0975777,-0.109627}
,
{-0.0770553,-0.170455,0.0646159,0.0947398,0.00350866,-0.223281}
,
{-0.0178751,0.140711,0.0193589,-0.188663,0.0801653,0.00533595}
,
{-0.166233,0.0284824,0.0142266,-0.153818,0.282203,-0.0997347}
,
{-0.00601602,-0.354388,-0.0775982,-0.152155,0.010627,0.0440541}
,
{-0.147524,0.0258813,-0.141115,-0.183881,-0.183054,-0.030186}
,
{-0.0711429,-0.0641617,0.282595,0.00341162,-0.28492,0.35895}
,
{-0.147674,-0.368865,0.376089,-0.127621,-0.377857,0.226884}
,
{-0.330302,0.0479731,0.144806,0.0741969,-0.249538,0.117937}
,
{0.0568436,0.0879041,-0.052756,-0.146935,-0.188799,-0.112268}
,
{0.0445811,0.133398,-0.015942,-0.0992645,-0.00914119,-0.0328324}
,
{0.0282536,0.149785,-0.0533878,-0.0206045,-0.0254294,0.247311}
,
{0.0196303,0.113015,-0.0341113,0.0634109,-0.0535648,-0.0557505}
,
{-0.194476,0.0175947,0.0949413,-0.0324688,-0.064142,0.0699058}
,
{0.0324656,-0.0318946,-0.0235383,0.142349,0.23766,-0.0583565}
,
{-0.112292,0.0310166,-0.0631082,0.0509924,0.0374373,-0.00586576}
,
{-0.279905,0.051106,0.18932,-0.0167456,-0.302056,-0.080679}
,
{-0.0363965,0.0280474,0.14048,0.0720402,-0.0306899,-0.0173039}
,
{0.115833,0.23804,-0.0103138,0.0164715,-0.128757,-0.0887516}
,
{-0.121808,-0.0978176,0.178919,-0.127018,0.0134715,-0.0732382}
,
{0.0328846,-0.00874355,0.0182562,0.263885,-0.0823357,0.0324428}
,
{0.116254,-0.17708,-0.389917,0.0894996,-0.0598613,-0.180092}
,
{0.0129974,0.10837,0.108411,-0.208307,0.034138,0.0102368}
,
{0.108553,0.12425,0.130049,0.011292,0.30747,0.0182457}
,
{0.265739,-0.00638213,0.181809,-0.00485216,0.154637,-0.139801}
,
{0.0152438,-0.159697,-0.144832,0.00303493,-0.192314,-0.0881176}
,
{-0.315985,0.107068,-0.0173982,-0.0172378,0.183321,-0.0962443}
,
{-0.00252849,-0.179605,-0.160747,-0.0402204,0.0529491,0.0812405}
,
{-0.0749549,-0.226013,0.10491,0.0797851,-0.0359008,-0.26398}
,
{-0.0112553,0.175586,0.122201,0.101956,0.0287046,-0.244354}
,
{-0.0583576,-0.0633476,-0.194856,-0.224597,0.0902626,0.00847794}
,
{-0.11357,-0.143487,-0.259523,0.0363479,-0.125155,-0.283199}
,
{-0.0104177,-0.110479,0.257081,-0.102586,-0.0240743,0.145316}
,
{-0.0556316,0.259349,0.0818159,0.0396118,-0.16979,-0.204028}
,
{-0.198147,0.0393381,-0.00833816,0.153328,0.0254905,0.135924}
,
{-0.174652,0.0136437,-0.0579667,0.00880166,0.0724096,-0.114387}
,
{0.233636,0.0935019,0.0153153,0.129528,0.200745,-0.298553}
,
{-0.0186167,-0.188133,0.0231426,0.169386,0.0674106,0.242208}
,
{-0.168225,-0.111139,-0.0174807,-0.113492,0.145607,0.138844}
,
{0.124965,-0.0673931,-0.113263,-0.0676199,0.0074474,-0.0412361}
,
{0.0858284,-0.079574,0.0482057,0.104376,-0.0653251,-0.122407}
,
{0.159175,0.233381,0.373361,0.210541,-0.206286,-0.263639}
,
{0.00856432,0.0881112,-0.154904,-0.131951,0.134737,0.0458031}
,
{0.0479882,0.00181144,-0.244616,-0.106209,-0.0660292,0.12934}
,
{0.21028,0.147816,0.124026,0.0977428,0.122451,0.125806}
,
{-0.0254247,0.120459,-0.0456524,-0.129596,0.0329054,0.0882992}
,
{-0.132776,-0.0316688,0.1634,-0.275831,-0.199538,0.199468}
,
{0.187625,0.0171814,-0.138097,-0.111079,0.0257059,0.190081}
,
{0.0726707,0.257167,0.011388,-0.0282297,0.0464937,0.0458959}
,
{0.175403,0.0768422,0.0369831,0.0290267,0.216916,0.150765}
,
{0.0475722,-0.0826769,0.20913,-0.0573981,0.0132566,-0.143407}
,
{-0.0846862,-0.053817,0.109053,-0.242416,-0.0459979,0.142603}
,
{0.0156056,0.0754688,0.192244,0.0548133,0.435565,0.0809469}
,
{0.0417638,-0.107908,0.0108936,-0.121666,0.175059,-0.208174}
,
{-0.0459312,0.0779398,0.39677,-0.24239,-0.129857,-0.25605}
,
{0.144106,-0.014694,0.107398,-0.0841131,-0.152968,-0.158223}
,
{-0.0823658,-0.0769831,0.278984,-0.151124,0.375448,-0.116667}
,
{-0.0629297,0.0491587,0.177806,0.10658,-0.120863,0.0770091}
,
{-0.027786,-0.0185193,0.148805,-0.261318,-0.136374,-0.041242}
 };
  static const float bias2[1] = { 0.318531 };
  static const float weights2[][1] = { {0.082314}
,
{0.170672}
,
{-0.04945}
,
{0.00125386}
,
{0.0949123}
,
{-0.124047}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_1_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_1_50(v, index);
}
static int assign_gen_lepton_prior_7_1_50() {
  global_gen_lepton_prior.at(7,1,50) = &specialized_gen_lepton_prior_7_1_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_1_50 = assign_gen_lepton_prior_7_1_50();

template<typename T> float gen_lepton_prior_9_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.069548,0.446761,-0.130219,0.0427061,0.121148,-0.0249465 };
  static const float weights1[][6] = { {0.284887,0.204503,-0.0680419,0.0291269,0.12833,-0.275476}
,
{0.0137348,0.467365,-0.05427,0.00657706,0.100759,0.257384}
,
{-0.151633,0.363727,-0.0388381,0.0122424,0.321058,0.0629135}
,
{0.403978,0.576716,-0.0789541,-0.0572751,0.205899,-0.680555}
,
{0.194522,0.305592,0.0541668,-0.047826,0.042872,-0.19545}
,
{-0.125515,0.211615,-0.340363,0.0972395,0.135021,0.197445}
,
{-0.0162227,0.292084,-0.0151403,-0.0708702,-0.058062,0.421456}
,
{-0.0710489,0.279872,0.00947771,0.0783501,0.160206,-0.0374673}
,
{0.109966,0.147868,-0.0559514,0.112404,0.0174973,0.0555289}
,
{-0.0772784,0.189698,0.196167,-0.0370078,-0.0813006,0.0472043}
,
{0.174222,0.00151051,0.0061554,0.185001,-0.16355,0.0412175}
,
{0.0593865,0.159074,-0.030733,-0.0987577,0.0542407,-0.0174649}
,
{0.254055,0.156574,-0.0118907,-0.0117159,0.0901487,0.0907867}
,
{0.457608,-0.248328,0.137212,-0.00820009,0.445481,-0.201037}
,
{-0.0979367,0.027947,-0.0988907,0.0101327,-0.0276074,-0.032115}
,
{0.0771414,0.0725389,0.00341215,0.0883408,-0.0691726,-0.0771582}
,
{0.905154,-0.459926,-0.0919312,0.352431,0.710416,-0.709962}
,
{0.266705,-0.171279,0.146889,0.105735,0.205118,0.200364}
,
{-1.16282,1.07935,0.13709,-0.481063,-1.15275,1.81841}
,
{0.0191127,0.0604001,0.0325244,0.0573778,0.158443,-0.0118329}
,
{0.0832581,-0.123885,-0.0442339,0.142828,0.00534495,0.067559}
,
{0.00338621,-0.0739727,-0.104441,-0.0461831,0.144496,0.0649827}
,
{-0.0879059,0.170572,0.115175,0.0402152,0.0724777,-0.0217206}
,
{0.0786656,-0.0648266,-0.0647985,-0.0347091,0.0463911,0.0873336}
,
{0.218936,-0.074167,0.105672,0.0127274,0.244996,0.332603}
,
{-0.0323308,-0.0118515,0.136088,-0.0743831,0.150206,0.100396}
,
{-0.0604077,0.212979,0.103355,0.015441,0.276839,0.0575418}
,
{-0.052017,-0.0749919,-0.134569,0.143349,-0.111326,-0.115412}
,
{0.296669,-0.920624,-0.0278718,0.382238,0.182315,0.136961}
,
{0.0285782,0.0119796,-0.0831403,-0.0817367,-0.0185474,-0.019329}
,
{0.0668062,0.165286,-0.0616373,-0.188018,0.106836,-0.095818}
,
{-0.129595,0.0110419,-0.346387,0.158903,0.136555,0.0206929}
,
{-0.0422965,-0.0645438,-0.166377,-0.0586792,-0.086925,-0.0780761}
,
{-0.077625,-0.0293576,-0.0410394,0.0621247,0.0070484,0.00993466}
,
{0.0153406,-0.11618,0.0583944,-0.0482516,0.0673439,0.0906283}
,
{-0.00383596,-0.0465515,-0.0297999,-0.0328523,0.125015,0.0848789}
,
{-0.10137,0.0781241,-0.130721,0.0341314,0.0985341,0.00319407}
,
{0.0721996,0.091582,0.233607,0.0673074,-0.0281138,0.00892246}
,
{0.0942497,0.0728419,-0.0820842,-0.113761,-0.171407,-0.0886359}
,
{0.0191815,0.0854857,-0.140944,0.135306,0.0934271,0.0910468}
,
{0.0439994,0.00567017,0.0927652,-0.0751567,-4.87886e-05,0.00875708}
,
{-0.0826329,-0.168687,-0.0014236,-0.15181,0.16933,0.0633366}
,
{-0.0733945,-0.0578101,-0.153571,0.0475951,0.0636566,0.0546288}
,
{0.0232316,-0.00269024,-0.0918674,-0.0452045,-0.0116018,-0.00237908}
,
{-0.0160718,0.051122,-0.0985564,0.154339,0.0378567,0.075541}
,
{0.0167174,-0.0298364,0.0926691,-0.022375,0.0892404,0.0706758}
,
{0.142914,-0.00604783,0.299498,-0.129005,0.0966351,0.124517}
,
{0.0399452,0.119183,-0.104781,0.122265,-0.0335341,0.0264803}
,
{0.0623335,0.0737776,-0.10019,-0.00979784,-0.116788,-0.029649}
,
{-0.0593427,-0.109311,-0.0188429,0.000812679,0.114751,0.0368805}
,
{-0.0523644,-0.0312675,-0.110983,0.0504848,-0.0260782,-0.0363367}
,
{-0.0976326,-0.159746,-0.220655,-0.274466,-0.116795,-0.209485}
,
{-0.0247875,0.0272171,0.00762851,-0.025226,-0.0495462,-0.0754238}
,
{-0.0258169,0.130957,0.034776,0.186299,0.0222186,0.0243658}
,
{-0.0237052,0.0546316,0.00530098,0.0162576,-0.0282931,-0.0338657}
,
{0.00153191,-0.07217,-0.0419232,-0.156553,-0.0351335,-0.0390928}
,
{0.00317054,-0.0206247,0.00165528,-0.0424777,-0.0860984,-0.131097}
,
{0.169681,0.109097,0.0895693,0.232212,0.253968,0.0424849}
,
{-0.0224347,-0.00625298,0.0968109,0.0858911,-0.0751547,0.00984899}
,
{-0.015824,-0.178689,0.0860427,-0.145074,-0.0429573,-0.0315754}
,
{0.0202953,0.132062,0.0621222,0.189565,0.00579857,0.0190237}
,
{-0.032942,0.0380297,-0.107268,-0.112637,-0.0774719,-0.15783}
,
{0.46739,0.798894,-0.094793,-0.839364,0.160873,0.111971}
,
{-0.0134923,0.024087,-0.17328,-0.00331879,0.0581955,0.0268406}
,
{0.000359038,-0.16178,0.0216568,-0.295208,-0.157682,-0.109046}
,
{0.0813992,0.0710225,0.283632,0.00322517,-0.0209496,0.0189131}
,
{-0.126974,-0.088695,-0.0456897,-0.0129807,0.0811507,0.125473}
,
{-0.328813,-0.153977,0.110464,-0.524114,0.126407,0.0513035}
,
{0.154795,0.28254,-0.0996743,-0.18742,-0.0294491,-0.0809308}
,
{-0.0554841,-0.284764,0.141996,-0.0168554,-0.206139,-0.0658297}
,
{-0.0244628,-0.00548785,-0.0762048,0.0326492,-0.0759466,-0.0872524}
,
{-0.0320559,0.145058,-0.179624,-0.127203,-0.0584548,-0.13168}
,
{-0.134446,-0.257834,0.192524,0.350861,0.145224,0.229187}
,
{-0.0210977,-0.090557,0.127018,-0.0861325,0.105216,0.0237869}
,
{0.419929,0.283982,0.117401,0.0123069,0.161825,-0.103799}
,
{0.0398554,0.171193,0.0326582,-0.104006,0.197052,0.0123329}
,
{0.0465,-0.497934,0.184908,-0.0481013,0.112263,-0.475917}
,
{-0.11638,0.0323653,-0.0145817,0.0602788,-0.0336064,-0.0425355}
,
{-0.1702,0.0557613,0.178993,-0.270563,0.0177038,0.237058}
 };
  static const float bias2[1] = { 0.227175 };
  static const float weights2[][1] = { {0.0781129}
,
{-0.0554105}
,
{-0.0177088}
,
{0.060246}
,
{0.0704293}
,
{-0.100993}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_0_0(v, index);
}
static int assign_gen_lepton_prior_9_0_0() {
  global_gen_lepton_prior.at(9,0,0) = &specialized_gen_lepton_prior_9_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_0_0 = assign_gen_lepton_prior_9_0_0();

template<typename T> float gen_lepton_prior_9_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.217974,0.231329,-0.0580077,0.117605,-0.0518853,-0.0393605 };
  static const float weights1[][6] = { {-0.216469,0.190279,-0.0358887,-0.0796732,-0.850867,-0.141694}
,
{-0.170332,0.266645,0.0553285,0.399485,-0.0306275,0.0577275}
,
{0.0264133,0.336174,-0.138052,0.0409115,0.33611,-0.111629}
,
{0.808711,0.0831382,-0.222823,0.333924,-0.138416,-0.157278}
,
{0.153474,0.390513,-0.169193,0.0721022,0.158399,-0.114855}
,
{-0.117711,0.241503,-0.0703725,0.000793702,0.180018,0.218284}
,
{-0.0300693,0.346686,-0.0856069,0.0889653,-0.109096,0.0944003}
,
{-0.0543017,0.117366,-0.258071,-0.115951,-0.0740187,0.122484}
,
{0.119296,-0.0332214,0.126354,-0.187917,-0.19656,0.236297}
,
{0.0120967,-0.0515274,0.0877896,0.0240578,-0.00426231,0.02964}
,
{-0.137761,-0.0258997,-0.045287,0.0574272,0.102572,0.132748}
,
{0.121773,0.0551212,-0.0024515,-0.0941977,0.0646541,-0.0684959}
,
{0.234862,0.286219,0.00115241,-0.0154557,0.113175,-0.106004}
,
{-0.103084,-0.108939,0.111605,-0.0102211,0.269456,0.0510858}
,
{0.121678,0.167781,-0.135935,-0.0650841,0.00503518,0.0998071}
,
{0.236201,-0.0326004,-0.0460265,0.0104235,0.135064,-0.0219228}
,
{0.720215,-0.293246,-0.238483,0.282326,0.687805,0.523086}
,
{0.304738,0.322631,-0.045746,0.21602,0.0292576,0.0790024}
,
{-1.77134,1.84195,1.62868,-1.28675,-2.05886,-1.60883}
,
{-0.0290034,0.0574446,0.0809762,0.00559925,0.239539,0.181263}
,
{0.151992,0.0427172,0.192744,0.131848,-0.00831832,0.19328}
,
{0.0207641,0.0677957,0.232944,0.234472,0.0792788,0.0464969}
,
{-0.167534,0.0737682,-0.116313,-0.13805,0.0360348,-0.0944519}
,
{0.140799,-0.0205335,0.0312126,0.0386179,-0.034537,-0.0917932}
,
{-0.230052,-0.118592,-0.0954214,-0.299954,0.112572,-0.0818531}
,
{-0.15045,-0.00215256,-0.0940607,-0.283499,0.0198148,-0.0368238}
,
{0.0307246,0.177471,-0.0408571,0.19679,0.142789,0.00193073}
,
{-0.0993392,0.149758,-0.111573,-0.268712,0.0134841,0.146064}
,
{0.290212,-0.388642,-0.612259,-0.257824,-0.213509,0.231614}
,
{0.132168,0.169504,0.0965553,0.0210374,0.0413523,0.0678716}
,
{-0.0577007,0.00457921,-0.0874277,-0.0202763,0.0156934,0.174998}
,
{0.167415,0.188508,-0.222643,-0.241295,-0.013846,0.0515109}
,
{-0.0221966,-0.0822435,-0.0507623,0.00399056,-0.0413772,-0.0388601}
,
{-0.176409,0.0525188,0.0253087,0.0516571,0.0236036,0.0836992}
,
{0.130914,0.0129795,-0.105931,-0.0590707,-0.0695021,0.0193089}
,
{-0.0322779,0.0732422,-0.0854977,-0.0205013,-0.0444393,0.0974088}
,
{-0.0907211,-0.136123,0.105191,-0.104269,0.128319,-0.0910063}
,
{-0.0147075,-0.0232244,0.0272835,-0.0219736,0.0308141,-0.00121525}
,
{-0.182228,-0.10423,-0.0162929,0.0282566,-0.00756559,0.02066}
,
{0.0679751,0.0017306,0.00286689,-0.0294193,0.0143282,-0.0473115}
,
{0.0377553,0.0276316,0.0911362,0.110299,-0.0269782,0.0271619}
,
{0.104257,-0.0199396,0.142466,0.110251,-0.0412425,-0.0336891}
,
{-0.0290266,-0.0190555,0.0937086,-0.00803693,0.063236,-0.0121297}
,
{-0.0455621,-0.0511388,0.0460274,0.0484602,-0.0083631,0.00398383}
,
{-0.00276404,0.0562291,0.170868,0.0878036,0.0589548,0.0648357}
,
{-0.0194635,-0.101307,0.0545231,-0.0134586,0.0532606,-0.0894982}
,
{0.0602399,0.038682,-0.0226479,-0.00230209,0.00470343,0.00821939}
,
{-0.0318002,-0.00310631,0.177039,0.0836988,0.0740972,-0.00114327}
,
{0.110801,-0.0605339,0.105941,0.0995287,-0.0142387,-0.118778}
,
{-0.103509,-0.0121554,-0.0316323,-0.0202896,0.0117859,0.0443176}
,
{-0.0510209,-0.12021,-0.00127678,0.0158336,0.00752107,-0.0948589}
,
{-0.155442,0.0390718,0.00196248,0.0929565,-0.0329397,0.0281684}
,
{-0.0191492,-0.0313168,0.158503,0.0426742,0.0809521,-0.0400884}
,
{-0.0926004,-0.102275,-0.0471566,0.00544605,-0.0456956,0.00704362}
,
{-0.104629,0.0476234,0.0959559,-0.0215929,0.00558882,0.154077}
,
{0.0466699,-0.12943,0.0549776,-0.160547,-0.0382565,0.0374221}
,
{0.0126117,0.319593,0.0377815,0.00435457,0.0940327,-0.0283127}
,
{-0.667998,0.135892,-0.0147958,0.104783,0.177466,-0.000306335}
,
{0.0715896,-0.102627,0.0350883,-0.240092,0.0179415,0.00411793}
,
{-0.105811,0.0628265,-0.0263871,0.0375909,-0.0171483,0.0286043}
,
{0.047885,0.0275719,-0.0474063,0.101605,-0.00726231,0.028512}
,
{-0.104719,0.023933,0.138316,-0.239522,-0.00928366,0.298906}
,
{0.390085,-0.276277,0.357373,0.017301,-0.0576212,-0.145749}
,
{0.460337,0.0284093,-0.0213951,0.24693,-0.0905488,-0.124882}
,
{-0.0902617,0.21473,-0.0321754,-0.121116,0.128299,0.0304182}
,
{0.0779966,-0.121967,0.0584879,0.096193,-0.0588546,-0.0340884}
,
{-0.0322117,0.0634478,0.151536,0.299304,0.077173,-0.150329}
,
{0.0293658,-0.0926432,0.593066,-0.0820781,-0.282791,0.0498222}
,
{0.278333,0.0390304,-0.282405,-0.150577,0.047126,-0.141037}
,
{0.00353219,0.111175,0.214035,0.0418542,-0.0563812,0.138302}
,
{0.000864521,-0.0920614,-0.0623177,-0.169957,0.0122634,-0.0404572}
,
{-0.276467,-0.067457,0.213914,0.180735,-0.062764,0.129705}
,
{0.214875,-0.112516,0.673182,0.315011,0.0462625,-0.429607}
,
{0.0241333,-0.0851294,0.130296,-0.0350861,-0.00332356,0.0680483}
,
{0.414502,0.219517,-0.215141,-0.380347,-0.0914319,0.0868694}
,
{0.695997,0.0783377,0.0803519,-0.1867,-0.134918,0.166494}
,
{0.688615,0.11536,0.278714,-0.0801869,0.100926,-0.00596508}
,
{-0.0449066,0.153825,0.0885228,0.222378,-0.0241697,-0.0155268}
,
{-0.279336,-0.56174,-1.04917,0.36895,0.292226,0.451144}
 };
  static const float bias2[1] = { -0.0286115 };
  static const float weights2[][1] = { {0.0729203}
,
{-0.105746}
,
{-0.128224}
,
{0.112026}
,
{0.19277}
,
{0.119945}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_1_0(v, index);
}
static int assign_gen_lepton_prior_9_1_0() {
  global_gen_lepton_prior.at(9,1,0) = &specialized_gen_lepton_prior_9_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_1_0 = assign_gen_lepton_prior_9_1_0();

template<typename T> float gen_lepton_prior_9_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.136276,-0.204266,-0.174229,-0.0529484,0.000987848,-0.19396 };
  static const float weights1[][6] = { {-0.0623604,0.0310852,0.0264756,-0.164074,-0.0401968,-0.0941457}
,
{-0.0562566,-0.184032,-0.105643,-0.0792047,-0.479144,-0.210348}
,
{-0.144129,-0.326199,-0.629274,0.191725,0.164818,-0.211079}
,
{-0.0292874,0.0384904,-0.209926,0.0033581,-0.0453219,-0.424707}
,
{-0.0740246,-0.204317,-0.197414,-0.000774632,0.13417,0.0468758}
,
{-0.169213,-0.326407,-0.157048,0.131534,0.078653,-0.120299}
,
{-0.162985,-0.0202869,-0.227328,0.0407848,0.135083,0.099658}
,
{0.0285443,-0.206011,0.0575618,-0.000214435,-0.0507348,-0.0649168}
,
{0.305706,0.196168,0.101106,0.00126027,0.225839,0.137717}
,
{0.162191,0.0162047,0.0838117,-0.191772,-0.222586,0.0500461}
,
{0.0931336,0.122323,-0.104532,0.0424565,0.00140302,0.0332578}
,
{0.047393,0.079151,0.0787436,-0.0417597,0.0494447,0.240085}
,
{-0.168235,-0.0412037,-0.094903,-0.0708224,0.0514744,0.167222}
,
{0.147347,0.657596,0.124432,0.178673,-0.261107,0.492503}
,
{0.140366,0.109877,0.0517383,-0.0490568,0.174026,0.162551}
,
{0.00820776,0.0598092,-0.193322,-0.0609604,0.210501,-0.0067082}
,
{-0.0213479,-0.115734,-0.288943,-0.000337567,0.171136,-0.0288955}
,
{-0.0099981,-0.23359,0.0950175,-0.165877,-0.159133,0.189802}
,
{0.0629195,0.0700388,-0.0580482,-0.0405442,0.0309105,-0.0130604}
,
{0.281604,0.198386,0.177487,-0.0889947,0.16043,0.223267}
,
{-0.0999967,-0.129083,0.144403,-0.0560067,-0.153402,0.11831}
,
{-0.147227,-0.0924482,0.200774,0.144604,0.0752279,-0.00313902}
,
{-0.0383056,-0.0493353,-0.0516234,-0.0653078,-0.099063,-0.00744955}
,
{-0.0645486,0.0323769,-0.0455298,-0.0122612,-0.0325989,0.0543174}
,
{-0.238032,-0.000942495,0.0501227,-0.071254,0.108423,-0.188597}
,
{0.00630411,-0.220832,-0.0548223,-0.0023129,-0.115661,0.0933965}
,
{-0.136593,-0.169027,0.0380679,-0.156025,-0.0300256,-0.196302}
,
{-0.0923386,0.184891,-0.0805134,-0.353143,0.0930393,-0.0687184}
,
{-0.108941,0.140913,-0.308137,-0.0507357,0.220637,-0.244039}
,
{-0.130041,-0.0807942,-0.0746314,0.332529,-0.000832181,-0.0671817}
,
{0.0261858,-0.0671267,-0.039193,0.0593267,-0.138035,-0.125646}
,
{0.0520103,-0.285204,-0.107846,0.0760571,0.00442048,0.204093}
,
{-0.0752838,0.0618822,-0.100094,0.0151562,-0.136661,-0.0312972}
,
{0.0931452,-0.0248752,-0.0574672,-0.0935419,0.0349511,0.0779223}
,
{0.0766618,-0.191079,-0.0350873,0.247874,0.0599347,-0.0346384}
,
{-0.0854713,0.0843375,0.112615,-0.125673,-0.0864525,-0.0534989}
,
{0.0426168,-0.0222666,0.119067,-0.00667686,0.182376,0.114378}
,
{0.041117,-0.093702,0.131632,-0.0079116,0.0477961,-0.0164554}
,
{0.127158,-0.046863,0.170079,-0.103663,-0.0849242,-0.298164}
,
{0.122707,-0.119794,-0.107236,0.0923793,0.0200115,0.0867986}
,
{-0.0508157,0.0937981,0.108722,-0.0497326,-0.00149101,-0.14694}
,
{-0.147593,-0.00672638,-0.0126095,-0.0731793,-0.0171347,0.0377691}
,
{-0.034363,0.0383719,-0.0571851,-0.0080942,0.0993488,0.148835}
,
{-0.0611515,0.176865,0.0310076,0.0174272,0.11918,0.0205533}
,
{-0.00556936,-0.0136539,-0.0155539,-0.111801,-0.153204,-0.0592445}
,
{0.00105684,-0.0570175,0.0475785,0.0443294,0.0371265,0.0234335}
,
{-0.068718,-0.242069,0.263562,0.131445,0.141542,0.0193539}
,
{0.0207507,0.0904484,-0.0383078,-0.0311651,0.00867177,-0.0320452}
,
{0.034317,0.182731,0.0282172,0.0126387,0.104353,-0.0636516}
,
{-0.0169004,-0.0756204,-0.0947502,-0.00407561,-0.0166885,0.208594}
,
{0.0314082,-0.0431049,-0.0953464,0.0523268,-0.00129548,0.0739558}
,
{-0.0297831,-0.084857,-0.10409,0.168864,-0.138629,-0.0695397}
,
{0.0823955,-0.0215398,0.0914475,0.031819,0.14864,-0.00569249}
,
{-0.00658711,0.0105077,-0.200813,-0.11713,-0.0404185,0.227082}
,
{0.00478305,-0.223014,-0.136162,0.0764867,-0.241359,0.0723216}
,
{-0.00406921,0.00496289,-0.0217376,0.0108699,0.0479978,0.000990032}
,
{-0.032238,-0.153055,0.0816665,-0.00750228,0.109356,-0.130798}
,
{-0.118283,0.828029,0.299648,-0.33206,-0.0286818,-0.470715}
,
{-0.067539,0.0669407,0.0778798,0.127353,0.0321529,0.053752}
,
{-0.0187775,-0.0235215,-0.0552002,0.03921,0.0298975,-0.00866386}
,
{0.0131727,0.0152007,0.0350882,-0.0221331,-0.0435098,-0.0139984}
,
{-0.0678416,-0.166086,-0.0951468,-0.00436664,-0.0428808,0.071633}
,
{0.00752644,-0.500022,-0.183962,0.0854724,-0.15905,-0.0175052}
,
{-0.0888931,-0.0432505,-0.0196547,-0.0873243,-0.292432,0.022311}
,
{-0.00685507,0.0121872,-0.067025,-0.0395281,0.00786725,-0.0696682}
,
{-0.0103695,-0.0661732,-0.0161512,0.0517921,-0.0108241,-0.0692102}
,
{0.195472,-0.167781,0.0285233,-0.0060234,-0.0961418,-0.063255}
,
{-0.0472375,0.656794,0.0922481,0.053227,-0.103838,-0.0775756}
,
{-0.169857,-0.0175394,-0.0313622,0.024008,-0.079584,-0.0531822}
,
{0.000504349,-0.0997642,-0.0288104,0.0292072,0.0255448,-0.143079}
,
{-0.0329268,0.0674129,-0.0900644,-0.0934817,-0.310891,0.00616268}
,
{0.00300913,-0.11822,-0.0556176,0.051192,0.090645,0.0178718}
,
{0.0392659,-0.479746,-0.292167,0.0800331,-0.0737891,0.0213767}
,
{0.00652015,-0.00282658,0.225784,0.0386167,-0.18161,0.0040794}
,
{0.191906,-0.587334,0.103558,0.140345,0.00339678,0.0638559}
,
{0.0639614,-0.0403112,0.25321,0.177118,-0.191054,-0.0379267}
,
{0.0215627,-0.952473,0.178399,0.10014,-0.0516547,-0.00100789}
,
{-0.00986817,0.00984814,-0.115163,0.0138362,-0.105744,-0.0330703}
,
{-0.135178,0.59812,0.00449163,0.0945562,0.0667494,-0.0798783}
 };
  static const float bias2[1] = { -0.370111 };
  static const float weights2[][1] = { {0.0981928}
,
{0.0701523}
,
{0.0623349}
,
{0.0986589}
,
{-0.113542}
,
{0.0532367}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_2_0(v, index);
}
static int assign_gen_lepton_prior_9_2_0() {
  global_gen_lepton_prior.at(9,2,0) = &specialized_gen_lepton_prior_9_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_2_0 = assign_gen_lepton_prior_9_2_0();

template<typename T> float gen_lepton_prior_10_0_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.017713,0.0159831,0.181632,-0.0159346,0.0646481,-0.131989}
,
{0.104383,-0.0220128,0.121451,0.0900365,-0.208275,-0.114093}
,
{-0.0566348,0.144362,-0.12926,0.108021,0.0242934,-0.155716}
,
{0.242424,0.134553,-0.0674794,0.00622247,0.191605,-0.180576}
,
{-0.0687306,0.00679921,0.0515686,0.0809816,0.105218,0.102058}
,
{0.196531,0.103866,-0.0671749,0.0217,0.070054,-0.0307884}
,
{0.0253392,0.115,-0.150287,0.0785336,-0.156664,-0.0398766}
,
{-0.00892807,0.0891226,-0.119866,0.00559061,-0.0425041,0.0566411}
,
{0.209861,0.136828,-0.0948999,0.0324101,0.171628,-0.0451401}
,
{0.168174,-0.0338245,0.0562582,-0.177543,-0.0120159,0.167672}
,
{-0.220819,0.0836065,-0.140295,-0.105918,0.000561959,-0.0470483}
,
{0.109003,0.129969,-0.0197692,0.0650245,0.114359,-0.107755}
,
{0.128481,-0.0950451,-0.000646027,-0.169687,0.175506,0.181637}
,
{-0.0287242,-0.0523393,-0.0800263,-0.0883881,0.0863594,0.0762799}
,
{0.0696522,0.0287698,0.110129,0.177532,0.0526345,0.168335}
,
{0.226762,0.162716,-0.0465414,0.0306764,-0.231721,-0.0566935}
,
{-0.0120333,0.0970893,-0.0348072,0.0390094,-0.0369825,0.170741}
,
{-0.110642,0.130033,-0.176383,0.0706791,-0.0907021,-0.0949341}
,
{-0.0251957,-0.104607,0.0466228,0.1047,-0.0298395,0.0480653}
,
{-0.234459,-0.18943,0.0137072,-0.127908,-0.120137,0.018256}
,
{0.0853308,0.00784209,-0.0157024,0.0237646,0.232699,-0.144743}
,
{0.160539,-0.0603988,0.136126,0.0712254,-0.172488,-0.084875}
,
{0.0099444,-0.00125746,0.0490462,-0.137379,0.00743434,0.0976799}
,
{-0.0172981,0.227022,-0.0425049,-0.0582823,0.164486,0.00162338}
,
{0.207565,0.176995,0.00623543,0.0285968,-0.0154152,-0.000505964}
,
{0.0931241,0.0030825,-0.213365,-0.245897,-0.147649,0.0620078}
,
{-0.19356,0.118825,-0.0799778,-0.0203767,-0.126976,0.0455346}
,
{0.08268,0.0442013,-0.0483688,-0.100101,0.113462,0.00339299}
,
{0.0387875,0.0613576,0.0637028,-0.0174139,0.219795,0.0950075}
,
{0.195054,0.0413185,0.0496995,0.0693797,-0.0787907,0.0535297}
,
{-0.127692,-0.0677133,-0.0440873,0.0842186,-0.00685521,0.238779}
,
{-0.142214,-0.0796395,-0.170998,-0.0652922,-0.085816,-0.167341}
,
{-0.0919937,-0.0945768,-0.0214989,-0.104877,-0.00848265,-0.0775788}
,
{0.11376,0.123338,0.159787,0.0152842,-0.0365861,-0.215089}
,
{-0.104223,-0.038553,0.231966,-0.0617751,-0.00964561,-0.0372283}
,
{-0.00434692,0.135807,0.201316,-0.108195,0.120659,-0.047661}
,
{-0.020994,0.147345,0.0412191,-0.0924217,-0.0374787,-0.0464827}
,
{0.205186,0.0327594,0.140942,0.00275462,-0.125718,-0.0766707}
,
{0.183242,0.113232,-0.127828,0.0836532,-0.0830322,-0.0259306}
,
{-0.106999,0.0761068,0.117475,-0.0929378,0.165334,-0.000304635}
,
{-0.0984901,-0.0230847,-0.0797728,0.0568788,0.0927114,-0.106826}
,
{0.0859744,-0.121477,0.00139745,-0.0311559,0.000459766,-0.0573172}
,
{-0.0178485,-0.0716384,-0.00171117,-0.100993,0.0564401,0.00964399}
,
{-0.0996191,0.186874,0.0558349,0.119071,-0.0138613,0.0435312}
,
{0.0624389,0.0481137,0.0147846,0.121767,0.033622,-0.0758194}
,
{0.232748,0.0821397,-0.0627918,0.093492,-0.0678648,0.224852}
,
{0.23421,-0.144819,-0.0194271,0.00647556,0.0200002,0.0119332}
,
{0.0165493,0.100202,-0.093108,0.0444279,-0.0479112,-0.0210653}
,
{0.0971248,0.127551,-0.0912343,0.160031,-0.148637,0.00488041}
,
{0.0459596,-0.184291,0.110311,0.0124683,-0.150673,0.105573}
,
{-0.0378371,-0.0153514,0.189435,-0.0192052,-0.0175081,-0.0447547}
,
{0.103951,-0.0877021,-0.0515712,0.102125,0.0259296,-0.0729272}
,
{0.0705455,0.0519091,0.122708,0.00538451,0.136184,0.0754834}
,
{0.0518243,-0.0641024,0.174668,0.00124682,-0.063793,-0.139044}
,
{0.101283,0.102918,0.0891119,0.0423802,-0.0334415,0.0598411}
,
{0.0470186,0.0332751,-0.193592,0.0905586,0.0593855,0.00857521}
,
{0.00165127,-0.0703472,-0.147063,0.145909,-0.0130667,-0.0442089}
,
{0.000426355,0.0662492,0.150785,0.121199,0.145092,-0.114927}
,
{-0.0265516,0.0566267,-0.152669,-0.0930431,0.159087,0.0680318}
,
{-0.173696,0.0852062,0.0537601,0.0966897,0.115237,-0.0573745}
,
{0.0434872,0.1046,-0.112108,-0.076357,0.133185,0.0277351}
,
{0.105694,-0.0652569,-0.126923,-0.0044152,0.132387,-0.113402}
,
{0.103576,-0.0842161,0.151224,-0.0392125,-0.156248,0.0456894}
,
{-0.0537211,-0.157707,0.0684807,-0.0345646,0.0131934,-0.227388}
,
{-0.122549,0.0204856,0.199321,0.0615851,-0.1165,0.132262}
,
{0.0407753,0.157575,-0.110063,0.232507,0.0716959,-0.170119}
,
{0.0382123,-0.159345,0.083833,0.0699968,-0.0367226,0.114467}
,
{0.0822643,-0.0801275,-0.0903495,-0.0113428,-0.070713,-0.0408452}
,
{0.00966745,-0.216757,0.116191,-0.0986394,-0.00961682,0.0724701}
,
{-0.00625567,-0.146904,0.133575,0.0121114,0.115696,-0.128533}
,
{-0.0136577,0.0775199,0.123897,0.110088,-0.0756334,-0.0635996}
,
{-0.0503117,-0.116575,0.223084,-0.0722822,0.0258446,-0.221051}
,
{0.0366583,-0.223038,0.119796,-0.1269,0.0039125,-0.217643}
,
{-0.0696698,-0.164938,0.0416556,0.105051,0.186811,0.0767061}
,
{0.0185647,-0.0208823,-0.12555,0.104241,0.0212125,-0.0185266}
,
{-0.0603964,-0.0087341,0.0101652,-0.0674818,-0.0357794,-0.0247096}
,
{0.0147358,-0.0436358,0.0385637,0.115257,-0.20845,-0.045982}
,
{0.00774828,-0.00858341,-0.027552,0.102993,0.0167861,-0.161175}
,
{0.0800447,-0.088513,0.00851227,0.152792,-0.0697952,-0.0199395}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0647365}
,
{-0.160828}
,
{-0.0776522}
,
{-0.0101281}
,
{-0.100998}
,
{-0.175429}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_57(v, index);
}
static int assign_gen_lepton_prior_10_0_57() {
  global_gen_lepton_prior.at(10,0,57) = &specialized_gen_lepton_prior_10_0_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_57 = assign_gen_lepton_prior_10_0_57();

template<typename T> float gen_lepton_prior_10_0_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0260479,-0.074271,-0.0969698,-0.0936346,-0.0412507,-0.0299874 };
  static const float weights1[][6] = { {-0.00582924,-0.00960362,0.227623,-0.0855225,-0.0517198,0.251866}
,
{-0.218608,-0.027128,0.0570113,0.0596533,-0.0461143,-0.24279}
,
{-0.0804403,-0.0832656,-0.0562206,0.0327571,-0.0135801,-0.247283}
,
{-0.136244,-0.229724,0.000587756,-0.194061,-0.097499,-0.143029}
,
{0.0201224,-0.0543736,-0.418616,-0.164031,-0.0043058,0.103935}
,
{0.001919,-0.00646553,0.0275297,-0.155946,-0.0765454,0.208262}
,
{0.131645,0.0313264,-0.0393227,-0.189257,-0.169445,0.134373}
,
{0.290395,0.189215,-0.157416,0.0622773,0.0643195,-0.0881924}
,
{0.0416606,0.127524,0.0914444,0.101145,0.106372,0.00538846}
,
{-0.0182552,-0.0197936,0.0160762,0.00478265,-0.184017,-0.0415674}
,
{-0.0741368,0.142547,-0.128152,-0.026977,0.174175,0.0133791}
,
{0.0241647,-0.125429,0.167702,-0.246272,-0.00258958,0.0330027}
,
{-0.049434,-0.2128,0.247757,-0.0476324,-0.00283725,0.128145}
,
{0.121748,-0.0616896,0.427053,-0.234867,0.0192251,0.171296}
,
{0.0686618,0.00707424,-0.107509,-0.187279,0.0328684,0.000507483}
,
{0.309288,0.0673077,0.460409,-0.0530052,-0.0200833,0.24653}
,
{0.385443,0.0974585,0.400903,-0.118818,-0.0911838,0.230803}
,
{0.173375,0.0252888,-0.198959,-0.00559723,0.115689,0.0552936}
,
{-0.0863437,-0.165788,-0.20439,-0.190518,-0.0550747,0.201598}
,
{-0.0558642,-0.224094,0.0546586,-0.16441,-0.0374075,-0.0351134}
,
{0.154272,-0.147152,-0.0723278,0.0352965,-0.266137,-0.0134307}
,
{-0.0128574,-0.10626,-0.173857,-0.287362,-0.240131,0.0662428}
,
{-0.0524339,0.000645271,0.0594208,-0.214042,-0.187729,0.19205}
,
{-0.127979,-0.0492524,0.128236,-0.275801,0.142923,0.0280909}
,
{0.22843,-0.0366655,-0.0170086,0.104967,0.0339542,0.274509}
,
{0.070351,-0.105745,0.109315,-0.0418961,0.0395808,0.154528}
,
{0.133092,-0.126913,0.212067,-0.092302,-0.0100228,0.205216}
,
{-0.0636099,0.0644508,0.315081,-0.0258069,0.00797369,0.074536}
,
{-0.102074,-0.274111,-0.637634,-0.119364,-0.0838516,-0.0562406}
,
{-0.202455,0.0798014,0.049682,-0.07569,0.173562,0.0209219}
,
{0.067459,0.248485,-0.163154,-0.101105,-0.0966706,0.0742182}
,
{-0.144626,-0.00818103,0.326354,0.031179,-0.205151,-0.131671}
,
{0.0237572,0.0497705,-0.146627,0.0991099,0.032054,0.132406}
,
{-0.0143181,0.0187245,-0.0856666,0.0360046,0.246425,-0.146182}
,
{0.0339404,-0.0689768,0.156599,0.0800162,0.0253482,0.0774188}
,
{-0.143297,0.124818,-0.0228819,-0.175488,-0.036072,-0.0588471}
,
{-0.0485527,0.0198819,0.255403,-0.0287803,-0.0399083,-0.0627004}
,
{-0.15811,0.0276258,0.0888253,-0.110409,0.0637002,0.0648261}
,
{-0.0532866,-0.215835,-0.201969,-0.025323,-0.0868848,-0.0642558}
,
{-0.135708,-0.0127496,-0.0539555,-0.147127,-0.132156,0.114138}
,
{-0.0677291,-0.0254371,0.0254026,0.0570131,-0.0437586,0.103764}
,
{-0.0114856,-0.142755,0.0860926,0.191103,-0.00548616,-0.133675}
,
{0.131496,-0.0479512,-0.130384,0.0608489,0.0523929,-0.0235438}
,
{0.0588158,0.107502,0.25221,-0.000316284,-0.133442,-0.0822545}
,
{-0.0186004,0.0198377,0.0020008,-0.0206284,0.0438972,-0.0317226}
,
{0.0125839,0.0320883,-0.171176,0.116962,0.0778199,0.143826}
,
{0.0162589,0.0935784,0.117409,-0.0174728,-0.298929,-0.214268}
,
{0.0421348,0.147359,0.0239345,-0.0235766,-0.0528887,0.0114868}
,
{-0.0243059,0.0226211,0.123557,-0.0989384,-0.185239,0.0829317}
,
{0.0190653,-0.0329418,-0.00331957,0.0771548,-0.0314522,0.00587323}
,
{-0.190212,-0.0300892,0.0793077,-0.12165,0.130232,-0.00728864}
,
{0.242024,0.123343,-0.0360136,-0.0214735,-0.00294854,-0.144928}
,
{0.00130892,0.0561993,0.110559,0.0454184,-0.035336,-0.0656069}
,
{0.262866,0.0869727,0.0215899,0.202892,-0.0892337,-0.160269}
,
{-0.0724723,0.122989,0.16016,-0.00129417,-0.105427,-0.112268}
,
{0.0279892,0.195583,0.0270596,-0.0744883,0.035631,-0.0529324}
,
{0.230014,-0.0623315,-0.237774,-0.0286886,-0.228448,0.00933684}
,
{0.0768009,-0.140439,0.157254,0.0236784,0.163646,-0.105193}
,
{-0.127587,-0.192011,0.142145,-0.0919259,-0.0823713,0.0526822}
,
{0.112543,0.15082,-0.0672795,-0.0147423,-0.0570322,0.131338}
,
{0.208623,0.0122904,0.0236187,0.123411,0.132123,-0.0252939}
,
{0.0526372,0.0973981,-0.281918,-0.0306705,-0.0346208,0.170729}
,
{0.132083,-0.12006,0.02018,-0.0702918,-0.0449436,-0.158268}
,
{-0.105793,-0.0679719,-0.0829605,-0.0890508,0.147841,0.0623328}
,
{0.0320437,-0.0533106,-0.119368,0.0710247,0.0396039,0.0279}
,
{0.117612,0.0798129,0.0894444,0.118379,-0.158389,0.0940996}
,
{0.114182,-0.157047,-0.172911,-0.09995,-0.0808877,-0.191766}
,
{0.0700892,-0.0642083,-0.0540862,0.072226,0.00130069,0.0377215}
,
{0.137387,0.223873,-0.00436227,0.0269015,0.124753,-0.11136}
,
{0.0805404,-0.0488993,-0.222989,0.00297268,0.0272512,0.178185}
,
{-0.129828,0.123905,-0.00479217,0.0648479,0.0229208,-0.104438}
,
{-0.0126187,0.0140954,-0.0047026,-0.121027,0.00272663,-0.0454952}
,
{-0.132096,-0.159518,-0.0125446,-0.183587,-0.0593846,-0.0708491}
,
{0.041681,0.222895,-0.0186156,-0.0643962,-0.0429951,-0.0747944}
,
{-0.00672354,-0.0502765,0.174514,0.213877,-0.0173293,-0.188164}
,
{0.0266104,-0.109307,0.199446,0.109747,-0.0937572,-0.209599}
,
{0.201972,-0.0983918,0.371254,0.113879,-0.072658,-0.29124}
,
{0.0317659,-0.168499,-0.0968286,0.160675,-0.0129716,-0.323135}
,
{0.139801,-0.114111,-0.080973,0.000654774,0.0220439,0.138373}
 };
  static const float bias2[1] = { 0.0754418 };
  static const float weights2[][1] = { {0.128932}
,
{-0.0326103}
,
{0.167362}
,
{-0.110867}
,
{-0.0448141}
,
{0.127111}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_58(v, index);
}
static int assign_gen_lepton_prior_10_0_58() {
  global_gen_lepton_prior.at(10,0,58) = &specialized_gen_lepton_prior_10_0_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_58 = assign_gen_lepton_prior_10_0_58();

template<typename T> float gen_lepton_prior_10_0_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.224019,-0.0644486,-0.052516,0.190031,-0.0678074,0.0929798 };
  static const float weights1[][6] = { {0.035988,-0.0509657,0.0102756,0.187706,0.11696,0.0595523}
,
{0.592941,-0.0211546,-0.219264,0.499091,0.10822,0.196887}
,
{0.0702588,-0.00773972,-0.182256,0.0999706,-0.120237,0.236334}
,
{0.973555,0.0639402,-0.0128889,0.575336,-0.0683855,0.382964}
,
{0.231456,-0.246591,0.0893,-0.0648615,-0.174421,0.285098}
,
{-0.171919,0.0288923,0.0117588,-0.000399832,-0.0384014,-0.0182545}
,
{-0.239569,-0.145065,-0.185,0.172258,-0.148136,0.0592653}
,
{0.273442,-0.123888,-0.197922,0.0262526,-0.124618,0.066487}
,
{0.173763,-0.0763568,-0.165143,-0.236407,-0.238769,0.022845}
,
{-0.0504235,0.173178,0.0596225,-0.142758,0.210243,-0.0209514}
,
{-0.0566223,-0.000276262,-0.142036,-0.117883,-0.0965697,0.0541044}
,
{0.087906,-0.218714,0.0173021,0.089483,0.0892304,-0.126187}
,
{0.149973,-0.305052,-0.24944,0.0521273,-0.141671,0.201251}
,
{0.0980629,0.139083,0.0248812,-0.0478885,-0.0625903,0.032379}
,
{-0.0357692,0.0177408,-0.0461934,0.0141318,0.164158,-0.131426}
,
{0.472259,-0.214073,-0.0760919,0.316936,-0.100231,0.0258147}
,
{0.431963,-0.183816,-0.132642,0.1816,0.0152136,-0.0177755}
,
{0.0348779,-0.0165626,-0.0912127,0.00574807,-0.0258289,-0.0286964}
,
{0.151506,-0.233822,-0.045523,0.162076,0.0301375,0.121173}
,
{-0.166859,-0.147325,-0.14185,0.0195228,-0.112075,0.0361812}
,
{-0.143728,-0.252632,0.00153434,-0.0604001,0.0158008,0.107477}
,
{-0.0450918,0.102136,-0.0745201,0.022555,-0.0388808,0.156079}
,
{-0.120156,-0.176769,-0.169743,-0.0439603,-0.0660579,0.057152}
,
{0.00390321,0.103654,0.156664,0.0248901,0.166032,0.127119}
,
{-0.0235505,0.118433,0.110666,0.197155,-0.0827192,0.0644058}
,
{0.000693731,-0.0814224,0.0574279,0.326913,0.0122651,-0.0569066}
,
{-0.012174,0.0432787,-0.0470422,-0.070406,-0.128481,0.156233}
,
{-0.0164636,-0.19214,-0.0207463,-0.00125008,-0.0173487,0.0941322}
,
{0.111908,0.0117078,-0.0456553,-0.0666727,-0.0263182,0.150542}
,
{-0.109334,-0.237582,0.0047322,0.0404389,-0.0208507,0.109687}
,
{-0.0717189,-0.0167298,0.123425,-0.0744117,0.00644122,-0.0525907}
,
{0.195207,-0.0812138,0.0418805,0.131815,0.0697777,-0.0408304}
,
{-0.192284,-0.0248663,-0.0424347,0.000676344,0.075375,-0.146263}
,
{-0.128683,0.20685,0.0409528,0.0850314,0.185162,-0.0378436}
,
{0.01774,0.0428146,-0.113608,-0.346368,-0.124367,-0.0915653}
,
{0.047167,0.0449033,0.179122,-0.260853,-0.140036,0.0937278}
,
{0.225182,0.0257467,0.0826628,0.162687,-0.106096,0.0453717}
,
{-0.264037,-0.0923116,0.00158127,0.204546,-0.108162,0.0363067}
,
{0.0674645,-0.080498,-0.230874,-0.0839109,-0.186288,-0.0326294}
,
{-0.0139428,0.146997,-0.108355,-0.00447911,0.0684782,0.180093}
,
{0.075721,-0.0216151,-0.111302,0.0713815,0.122854,0.10062}
,
{-0.113846,0.195201,-0.0855019,0.183519,0.116147,-0.0252771}
,
{-0.147234,-0.143633,-0.109968,-0.105318,0.128126,0.19168}
,
{-0.0563564,0.131533,-0.132624,0.136886,-0.221825,0.148954}
,
{-0.182738,-0.190056,-0.138808,-0.0133155,-0.101759,0.201596}
,
{0.0356731,0.0616761,0.0976882,-0.0958481,-0.0535778,0.154405}
,
{0.565275,-0.0549332,-0.144348,-0.191019,-0.112208,-0.118803}
,
{-0.121469,0.0883979,-0.124253,0.219767,0.161032,-0.0149686}
,
{-0.198311,0.00930395,-0.205424,-0.0848784,-0.152593,-0.0903871}
,
{-0.17729,-0.0221133,0.0649246,0.0934096,0.0600037,-0.0762861}
,
{0.158548,0.0605748,-0.172011,-0.0534586,0.125257,0.0535352}
,
{-0.104171,0.0405512,0.062076,0.0293972,-0.500282,-0.0291901}
,
{-0.162372,-0.0661725,0.0636925,0.184345,0.0985134,0.0692941}
,
{-0.0979438,-0.21199,-0.11986,-0.318757,0.0050552,-0.195932}
,
{-0.038961,0.0993982,0.0559359,-0.0372942,0.128756,0.0860153}
,
{-0.0403264,-0.0790454,0.164226,0.127079,-0.104802,-0.00706687}
,
{-0.170217,0.105975,0.0396423,0.0937603,0.118051,-0.121472}
,
{-0.0544648,-0.101477,-0.211418,-0.179233,-0.0954725,-0.225131}
,
{0.0893039,0.163952,0.185672,-0.235731,0.0459379,-0.0810941}
,
{-0.0844775,-0.00678218,0.157209,-0.0315279,0.0112112,-0.180761}
,
{-0.233415,-0.140794,-0.0378861,0.161357,-0.0323895,0.251552}
,
{-0.010837,0.00190708,-0.156596,-0.0592857,-0.0308579,0.0851414}
,
{0.0247106,0.174037,-0.00686789,-0.220987,-0.0394455,-0.0613468}
,
{0.269185,0.132877,-0.108807,-0.191891,0.0260669,0.16288}
,
{0.243476,0.145538,0.0163731,-0.100345,-0.13986,0.105282}
,
{0.0323217,0.113421,-0.0020069,-0.152729,0.00464191,0.140391}
,
{0.0848299,-0.102803,0.101854,0.0407888,0.000289068,-0.205334}
,
{-0.199875,-0.132847,0.107839,-0.177688,-0.0378343,0.00681759}
,
{-0.25893,0.0705114,-0.139344,0.0931103,0.16378,0.159568}
,
{0.0500629,0.00802728,0.0333462,0.0137171,0.0393229,-0.215274}
,
{0.0292698,-0.121671,0.119411,-0.0368406,0.127613,-0.0485469}
,
{0.229399,-0.137633,0.030922,-0.261777,0.0611289,0.0363237}
,
{-0.149074,-0.189539,0.112949,0.182187,-0.109855,-0.0833481}
,
{0.212245,-0.0292517,-0.0897633,0.0911713,0.102135,-0.0463249}
,
{0.198929,0.0616509,-0.174263,-0.0568517,-0.0225785,0.170199}
,
{-0.120615,0.16913,0.00284432,0.032418,-0.196782,-0.101154}
,
{-0.00219494,-0.100614,-0.100785,-0.0616337,-0.0762833,-0.101178}
,
{0.0177744,-0.0540114,-0.0206327,0.00508012,0.151781,-0.0318223}
,
{-0.136911,0.0682696,0.0272306,0.035929,-0.121245,0.0556411}
 };
  static const float bias2[1] = { 0.0771559 };
  static const float weights2[][1] = { {0.218938}
,
{-0.0585475}
,
{0.0179465}
,
{0.139957}
,
{-0.0925121}
,
{0.132574}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_59(v, index);
}
static int assign_gen_lepton_prior_10_0_59() {
  global_gen_lepton_prior.at(10,0,59) = &specialized_gen_lepton_prior_10_0_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_59 = assign_gen_lepton_prior_10_0_59();

template<typename T> float gen_lepton_prior_10_1_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.280645,0.0323788,0.566244,-0.099496,-0.108646,0.127547 };
  static const float weights1[][6] = { {0.350867,0.292003,-0.0135647,-0.360911,0.00832734,0.276834}
,
{0.0714989,0.0534868,-0.269287,-0.0345918,-0.212234,-0.0593261}
,
{0.152227,-0.442711,0.260298,-0.128157,0.37044,-0.258424}
,
{0.434291,0.340778,1.10828,-0.133818,-0.371762,0.473824}
,
{0.286753,0.0349814,0.478128,0.114318,0.100686,-0.024923}
,
{0.145967,-0.114548,-0.232589,0.0173327,0.316401,-0.146408}
,
{0.129948,-0.251864,0.080711,-0.0181156,-0.0422578,-0.0718655}
,
{0.0941823,-0.197434,0.0558492,0.158765,-0.0482846,-0.0263654}
,
{0.175683,0.0139199,0.322233,-0.0111177,-0.338916,-0.0128951}
,
{0.0368968,0.120427,0.147816,-0.0712744,0.136281,0.165891}
,
{-0.179619,-0.0574486,-0.0661841,-0.00622844,-0.0122484,-0.0460438}
,
{-0.150578,0.110631,0.122488,0.0505321,-0.0814197,0.0398916}
,
{0.168868,0.153818,0.12165,0.0721208,-0.0627794,0.0995794}
,
{0.0742739,-0.0862394,0.121959,-0.134773,0.0169972,-0.0586084}
,
{-0.0659725,-0.0638012,0.110954,-0.0422268,-0.0681182,-0.0636996}
,
{0.248969,0.0574316,0.0594658,-0.235373,-0.219558,0.145806}
,
{0.0526852,0.0403644,-0.00397767,0.0287193,-0.0307712,-0.135969}
,
{-0.181583,0.053944,-0.293957,-0.170535,0.0762632,-0.0133249}
,
{0.117323,0.0519332,0.182171,-0.182816,0.0585528,-0.184843}
,
{0.147256,-0.178239,0.241952,0.017,-0.281388,-0.0596024}
,
{0.0749607,0.0969695,-0.0889046,-0.162055,-0.185734,0.0257774}
,
{0.190889,0.122173,-0.197362,-0.0637153,-0.142797,0.219483}
,
{-0.068686,-0.0066615,-0.0771339,0.105316,-0.0355611,-0.0692001}
,
{0.00297111,0.118598,-0.00564072,-0.114504,-0.155424,0.0859969}
,
{-0.147708,-0.316029,0.0246526,-0.107115,0.00600925,-0.0444689}
,
{0.0211694,0.00890094,0.0662452,-0.0542292,-0.115923,-0.00376685}
,
{-0.132648,0.152709,0.151194,-0.00372643,-0.121742,0.13886}
,
{0.172206,0.12541,-0.309053,-0.147222,0.00336067,0.00718704}
,
{0.464124,0.0890213,0.00147687,-0.327933,0.267173,0.335011}
,
{0.041078,0.0763406,-0.10035,0.0555439,0.104741,0.147355}
,
{0.0375055,-0.101698,-0.0797449,0.14847,0.0680393,-0.00343513}
,
{-0.0425233,0.0490784,-0.062143,0.148075,0.0178237,0.122031}
,
{-0.0756381,-0.180284,-0.173178,-0.166569,-0.0161756,-0.0206656}
,
{0.0951669,0.0573701,0.0166126,0.192076,0.0369989,-0.119761}
,
{0.142443,-0.196841,0.0448132,-0.152562,0.0748088,-0.098992}
,
{0.0651497,0.157539,-0.0145718,0.033988,-0.182465,0.0700626}
,
{-0.0517493,0.278177,-0.166229,0.0194477,0.155439,-0.0317696}
,
{0.078104,-0.0899708,-0.210354,-0.107968,0.103748,0.0576673}
,
{-0.0421732,0.190133,0.0203064,0.0129307,-0.0297874,0.00479659}
,
{0.214184,0.0704393,-0.137472,0.0886471,-0.0942664,-0.20755}
,
{-0.0717429,-0.0872346,0.192966,-0.0896087,-0.0450988,-0.281205}
,
{0.078378,0.0048625,-0.0285444,0.139736,-0.0428443,0.0454778}
,
{-0.039448,0.2336,0.0421894,-0.0336921,-0.00360389,-0.280878}
,
{0.0955435,-0.0596261,0.0241192,-0.0271769,-0.0729067,-0.0957437}
,
{0.0969787,0.108734,0.112162,0.0385894,0.0951632,-0.166156}
,
{-0.259227,0.0751301,0.00565656,0.189126,0.105263,0.0153873}
,
{-0.0776749,0.133241,-0.0408238,0.0119125,-0.137735,-0.0212254}
,
{-0.00210642,-0.256581,0.249811,-0.16764,-0.0686205,-0.0017017}
,
{0.305106,-0.325436,-0.159657,0.0803262,0.0141986,0.063793}
,
{0.112438,-0.0865886,-0.0535819,-0.141727,0.00928876,0.0120828}
,
{0.24594,-0.175178,-0.247092,-0.0900244,0.0170211,-0.131973}
,
{0.0822312,-0.148761,-0.0987583,0.1198,0.0415465,-0.048609}
,
{-0.0249431,-0.0425527,0.0501592,0.184494,-0.0524159,0.0210465}
,
{-0.00336644,0.406051,-0.321135,-0.221356,0.00845148,0.105685}
,
{0.0419718,-0.047652,0.0946167,0.0825766,0.0216748,-0.169796}
,
{-0.0621431,-0.0717023,0.0846131,-0.00492741,-0.102943,-0.0016046}
,
{0.120131,-0.112295,-0.142826,-0.0380779,-0.0175425,0.124895}
,
{-0.0656477,-0.121562,0.281725,0.0844702,0.0506293,0.0833868}
,
{-0.0138345,-0.11535,0.208346,0.0154852,-0.123185,-0.216463}
,
{0.0810705,0.0396377,0.168066,-0.115754,0.0238738,-0.21596}
,
{-0.0305688,0.0527856,-0.156904,-0.0517426,0.00220231,-0.146673}
,
{-0.105002,-0.0728616,0.102339,0.146324,-0.0750106,0.132339}
,
{0.2594,-0.0192416,0.113174,0.244709,-0.325204,0.394276}
,
{0.0124562,0.00197181,0.0859812,0.0497855,0.13031,0.151599}
,
{0.123141,-0.0355597,0.000982487,-0.16137,0.203465,-0.150601}
,
{-0.122658,0.100903,-0.11397,0.0660967,-0.148113,0.0114874}
,
{-0.0838188,0.0439312,0.149545,0.0260718,0.0547951,-0.0256897}
,
{-0.0823686,0.484907,-0.0520877,0.353597,0.159671,0.0534089}
,
{-0.225251,0.0667838,0.1284,0.0971011,0.14196,-0.107243}
,
{-0.0455356,0.0483938,-0.00366404,-0.0738961,-0.0687591,-0.194903}
,
{0.0896824,-0.148178,-0.135705,0.0442095,-0.179097,0.0269357}
,
{0.00268374,0.0813415,-0.0307707,-0.0386511,0.0611337,-0.0533978}
,
{-0.269595,0.707447,-0.38935,0.350343,0.236245,0.21821}
,
{0.0876755,0.136166,-0.0824173,-0.0914552,-0.0944028,-0.0923335}
,
{0.0359029,-0.190438,0.0745445,0.106378,-0.105316,-0.0426709}
,
{0.122375,-0.260713,0.237519,-0.0277267,-0.169465,0.020055}
,
{-0.103069,-0.113427,0.2143,0.206157,0.18822,-0.0395796}
,
{0.0841956,-0.0189601,-0.0559452,0.0749745,-0.180432,-0.0221963}
,
{-0.423748,-0.325391,-0.149373,-0.00327726,-0.111934,0.235994}
 };
  static const float bias2[1] = { 0.107908 };
  static const float weights2[][1] = { {0.0652199}
,
{0.0807185}
,
{0.0839045}
,
{-0.105051}
,
{-0.136839}
,
{0.039092}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_57(v, index);
}
static int assign_gen_lepton_prior_10_1_57() {
  global_gen_lepton_prior.at(10,1,57) = &specialized_gen_lepton_prior_10_1_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_57 = assign_gen_lepton_prior_10_1_57();

template<typename T> float gen_lepton_prior_10_1_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.140025,0.175701,0.297528,0.184657,0.420765,0.28006 };
  static const float weights1[][6] = { {0.426596,0.0487975,-0.495375,-0.816656,0.429786,-0.0924473}
,
{-0.179895,-0.107037,-0.0956087,0.151103,0.625893,0.365837}
,
{-0.30993,-0.220426,0.60326,-0.0587189,-0.0935983,-0.0915069}
,
{0.184927,0.327442,0.783577,0.442353,0.415247,0.720071}
,
{0.263093,0.0348445,0.112358,0.0496496,0.538061,0.378824}
,
{0.266691,0.0054779,0.172328,0.071474,0.305693,0.31158}
,
{0.100138,0.399784,0.0929147,0.25228,0.297898,0.0604223}
,
{0.0452751,-0.272973,-0.0482911,0.19817,-0.284113,0.125916}
,
{-0.0535109,-0.128087,0.259173,0.164131,-0.724844,0.203253}
,
{-0.046523,-0.118081,0.0300632,-0.0205849,0.112405,-0.0318338}
,
{0.0366012,-0.0265855,-0.12521,-0.0383877,-0.0185146,-0.0195079}
,
{0.216643,-0.022658,-0.161826,0.24731,-0.0158499,0.066782}
,
{0.162939,0.130617,0.202045,-0.214914,0.270228,-0.123089}
,
{0.3318,0.0195693,0.268317,-0.00551521,-0.0416887,-0.0934622}
,
{0.0417345,0.0334236,0.182225,-0.0776784,-0.204167,-0.166701}
,
{0.201018,0.165155,0.221374,0.0215744,0.130462,0.12883}
,
{-0.00311517,0.024802,0.434678,0.106631,0.0899566,-0.0176482}
,
{-0.0509498,0.0642921,-0.389888,-0.102217,0.206493,-0.164634}
,
{-0.212843,-0.0283985,-0.0973434,0.0782497,-0.209149,-0.137228}
,
{-0.136417,-0.00642505,-0.100389,0.1231,-0.235322,-0.0189095}
,
{0.0757688,-0.0802031,-0.0629266,0.157219,-0.175232,0.040996}
,
{-0.0394115,0.00456584,-0.111888,0.0898546,-0.300865,0.207671}
,
{-0.0103699,-0.137302,-0.124815,-0.147697,0.109789,0.0445839}
,
{-0.198334,0.041529,-0.108817,0.0674576,-0.162587,-0.0367558}
,
{0.265732,-0.204222,0.0305509,0.073479,-0.0919746,-0.0722712}
,
{0.164279,0.129857,0.205412,-0.32488,-0.0469231,0.0525496}
,
{0.146786,-0.0622555,-0.00229902,0.289206,0.00781154,-0.0660676}
,
{0.00964752,-0.0551648,0.245584,0.131794,0.0890943,0.0837129}
,
{0.108471,0.225083,0.293489,-0.0976408,0.22441,-0.0128242}
,
{-0.0064886,0.155378,-0.00186801,0.18328,-0.105773,-0.0230874}
,
{0.011244,0.162272,-0.0649447,-0.0289445,-0.181716,-0.20816}
,
{0.0250625,-0.0602856,-0.434775,0.554059,0.0267943,0.137669}
,
{-0.0605273,0.0890284,-0.0504393,0.0353878,0.058064,-0.102752}
,
{0.207169,0.101667,0.0460354,-0.00722926,0.150141,-0.0338207}
,
{0.138643,0.110136,0.0672126,0.247913,0.139297,-0.183236}
,
{-0.051568,0.140456,-0.115118,0.0134715,0.159343,-0.0246233}
,
{0.080358,-0.163229,0.11488,-0.0964885,-0.220086,0.15354}
,
{-0.0876885,0.126799,-0.0742589,-0.0461438,-0.0483235,-0.0274039}
,
{0.362773,-0.00617062,0.16165,0.360559,0.184862,-0.180357}
,
{-0.106015,0.200654,0.0556693,-0.138428,0.0178459,-0.171249}
,
{0.12036,-0.0382643,0.160381,0.0624173,-0.0263459,0.0690832}
,
{-0.0209629,0.191123,-0.169746,0.0102085,-0.157999,-0.132906}
,
{0.0601134,-0.0717666,0.123047,-0.0956871,0.0586247,-0.0480634}
,
{-0.0880519,-0.387666,0.495369,0.054837,0.0649745,-0.0990929}
,
{-0.0645089,0.138987,-0.045339,-0.0124519,-0.197071,0.110547}
,
{0.0766186,-0.150124,-0.227074,0.00526826,0.0465051,0.0465557}
,
{0.00811435,0.0713826,0.390609,-0.101652,0.126436,-0.11015}
,
{-0.0223976,-0.0482002,-0.0640081,0.131549,0.0114783,-0.0102187}
,
{-0.0225965,-0.00972973,0.549809,0.0865021,-0.177517,-0.366862}
,
{0.0950326,-0.0403256,-0.125351,-0.0241684,-0.00468984,-0.094664}
,
{-0.109943,0.122826,0.08546,0.146606,0.151596,-0.00733984}
,
{-0.101198,0.0738732,-0.370213,0.205819,0.139095,0.0393284}
,
{-0.0770582,-0.00620085,-0.211378,0.135281,-0.0817219,0.0963151}
,
{-0.47835,0.248041,-0.118006,0.0811388,-0.217445,-0.123992}
,
{0.0821988,0.0500196,0.0216143,-0.158831,-0.131243,-0.149663}
,
{0.120933,0.12476,0.0662747,-0.0637627,0.00703068,0.173537}
,
{-0.00242375,0.0355319,0.0810869,-0.00504234,0.0326505,0.00943788}
,
{0.0626367,-0.00743374,0.0589251,0.0327296,0.146448,0.167077}
,
{-0.259807,-0.0182408,-0.0681859,-0.140256,-0.236563,-0.178902}
,
{0.189419,-0.208192,-0.0319506,0.0350836,0.00716532,-0.0876976}
,
{-0.168276,0.0245914,0.00534328,0.121798,0.0152102,-0.181109}
,
{-0.19401,0.0085056,0.095177,-0.186728,-0.157513,-0.0609578}
,
{0.211775,0.00923272,0.0800835,0.0895615,0.0274415,0.194896}
,
{-0.105859,-0.0751317,-0.287467,-0.624788,0.0321068,-0.0518842}
,
{-0.133108,-0.0551311,0.0227863,-0.315856,-0.190556,-0.126182}
,
{-0.022811,-0.1328,0.0106322,-0.114876,-0.24492,0.0536958}
,
{0.0154931,0.0267677,0.10055,-0.182153,-0.133451,-0.234787}
,
{0.0577774,0.0634065,0.184308,-0.11043,0.000240932,0.0197102}
,
{-0.149031,-0.032124,0.126896,-0.440398,0.100508,-0.375334}
,
{0.124548,-0.0163601,-0.0175293,-0.198603,-0.014549,-0.218624}
,
{0.104996,0.113189,-0.00779118,-0.123048,-0.0897843,0.0408093}
,
{-0.0486249,-0.0541545,0.247257,-0.0343746,-0.09888,-0.11558}
,
{0.0154726,0.0646326,-0.000720093,-0.0871736,-0.19346,-0.175339}
,
{-0.124591,-0.07541,0.197961,0.752868,-0.380983,-0.167726}
,
{-0.0720813,-0.0944316,-0.530773,0.751784,0.00372277,0.305322}
,
{0.149338,0.0953282,-0.617604,0.710869,-0.0463768,0.26192}
,
{-0.0437309,-0.00653807,-0.545795,0.820771,-0.00549974,0.297598}
,
{-0.0248893,-0.0769101,0.221261,-0.0787441,0.0499031,-0.0557757}
,
{0.140165,-0.434993,-0.589815,-0.353998,0.0986922,-0.071096}
 };
  static const float bias2[1] = { 0.102971 };
  static const float weights2[][1] = { {-0.126937}
,
{0.154196}
,
{0.101614}
,
{0.0674373}
,
{-0.167972}
,
{0.144703}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_58(v, index);
}
static int assign_gen_lepton_prior_10_1_58() {
  global_gen_lepton_prior.at(10,1,58) = &specialized_gen_lepton_prior_10_1_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_58 = assign_gen_lepton_prior_10_1_58();

template<typename T> float gen_lepton_prior_10_1_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.0100994,0.0931384,0.104968,-0.0999016,-0.0538847,-0.0494605}
,
{-0.191542,0.0231464,0.00641407,-0.000628131,0.113137,0.143897}
,
{0.00596644,0.133177,-0.151619,-0.131589,-0.0798388,-0.0127718}
,
{0.065446,-0.110718,-0.0505725,0.0547382,0.136987,0.0526757}
,
{0.0429955,0.034037,-0.197865,-0.0726975,0.085818,0.0079292}
,
{0.208912,-0.120516,0.200584,0.0824431,-0.13996,-0.145944}
,
{-0.0556211,0.0917278,0.143353,0.0529191,0.165079,0.120895}
,
{-0.010283,0.184613,-0.048656,-0.0421049,0.0104776,-0.0463802}
,
{0.196893,-0.191065,0.0942587,-0.115388,-0.118694,0.140556}
,
{-0.169734,-0.214647,0.133392,-0.0494488,0.0558402,-0.206497}
,
{0.0844346,0.184068,0.236253,0.188025,-0.0586156,-0.111896}
,
{0.103771,-0.192777,-0.0794231,0.0526726,-0.0530103,0.0831749}
,
{0.128552,0.186183,0.00129347,0.0196182,-0.217914,-0.231641}
,
{0.00695361,0.00745548,-0.0114732,0.0733412,-0.14056,0.145079}
,
{-0.129395,-0.0154917,0.0925302,-0.0349637,-0.0594136,0.0377334}
,
{-0.0552245,-0.239553,0.0968029,0.0166771,-0.0673138,0.117689}
,
{0.131886,0.0273216,0.211535,0.0359588,0.039829,0.0370406}
,
{0.100539,0.207887,0.17809,-0.132633,0.226159,-0.0147776}
,
{-0.209883,0.15812,-0.116575,-0.19617,0.206525,-0.224374}
,
{0.186255,0.0246782,-0.0992733,-0.0457436,0.109292,0.187693}
,
{-0.0384479,-0.151157,0.109659,-0.120092,0.092975,0.0196549}
,
{0.106779,0.0154632,0.0764183,-0.146608,-0.123985,0.0360688}
,
{0.212068,-0.0171381,0.106251,0.0989028,0.0385761,0.200627}
,
{0.179051,0.0563447,-0.0457738,0.168376,-0.00527366,0.0610339}
,
{0.0173333,0.163996,0.108973,0.0770413,-0.0623836,0.161088}
,
{0.013109,-0.0357576,0.091896,-0.0367581,-0.120518,0.148818}
,
{0.21552,-0.0644865,0.0471793,0.0323972,-0.0213768,0.179963}
,
{0.173141,0.00285762,0.0473465,-0.0114277,0.114207,0.158489}
,
{-0.226815,0.191778,-0.18868,0.0847021,-0.0152789,0.104368}
,
{-0.0692971,0.014002,0.225939,0.00427496,-0.249875,-0.0625818}
,
{0.0316646,0.0345123,0.0680495,-0.0568232,0.174604,0.097936}
,
{-0.239394,-0.15136,0.234291,-0.032882,-0.017989,0.0582566}
,
{0.0477507,-0.155088,-0.0440492,0.0170231,-0.087496,0.110389}
,
{0.0945954,-0.0109802,-0.013403,0.163144,0.0362577,0.0419825}
,
{-0.146206,0.0470272,0.0701963,-0.0274871,0.160849,-0.0144153}
,
{-0.13214,-0.144915,0.00287588,-0.110727,0.029749,0.0961275}
,
{-0.0773447,-0.0607821,0.120537,-0.0803427,-0.0534279,0.134194}
,
{0.0513929,0.195573,-0.115238,0.101643,0.200036,0.201053}
,
{0.0343047,0.0524506,0.0116216,-0.105231,0.19367,-0.0562221}
,
{-0.00314962,-0.202694,-0.0018994,0.152018,0.16371,-0.0264673}
,
{-0.108852,0.203249,0.00886144,-0.0603776,0.114447,0.112811}
,
{-0.0518868,-0.157612,-0.169687,0.0275757,-0.0279606,-0.000992901}
,
{-0.116566,0.0167682,0.0719862,-0.00219689,-0.0728443,0.0715426}
,
{-0.00906168,0.122618,-0.118318,0.0100618,-0.0206349,0.0999089}
,
{-0.00500081,0.0566917,-0.145108,-0.165797,-0.057762,-0.0201435}
,
{0.070622,-0.133556,0.0554662,0.00173291,0.0546589,-0.137695}
,
{-0.00209763,0.0625291,0.0315104,0.0136534,-0.125583,0.0457946}
,
{-0.0224224,0.0214672,-0.0474688,-0.0154042,0.163705,-0.0416857}
,
{-0.177198,-0.0579894,0.161581,0.0570292,-0.153515,0.235667}
,
{-0.10789,0.0332682,-0.0499805,-0.117648,0.0727699,-0.0424759}
,
{-0.104293,0.053723,-0.192329,-0.186303,-0.237539,0.0752907}
,
{0.0265142,0.201975,-0.010328,-0.0544794,-0.0317143,-0.137195}
,
{-0.0540165,-0.133203,0.0590402,0.0518228,-0.175385,-0.141439}
,
{-0.0981537,0.0129923,0.195715,0.160173,0.0711532,0.00802499}
,
{-0.104794,0.0960008,-0.0205011,0.0893956,0.11328,0.112187}
,
{0.0867593,-0.115349,0.0356986,-0.0214254,-0.0060907,-0.0768177}
,
{-0.154302,0.120433,0.0118689,0.114534,-0.0837131,0.0292355}
,
{0.105216,0.0730461,0.137847,-0.0311058,-0.0186749,-0.114978}
,
{-0.0450645,0.104007,0.0172296,-0.0145811,0.0137285,0.0494951}
,
{-0.056986,-0.0276043,-0.137591,-0.0467556,-0.239999,-0.118619}
,
{0.0345349,0.219231,0.0229009,-0.0401888,0.109153,0.0407176}
,
{-0.0904912,-0.139774,-0.0519262,0.134801,-0.202921,-0.0166467}
,
{0.24928,-0.0149061,-0.0656696,-0.0600903,-0.0861314,-0.0773117}
,
{0.00289804,0.121446,-0.1763,-0.0498518,-0.021625,0.0463094}
,
{0.112684,-0.130642,0.0164385,-0.077579,-0.00491486,-0.196661}
,
{-0.00737943,-0.24207,-0.241097,0.0433747,-0.116111,-0.0405615}
,
{0.0660299,-0.0280021,0.0831045,0.0242665,-0.0550776,-0.0367554}
,
{-0.0417956,-0.00177575,0.0868693,0.0252227,-0.0849628,-0.203612}
,
{0.0870327,-0.120537,0.112575,0.0605849,-0.10832,-0.0970884}
,
{-0.215912,-0.0617701,6.63529e-05,-0.0648935,0.0573136,-0.0313839}
,
{0.236494,0.153696,-0.20456,0.155828,0.11342,0.116094}
,
{0.0431962,0.142818,-0.151063,-0.138528,-0.157974,-0.210965}
,
{0.00521786,0.151854,-0.00405225,0.0446019,0.0809893,-0.0541023}
,
{0.0311905,-0.206356,-0.10898,-0.195279,0.140741,0.015908}
,
{0.103957,-0.0646498,0.110352,0.13811,0.0558433,-0.0121457}
,
{-0.174519,-0.0995907,0.0584747,0.0126635,-0.214196,-0.0154518}
,
{-0.055605,0.0656366,-0.0982364,0.0757759,-0.0126727,0.0311633}
,
{-0.0267282,0.0993018,0.118811,-0.00736968,-0.10203,0.00667339}
,
{-0.0124889,-0.108073,0.0509221,0.0429145,0.00496053,0.062253}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.22161}
,
{-0.101702}
,
{-0.0797035}
,
{-0.198404}
,
{-0.222151}
,
{-0.134553}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_59(v, index);
}
static int assign_gen_lepton_prior_10_1_59() {
  global_gen_lepton_prior.at(10,1,59) = &specialized_gen_lepton_prior_10_1_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_59 = assign_gen_lepton_prior_10_1_59();

template<typename T> float gen_lepton_prior_10_2_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0928482,0.0141584,-0.122451,-0.096729,-0.203559,-0.127915 };
  static const float weights1[][6] = { {0.452828,-0.35879,-0.603843,0.108249,-0.481619,-0.118661}
,
{0.217865,0.0717181,0.0918436,0.347149,0.106303,-0.1628}
,
{-0.0324658,-0.204109,-0.136878,0.187833,0.128056,0.0642607}
,
{0.0574837,0.116684,0.112961,0.181553,-0.257538,-0.0386477}
,
{0.0926604,-0.20299,-0.229995,-0.021608,-0.156556,-0.195592}
,
{0.261864,-0.136887,-0.133497,-0.429328,0.0130799,-0.143114}
,
{0.0144361,-0.0641287,0.00912368,-0.315301,-0.234018,0.0104501}
,
{0.0137278,0.127151,0.0925954,0.0574796,-0.456351,-0.131864}
,
{-0.0789001,0.151105,0.194533,0.225967,0.000605976,-0.170888}
,
{0.104574,-0.0433388,0.141555,0.0196887,-0.0432684,-0.054704}
,
{0.00505339,-0.112338,0.0250273,-0.00299037,-0.122314,-0.0779548}
,
{-0.150177,-0.0170922,0.157112,-0.00738818,-0.117535,-0.00975155}
,
{0.182433,-0.0352473,0.0091151,0.0546923,-0.0270469,-0.0367236}
,
{-0.152939,-0.191478,0.275747,0.00491924,0.12193,-0.100324}
,
{-0.142361,-0.0338414,0.14852,0.00602081,-0.147603,0.00182885}
,
{-0.0573456,-0.0780615,0.233397,0.00601734,-0.113073,-0.0110757}
,
{-0.0912397,0.0124121,0.352923,-0.0289541,-0.0567138,-0.205257}
,
{0.0606684,0.0433449,0.0440779,-0.167118,0.0367307,-0.273393}
,
{-0.220214,0.0778064,0.251013,-0.0793572,-0.166628,0.0947842}
,
{-0.036565,0.253398,-0.0957569,0.103952,0.110144,-0.111157}
,
{-0.0923614,0.103789,-0.0956416,0.0599301,-0.00299293,-0.144675}
,
{-0.0323915,0.0751892,-0.185149,-0.104709,0.0829708,-0.23547}
,
{0.0969859,-0.0517091,-0.0822913,0.0605457,0.0908146,0.128042}
,
{0.152754,0.192543,-0.107912,0.153647,-0.0925519,0.0188307}
,
{0.109197,-0.184716,-0.071587,0.0481565,0.0879354,0.0689917}
,
{-0.058214,-0.236608,0.174181,-0.0485921,-0.107245,0.0205515}
,
{-0.206291,-0.0245847,-0.0296682,0.17663,-0.0242202,-0.189996}
,
{-0.135813,-0.0629494,-0.107931,-0.2372,-0.141835,0.146723}
,
{0.297199,0.330817,-0.331996,0.129923,0.422945,-0.20041}
,
{-0.165155,-0.0803688,0.0367172,0.0549747,0.0569945,-0.0434114}
,
{0.0629308,-0.182629,-0.0490021,-0.0369503,-0.233763,-0.164457}
,
{-0.0650305,0.220174,-0.137833,-0.03155,-0.409832,-0.0440034}
,
{0.175841,-0.132894,-0.236017,0.147657,-0.0753311,0.00525792}
,
{0.154747,0.0399389,0.210581,0.00599104,-0.0868374,-0.0395304}
,
{0.0297382,-0.076771,0.169055,-0.131269,0.0758806,0.0365993}
,
{-0.163654,-0.0165622,-0.0727504,0.0190506,-0.00417519,0.0857934}
,
{-0.276366,-0.16898,-0.0617446,0.290285,-0.286019,-0.0543189}
,
{0.0363064,0.104524,0.0816449,-0.108438,-0.0107147,0.0263666}
,
{-0.117847,-0.0723808,0.128903,-0.13341,0.0218873,-0.1423}
,
{0.00884694,-0.154151,0.0430732,-0.0989721,0.0512139,-0.0588201}
,
{0.0654308,0.0197757,0.0368724,0.170711,0.013809,-0.0652724}
,
{-0.0880869,-0.0801508,0.0171024,0.141829,0.0703242,0.130932}
,
{-0.245839,-0.0147051,0.0910423,-0.226945,0.0146414,-0.132397}
,
{0.153279,0.168836,-0.0679208,-0.0930927,-0.0613368,-0.0338977}
,
{-0.0188737,-0.0402135,-0.1416,-0.213,-0.0424594,0.0369637}
,
{0.031989,0.100294,0.0687859,-0.293192,-0.169826,-0.029787}
,
{-0.0181327,-0.113998,0.00491626,0.26799,0.0074703,6.78453e-05}
,
{-0.0551968,0.135704,0.0692139,-0.0143411,0.173984,-0.0593391}
,
{0.0464291,0.00593686,-0.04899,-0.151915,0.131229,-0.0297006}
,
{-0.0826358,0.105548,-0.121273,0.129357,0.14666,0.0403241}
,
{0.0922897,-0.125087,-0.039509,8.71382e-05,-0.227899,-0.0394698}
,
{0.0443041,-0.0596639,-0.120612,-0.0552236,0.114583,-0.0352773}
,
{-0.0168682,0.0695491,0.214292,-0.159277,0.0447187,0.255569}
,
{0.0881985,-0.0244933,0.0890535,0.013171,0.0841999,0.0448567}
,
{0.101209,0.10295,0.0415974,-0.0519703,0.147417,-0.160197}
,
{-0.0312368,0.0983157,0.05485,-0.132167,-0.113852,0.111631}
,
{0.0771796,0.083232,-0.0178231,0.134285,-0.0210071,-0.0068945}
,
{0.334522,-0.712414,-0.16201,-0.151929,0.0484452,0.141264}
,
{0.133237,-0.0957164,0.086562,0.0188097,0.0844,-0.0124612}
,
{-0.152263,0.198204,-0.0362156,0.139284,0.135719,0.154085}
,
{-0.0920047,0.128871,0.0726455,-0.0586007,-0.0981535,0.00970234}
,
{0.0254881,-0.0929116,-0.203021,-0.0548224,0.035755,0.117271}
,
{0.0765163,0.637147,0.0653399,-0.0956945,0.445975,-0.355384}
,
{0.133095,0.151866,0.105696,-0.0809803,-0.117747,-0.0354418}
,
{-0.0221873,0.133624,-0.0641621,-0.026653,0.0199146,-0.162101}
,
{0.147481,-0.0267456,0.0727886,0.178573,-0.0934295,0.0188373}
,
{-0.090878,-0.0814004,-0.0265002,-0.0805532,-0.00463506,-0.0239443}
,
{0.355756,0.195724,-0.225343,0.040177,-0.551363,0.013771}
,
{0.186381,-0.169289,0.224327,0.180188,-0.0975483,0.142593}
,
{-0.0821356,-0.0806225,-0.144952,-0.147631,0.0461172,-0.0809908}
,
{-0.193652,-0.0401151,0.0236835,-0.0366924,0.0216583,0.0890889}
,
{0.19529,0.194107,0.109411,0.215808,-0.0839157,0.122604}
,
{0.0715373,0.0352899,0.236789,-0.659616,-0.289844,-0.106012}
,
{0.0705304,-0.0295029,-0.0196394,0.0396268,0.121817,-0.146581}
,
{-0.0841819,-0.120495,-0.263821,0.255406,0.12098,0.31107}
,
{-0.241202,-0.112606,-0.242672,0.143873,0.182579,0.169295}
,
{-0.0897346,-0.224396,-0.158468,0.280917,0.186564,0.265462}
,
{-0.00440361,0.00726495,0.0670627,-0.050762,0.085825,0.105251}
,
{0.0528957,-0.323978,0.359327,-0.317422,0.105634,0.310885}
 };
  static const float bias2[1] = { 0.0435065 };
  static const float weights2[][1] = { {-0.0796593}
,
{0.104724}
,
{0.121098}
,
{0.070714}
,
{0.16029}
,
{-0.0862613}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_57(v, index);
}
static int assign_gen_lepton_prior_10_2_57() {
  global_gen_lepton_prior.at(10,2,57) = &specialized_gen_lepton_prior_10_2_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_57 = assign_gen_lepton_prior_10_2_57();

template<typename T> float gen_lepton_prior_10_2_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.131963,0.0808522,0.00795987,-0.063353,-0.013492,-0.0113946 };
  static const float weights1[][6] = { {-0.0784238,0.219941,-0.196308,0.0986664,-0.495471,0.190511}
,
{0.35862,-0.35768,0.0564552,0.154955,-0.401647,-0.138213}
,
{0.574299,0.322804,-0.0984291,-0.767089,-0.5863,0.0310526}
,
{-0.160743,0.0557598,0.0519002,-0.0212246,0.245581,-0.233903}
,
{-0.0344004,0.200723,0.128972,-0.0754475,0.0766318,-0.0613293}
,
{-0.0025447,-0.0154941,-0.131083,0.101487,0.154997,0.0586362}
,
{0.125245,0.055393,-0.14147,-0.149368,-0.00295468,0.0984556}
,
{-0.143687,0.0222757,-0.204255,0.279822,0.170026,-0.237695}
,
{0.264077,0.12118,-0.0837048,0.333145,-0.246675,0.120074}
,
{-0.0737349,-0.234917,0.030051,-0.077902,-0.126559,0.0850269}
,
{-0.211863,0.0118306,-0.1794,-0.0984571,0.121553,0.115317}
,
{0.0522357,0.0766685,-0.22907,-0.0708339,0.0153517,0.128064}
,
{0.0129877,-0.129785,-0.0150026,-0.139656,-0.116342,0.00740612}
,
{0.189222,-0.0142138,-0.0580988,0.0432362,-0.241557,0.0468644}
,
{-0.016766,0.0661731,0.141043,0.0613886,-0.203803,-0.189177}
,
{0.248989,0.0323081,-0.175126,-0.145197,-0.15475,0.179419}
,
{0.236578,-0.0770363,-0.141056,-0.0730026,-0.131067,0.0408748}
,
{0.111509,-0.0650331,-0.170467,-0.127936,0.123238,-0.0707407}
,
{-0.00843396,-0.0051116,-0.221192,0.0775616,-0.203852,0.0270147}
,
{0.0306275,0.146268,-0.0531366,-0.0347645,0.021474,0.156547}
,
{-0.171526,0.0122097,0.0404195,0.0833968,0.237366,0.187554}
,
{0.0202825,-0.0431946,-0.0946718,0.135411,-0.0559903,-0.126849}
,
{-0.0776533,-0.114364,-0.0348393,0.0502874,-0.142459,-0.0140636}
,
{-0.263998,-0.242449,-0.34445,0.0543146,-0.0809831,-0.1505}
,
{-0.0935321,0.263567,0.0646667,-0.247814,-0.0147093,0.0112513}
,
{-0.369983,0.155913,0.169875,-0.166966,0.199083,-0.152524}
,
{-0.0127163,0.13883,0.129421,-0.103044,0.310022,0.114271}
,
{-0.193734,0.152132,-0.026543,0.0535996,0.0873199,0.0590175}
,
{0.710682,-0.207319,-0.0800693,0.347124,-0.0769232,0.0607218}
,
{-0.139336,-0.0912328,0.140076,-0.0231081,0.047133,-0.0720788}
,
{-0.0506192,0.213157,0.0259242,-0.0076123,0.189779,-0.168055}
,
{0.146201,0.0691726,0.0431315,-0.0364097,0.134464,0.0480255}
,
{-0.114813,-0.152081,0.0899458,0.0326185,-0.0237804,-0.0199504}
,
{-0.0332584,0.0857781,-0.0383519,-0.075126,0.0446783,-0.00717469}
,
{0.110283,0.0738857,0.13988,0.0109587,-0.144885,-0.22926}
,
{0.111078,0.0316227,-0.142536,0.00296452,0.0426803,0.0514004}
,
{0.0374209,-0.180154,0.14392,-0.0874906,-0.0374864,0.0285243}
,
{-0.09509,-0.114764,0.139909,-0.0665199,-0.0165184,0.0977684}
,
{-0.306601,-0.0622247,0.0668522,0.0675692,0.152787,0.207375}
,
{-0.109305,-0.0167833,0.0981304,-0.0517477,-0.0463683,0.0418244}
,
{-0.0903406,-0.10459,0.000608124,0.00747901,-0.149331,0.0044192}
,
{-0.102893,0.0108974,0.0681398,0.087906,0.37524,0.114903}
,
{0.17723,-0.0149148,0.0826273,-0.102547,0.0791501,0.0330986}
,
{-0.113432,-0.117225,0.0521522,-0.134364,-0.0519957,0.282561}
,
{0.0776214,0.157534,-0.0531855,-0.10517,0.129752,0.127462}
,
{0.139917,-0.179233,0.134179,-0.0188637,-0.0624946,-0.0275333}
,
{-0.00307717,-0.109864,-0.00174947,-0.000872757,0.221532,0.0516602}
,
{0.0658489,-0.0433485,-0.135677,0.0221757,0.0470905,-0.10144}
,
{0.0183495,-0.32593,0.146974,-0.105978,0.0102562,-0.250012}
,
{-0.0852498,-0.0206324,0.0201487,0.0780862,-0.0045626,-0.0448267}
,
{-0.055314,0.040516,-0.105132,0.0273736,0.0565194,0.0294502}
,
{0.05241,-0.238442,-0.00682891,-0.220561,0.227809,0.00806294}
,
{-0.100799,0.0792173,0.0188371,0.088333,-0.07288,0.00757439}
,
{0.266031,0.328428,0.161421,-0.087055,-0.0194348,0.00871832}
,
{-0.00774923,-0.102755,0.109878,0.117765,0.0158064,0.259612}
,
{0.118745,-0.0349945,-0.0938589,0.0854695,0.115965,-0.163875}
,
{0.137985,0.0482489,0.031039,-0.0299663,0.0851,-0.0360535}
,
{-0.18253,-0.277626,-0.0181304,0.0341918,0.136451,0.118912}
,
{0.119982,-0.0851452,0.177997,-0.00780278,-0.371707,0.221465}
,
{0.246613,-0.0365904,-0.195996,-0.101917,-0.124192,0.0506571}
,
{-0.00834255,-0.196887,0.0677729,-0.205358,0.0249813,-0.0921127}
,
{0.0437182,0.0703606,0.141314,-0.0526539,0.019974,0.0721621}
,
{-0.228471,-0.24462,0.0808545,-0.0999219,-0.161216,0.0334913}
,
{0.181358,-0.0103565,0.218149,-0.0972897,0.129026,-0.197058}
,
{0.0890706,-0.124367,-0.0264519,0.00692614,-0.0467929,-0.0138495}
,
{-0.0742601,-0.185251,-0.0805566,-0.151125,-0.0483674,-0.217716}
,
{0.149954,0.0867223,0.106693,0.0192632,-0.000845867,0.0445166}
,
{-0.0414975,-0.142205,0.0531864,-0.0643913,0.0473889,0.0890728}
,
{-0.251157,0.195636,0.464193,-0.175293,0.22089,-0.208209}
,
{0.163872,0.0335573,-0.147301,0.161515,0.0850898,-0.137111}
,
{-0.108691,-0.0648763,-0.157697,-0.010833,0.0316548,0.0178522}
,
{-0.00692722,-0.00806262,-0.136688,0.0514434,0.0535239,-0.120021}
,
{0.102114,-0.109826,0.212127,0.044461,-0.23208,0.101763}
,
{0.352638,-0.0263833,-0.223745,-0.255739,-0.0499867,0.152269}
,
{0.106973,0.0664904,-0.067127,0.0895776,0.544266,-0.0271096}
,
{0.0315954,-0.0986745,-0.00331299,0.244451,0.431245,-0.222531}
,
{0.204734,-0.192,0.103666,-0.0143626,0.341677,-0.0375099}
,
{0.116682,0.0843402,0.228998,0.139824,0.0557149,-0.259311}
,
{-0.296429,0.0895366,0.0313799,-0.0143778,1.01415,-0.498648}
 };
  static const float bias2[1] = { 0.094616 };
  static const float weights2[][1] = { {0.105898}
,
{-0.104363}
,
{-0.0859773}
,
{0.127277}
,
{-0.123519}
,
{0.0845049}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_58(v, index);
}
static int assign_gen_lepton_prior_10_2_58() {
  global_gen_lepton_prior.at(10,2,58) = &specialized_gen_lepton_prior_10_2_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_58 = assign_gen_lepton_prior_10_2_58();

template<typename T> float gen_lepton_prior_10_3_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0671587,-0.290379,-0.127343,-0.347748,-0.00827639,0.180645 };
  static const float weights1[][6] = { {-0.612715,-0.708295,-0.306285,-0.336625,0.234339,-0.103621}
,
{0.191878,0.105924,0.058984,0.327883,-0.0203045,0.144699}
,
{0.121472,0.480919,-0.228508,-0.00213895,0.191945,-0.0099958}
,
{0.7965,-0.140058,0.0786025,-0.50434,-0.0195109,0.472197}
,
{-0.219483,-0.362151,-0.353807,-0.252235,-0.0530164,0.122446}
,
{-0.302522,-0.342705,-0.150609,-0.494337,-0.128631,-0.0293229}
,
{-0.306047,-0.302559,-0.0276002,-0.19453,-0.0812679,0.0579716}
,
{-0.160737,0.154252,0.0655469,-0.0428451,-0.138336,-0.342032}
,
{-0.000805577,0.551598,0.0122036,-0.164133,-0.15361,0.0270615}
,
{-0.0775733,0.0545431,-0.0201882,-0.177467,0.127645,-0.00556876}
,
{0.0729477,0.109081,0.0105173,0.0762281,0.0365578,0.155011}
,
{0.00743604,0.0164871,-0.127407,0.0203246,-0.113708,-0.0211613}
,
{0.216938,0.195375,0.0785025,-0.100167,-0.0354073,0.314897}
,
{0.0228907,-0.0305817,-0.0882218,-0.105584,-0.00459382,-0.0017264}
,
{0.220314,-0.220048,-0.145903,0.228998,0.014698,-0.0595136}
,
{0.16891,0.338371,0.0193255,-0.0375617,0.111351,-0.0288859}
,
{0.154883,0.187064,-0.224674,-0.248873,-0.10289,0.0143428}
,
{0.339656,0.177381,0.0571896,-0.303335,-0.168512,-0.0185119}
,
{0.0954092,-0.161808,0.153287,-0.215182,-0.023143,-0.0765991}
,
{-0.19046,0.11951,0.149249,-0.012157,-0.13782,-0.0686334}
,
{-0.163519,-0.0935142,0.0523905,-0.0935675,-0.231399,0.0591916}
,
{0.138469,-0.0325637,0.104549,0.061902,0.215522,-0.0439173}
,
{-0.0764598,0.00734745,-0.0839182,-0.100129,0.00408002,-0.201785}
,
{-0.136239,-0.15054,-0.0581546,-0.0263385,0.00940571,0.172929}
,
{-0.187962,-0.0626231,0.393334,-0.0231669,0.0924732,-0.29652}
,
{-0.0902259,-0.17976,-0.230782,-0.0811508,-0.08436,-0.242219}
,
{-0.0154157,0.157158,-0.229373,0.124289,0.158977,0.0943037}
,
{-0.160377,-0.0455944,-0.222481,0.0195071,0.0193762,0.205736}
,
{-0.618399,-0.00299948,-0.655741,-0.0527344,0.145966,0.456213}
,
{0.0286485,-0.0520586,-0.0539518,-0.0721118,0.0475539,0.190856}
,
{-0.066127,0.0257594,-0.121482,0.110708,0.0916059,0.00756663}
,
{-0.01182,-0.01553,-0.0173849,0.0590985,0.0315447,-0.156966}
,
{-0.0883026,0.125344,0.164271,0.151714,0.231759,-0.163524}
,
{0.0556761,-0.0896169,0.0279321,-0.0645805,-0.165155,0.117622}
,
{-0.216554,-0.11035,-0.0231563,-0.0067017,-0.0809505,-0.0682229}
,
{0.044991,0.22439,-0.113924,0.120766,0.169686,0.0924103}
,
{-0.135882,-0.164174,0.181808,-0.226031,-0.172097,-0.0558512}
,
{0.0312147,0.0596802,0.0535793,-0.12014,0.0314921,0.0382201}
,
{0.0403689,-0.0437993,0.173828,-0.196826,0.0259119,-0.15418}
,
{-0.0986105,0.124738,-0.100097,0.169171,-0.0577973,0.170048}
,
{-0.0687771,-0.144134,0.0770669,0.0946662,0.0412674,-0.180524}
,
{0.0935527,0.0432784,-0.0794172,0.247338,0.0896908,0.0504765}
,
{-0.0204632,0.00175203,0.0281105,-0.018603,0.0860629,0.118304}
,
{0.0240195,-0.0308345,-0.00359987,-0.0758415,-0.0526615,0.0385156}
,
{-0.00563754,-0.0033388,-0.0170502,-0.00751965,0.095705,0.111239}
,
{0.021178,-0.00164857,0.0603104,-0.00182645,0.0263972,-0.0617141}
,
{0.0820634,-0.103346,0.026366,-0.0400155,-0.291504,-0.0852776}
,
{-0.137124,-0.0921376,0.0438516,-0.0756506,-0.0418894,-0.0620257}
,
{0.016164,-0.0881231,0.0870861,-0.135349,0.0108066,-0.120477}
,
{0.0525216,0.0225251,-0.0770795,0.0842663,-0.117636,0.0955362}
,
{-0.0191545,0.0559008,-0.0456919,0.0908186,-0.0377446,-0.0151172}
,
{0.0622917,-0.06709,0.0908334,0.107292,0.0880179,0.0980313}
,
{-0.0319907,-0.0305642,-0.0406276,0.201392,-0.0625239,0.0636535}
,
{0.00706869,-0.0672619,0.0122191,0.0984211,-0.0497667,0.125879}
,
{0.103192,0.0437849,-0.070739,0.0813987,0.151119,-0.00120083}
,
{-0.112299,0.0106521,0.0687492,-0.134021,0.149155,0.0127059}
,
{0.0898325,0.0479549,-0.122126,0.181419,0.213301,0.0332637}
,
{0.645727,-0.340546,0.126333,0.366826,0.14047,-0.325301}
,
{0.0825567,0.325966,-0.0144791,-0.0972985,0.0833953,0.163684}
,
{-0.172019,-0.146642,0.00405615,0.105582,0.0410047,0.0574217}
,
{0.262623,-0.0681385,0.0201895,-0.030858,-0.209119,0.00987705}
,
{-0.0857396,0.100614,-0.111575,-0.100417,-0.10498,-0.127224}
,
{0.251387,0.570522,0.213203,0.0583387,-0.188515,0.235263}
,
{-0.0713131,-0.0316799,0.0895143,0.0807065,-0.175674,-0.217366}
,
{0.120807,-0.0205523,0.101969,-0.0288947,0.00861978,-0.129772}
,
{0.119551,0.0738228,0.0948775,0.0575,-0.103446,-0.037722}
,
{0.00732789,0.136611,0.112852,-0.0941902,-0.0410448,-0.0334837}
,
{-0.10427,-0.558967,0.0533387,-0.0626843,0.115843,-0.904545}
,
{0.222989,0.0810978,-0.108387,0.0502671,0.0119857,0.0525946}
,
{0.389663,-0.191099,0.0838285,-0.0174193,-0.0749674,0.118608}
,
{0.190057,-0.0537316,-0.067962,0.139247,0.0307314,0.123764}
,
{0.216176,0.0105182,0.0865182,0.0253318,0.0540046,-0.219425}
,
{0.785119,-0.119547,0.236255,-0.435547,-0.0715889,-0.278899}
,
{0.0239886,0.050646,0.0260824,0.0956844,0.059968,-0.0962838}
,
{-0.0840997,0.21158,0.160166,-0.280156,0.0993321,-0.114227}
,
{-0.235173,0.176699,-0.075393,-0.139737,0.00491483,-0.00218842}
,
{-0.222453,0.00927708,0.116234,-0.0711274,-0.0408296,-0.0189549}
,
{0.206022,0.0744621,0.211372,0.0971306,0.0892251,0.13567}
,
{0.179818,-0.197754,-0.0755962,-0.0692346,0.333405,0.305943}
 };
  static const float bias2[1] = { -0.287958 };
  static const float weights2[][1] = { {0.109988}
,
{0.0976213}
,
{0.138013}
,
{0.140741}
,
{-0.0559679}
,
{0.0815473}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_3_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_3_57(v, index);
}
static int assign_gen_lepton_prior_10_3_57() {
  global_gen_lepton_prior.at(10,3,57) = &specialized_gen_lepton_prior_10_3_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_3_57 = assign_gen_lepton_prior_10_3_57();

template<typename T> float gen_lepton_prior_12_0_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0679086,-0.121216,-0.149944,-0.103543,0.210223,0.0888509 };
  static const float weights1[][6] = { {0.388183,-0.383142,-0.213586,-0.294221,-0.284411,-0.372858}
,
{-0.235516,-0.169541,0.000645675,0.338658,0.045179,0.17824}
,
{0.101324,-0.374759,0.0983617,-0.159047,-0.00420506,-0.135678}
,
{-0.0106899,-0.0243292,-0.0484102,-0.428439,0.221061,0.0685605}
,
{-0.161097,0.0478312,-0.154843,-0.17587,0.23905,0.25954}
,
{0.0624125,0.00563085,-0.0375591,0.011089,0.197775,0.0580259}
,
{-0.0962217,-0.0989889,-0.0117284,0.114147,0.193458,-0.0280205}
,
{0.0818332,0.100065,0.103663,0.00235454,-0.00366174,-0.0255403}
,
{-0.348294,0.161132,-0.0230246,-0.0261704,0.309864,0.5847}
,
{0.0460989,-0.0694716,0.0103509,0.0445244,0.0995531,-0.192767}
,
{-0.0115162,0.00886263,0.0276534,0.0579654,-0.00776437,-0.00414906}
,
{0.0668038,0.0953469,-0.0600042,-0.100425,-0.05708,0.234892}
,
{-0.216085,-0.030487,-0.258773,-0.033962,0.127532,0.36992}
,
{0.0447377,0.110836,-0.0062167,-0.0780814,0.11924,0.429664}
,
{0.192974,0.0666148,-0.0123038,-0.0977087,0.126432,-0.0697789}
,
{0.0459124,-0.0106277,-0.337529,0.0262246,0.206996,0.398172}
,
{0.0806936,-0.232182,-0.154656,-0.0786739,0.191043,0.315026}
,
{-0.0714159,-0.0964955,-0.139989,0.135584,0.198286,-0.183881}
,
{-0.0435074,-0.0897591,-0.0148029,-0.0141708,0.0717483,-0.125092}
,
{-0.0950043,-0.142055,-0.0688971,-0.0711162,0.154816,0.313797}
,
{0.0391634,-0.207001,-0.114155,-0.138904,0.43039,0.32516}
,
{-0.122885,0.0543851,0.0885688,-0.0669075,0.176538,-0.233307}
,
{-0.0883754,-0.116626,0.0200588,-0.135373,0.170352,0.102925}
,
{-0.0573206,-0.0983794,0.0101531,-0.121109,-0.0354217,0.0473257}
,
{-0.0515647,0.029118,-0.0692155,-0.209281,-0.352301,-0.0736496}
,
{0.160119,0.0676445,-0.160631,-0.0503799,-0.263431,-0.107861}
,
{-0.147675,0.116288,-0.188187,-0.132005,-0.203673,0.131018}
,
{-0.274496,0.0413405,0.0298875,0.0242913,-0.381612,0.175434}
,
{-0.0887365,-0.150998,-0.185061,-0.63821,-0.253682,-0.0108445}
,
{0.09923,0.0771016,0.0947953,-0.24297,-0.118698,0.154503}
,
{0.0138451,-0.151711,0.141454,0.0831289,0.0296073,0.104272}
,
{0.135218,0.155362,-0.0424362,-0.0264446,-0.128244,0.0481588}
,
{-0.14799,0.0363067,-0.129603,-0.143938,-0.0964201,0.0858796}
,
{0.0323235,-0.0291275,-0.000937417,0.023307,0.0188537,0.0305064}
,
{0.0669882,-0.165416,-0.0329175,-0.214524,-0.0621894,0.0547662}
,
{-0.141382,-0.0692283,-0.10941,-0.0564154,-0.0309937,0.0422261}
,
{0.0683537,0.0828062,-0.00650303,-0.0244592,-0.0321009,-0.0158341}
,
{-0.0877316,-0.145412,0.0303574,0.0807398,-0.138836,0.0237086}
,
{0.0191711,0.105285,0.0182669,0.05744,0.0424127,-0.0554344}
,
{-0.0368458,0.0937438,-0.0719568,0.00248559,0.176451,0.0235938}
,
{-0.0811274,-0.103114,-0.121571,0.0553292,0.0549512,-0.0942938}
,
{-0.0364158,0.11744,0.0561007,-0.0834918,-0.190509,0.0723297}
,
{0.094348,0.0287465,0.0608632,0.00615813,0.070061,0.00205503}
,
{0.0585555,0.12513,0.00890425,0.110253,0.124669,-0.039089}
,
{-0.0596695,0.0176222,0.0369803,-0.0378731,0.0515596,0.0136333}
,
{0.0787739,0.0483075,0.150533,0.115459,0.0636939,0.0695397}
,
{-0.0417799,0.16288,-0.0897199,0.146498,0.028628,0.136192}
,
{0.00133089,-0.123912,0.236287,-0.0955413,0.0659754,0.00463628}
,
{-0.0771156,-0.0240403,-0.0450797,-0.0425146,-0.0500592,-0.0765508}
,
{0.0620317,-0.11301,-0.0368616,0.0282159,-0.0649928,-0.0425849}
,
{-0.135109,0.0299467,0.102079,-0.138826,-0.0378487,0.118673}
,
{-0.0437471,0.0833573,-0.103694,0.0371501,0.000168933,-0.208733}
,
{0.0810761,-0.0418983,-0.0411109,-0.0256682,-0.09795,-0.013562}
,
{0.0625215,-0.0231999,0.0331268,-0.0834879,0.0785983,0.0533183}
,
{0.115882,-0.099448,0.0240507,-0.177077,0.110249,-0.0646201}
,
{-0.00837834,0.0923107,-0.00124638,0.0239889,-0.180223,0.025565}
,
{-0.129751,0.0350335,0.0890984,0.0238097,0.0231867,-0.0160576}
,
{-0.602804,0.0168503,-0.0192041,0.100615,0.562316,0.0796568}
,
{-0.0264088,0.0461881,0.0181249,-0.0261601,0.074176,0.0204934}
,
{0.0468202,-0.0491248,0.112615,-0.00204743,0.257872,-0.138321}
,
{-0.0329425,-0.0288704,0.0461052,0.00185174,0.151,-0.105346}
,
{-0.109057,-0.0748333,-0.00894188,0.0742179,0.0182291,0.0696415}
,
{0.0311992,0.0186312,0.284659,0.357655,-0.417756,-0.0481674}
,
{0.165699,0.22159,-0.0610291,0.034861,-0.0179006,-0.0896976}
,
{-0.00406262,0.158873,0.0880346,-0.143199,0.00646098,-0.212984}
,
{-0.116401,-0.160213,-0.0606683,-0.199139,-0.0586071,0.0810946}
,
{0.0803501,-0.0996024,0.123515,-0.017162,0.203281,0.0425155}
,
{0.199606,-0.514261,0.125582,0.381401,-0.182208,-0.477897}
,
{-0.159713,-0.210705,-0.0476464,0.119777,0.329331,-0.0134081}
,
{-0.0493287,0.127083,0.0643151,0.0896164,0.00224072,0.0512668}
,
{0.223215,-0.0376218,-0.209621,0.112608,-0.00459352,0.0333392}
,
{-0.108248,-0.00616516,-0.00671185,0.00319543,-0.0203231,-0.122986}
,
{-0.0215999,-0.513544,0.259352,0.757744,-0.0464677,-0.0194466}
,
{-0.0334162,-0.0610815,0.0534231,-0.203914,0.021695,-0.259129}
,
{0.295347,0.0326105,-0.0370773,-0.102564,0.175984,0.266415}
,
{0.1977,0.0265569,-0.0476846,-0.0621341,0.335735,0.382751}
,
{-0.00270376,0.0531208,-0.253765,-0.111842,0.232924,0.257862}
,
{0.12114,-0.0395849,-0.109355,-0.0637524,0.0871847,-0.108965}
,
{-0.184102,0.131729,0.235042,-0.0676972,-0.429938,0.507337}
 };
  static const float bias2[1] = { 0.329092 };
  static const float weights2[][1] = { {-0.0552742}
,
{0.034748}
,
{-0.00627049}
,
{-0.038871}
,
{0.00537502}
,
{0.00980523}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_57(v, index);
}
static int assign_gen_lepton_prior_12_0_57() {
  global_gen_lepton_prior.at(12,0,57) = &specialized_gen_lepton_prior_12_0_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_57 = assign_gen_lepton_prior_12_0_57();

template<typename T> float gen_lepton_prior_12_0_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0518134,-0.247266,0.169842,0.225356,-0.188523,0.150342 };
  static const float weights1[][6] = { {-0.0675244,-0.0593757,0.0303054,-0.290642,-0.283676,-0.364781}
,
{0.0291457,0.376789,0.443532,0.0994902,-0.20444,0.129857}
,
{-0.0411801,-0.401467,0.0855834,0.684576,0.375939,-0.700323}
,
{-0.100334,-0.663671,0.197221,0.277277,-0.315135,0.61519}
,
{0.124782,-0.34998,0.224756,0.0765507,-0.33211,0.0567111}
,
{0.175433,0.135144,0.0991167,0.0247062,-0.127599,-0.17891}
,
{0.0506529,-0.115259,0.0413107,0.01108,0.0746685,0.169229}
,
{-0.0294821,0.0154938,0.0433212,-0.012472,0.0453656,0.0378972}
,
{-0.110019,-0.022814,0.29115,0.220199,-0.182528,0.256103}
,
{0.245661,-0.0985373,0.0670832,-0.041352,0.0897919,0.0781956}
,
{0.194426,0.00365569,-0.0156697,-0.0571247,0.0600015,-0.0999468}
,
{0.0977238,-0.0189874,0.0725323,-0.0874591,0.0799006,-0.106261}
,
{0.234186,0.0410076,0.0875153,0.269057,-0.0498626,0.0755581}
,
{0.0917961,0.00985724,-0.010286,-0.0754346,-0.021402,-0.173788}
,
{0.12105,-0.101086,0.00749125,-0.233306,0.0460776,0.0968058}
,
{0.0121174,-0.0327877,0.0337962,-0.00803928,0.156105,0.0725707}
,
{-0.0461264,-0.043403,0.0723408,-0.0454255,0.0104033,-0.185416}
,
{0.373862,0.0888015,0.113313,0.346852,-0.0414252,-0.105538}
,
{-0.0485146,0.098385,0.182425,0.00501231,-0.0478607,-0.119579}
,
{0.0275055,0.00607564,-0.117624,0.107601,0.0612037,0.0876541}
,
{-0.0152299,0.0387712,0.0645847,-0.0449209,-0.133514,-0.259229}
,
{-0.0490095,0.156414,0.0615177,0.0478906,-0.0236434,0.0510273}
,
{-0.124862,0.210628,0.0851851,0.0761163,0.0692814,-0.221525}
,
{0.00131193,0.0560478,0.125806,0.0207286,-0.0731034,-0.100419}
,
{-0.246639,-0.183564,-0.213776,-0.362881,0.0122632,-0.394854}
,
{-0.235067,-0.15928,-0.0698954,-0.359081,-0.171242,-0.0838847}
,
{0.129055,-0.13813,0.0541505,0.203835,-0.195821,-0.0483483}
,
{0.254684,-0.0617509,-0.0923438,0.104193,0.0292902,-0.0449176}
,
{-0.247804,0.166822,-0.105913,-0.347511,0.282493,-0.421937}
,
{-0.217837,-0.100518,-0.0965979,0.164078,0.198018,0.0525615}
,
{-0.210966,0.0331281,-0.0375385,0.148527,-0.0953645,0.135137}
,
{-0.239507,0.0913813,0.134973,-0.0504451,0.109096,0.181743}
,
{0.0245928,-0.0593707,-0.0424695,-0.0285379,-0.0446022,-0.0721808}
,
{0.0418959,0.0115786,-0.0307623,-0.106642,0.117279,-0.218863}
,
{0.0678127,-0.0207874,0.018321,-0.00432779,-0.025836,0.0215648}
,
{-0.00804452,0.132759,0.00652784,0.151068,0.108015,0.00946324}
,
{-0.0784107,0.0411384,-0.198934,0.107048,-0.219546,0.07852}
,
{0.0467539,-0.128033,-0.0139003,-0.181165,0.201943,0.183539}
,
{-0.0744376,-0.140247,-0.0829134,-0.179739,-0.0190205,0.00377072}
,
{0.00251074,-0.0195568,-0.00558968,0.124174,-0.0119865,0.0379855}
,
{-0.0626242,0.112113,0.0353422,0.0147411,-0.0634748,-0.0531542}
,
{0.0392667,0.219568,0.102506,0.0334356,-0.0621002,-0.0513943}
,
{-0.10122,0.0473877,0.184558,-0.0849645,0.101346,0.146614}
,
{0.00615085,0.248931,0.0210396,0.0881075,0.0450869,0.237559}
,
{-0.0329641,-0.0421475,-0.0741217,0.077124,-0.202084,-0.0600987}
,
{-0.0446052,-0.113198,-0.0773428,-0.187324,-0.155232,-0.180476}
,
{-0.0263838,-0.148293,-0.0807077,-0.010938,0.121273,-0.135895}
,
{0.0615329,0.0357377,-0.0781645,0.115901,0.00146251,0.0056583}
,
{-0.0408294,0.00415711,0.315465,-0.131352,0.147456,0.043539}
,
{0.0596786,-0.13121,0.000203315,-0.20686,-0.00308704,-0.0316335}
,
{-0.0718174,-0.0908174,-0.0812239,0.0519552,0.0849057,-0.00623468}
,
{0.0225592,0.0400832,0.120142,0.000332408,0.169957,-0.0470117}
,
{0.0571552,0.0531899,0.0820085,0.017074,0.0939791,0.0358233}
,
{-0.042566,0.0205444,-0.258964,0.0526271,-0.160446,-0.00357682}
,
{-0.0924756,-0.0543763,-0.0147786,-0.178344,-0.126155,-0.0496815}
,
{0.153133,-0.194186,0.0723966,-0.0859142,-0.0408029,-0.0784004}
,
{0.0489077,0.0241395,-0.204953,0.0237819,-0.168038,0.162081}
,
{0.0476566,-0.022443,-0.0933865,-0.284563,0.0804163,-0.132426}
,
{0.386264,0.314926,0.626929,0.539309,0.0120803,-0.0538129}
,
{0.00855374,0.091023,-0.01213,0.0409127,-0.0365726,-0.129352}
,
{-0.0295197,0.0404253,0.0272375,-0.106314,-0.0356536,0.0544132}
,
{0.000798934,-0.0350581,-0.100831,-0.0333654,0.0135091,0.160593}
,
{0.023057,-0.0720137,0.154084,0.110192,0.158167,0.0576708}
,
{0.0281687,-0.111319,0.597903,0.00103547,-0.191702,0.252528}
,
{-0.0721685,0.150443,0.168978,0.153987,0.050556,0.0274086}
,
{0.108713,0.055992,0.128376,0.0522876,0.0657107,0.00592274}
,
{-0.0862019,0.118818,-0.0212357,0.00561267,-0.117202,0.107545}
,
{0.00461676,0.0798121,-0.197948,-0.0497738,0.21822,0.14941}
,
{-0.243435,0.383446,-0.228306,-0.325772,0.18824,-0.166158}
,
{-0.030682,0.081972,0.032238,0.0712052,-0.195451,-0.0749865}
,
{-0.0760473,-0.143567,0.0938404,-0.00704384,0.0532612,-0.196556}
,
{-0.0761614,0.0999682,-0.0573535,0.075908,-0.0526241,-0.123854}
,
{0.0116937,-0.0362603,0.0129082,0.066646,0.133894,-0.0144107}
,
{-0.0240307,-0.0640919,-0.259171,0.0468028,0.0940552,-0.256233}
,
{0.119346,0.544181,0.508702,0.0746984,-0.127647,-0.125528}
,
{0.172447,0.529199,0.266645,0.0446895,-0.09123,-0.165274}
,
{-0.178039,0.443699,0.36648,0.221918,0.0549778,-0.197161}
,
{-0.0825391,-0.233404,-0.118789,-0.0497115,0.173248,-0.0189071}
,
{0.281246,-0.170251,-0.48678,0.0239061,-0.126594,0.415076}
 };
  static const float bias2[1] = { 0.234825 };
  static const float weights2[][1] = { {0.0481352}
,
{-0.066173}
,
{0.0338576}
,
{0.0505263}
,
{-0.0498068}
,
{0.0495111}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_58(v, index);
}
static int assign_gen_lepton_prior_12_0_58() {
  global_gen_lepton_prior.at(12,0,58) = &specialized_gen_lepton_prior_12_0_58;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_58 = assign_gen_lepton_prior_12_0_58();

template<typename T> float gen_lepton_prior_12_1_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.15016,-0.204059,0.0934067,-0.100607,-0.339983,-0.0357832 };
  static const float weights1[][6] = { {-0.464236,0.41551,0.00072786,0.224109,-0.0648485,0.319099}
,
{0.387898,-0.672679,0.146893,0.053403,-0.351474,-0.0320931}
,
{-0.104964,-0.145987,0.124218,-0.0300822,-0.0910874,0.0223953}
,
{-0.0563631,-0.299395,0.283348,-0.283545,-0.802738,0.112058}
,
{0.111637,-0.347601,0.154929,-0.0362946,-0.532334,-0.236144}
,
{0.0658119,-0.0308389,-0.0894876,-0.10496,0.263845,-0.109281}
,
{-0.00316604,-0.0826449,0.0388864,0.199686,0.00956671,-0.265001}
,
{0.0445278,-0.049912,-0.0615123,-0.0184806,0.0228735,-0.0337275}
,
{0.255299,-0.261118,0.377868,-0.23705,-0.606461,-0.279318}
,
{0.0639274,-0.125608,0.0204443,-0.122059,0.00247707,0.127682}
,
{0.103612,-0.201243,-0.0258427,-0.0959613,0.175682,0.0583131}
,
{-0.232805,0.15598,0.0824964,0.191736,-0.100672,-0.0932153}
,
{0.0816434,-0.113178,0.303775,-0.212771,0.11785,-0.053006}
,
{0.08392,-0.124738,-0.0252031,-0.115202,-0.376076,0.0464547}
,
{0.137056,-0.106075,-0.0366576,0.0448802,0.0765065,-0.118384}
,
{0.0693761,-0.00170526,-0.0767806,-0.223773,-0.298296,-0.123226}
,
{-0.00767562,-0.187049,0.167053,-0.132718,-0.505791,-0.116537}
,
{0.0821019,-0.48787,0.0329096,0.163558,0.0659167,-0.28661}
,
{0.0421768,0.0101535,-0.0102867,0.0222263,0.0315355,0.0568948}
,
{0.0485435,0.102411,0.0525208,0.052798,-0.107422,-0.149642}
,
{-0.184255,-0.0552872,0.0920095,0.0521386,-0.180714,0.0206487}
,
{-0.219846,-0.0553273,0.186578,0.208146,-0.215926,0.00904057}
,
{0.0658023,-0.0440022,0.131662,-0.179958,0.0395744,-0.157558}
,
{-0.137528,-0.161991,0.040477,-0.0625093,-0.332854,-0.0392144}
,
{-0.0165687,0.106873,-0.00745002,-0.0113328,0.114099,0.0123331}
,
{-0.169564,0.0316548,-0.200542,0.154778,-0.019217,0.244086}
,
{0.20242,-0.192825,0.0111267,-0.373301,-0.109611,-0.116403}
,
{0.237421,-0.119602,-0.176136,0.178712,0.0481772,0.0345987}
,
{-0.137998,0.00939078,-0.0465211,0.359925,-0.605993,0.0195559}
,
{0.0451585,0.100181,-0.101659,-0.00311616,-0.108673,-0.0298842}
,
{0.18224,-0.091222,-0.080061,-0.183315,0.0367745,0.140574}
,
{0.18811,0.0504095,-0.0294459,0.0377656,0.155851,0.104166}
,
{-0.024645,0.0602092,-0.237314,0.199058,-0.0157528,-0.0503188}
,
{-0.142958,0.0739504,0.0235119,-0.200306,0.125111,0.196139}
,
{-0.0141203,0.0245416,-0.103427,-0.0304029,-0.0451714,-0.0926814}
,
{-0.0270414,-0.140663,0.0639421,0.067011,-0.106422,0.082724}
,
{0.00347723,0.0020177,0.128261,0.249133,-0.180216,0.0108482}
,
{0.0453654,0.186083,0.0851984,-0.0330203,0.149078,0.135294}
,
{-0.0466787,0.0288274,0.0385805,0.0466379,-0.00829219,-0.102254}
,
{-0.105912,-0.122336,-0.136179,-0.0208012,0.18556,0.138052}
,
{0.145658,-0.0237304,0.0272916,0.187972,-0.0100066,0.181687}
,
{-0.0777353,0.10794,-0.082839,-0.149706,-0.171735,-0.119535}
,
{-0.0171518,-0.0393099,0.145001,-0.12659,-0.204741,-0.0654037}
,
{0.0144854,0.0325569,-0.0461927,-0.0266144,0.0630187,0.0538803}
,
{-0.000286544,-0.00569834,0.0426629,-0.00877047,0.0568169,0.242918}
,
{0.0269241,0.102016,0.0604968,-0.023446,0.0254856,0.00339187}
,
{-0.0179419,0.030209,0.0706687,0.0287164,-0.218814,0.0760223}
,
{0.192091,0.155528,-0.222495,-0.0987226,-0.0192487,-0.159756}
,
{0.0559393,-0.0114066,0.139184,0.154936,-0.0632361,0.107593}
,
{0.128488,0.0436184,0.14739,-0.0447724,-0.040593,-0.0549446}
,
{0.168853,0.0283432,-0.240567,-0.00772112,-0.040364,0.0843554}
,
{-0.00991477,-0.119803,-0.0637409,-0.100513,0.0609579,0.199178}
,
{-0.115706,0.178135,0.00809273,-0.065152,0.112616,0.0217307}
,
{-0.153289,-0.0262864,-0.00923217,-0.0284599,-0.0972924,-0.255589}
,
{0.0890708,0.118175,0.110915,0.0218621,-0.0525908,0.00990974}
,
{-0.0241402,-0.0787562,-0.024649,0.0953997,-0.109818,-0.00775236}
,
{-0.0118564,-0.0685383,0.0176467,0.0463245,0.137596,0.10016}
,
{-0.520404,0.738642,0.280882,-0.612118,-0.329514,0.30815}
,
{0.0286719,-0.0968438,-0.180598,0.147217,-0.0988452,0.0138523}
,
{-0.0554557,0.206388,-0.1997,0.0564559,-0.0630197,0.119265}
,
{0.0766442,-0.0458981,-0.247488,-0.188773,-0.029667,-0.0264812}
,
{0.251239,-0.00332108,-0.015031,-0.138785,-0.0583546,0.219501}
,
{-0.0228434,-1.13971,-0.0704535,0.0904835,0.0970367,-0.145813}
,
{0.00862602,0.202064,0.0374355,-0.079519,-0.0133158,-0.0968477}
,
{0.0945088,-0.0124895,-0.228172,-0.0581293,-0.0793846,0.00498151}
,
{-0.0293144,0.0915965,0.075579,-0.0153119,-0.00205475,0.108422}
,
{0.054552,0.0213821,0.00898216,0.0575753,0.0197813,-0.0657716}
,
{0.557624,-0.323224,0.448026,-0.794842,-0.264955,-0.292351}
,
{0.0234848,0.209393,-0.0932921,-0.206701,-0.0113059,-0.0906488}
,
{-0.0633949,0.130488,0.0985437,-0.0682619,0.234187,0.0268478}
,
{0.0216193,-0.0141025,0.176235,0.0127316,0.147215,0.111983}
,
{0.128685,0.0252006,0.177671,0.127934,-0.0892509,-0.0778408}
,
{-0.230334,0.538238,0.398174,-0.394491,-0.568634,0.492317}
,
{0.201669,0.179014,-0.0660681,0.176885,-0.0865011,0.127894}
,
{0.019657,0.0844238,0.229148,-0.0431159,0.219872,-0.132456}
,
{-0.0932048,0.0492982,0.12901,-0.131514,0.0308393,-0.0272538}
,
{-0.0453648,0.199913,0.130374,-0.388689,0.203909,-0.0895624}
,
{0.123886,-0.0775056,-0.0485424,-0.0441126,-0.14926,0.0352554}
,
{-0.140039,0.116731,-0.511067,-0.0587508,-0.0897819,-0.0798904}
 };
  static const float bias2[1] = { 0.240648 };
  static const float weights2[][1] = { {0.0379595}
,
{-0.0224285}
,
{0.0411476}
,
{-0.0354416}
,
{-0.0653027}
,
{-0.0198677}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_1_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_1_57(v, index);
}
static int assign_gen_lepton_prior_12_1_57() {
  global_gen_lepton_prior.at(12,1,57) = &specialized_gen_lepton_prior_12_1_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_1_57 = assign_gen_lepton_prior_12_1_57();

template<typename T> float gen_lepton_prior_14_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0582351,0.0333361,0.0698418,0.18606,-0.071696,-0.0910686 };
  static const float weights1[][6] = { {0.083567,0.0479188,0.00330737,0.206159,-0.0339484,-0.165441}
,
{0.0291371,0.152171,-0.037958,0.163765,-0.21356,-0.195428}
,
{-0.0192002,0.109364,0.0965716,0.182641,-0.0402467,0.155564}
,
{-0.287365,-0.121465,0.276796,0.333298,-0.0561797,-0.162415}
,
{0.0345721,0.155256,-0.0443714,0.117622,-0.00945813,-0.177177}
,
{0.0251442,0.0835408,0.0076775,0.101014,-0.173281,-0.177723}
,
{0.185246,0.205246,-0.0148398,-0.00491588,-0.0294283,-0.0240132}
,
{0.152809,-0.0867352,0.0273359,0.108952,-0.119669,-0.156735}
,
{0.0348126,0.000933134,0.0442893,-0.150727,-0.288675,0.0387174}
,
{-0.182491,-0.0122297,0.049154,0.0449887,-0.0666351,-0.0583362}
,
{0.11545,-0.135459,0.134293,0.0839789,-0.0349252,-0.212486}
,
{0.0649195,-0.0034297,0.0996154,0.0764884,-0.0995043,-0.122759}
,
{0.0804589,-0.054811,0.123395,0.231464,-0.0891542,0.0266063}
,
{0.0696238,-0.0760922,0.0286899,0.236291,-0.0475043,0.134653}
,
{0.205727,0.0440409,0.000497168,0.0693285,-0.0717827,-0.173295}
,
{0.0223326,-0.0876449,-0.0654019,-0.166188,-0.0475668,0.0517175}
,
{-0.0219993,-0.00772179,-0.160297,0.168083,-0.0939557,-0.193102}
,
{0.179003,-0.0781317,-0.0279538,-0.0276527,0.110711,-0.0895681}
,
{-0.097698,-0.090455,0.141639,0.286106,0.0470712,-0.00721731}
,
{-0.0217212,-0.00842295,-0.075956,0.0108985,-0.10044,-0.233983}
,
{0.0784193,0.200108,-0.112136,0.235339,-0.0710709,-0.0873663}
,
{0.0119288,0.0232308,-0.21418,0.185043,-0.283794,-0.1209}
,
{0.11247,-0.0289285,0.133582,-0.126449,0.0702154,-0.0681574}
,
{0.131118,0.248869,-0.181992,0.0518725,0.0712124,-0.181857}
,
{0.296941,-0.185963,0.0215913,-0.164431,-0.226644,-0.0233076}
,
{-0.032941,0.102662,-0.102348,0.109619,-0.0205862,-0.259631}
,
{0.147777,0.036097,0.134045,-0.155307,0.011418,-0.0981263}
,
{0.157915,0.0440471,-0.121134,0.170681,-0.0238548,0.0983336}
,
{0.28315,0.0574656,-0.0250109,0.155387,0.000755978,-0.208249}
,
{-0.00124981,0.0810107,0.0572774,0.243891,0.0594432,-0.136032}
,
{0.0620348,-0.0226689,-0.060688,-0.00524872,0.0479597,0.186731}
,
{-0.250803,0.132028,0.199975,0.0797871,0.0497685,0.148044}
,
{0.174434,-0.0519519,-0.11532,-0.097954,0.00999758,0.0976826}
,
{0.111575,0.0419953,-0.0918997,0.15112,0.0679422,-0.0226445}
,
{0.0989113,-0.0168441,0.0457136,0.00745128,0.0309298,0.0991003}
,
{0.103152,-0.0491417,-0.197212,-0.147957,-0.0816904,-0.103299}
,
{-0.271217,-0.0967118,-0.0247585,-0.0412665,-0.0438592,-0.0341186}
,
{-0.0365956,-0.102696,0.142729,0.0900604,0.0863906,-0.0937975}
,
{-0.105506,0.0282277,-0.0584192,0.049932,0.0409111,0.0706676}
,
{-0.157188,-0.230503,0.0803822,0.215163,0.0485952,0.0605088}
,
{0.00434975,-0.151551,-0.0203126,0.123794,-0.0333679,-0.168083}
,
{-0.0401446,-0.0334347,-0.0575391,0.093224,-0.0433718,-0.16263}
,
{-0.0745368,0.0582873,-0.021901,0.00520481,-0.00554889,-0.155766}
,
{-0.0157763,-0.042934,-0.151931,0.022249,-0.0839672,0.149223}
,
{0.00580285,-0.0179185,0.0679496,0.056959,0.119507,-0.039163}
,
{-0.0405812,0.0252184,-0.0080948,0.209128,-0.205785,-0.0675448}
,
{-0.0541745,-0.239443,-0.169886,-0.0208379,0.0488279,-0.122935}
,
{-0.0933528,-0.178491,0.0843371,-0.0103073,-0.100694,0.0945238}
,
{0.00340597,-0.0359427,0.11433,-0.0648503,-0.0366884,-0.0780689}
,
{-0.0719341,0.0716266,0.063474,0.141938,0.0783928,-0.045399}
,
{0.0622668,-0.178895,-0.139253,0.120628,-0.062921,-0.0502058}
,
{-0.0857665,0.00482284,-0.20854,0.0263352,0.0354668,-0.0014269}
,
{-0.0131382,-0.0533,-0.11342,-0.048924,-0.0618589,0.0379711}
,
{0.0498684,-0.0727832,0.00113279,-0.0386786,0.00230232,-0.125422}
,
{0.00412615,0.238769,-0.0294255,0.0148424,-0.143524,0.154982}
,
{0.0937665,0.201529,-0.211355,-0.162627,0.117773,-0.120369}
,
{-0.0135391,0.0764383,-0.199849,0.0672319,-0.206332,-0.167972}
,
{0.0662027,0.0614769,0.0410711,0.0521017,0.0317128,-0.0986118}
,
{-0.0463014,0.0688156,0.144861,-0.0857732,0.10333,0.167222}
,
{-0.00864239,0.170375,0.0774139,-0.14493,-0.0196561,0.0845461}
,
{-0.00521377,0.0248756,-0.00716847,0.0187178,-0.0331819,0.0655978}
,
{0.0234444,-0.148515,0.0406681,-0.0259256,0.18001,-0.185382}
,
{-0.0530547,0.155469,0.00773081,-0.0215966,0.218298,-0.155478}
,
{-0.00111603,0.253577,-0.173177,-0.0337199,-0.190515,-0.116247}
,
{-0.0342125,-0.0817202,-0.0135226,-0.00335729,0.00818928,0.0525238}
,
{0.0240976,-0.0863791,0.125856,-0.263566,0.137584,-0.181404}
,
{0.226403,0.0925664,-0.0146083,-0.0954246,0.0569941,0.128777}
,
{0.0177638,-0.000952026,0.0805369,-0.114863,0.108378,-0.0925272}
,
{-0.00561867,0.114875,-0.122998,-0.170269,0.0456439,0.106002}
,
{0.201129,0.0443505,-0.108496,-0.0442276,-0.0270319,-0.0247079}
,
{0.211186,0.0322195,0.0805882,-0.16376,-0.173101,0.123496}
,
{-0.0371312,-0.0143487,0.198386,-0.19617,-0.0974457,0.0458299}
,
{-0.0713186,0.116832,0.0858636,-0.190648,0.106639,-0.183831}
,
{0.229091,0.0588986,-0.0378149,0.120876,0.0588818,0.0440527}
,
{-0.136913,0.021822,-0.0139345,0.216536,-0.0583918,0.0273526}
,
{-0.173378,-0.163396,0.248592,-0.0523019,0.169492,0.198204}
,
{0.0338618,-0.213998,0.0689743,-0.0270606,-0.250013,0.0287674}
,
{-0.166171,-0.152954,0.116702,-0.094522,-0.0469964,-0.0190963}
,
{0.0189995,0.0478672,0.195625,0.178276,-0.0370348,0.126544}
 };
  static const float bias2[1] = { 0.253731 };
  static const float weights2[][1] = { {0.0709693}
,
{0.115894}
,
{0.0219027}
,
{0.117977}
,
{-0.141941}
,
{-0.063332}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_0_49(v, index);
}
static int assign_gen_lepton_prior_14_0_49() {
  global_gen_lepton_prior.at(14,0,49) = &specialized_gen_lepton_prior_14_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_0_49 = assign_gen_lepton_prior_14_0_49();

template<typename T> float gen_lepton_prior_14_1_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0489757,-0.0570859,-0.0616597,0.122353,-0.0750434,0.126276 };
  static const float weights1[][6] = { {-0.19807,0.0273873,0.00239231,-0.0336448,-0.117885,0.142291}
,
{0.0354071,0.0298177,-0.193959,-0.032942,-0.154203,0.159952}
,
{0.0304904,0.0201008,-0.207157,0.22816,-0.0165988,-0.0724258}
,
{0.179208,0.0188136,-0.200843,0.12119,-0.136356,0.0914373}
,
{0.00842804,-0.0309119,-0.0692444,0.124679,0.0196454,-0.0331839}
,
{-0.0932638,-0.165574,-0.0859968,0.231118,0.00602602,0.112274}
,
{0.000797813,-0.166136,0.0842826,0.127241,0.0425437,0.0217136}
,
{-0.0226812,0.0331321,-0.188065,0.121763,-0.194667,0.174009}
,
{0.10615,0.0312262,-0.0834764,0.0706723,0.018327,0.0727461}
,
{-0.024931,0.112851,0.0730092,-0.0437882,0.189798,-0.186838}
,
{0.0582639,-0.00655091,0.032702,0.24712,-0.0272541,-0.00575151}
,
{0.122843,0.0197242,-0.0595112,-0.0591153,-0.206455,0.13798}
,
{-0.0832548,-0.0581478,0.0162192,0.243924,0.0816384,0.0550196}
,
{0.148086,-0.0839303,-0.215087,0.146878,-0.16417,0.292927}
,
{-0.0518324,-0.0311521,0.0945529,-0.0846158,-0.0643867,0.0122833}
,
{0.0225923,-0.106166,-0.141783,-0.12695,-0.026452,-0.110316}
,
{0.123195,0.128873,-0.114385,-0.0139271,-0.0288348,0.299393}
,
{0.0967006,-0.05943,-0.108739,0.16787,0.0815672,0.291566}
,
{0.11914,0.0524974,0.00228262,0.0865554,-0.0896376,0.0779086}
,
{0.102632,0.0464004,-0.0073677,0.141028,-0.0516823,-0.00126809}
,
{-0.0382744,0.0574951,-0.252783,0.251412,0.0649691,0.0761888}
,
{-0.0300236,-0.102201,0.148253,0.0758306,-0.09735,0.322711}
,
{-0.0309605,0.145363,0.101851,-0.0152009,-0.0406436,-0.0611409}
,
{0.0510499,-0.0627658,-0.0379781,0.144278,-0.162599,-0.0431927}
,
{0.0208987,-0.122676,0.0238841,0.187842,-0.213446,-0.0748069}
,
{0.0311223,-0.093585,-0.218502,0.11379,-0.120986,0.169109}
,
{0.073692,-0.0933298,-0.0131799,-0.155266,-0.0091105,0.16534}
,
{0.242195,0.0802222,-0.0258535,-0.11894,0.158757,0.0226888}
,
{0.0370928,-0.218432,0.0578977,-0.121168,-0.086825,0.1101}
,
{-0.151641,0.0981553,0.000481164,0.0362997,0.0527527,0.00827588}
,
{-0.161632,-0.146842,-0.127643,-0.0328251,0.0726855,0.0877481}
,
{0.120589,-0.00124542,-0.0784666,-0.218161,0.0331636,-0.0906333}
,
{0.0952951,0.0370761,-0.0829723,0.0867881,-0.0987148,-0.125402}
,
{0.0853521,-0.0986696,0.0235154,-0.112693,0.183844,-0.129328}
,
{-0.0331334,0.0923337,-0.0407632,-0.0439523,-0.0521031,-0.0299234}
,
{-0.0683119,-0.00500503,0.0924568,0.278673,0.0877716,-0.0299096}
,
{0.00107928,-0.0196403,0.00846679,-0.0454953,0.0757847,-0.124602}
,
{-0.098256,-0.149763,-0.05726,0.152965,0.149335,0.0885266}
,
{0.0187291,0.204525,-0.0492917,-0.0294272,0.024759,-0.238387}
,
{0.145674,0.0490552,-0.0845319,0.111398,-0.0489017,-0.00979244}
,
{-0.10857,0.106204,-0.0389576,0.226772,-0.0276425,-0.26221}
,
{0.183108,-0.0274405,-0.00704656,-0.0740594,-0.0790551,-0.0801565}
,
{-0.159561,0.0385197,-0.197551,0.0427959,-0.0408228,-0.0191412}
,
{0.0120315,-0.0435514,-0.0185219,0.0980453,-0.0620236,0.0310659}
,
{0.000429508,-0.0856043,0.127343,0.170308,-0.137743,-0.140875}
,
{-0.0861801,-0.0197885,-0.114299,0.135643,-0.0548747,-0.0506927}
,
{0.0335478,0.0176649,-0.15526,0.138027,0.124002,0.00442547}
,
{-0.113806,0.0231137,-0.105296,-0.0493782,0.0493895,-0.125261}
,
{-0.0221887,-0.0125045,-0.163708,-0.206835,0.112112,0.0622223}
,
{0.112085,0.0515188,0.0215242,-0.0970644,-0.203912,0.0341679}
,
{-0.0454381,-0.11688,0.00240256,0.0246031,0.0754116,-0.0463438}
,
{-0.162811,0.116367,-0.0966256,0.119473,0.00106063,0.0166494}
,
{-0.27221,-0.0666339,-0.0438389,0.211363,0.174578,0.0248124}
,
{-0.153003,-0.213701,-0.0225283,0.116526,-0.0326891,-0.0984472}
,
{0.213804,0.128302,0.0476142,-0.224417,-0.0199232,-0.173918}
,
{0.235999,-0.0490272,0.0189708,0.0407597,0.213353,0.155698}
,
{-0.0159725,-0.0832418,-0.0685686,-0.0913656,-0.149532,-0.0804551}
,
{0.0513115,0.0827591,0.0681247,-0.238653,-0.0205372,-0.089896}
,
{-0.013107,-0.0273721,0.0372762,-0.0595962,-0.060214,0.14976}
,
{-0.108778,0.122852,0.111783,-0.0730509,-0.0730768,0.0165317}
,
{-0.06183,-0.206597,0.0746166,0.0523254,0.0518015,-0.0554215}
,
{0.208079,0.0390994,0.104392,-0.04032,-0.0163452,0.00300929}
,
{-0.118847,-0.0324002,-0.00671005,0.0248517,-0.0626189,0.180012}
,
{-0.0108276,0.00836951,0.0977432,-0.179971,-0.0366387,-0.135545}
,
{-0.0681748,0.0279451,-0.0335141,-0.0774582,-0.235539,0.0712311}
,
{0.189124,0.0126054,0.0402302,0.123984,-0.0198808,-0.0389825}
,
{0.148921,-0.0157746,0.092288,-0.173265,0.0869427,-0.0282542}
,
{0.0739913,-0.155727,0.0814172,0.0836793,-0.0450372,-0.140016}
,
{-0.111339,0.0684934,0.0608646,-0.123857,0.0463725,-0.0443886}
,
{0.196443,-0.0222601,0.01723,0.126775,0.0159488,0.0759054}
,
{-0.0528247,-0.115371,0.0852957,0.128728,0.00465259,-0.0720774}
,
{0.051768,0.161929,-0.0530985,0.00510547,0.177542,0.108349}
,
{0.012336,0.178235,-0.198417,0.0965509,-0.00609524,0.152834}
,
{-0.101357,0.00346058,-0.0551858,-0.0817837,-0.153467,-0.0449676}
,
{-0.0126635,-0.123192,-0.207525,0.109362,0.0184298,-0.0350114}
,
{-0.0752372,-0.0881041,0.102031,0.051137,0.165875,0.0392399}
,
{0.0293379,0.0343641,-0.235591,-0.0249732,-0.0746406,0.223151}
,
{-0.16131,0.0900347,-0.0607729,-0.012963,0.0979278,-0.0318461}
,
{-0.0972156,0.0176798,0.0554351,0.00605015,-0.0451458,0.251403}
 };
  static const float bias2[1] = { 0.343221 };
  static const float weights2[][1] = { {0.264757}
,
{-0.046578}
,
{-0.112389}
,
{0.135684}
,
{-0.0508711}
,
{0.0805987}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_1_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_1_49(v, index);
}
static int assign_gen_lepton_prior_14_1_49() {
  global_gen_lepton_prior.at(14,1,49) = &specialized_gen_lepton_prior_14_1_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_1_49 = assign_gen_lepton_prior_14_1_49();

template<typename T> float gen_lepton_prior_14_2_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.104225,-0.0208757,0.238126,0.0584646,0.00594035,0.27562 };
  static const float weights1[][6] = { {-0.138662,-0.000675044,-0.185334,0.21694,-0.178356,0.54353}
,
{-0.0273417,0.106531,1.47404,-0.118311,0.0518677,1.63754}
,
{0.0944209,0.104058,-0.188727,0.125779,-0.105703,0.0571455}
,
{0.291386,-0.0683995,0.258552,0.0423944,0.0322849,0.437398}
,
{0.0656931,-0.237689,0.114865,0.201167,-0.0609886,0.223902}
,
{-0.0110855,-0.130054,-0.336118,0.0233245,-0.11388,-0.182965}
,
{0.00559455,0.0830895,-0.176207,0.0224484,0.022907,-0.0675236}
,
{0.00907373,-0.186202,0.191219,0.0444205,0.116697,-0.419451}
,
{0.0242151,-0.119031,0.0209564,0.231316,-0.0533817,-0.270916}
,
{-0.10132,-0.0735374,0.0174188,-0.11977,0.105514,0.0087357}
,
{0.156919,0.0221011,0.00188798,0.18846,-0.193173,-0.0766719}
,
{0.106035,0.0192027,-0.000724353,-0.0555569,0.204218,0.0913896}
,
{0.196947,0.0840257,0.116922,-0.0973339,-0.00461551,-0.134196}
,
{0.063148,0.0180024,0.236354,0.130142,0.161535,0.633119}
,
{0.0156883,0.137697,0.223089,0.13694,0.0549817,0.214122}
,
{0.086946,0.0374485,0.0775202,-0.163144,0.194079,0.0679637}
,
{0.0388069,-0.0628371,0.258114,0.0217736,0.0375833,0.272361}
,
{-0.0417766,0.168224,-0.256933,-0.0320801,0.0950696,-0.0581195}
,
{0.0385838,0.207801,0.0714178,0.0449317,0.0901869,-0.0930876}
,
{0.0297358,-0.0869768,0.299718,-0.0213458,0.0400538,-0.146494}
,
{-0.0766728,-0.00139886,0.184726,-0.122836,0.159968,-0.48402}
,
{0.0200704,0.0150469,-0.308233,0.0816025,0.145288,0.0231825}
,
{-0.218047,-0.115927,-0.0312721,0.0563185,0.0961054,0.0977109}
,
{0.118603,0.00654907,-0.113226,0.100377,-0.104884,-0.13914}
,
{-0.0154461,0.102697,0.0352177,0.169586,-0.0670682,0.485003}
,
{-0.195198,0.0261294,0.104661,0.0717479,-0.164248,0.151754}
,
{0.0128268,0.16926,-0.153313,0.0449331,0.108164,0.0286607}
,
{-0.187136,0.0171345,-0.269028,0.0208305,-0.0813741,-0.199341}
,
{-0.0694936,-0.160657,0.788033,0.0942083,0.0232997,1.97195}
,
{-0.065901,0.0361832,0.0907412,0.138221,-0.0265809,-0.0577931}
,
{0.121063,0.197409,0.182515,-0.164834,-0.10494,-0.0941505}
,
{0.110774,-0.169478,0.224351,0.248198,-0.166498,0.340903}
,
{0.0497121,0.0402493,-0.0696937,-0.0901444,0.13326,0.084956}
,
{-0.0545327,-0.0125386,0.109369,0.115464,0.000573925,-0.275565}
,
{-0.196403,0.114799,-0.00898255,-0.0336848,-0.131311,0.0174279}
,
{0.0968753,-0.178802,0.0836581,-0.0442913,-0.00866058,0.00855249}
,
{-0.211339,-0.0613598,-0.0833753,-0.0386326,0.0993338,0.198575}
,
{-0.0289001,-0.0314584,-0.0817853,-0.163659,-0.00235833,0.003758}
,
{-0.201633,-0.103145,-0.0436601,0.046231,0.10331,-0.143381}
,
{-0.130576,0.0944703,0.06883,-0.0816772,-0.0755455,-0.0129042}
,
{0.1272,-0.070895,-0.0692894,0.14581,-0.136826,-0.0339578}
,
{-0.058846,-0.129572,-0.0891958,-0.0722684,0.124466,-0.0520105}
,
{-0.20014,0.0741982,0.112777,-0.0305885,0.129708,0.0753865}
,
{0.111476,-0.194406,-0.256757,0.0175071,-0.176406,0.0902917}
,
{-0.150306,-0.256038,-0.0224477,0.0914243,0.15347,-0.157155}
,
{0.0126249,0.127001,0.0441238,-0.0968327,-0.189379,-0.0300363}
,
{0.100555,0.130903,-0.31219,-0.133603,0.154568,-0.398014}
,
{-0.00225325,0.173914,0.0251392,-0.0409817,0.0971106,0.0201778}
,
{-0.0622559,-0.0172418,-0.0789314,0.0146104,0.0944897,-0.0830601}
,
{-0.110266,-0.0367591,-0.123097,-0.0826057,-0.133203,-0.0877207}
,
{-0.125447,-0.13155,0.232985,-0.0612744,-0.0683565,0.149838}
,
{0.0490013,-0.072691,0.0560755,0.162059,-0.091482,-0.130966}
,
{0.168574,-0.0173382,0.301583,-0.0251802,-0.0867871,0.0695124}
,
{0.118419,-0.0223361,0.0397514,0.0100343,-0.00640241,-0.0807543}
,
{-0.0510301,-0.0162859,0.0184735,-0.105186,-0.0607902,0.0857929}
,
{0.114104,-0.0394191,-0.128708,-0.0522631,-0.0548908,-0.117861}
,
{-0.109305,0.163117,-0.0740556,0.0423025,0.0856334,0.0475313}
,
{0.0933317,0.0148208,0.215856,0.0678191,0.121812,0.0146593}
,
{0.160731,0.208635,-0.0905759,0.0360963,0.116122,0.0177931}
,
{0.0426866,-0.0931719,0.0329949,0.204581,0.0376205,0.0796875}
,
{-0.0670729,0.018044,-0.00911532,0.172369,0.0728178,-0.113668}
,
{0.103498,0.00203271,0.132878,-0.078124,0.188805,-0.0750755}
,
{-0.0240728,0.0194924,0.0818555,0.024287,-0.0950706,0.114765}
,
{0.0565132,-0.10141,-0.0726565,-0.14464,-0.0229939,-0.0878858}
,
{0.204033,-0.0862847,0.00361903,-0.130861,0.107118,-0.0907121}
,
{0.128378,-0.0541957,-0.140803,-0.0382836,0.0704505,-0.0576555}
,
{0.0591203,-0.0364252,0.176963,-0.140902,-0.105734,-0.120404}
,
{-0.0252301,0.0197951,0.119287,-0.0658614,0.0209397,-0.117525}
,
{0.190375,-0.183395,-0.0219878,-0.0204153,-0.190668,-0.0780335}
,
{-0.232028,0.0772498,-0.102121,-0.290877,-0.0946577,-0.0812334}
,
{-0.0697326,0.264632,0.141164,0.0484769,0.21161,0.0542619}
,
{-0.0765132,0.0389124,0.0521916,-0.213878,0.0790824,2.51871e-05}
,
{-0.156001,-0.0585518,-0.21121,-0.186096,0.26998,0.0723273}
,
{-0.0247882,-0.110745,-0.238795,-0.091634,0.00404853,-0.146599}
,
{0.159162,-0.0642392,-0.222472,0.00400692,0.0664052,-0.0736697}
,
{-0.018921,0.114825,-0.110858,-0.243716,0.0478591,-0.0599136}
,
{-0.107914,-0.0587133,0.0252149,-0.0768017,0.153833,0.136765}
,
{0.0347988,0.0886751,-0.157659,0.133088,0.170701,0.0644979}
,
{-0.112368,0.0969118,-0.0801063,0.102827,-0.0173009,0.17455}
 };
  static const float bias2[1] = { 0.17869 };
  static const float weights2[][1] = { {0.139619}
,
{-0.0125359}
,
{0.0511422}
,
{-0.0662035}
,
{0.118823}
,
{0.022577}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_2_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_2_49(v, index);
}
static int assign_gen_lepton_prior_14_2_49() {
  global_gen_lepton_prior.at(14,2,49) = &specialized_gen_lepton_prior_14_2_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_2_49 = assign_gen_lepton_prior_14_2_49();

template<typename T> float gen_lepton_prior_14_3_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0193837,0.00138163,0.0816643,0.0134848,0.0478439,-0.0325565 };
  static const float weights1[][6] = { {-0.0530693,-0.00188324,-0.154444,0.00183326,-0.203697,0.124542}
,
{-0.102739,0.0660908,0.233033,0.0637397,0.0128471,0.45481}
,
{0.0678319,0.0587536,0.0565549,-0.267892,0.180867,-0.00750726}
,
{0.207907,-0.0379623,-0.0192378,0.0642474,0.101837,0.0612995}
,
{0.0471027,-0.179843,-0.135574,0.0430644,-0.0901781,-0.190469}
,
{0.0142122,0.161897,0.132425,-0.218447,0.0804554,0.0373899}
,
{0.0707512,0.0146117,0.142725,-0.0648957,0.0893294,-0.201172}
,
{0.0339195,0.151192,0.283293,-0.228208,-0.0137451,0.0820883}
,
{0.0682401,0.150255,0.118547,0.101658,-0.0817186,-0.18159}
,
{0.0393692,0.033628,0.101743,0.322706,0.0239251,0.068856}
,
{0.087377,-0.021875,-0.114465,-0.273353,0.0237668,-0.0327781}
,
{-0.0321971,0.0568953,-0.0514694,-0.058555,-0.102321,0.0692135}
,
{0.00501504,-0.0577905,0.172912,0.0106618,0.2637,0.0707529}
,
{-0.120513,-0.0212196,0.262215,-0.0596645,-0.165059,-0.146889}
,
{-0.117345,-0.00779426,0.218477,-0.0153919,-0.0259455,0.0832367}
,
{-0.00126351,-0.0773664,0.106173,-0.00226434,0.0522881,-0.00127847}
,
{-0.189709,0.0952422,0.112532,0.0091918,0.0904876,-0.130217}
,
{0.0283063,-0.0285718,0.0692754,-0.160754,-0.135427,-0.0281047}
,
{-0.105562,-0.18994,0.0780969,0.00100798,-0.00688056,-0.0387149}
,
{-0.0760221,-0.20975,0.0865739,0.156996,-0.0802357,-0.0336696}
,
{-0.0593097,0.111044,0.200287,0.169857,0.0112704,-0.250631}
,
{-0.271006,-0.237102,0.224156,-0.03701,0.0308697,-0.026093}
,
{0.0154697,0.22067,-0.0171524,0.140171,-0.0276825,0.0224719}
,
{0.0775461,0.234332,0.0106807,-0.00295999,0.134971,-0.0303004}
,
{-0.18382,-0.0362374,-0.01645,0.116184,-0.115679,0.131828}
,
{0.0415523,-0.15594,-0.102079,0.143959,-0.0923362,-0.0878675}
,
{-0.116167,-0.265868,-0.222985,0.0824904,0.164635,-0.136832}
,
{-0.0373336,-0.00303245,0.0185382,-0.199429,0.0409274,0.103307}
,
{0.017487,0.00804366,0.0201981,-0.0220891,0.139311,0.023562}
,
{-0.112044,-0.0340255,-0.114474,0.00161279,0.0258381,-0.222329}
,
{-0.0795277,0.177165,-0.104284,0.0711214,0.139248,-0.0013192}
,
{0.189653,-0.0346894,-0.168973,0.16322,0.194543,-0.0289358}
,
{0.035573,0.0136816,0.0438182,-0.0314691,0.130675,-0.0786505}
,
{0.146137,-0.0205289,-0.0500416,0.0351899,0.135454,-0.00486317}
,
{0.00754154,-0.0806559,0.0888925,-0.183098,0.156276,-0.105615}
,
{0.049266,-0.230906,0.126249,0.0443561,-0.113911,-0.134928}
,
{0.136996,-0.1014,0.0912528,0.0597513,-0.127366,0.115989}
,
{0.0592311,0.0466273,0.159074,0.0436666,0.0144351,-0.109425}
,
{-0.0175399,-0.0616412,-0.0602825,-0.0245906,0.172453,0.00735636}
,
{0.0718171,-0.142225,-0.0136606,-0.0926949,-0.038338,-0.175741}
,
{-0.14795,0.107815,0.0928568,-0.103446,0.0173462,-0.125859}
,
{-0.0862917,-0.0535026,-0.014525,-0.0698952,-0.0191079,-0.0624405}
,
{-0.157873,-0.0370647,-0.115153,0.0798163,-0.0962711,0.0701503}
,
{0.0655477,0.0973078,0.0525907,0.181812,0.0524907,0.200505}
,
{0.0514362,-0.171038,0.11695,0.0544825,-0.128767,0.0995153}
,
{0.0855941,0.106249,-0.00233618,-0.0273507,0.189985,-0.198173}
,
{-0.00600207,-0.0738531,0.187338,-0.0121386,-0.0229391,0.0194959}
,
{0.00544957,0.0486409,-0.125807,0.0288517,-0.0324937,-0.132143}
,
{-0.035692,-0.0517559,0.135736,0.0691259,0.146516,-0.102286}
,
{0.0105721,0.218271,-0.059244,-0.237611,0.177435,0.0117353}
,
{-0.0773372,0.252328,-0.141276,-0.0585224,0.195198,0.0295669}
,
{-0.101325,0.0641708,0.0939183,0.111861,-0.18111,0.227307}
,
{-0.210417,0.00597581,0.0290469,-0.136438,-0.253918,-0.143988}
,
{-0.0285542,0.191022,-0.0717881,-0.12785,0.114413,0.20499}
,
{0.0347742,0.0931216,0.127955,-0.0605499,0.0163082,-0.0185739}
,
{0.0473144,-0.0817825,-0.0811275,0.146287,0.0619561,-0.114307}
,
{0.0403724,0.182205,0.0285932,-0.10851,0.0458543,0.0212491}
,
{-0.0784195,0.0755564,0.111259,0.0733722,-0.0704795,-0.0100525}
,
{0.127001,0.0736025,0.0630975,-0.0970512,-0.0919327,0.0359283}
,
{0.244427,0.0559236,-0.0469067,0.0970721,-0.0347493,0.0810469}
,
{-0.0319423,0.0534101,-0.0378164,0.0599268,-0.164951,-0.00434938}
,
{-0.0300932,-0.14674,0.203786,0.223508,-0.00484564,0.154949}
,
{-0.0289638,0.200569,0.168541,-0.0645358,0.191493,-0.198004}
,
{0.242925,0.154662,0.0730717,-0.0811995,-0.1183,-0.0949113}
,
{0.18725,-0.20578,-0.0709745,0.0624681,-0.021626,0.00598827}
,
{-0.0779497,0.0163621,-0.128931,-0.0282009,-0.145385,-0.00377408}
,
{-0.0252056,0.0202554,-0.0471376,0.0288502,0.0307772,-0.00589448}
,
{-0.00906228,0.0721007,0.241276,0.031192,-0.193343,-0.146378}
,
{0.115691,-0.0806729,0.0666448,-0.162226,-0.170406,-0.0575243}
,
{-0.11071,-0.0647412,0.0509816,-0.0525789,-0.0942224,0.0962279}
,
{0.071019,-0.0858168,0.175048,-0.0886433,-0.0218128,0.108016}
,
{0.127678,0.0543937,-0.0438652,0.186695,-0.0403359,0.0980561}
,
{-0.12604,-0.151846,-0.0166818,-0.119136,0.0226735,-0.10842}
,
{0.118685,0.0711552,-0.166228,0.0186245,0.0460823,-0.0739455}
,
{0.130959,-0.182586,-0.199448,-0.236557,-0.0741509,-0.0307266}
,
{0.215045,-0.052256,0.105024,0.016107,-0.187886,-0.160078}
,
{0.0670935,-0.065199,-0.0687882,-0.125134,0.0484823,0.0857882}
,
{-0.0735996,-0.0599557,0.0294178,0.065195,0.120375,0.0457621}
,
{0.0594536,-0.160331,-0.171284,-0.0111477,0.0436671,-0.000207925}
 };
  static const float bias2[1] = { 0.664648 };
  static const float weights2[][1] = { {-0.126423}
,
{0.269501}
,
{0.10687}
,
{0.171546}
,
{-0.0638052}
,
{-0.0169705}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_3_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_3_49(v, index);
}
static int assign_gen_lepton_prior_14_3_49() {
  global_gen_lepton_prior.at(14,3,49) = &specialized_gen_lepton_prior_14_3_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_3_49 = assign_gen_lepton_prior_14_3_49();

template<typename T> float gen_lepton_prior_15_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0438598,0.14305,0.250426,-0.0759943,-0.0260999,-0.138383 };
  static const float weights1[][6] = { {-0.0141577,-0.334766,0.0791849,-0.106316,0.00686089,-0.031178}
,
{-0.105252,-0.316057,0.280533,-0.0145624,-0.133184,-0.0996545}
,
{-0.00867574,-0.698603,-0.303951,-0.226168,-0.0503041,-0.435187}
,
{0.243743,0.320502,0.262692,-0.235036,-0.142954,0.148391}
,
{-0.0194068,0.288384,0.282505,-0.0747532,0.208479,0.0517876}
,
{-0.00242971,-0.169662,0.0498121,-0.0815125,0.0260192,0.0793208}
,
{-0.0346866,-0.0598254,0.113175,-0.0476177,0.145678,-0.348882}
,
{-0.12849,-0.305339,-0.204913,-0.0420368,-0.243286,0.0581564}
,
{0.0865569,-0.186514,0.123607,0.0423539,-0.0565813,0.145478}
,
{0.214019,0.0948195,-0.167839,-0.0224319,-0.168094,-0.162108}
,
{0.0990799,0.0049779,0.234548,0.0303633,0.0950853,0.163183}
,
{-0.0403386,0.114817,-0.216191,0.118288,-0.0738284,0.0692963}
,
{0.0534172,-0.213859,0.0505035,-0.0182962,-0.152529,-0.351663}
,
{-0.128034,-0.0291757,0.121975,0.0417126,0.0185658,-0.190043}
,
{0.0389861,-0.139149,0.125168,0.0706379,-0.181765,0.0874744}
,
{0.0951397,0.0514193,0.0205814,-0.0647891,0.219787,-0.028703}
,
{-0.0364225,0.269729,0.318381,-0.177281,0.106672,-0.11717}
,
{-0.0916901,-0.49537,0.922687,-0.0949338,-0.0295195,0.221715}
,
{-0.0732361,-0.139658,0.293766,-0.0416521,-0.205919,-0.196381}
,
{-0.191785,0.134483,0.397113,-0.15677,-0.219648,0.25506}
,
{-0.110241,0.145037,0.0443441,0.0572371,-0.0671282,-0.0709159}
,
{0.0595299,-0.30271,-0.316098,-0.164615,0.227579,0.239094}
,
{0.0505195,0.195887,-0.103385,0.0715083,0.00295199,-0.0811804}
,
{-0.226161,-0.148464,-0.122887,-0.0197588,0.0741183,-0.0493578}
,
{0.0587144,-0.29467,0.205564,0.210547,-0.0597521,0.163905}
,
{-0.199187,-0.0396701,-0.268784,0.0465529,-0.202841,0.213251}
,
{-0.126002,-0.169889,0.170621,0.259697,-0.0911711,-0.0197744}
,
{-0.0991331,-0.0437852,-0.111446,0.0958562,-0.108339,-0.134296}
,
{0.0494527,-0.321591,-0.928731,-0.233288,0.26659,0.00346119}
,
{0.0675587,0.0747371,-0.0261473,-0.00556043,-0.0695212,-0.0697699}
,
{0.0524594,-0.0476848,0.0989632,-0.0688979,-0.124952,-0.0885003}
,
{-0.0635851,0.263802,0.0191393,-0.0171061,0.114266,-0.0286242}
,
{0.0676287,-0.214202,0.0378559,-0.192088,0.159776,-0.0518713}
,
{0.05232,0.033691,0.0281763,-0.14834,-0.044191,-0.218807}
,
{0.010582,0.0901959,-0.182456,0.0818405,0.154643,0.0341747}
,
{0.0214171,0.0824089,0.0783767,0.114506,-0.065636,0.0225881}
,
{-0.0670936,-0.0682771,-0.118924,-0.0933479,0.164652,0.0135393}
,
{0.0411599,-0.179466,0.127433,-0.0657933,-0.0768532,-0.0318703}
,
{0.118533,-0.0105447,0.0530547,0.020506,-0.0716032,0.0913284}
,
{-0.0306445,0.0521981,-0.151217,0.159842,0.163767,0.026777}
,
{0.0357932,0.104675,0.14048,0.0276062,-0.10728,0.0435595}
,
{0.0542741,-0.122174,0.142439,0.0130013,-0.246083,0.0843422}
,
{0.00580669,-0.202013,0.0104262,-0.18116,-0.0879377,-0.152782}
,
{0.185313,-0.0502606,0.167309,-0.0412397,0.0337402,-0.0369974}
,
{-0.0184736,0.115524,-0.234473,-0.135609,-0.0638868,-0.0206213}
,
{-0.0586711,-0.162398,0.0818627,-0.0740698,-0.0715588,-0.0559076}
,
{-0.251608,-0.175834,0.141266,-0.101618,-0.158756,-0.102651}
,
{-0.169616,-0.163916,0.0913435,-0.0911884,-0.168256,0.0387888}
,
{0.0245797,0.10754,-0.0719572,0.179156,-0.0618582,0.130701}
,
{0.0823254,0.0267731,-0.102562,-0.0336299,-0.0612974,-0.104615}
,
{-0.212756,0.125477,0.0487494,-0.235501,0.160133,-0.0127455}
,
{0.0909925,0.325961,0.0698522,0.081167,-0.165916,0.0749973}
,
{-0.156933,-0.0565619,0.0876881,0.0365198,-0.0280469,0.00744017}
,
{-0.188474,-0.0772104,-0.0687992,0.130205,0.0971229,0.114065}
,
{-0.0445514,0.142631,-0.0516485,0.17227,0.00899969,0.0933884}
,
{0.144211,0.160311,-0.0380731,-0.0540034,-0.0908796,0.0246364}
,
{-0.00339752,0.196154,0.125631,0.00835433,0.0141454,-0.0848836}
,
{-0.0283919,0.0717478,0.0508272,0.0774371,-0.14059,0.0161141}
,
{-0.00849053,0.270645,-0.0516196,-0.00823952,-0.213012,-0.0178559}
,
{0.0675903,0.023739,0.309753,0.165373,-0.0375897,0.102727}
,
{-0.23153,-0.0456751,-0.1218,-0.125954,0.117196,0.0473541}
,
{0.110002,-0.0132226,0.0853877,0.0394701,0.15025,0.0669256}
,
{0.0184084,-0.0573512,0.128749,0.0862616,-0.103727,0.150702}
,
{0.0851233,0.0900981,0.0394116,-0.181702,-0.0336357,0.14081}
,
{-0.0134585,0.0498312,0.0460954,0.005001,0.0544821,-0.147341}
,
{-0.17176,-0.178439,-0.0692466,-0.00929077,0.214967,-0.0129595}
,
{0.146354,-0.145512,0.000277831,0.142611,0.0872431,-0.0662456}
,
{0.206709,0.108845,0.0948085,0.00141925,0.219755,0.122789}
,
{0.276422,0.0505647,0.0583142,0.123193,0.0391097,0.0483819}
,
{0.171229,-0.0051084,0.126444,-0.107859,0.118238,0.0680318}
,
{0.0125991,0.0989273,-0.092021,0.129308,-0.0831736,0.016801}
,
{0.173203,0.0962111,0.0287635,0.0632482,0.0315564,0.0422802}
,
{-0.0587123,-0.210483,-0.0916785,0.18314,-0.165272,0.038267}
,
{-0.0759036,-0.10184,-0.114843,0.0725662,0.23262,-0.0156964}
,
{-0.0246667,0.276702,0.56848,0.189565,0.0494357,0.177164}
,
{-0.0908441,0.0699288,0.289898,0.035377,0.0761362,0.0200318}
,
{-0.044549,-0.0303718,0.265603,-0.0632847,-0.005305,0.109417}
,
{-0.0491248,0.0205692,0.372329,0.0717088,-0.0474032,0.131869}
,
{-0.0190182,0.0835733,0.434876,0.235831,-0.00172509,-0.0366089}
 };
  static const float bias2[1] = { 0.372524 };
  static const float weights2[][1] = { {0.158193}
,
{0.0300409}
,
{0.0111069}
,
{0.209531}
,
{-0.0543634}
,
{0.0738077}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_15_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_15_0_49(v, index);
}
static int assign_gen_lepton_prior_15_0_49() {
  global_gen_lepton_prior.at(15,0,49) = &specialized_gen_lepton_prior_15_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_15_0_49 = assign_gen_lepton_prior_15_0_49();

template<typename T> float gen_lepton_prior_16_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0672649,-0.128658,-0.102447,0.186046,0.0124253,0.0221766 };
  static const float weights1[][6] = { {0.0386868,-0.267294,-0.0847673,-0.199534,-0.221319,0.0504926}
,
{0.0380249,-0.110697,-0.391208,0.38594,-0.0609958,0.0962677}
,
{-0.00891164,0.0820413,0.221712,-0.298096,0.0353478,-0.214004}
,
{0.179729,-0.25075,-0.171277,0.352068,0.191016,-0.0279651}
,
{-0.098829,-0.241384,-0.196636,0.159254,-0.00647822,0.019079}
,
{0.0182388,-0.154879,-0.141412,0.195064,-0.0105986,0.037467}
,
{0.041341,-0.101861,0.101758,0.225739,0.0728593,0.107335}
,
{0.0108629,0.133258,0.084086,0.329226,0.0773718,0.0565443}
,
{0.0920186,-0.154274,-0.00165814,0.411649,0.227372,-0.139115}
,
{-0.0262988,-0.165744,0.0557405,0.164945,-0.00320652,0.115615}
,
{-0.0283548,0.043806,0.0661759,0.0808696,-0.0766738,-0.0235348}
,
{0.0475234,-0.00397061,-0.101614,0.135946,0.0892333,0.128714}
,
{-0.307927,0.107762,-0.00325244,0.399714,-0.155546,0.0680078}
,
{-0.150345,-0.187607,0.0549907,-0.041715,-0.179634,0.160266}
,
{0.0559419,-0.0076044,0.0274418,-0.140175,0.0991172,0.165962}
,
{0.0229927,-0.106303,0.0296466,-0.0887135,0.0172479,0.12359}
,
{-0.052363,-0.070289,-0.0102617,-0.0226464,-0.0572041,0.173217}
,
{-0.212963,-0.0592029,0.311721,-0.0524508,-0.0443766,0.0995228}
,
{0.0851547,-0.0533567,-0.0803065,0.0410662,-0.0285266,-0.0435166}
,
{-0.131607,0.0295479,0.0877015,-0.152825,0.0325515,0.0029871}
,
{-0.282241,-0.0766272,-0.0991658,-0.000549956,-0.22362,-0.0765577}
,
{-0.0562775,-0.130156,0.139565,0.0977417,0.0152747,-0.0220221}
,
{0.0132042,-0.215908,0.153727,-0.136532,-0.126155,0.149873}
,
{-0.137934,-0.1778,-0.0254924,0.294304,0.255268,0.0555581}
,
{0.108166,-0.233236,-0.178345,0.0150019,-0.0687691,-0.154302}
,
{0.319898,-0.0533438,-0.0311284,-0.0662118,-0.315342,0.129888}
,
{0.014976,0.115105,0.0831079,-0.109766,-0.266429,0.164059}
,
{-0.0144198,-0.051169,-0.13925,-0.0579966,-0.206211,-0.14457}
,
{0.253548,0.11628,-0.12539,-0.714766,-0.231074,0.147354}
,
{0.131356,0.0837266,-0.00480694,-0.182232,0.00795311,0.0630781}
,
{0.0593854,-0.119401,0.062331,-0.198589,-0.145279,-0.0992903}
,
{-0.181738,0.0565311,-0.0863913,-0.0226987,0.0427207,0.0202761}
,
{0.0494536,0.177012,0.0352324,-0.0376655,-0.115572,-0.0847441}
,
{-0.0290577,-0.0622513,0.25503,0.0482517,0.135952,0.0447134}
,
{0.0158498,-0.112786,0.0620341,0.183387,-0.194513,-0.208279}
,
{-0.0786392,0.0367992,-0.0209388,-0.0456152,-0.089301,-0.132915}
,
{-0.183688,-0.140292,0.01898,0.195747,-0.153088,-0.262365}
,
{-0.0394296,-0.26363,-0.092986,-0.168089,-0.0319611,-0.02533}
,
{0.147716,0.163277,-0.264503,-0.108345,-0.0906909,0.164342}
,
{-0.0336709,-0.099319,-0.047062,-0.120496,-0.168316,0.0682903}
,
{0.0839963,0.0870506,-0.0259176,0.17124,0.0140989,0.045409}
,
{-0.139722,-0.120678,-0.0295115,-0.100505,-0.0797716,0.0189312}
,
{0.0737356,-0.0399503,-0.274002,-0.00647413,0.0644478,0.0750328}
,
{0.149669,-0.105298,0.0179683,-0.103749,-0.0781167,-0.116258}
,
{0.117607,0.0422188,-0.200318,0.160266,-0.121875,-0.0345455}
,
{0.0633923,0.0881193,-0.0182765,-0.141224,-0.0330074,-0.0147361}
,
{0.0182494,-0.128409,-0.154566,-0.164496,0.0114353,-0.0607704}
,
{-0.127047,-0.237853,-0.167771,0.0294394,0.0573435,0.0274633}
,
{0.14258,0.0745616,-0.0723645,0.113909,-0.143559,0.0542103}
,
{-0.0950422,0.0610629,-0.185417,0.145284,0.0650361,-0.0358734}
,
{-0.174747,-0.0303108,-0.185597,-0.114369,-0.0979573,0.0028711}
,
{-0.0812752,0.111627,0.22173,-0.265617,-0.0907834,-0.0696981}
,
{0.00368111,-0.0814413,-0.15789,-0.118309,0.110575,-0.0615389}
,
{0.0171324,-0.133404,-0.104508,-0.0438792,-0.17954,0.145229}
,
{-0.135259,0.0381235,0.0177745,-0.0524079,-0.209871,-0.0336444}
,
{-0.196101,0.0879415,-0.206527,-0.0763053,-0.181724,-0.0832194}
,
{0.0915224,0.0612937,0.0499868,-0.0427754,-0.00181335,-0.0290456}
,
{-0.0640919,-0.0422959,0.0425963,0.00171194,-0.0275453,-0.145322}
,
{-0.0488706,-0.0725741,0.183193,0.126953,0.0237867,-0.188562}
,
{0.149789,-0.0599697,-0.0133174,0.103567,-0.0439073,-0.159684}
,
{-0.104594,-0.0990041,-0.0761488,-0.0491765,0.110977,0.0537523}
,
{-0.0487481,0.0246613,0.0713862,-0.0865849,0.156339,0.0458871}
,
{0.0187281,-0.13761,0.00890366,0.0961454,0.00704174,0.0624229}
,
{0.0586896,0.0553443,-0.119453,-0.0642389,-0.166748,0.0610781}
,
{0.0770965,-0.0952804,0.161173,-0.14387,-0.226843,0.149434}
,
{-0.232091,-0.0553508,-0.0203397,0.0668575,0.00711119,0.0984334}
,
{-0.134006,0.0434863,-0.13784,-0.0126144,0.125205,-0.0302271}
,
{-0.00139737,0.121335,-0.0128838,0.0284942,-0.0197509,-0.19241}
,
{-0.169713,0.0857219,-0.106051,0.123132,0.133537,0.0415385}
,
{0.0401914,-0.0923806,0.000483794,-0.0756042,0.0105644,-0.056833}
,
{0.05093,-0.0862671,0.192924,-0.110622,0.0705031,0.0750882}
,
{0.0385053,0.0878372,0.00889165,0.0783533,-0.0184579,-0.208296}
,
{0.149052,0.00632923,-0.180021,0.0743505,0.0875763,-0.0121354}
,
{0.0799905,-0.0585617,0.0177504,0.045809,0.00191752,-0.0503308}
,
{-0.274484,0.0128015,-0.0458662,-0.10891,-0.0825253,-0.204427}
,
{-0.165044,-0.127467,0.0279892,0.0882693,-0.180346,-0.0771507}
,
{0.0645008,0.00650943,-0.0118823,-0.0913239,0.062581,-0.0505167}
,
{-0.153909,-0.0200875,0.0514041,-0.150387,-0.0981904,-0.0902708}
,
{-0.0284987,-0.080818,0.0321559,-0.0316877,-0.0739831,-0.0859695}
 };
  static const float bias2[1] = { 0.384049 };
  static const float weights2[][1] = { {0.212289}
,
{-0.0793854}
,
{-0.159418}
,
{0.0108843}
,
{-0.00927144}
,
{0.158926}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_16_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_16_0_49(v, index);
}
static int assign_gen_lepton_prior_16_0_49() {
  global_gen_lepton_prior.at(16,0,49) = &specialized_gen_lepton_prior_16_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_16_0_49 = assign_gen_lepton_prior_16_0_49();

template<typename T> float gen_lepton_prior_16_1_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.0272734,-0.108776,-0.0618674,-0.0033618,0.100851,0.209718}
,
{-0.0702172,-0.0110655,0.098662,-0.118265,-0.0406164,-0.0132389}
,
{-0.0436168,-0.172984,-0.182227,0.12809,0.166015,-0.186251}
,
{-0.012307,0.1292,0.0831647,0.112042,-0.0449692,0.149767}
,
{-0.0715617,0.129945,0.02678,0.179132,-0.113675,-0.0503539}
,
{-0.0486396,0.144973,0.170847,0.0794485,0.177619,-0.0508132}
,
{-0.125751,0.150087,-0.0371234,-0.0230013,0.0758393,-0.0429515}
,
{0.186518,-0.0105552,-0.165352,-0.0528577,0.132085,0.203669}
,
{0.125233,-0.00659665,0.144526,-0.0561806,0.0179673,0.190681}
,
{-0.198026,0.10769,-0.0900742,-0.121476,-0.0964214,0.0570751}
,
{0.143714,0.111826,0.0342821,-0.162814,0.0788818,-0.137559}
,
{0.160926,0.0095239,-0.112618,0.209969,-0.221623,-0.0705983}
,
{0.00172843,-0.0353771,0.142931,-0.154425,-0.191153,-0.103775}
,
{-0.0820691,0.054016,-0.0149563,-0.047597,0.024438,0.189091}
,
{-0.0318266,0.0324611,-0.0170611,0.118219,-0.203976,0.088705}
,
{-0.123034,0.0844301,0.0836562,-0.144947,-0.0931259,0.10281}
,
{-0.058932,-0.024314,0.102298,0.090205,-0.0442343,-0.135004}
,
{-0.0828996,0.106338,0.0131048,0.110442,0.0330117,-0.185963}
,
{0.214491,0.00222872,0.066845,-0.0901145,-0.0543353,0.109029}
,
{0.153508,0.0470126,0.0412058,-0.0299066,-0.0270922,0.0721342}
,
{-0.230298,-0.100987,0.195713,-0.223538,-0.186328,-0.0769969}
,
{-0.119113,0.0575587,-0.0516857,-0.214897,0.0304111,0.0418604}
,
{8.53805e-05,0.224391,-0.0344022,-0.0797533,-0.0314158,-0.125427}
,
{0.0478105,0.12201,-0.0450375,0.0794018,0.220718,-0.023254}
,
{-0.122478,0.0459057,-0.0258065,0.00663145,-0.148117,0.0111078}
,
{-0.1186,-0.0552907,0.0981552,0.230697,0.180852,0.164947}
,
{0.106377,0.108303,0.0532859,-0.0291553,-0.0288433,0.186087}
,
{0.132239,0.16203,-0.0150037,0.141751,0.145836,0.0735606}
,
{-0.00975645,0.21221,0.156299,0.163123,0.0390578,0.00522575}
,
{0.0445199,0.0248868,-0.107531,0.141776,0.17164,0.0335571}
,
{0.190203,0.19035,-0.0170475,0.124654,-0.117338,0.0447178}
,
{-0.130357,0.117718,0.0501972,-0.136526,-0.0456572,0.0181801}
,
{0.0392382,-0.136569,0.16592,0.237616,0.105922,0.136782}
,
{-0.0520205,-0.0680686,0.223636,0.0789119,0.126205,0.0944043}
,
{-0.110713,-0.0944574,0.23034,0.000185116,0.169172,0.0278739}
,
{0.0497288,-0.131128,0.0749421,-0.0621591,0.0819454,-0.162127}
,
{-0.108785,0.146,-0.0756706,0.165371,-0.130944,0.11815}
,
{0.0301802,0.0579222,-0.115584,0.0218437,0.21617,-0.0409381}
,
{0.0316019,-0.061479,-0.0194548,0.128619,0.0873654,-0.0217065}
,
{-0.0119941,-0.0921117,0.159512,-0.17479,-0.171695,0.0876926}
,
{-0.0171417,0.0636879,-0.0377112,0.00827504,-0.0440856,-0.0283864}
,
{-0.161448,0.103477,0.0922891,-0.0190453,0.0928878,-0.0126693}
,
{-0.00706125,-0.208592,0.202936,0.0800432,-0.0859777,-0.00678491}
,
{0.00035322,0.0493275,0.0813931,0.00963379,-0.0479668,0.0629905}
,
{0.0666701,-0.049572,0.229094,-0.0280477,0.0661649,0.0143928}
,
{-0.191377,-0.123073,-0.0171651,-0.0862342,-0.0944502,-0.171897}
,
{-0.216403,-0.0346812,-0.229161,-0.0794935,0.109908,-0.198261}
,
{0.0119473,0.0845499,-0.0734201,0.190924,-0.00803368,0.0871339}
,
{-0.127053,-0.0992153,0.0329237,-0.180164,-0.0746514,0.0282904}
,
{0.0470702,-0.0145939,0.12239,-0.0635551,-0.0664144,0.128044}
,
{-0.0167504,-0.107449,-0.0315335,-0.142146,0.0438988,0.0817831}
,
{0.0776417,-0.177056,0.0319558,0.0368752,-0.076983,0.210602}
,
{0.0732486,-0.189408,0.0868347,0.13809,-0.0323687,-0.121547}
,
{0.109657,-0.00791161,0.0738586,-0.073415,0.0155698,-0.0377494}
,
{0.0407554,-0.0231756,-0.00534907,0.121578,0.050088,0.0270513}
,
{0.0312881,-0.162823,-0.00504586,0.0412797,0.158784,-0.0400729}
,
{0.0918543,0.127495,-0.146098,-0.0313971,0.0771826,-0.00841803}
,
{-0.0885509,-0.172478,0.0578167,0.218176,0.0128323,0.227755}
,
{0.107622,-0.077921,-0.0435217,0.130353,0.0629191,0.15667}
,
{-0.115769,-0.0592784,-0.0174718,-0.0931167,-0.0905211,0.0686061}
,
{0.00127309,0.0161425,0.101022,0.119947,0.0250751,-0.156126}
,
{-0.0465006,-0.153274,0.144223,-0.170101,0.182602,-0.0767577}
,
{-0.0243892,0.0295718,-0.205196,0.139478,-0.058431,-0.154458}
,
{-0.21059,0.0346063,-0.00159477,-0.136821,-0.0858942,0.103208}
,
{0.0109045,-0.0734675,-0.143888,-0.155092,0.0848624,-0.138623}
,
{-0.0700692,0.119217,-0.122317,0.102549,-0.0236779,0.0169974}
,
{-0.117278,0.0894464,-0.0984381,-0.0122155,0.0480036,-0.167935}
,
{-0.0417919,-0.0925782,-0.0953809,-0.053623,-0.0631895,0.00977688}
,
{0.137559,0.0121411,-0.000850424,-0.0202017,-0.0186208,0.115482}
,
{0.156072,0.213481,-0.0394711,0.130057,-0.03306,-0.145298}
,
{0.0368542,0.218022,0.119536,-0.0489171,-0.2172,-0.0606471}
,
{0.0184151,0.0706678,0.0926471,-0.0139834,0.214347,0.0448528}
,
{-0.0763111,-0.0210393,0.107572,0.00910284,-0.0443411,-0.0975176}
,
{0.043635,0.0179989,-0.193064,0.0157257,-0.0849755,0.096837}
,
{-0.00732085,0.0854089,-0.151491,0.00409413,-0.110983,-0.155541}
,
{0.0230862,0.0140965,0.106788,-0.0649666,0.0589085,0.0321262}
,
{0.000667968,0.0315064,0.132395,-0.0492004,-0.0508105,-0.0987628}
,
{0.0186531,-0.0749819,0.0273147,0.176079,0.00826296,-0.0706398}
,
{0.0693881,0.0146338,0.136341,0.00948241,-0.0873807,-0.15262}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.160169}
,
{-0.0381821}
,
{-0.0357312}
,
{-0.140419}
,
{-0.0628973}
,
{-0.182407}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_16_1_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_16_1_49(v, index);
}
static int assign_gen_lepton_prior_16_1_49() {
  global_gen_lepton_prior.at(16,1,49) = &specialized_gen_lepton_prior_16_1_49;
  return 0;
}
static int initialize_gen_lepton_prior_16_1_49 = assign_gen_lepton_prior_16_1_49();
