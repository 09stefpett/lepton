#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.313264,-0.372975,0.565878,0.175552,-0.796468,0.55606 };
  static const float weights1[][6] = { {-0.177312,-0.123108,-1.62641,-0.802981,-0.325604,-1.19534}
,
{-0.165611,-0.231266,0.0729819,-0.125915,0.134539,0.0948866}
,
{-0.418761,-0.494894,0.0413281,-0.021373,-0.228615,-0.0875512}
,
{-0.512261,-0.283008,1.19813,0.693621,-0.622778,0.824932}
,
{-0.415099,-0.367541,0.389518,0.113425,-0.890513,0.522974}
,
{-0.205335,-0.428563,0.539812,0.0250261,-0.694159,0.712179}
,
{-0.344284,-0.162278,0.455054,0.234249,-0.673051,0.443285}
,
{-0.0693575,-0.0660994,0.0762287,0.0359776,-0.0413639,-0.143895}
,
{-0.0717335,-0.07108,0.15539,0.147087,-0.138865,0.0249771}
,
{0.163518,0.0842315,-0.0336718,-0.0183665,-0.00777549,0.23332}
,
{0.0931823,0.229491,-0.0426696,-0.119403,0.0720836,-0.125113}
,
{-0.0223306,-0.00984996,0.113287,0.0571841,0.118595,-0.0842138}
,
{-0.0512254,0.126848,-0.0490025,0.0625923,0.0257042,0.0493768}
,
{-0.0850719,-0.0232304,0.00951024,0.0282842,-0.103034,-0.0123318}
,
{-0.0207352,-0.134864,-0.0471056,-0.0208296,0.0147606,0.0390213}
,
{0.168715,-0.0278472,-0.173022,0.125419,-0.125171,-0.0570362}
,
{0.115559,0.156842,-0.0079318,-0.133077,-0.00288487,-0.0763121}
,
{-0.0561279,-0.0108191,-0.213456,0.202097,-0.134926,0.00481388}
,
{-0.529884,-0.185848,-1.07074,-0.276468,-0.0790701,-0.782254}
,
{-0.144668,0.160786,0.213343,0.207441,0.04651,-0.0290113}
,
{0.12955,-0.0390547,0.33298,0.172417,-0.0178562,0.102811}
,
{0.121344,-0.0379808,0.200613,-0.0249962,0.260952,0.222671}
,
{-0.227018,0.125051,-0.131492,-0.037544,-0.0776203,0.0548434}
,
{-0.0674151,0.0990722,-0.0234852,0.178573,0.105706,0.0787182}
,
{-0.183576,-0.0510358,0.00869563,0.100477,-0.200268,0.0148175}
,
{-0.200441,-0.264647,0.0869028,-0.133187,-0.27878,-0.0606513}
,
{-0.0236293,-0.179113,0.0208618,-0.0167969,0.00854489,0.0175824}
,
{-0.0216589,-0.120464,0.0384439,0.0537262,-0.0147048,-0.0396314}
,
{0.0688493,0.0851645,0.892061,0.708523,-0.349264,0.437099}
,
{-0.0632416,0.0608774,-0.0621002,-0.108482,-0.0862261,0.124099}
,
{0.193207,0.221253,0.143544,-0.0579556,-0.00807884,-0.0841691}
,
{-0.0522743,-0.15469,0.0165212,-0.0018204,-0.239514,0.129245}
,
{0.0850346,-0.0845492,0.0950812,0.0276329,-0.160453,-0.145685}
,
{-0.0820517,0.180098,-0.0770794,0.0257515,0.0133791,0.140924}
,
{-0.0661887,-0.0648129,-0.0179165,0.00939487,0.00298439,-0.0125531}
,
{0.00833799,-0.095115,0.0243942,-0.0756778,-0.017048,-0.00354517}
,
{0.102019,-0.0176013,0.126639,-0.135114,-0.0725343,-0.0974535}
,
{-0.0563187,0.0172655,-0.0229171,-0.0244785,-0.0298052,0.0034795}
,
{0.0565479,0.126751,0.00447875,0.0259813,-0.00734255,0.0477862}
,
{-0.102184,-0.1534,-0.0565159,-0.0372428,-0.101925,-0.0433438}
,
{0.00800748,-0.0625411,0.00877954,-0.0189321,0.0385593,0.0143135}
,
{0.0889492,0.0490965,0.0209264,0.0537402,0.0481698,0.0267108}
,
{-0.0686166,-0.00414484,-0.038839,-0.0331331,0.0226383,0.0556969}
,
{0.112413,-0.116191,0.114131,-0.21841,-0.159769,-0.111046}
,
{-0.0255377,-0.0872608,0.000112784,-0.072834,-0.0258831,0.0197216}
,
{-0.0409865,0.0763454,-0.0164976,0.0180645,0.0274939,0.0184005}
,
{-0.114512,-0.172782,-0.0591576,-0.0609035,0.0102388,0.0364872}
,
{-0.0169112,0.0748529,-0.00354064,0.0477826,0.0740278,0.0272464}
,
{0.0123544,0.206866,0.0257771,0.0434547,-0.0301275,-0.0407006}
,
{-0.0632027,-0.163124,-0.0319854,-0.063308,0.0905604,0.0780048}
,
{-0.0535513,-0.0384526,-0.0240771,-0.00686052,-0.0262685,0.00612931}
,
{0.0175946,-0.159537,0.0065992,-0.0403438,0.00895336,0.0294617}
,
{-0.0311594,0.0282673,-0.0245931,0.029284,0.0341984,0.0235323}
,
{0.087949,0.114338,0.0770051,0.0459019,-9.95131e-05,-0.097543}
,
{-0.0545424,0.0131722,0.025795,-0.0536532,-0.103821,0.00583991}
,
{-0.014902,-0.0654616,0.00346575,0.0574525,0.0839977,-0.0199201}
,
{0.162748,0.253181,0.0990351,-0.0201902,-0.0474037,-0.101788}
,
{-0.497975,6.33481e-05,0.0306302,0.114665,-0.214147,0.369814}
,
{-0.144102,0.0573123,0.0441636,-0.21652,0.00511572,0.0226973}
,
{-0.040015,0.0652491,0.00359116,0.139096,0.101074,-0.0527065}
,
{0.00578691,0.113767,0.003922,-0.0965031,-0.112035,0.0215412}
,
{-0.133928,0.025425,0.0383409,0.0150231,0.386188,0.0571484}
,
{-0.554802,0.0574722,-0.379015,0.158849,-0.802377,0.663458}
,
{0.0953191,-0.0666489,-0.0192508,-0.0801445,-0.0692462,0.0901019}
,
{0.0211616,-0.0656652,0.00276037,-0.00429825,0.0542079,-0.0475302}
,
{-0.0855996,0.116262,0.0474926,-0.0216326,0.0332401,-0.107694}
,
{-0.166166,-0.0314934,0.0393047,0.0522736,0.0291041,-0.179305}
,
{0.165821,-0.699026,0.289439,0.346397,-0.1171,-0.234668}
,
{0.03751,0.144905,-0.0108295,0.0723193,-0.022942,-0.062336}
,
{0.0868758,-0.132138,-0.0105745,0.105566,0.101425,-0.0557018}
,
{0.106181,-0.0692022,-0.0323411,0.0399806,0.00681778,0.100609}
,
{0.116646,0.00300583,-0.0184723,0.106676,0.201339,0.134149}
,
{0.268699,-0.178368,-0.0726724,-0.275964,0.129037,0.158672}
,
{0.0938788,0.226946,0.023435,0.0101031,-0.375909,-0.0892938}
,
{-0.251451,-0.205899,-0.0338252,0.584368,0.0191456,0.132581}
,
{0.486426,-0.327876,0.0498519,0.00561453,0.124207,0.0512655}
,
{-0.061492,0.0844041,0.121044,-0.121358,1.08125,0.0147809}
,
{-0.0408929,-0.569133,0.682886,-0.026608,0.0550665,0.267606}
,
{-0.140373,-0.223371,0.178945,-0.134614,-0.718304,0.314129}
 };
  static const float bias2[1] = { 0.315351 };
  static const float weights2[][1] = { {-0.0191116}
,
{-0.0101386}
,
{0.0405568}
,
{0.0203227}
,
{-0.0240142}
,
{0.0314296}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_0_0(v, index);
}
static int assign_gen_lepton_prior_0_0_0() {
  global_gen_lepton_prior.at(0,0,0) = &specialized_gen_lepton_prior_0_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_0_0 = assign_gen_lepton_prior_0_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.855453,-0.220602,0.346705,0.300354,0.320248,0.182329 };
  static const float weights1[][6] = { {0.575654,-0.0832734,-1.00399,1.09611,-0.856181,0.91253}
,
{-0.0895835,-0.204112,-0.233371,0.0992009,0.00162696,0.126826}
,
{-0.131238,0.37503,-0.263945,0.192112,-0.031999,0.141096}
,
{0.906667,-0.768277,1.64158,-0.698158,1.70413,0.276792}
,
{0.882471,-0.312114,0.475985,0.435859,0.286035,0.0930213}
,
{0.922775,0.0573405,0.33316,0.201514,0.350781,0.188887}
,
{0.735747,-0.15695,0.243353,0.413064,0.0265803,0.415282}
,
{-0.0529292,0.0514675,0.0508927,-0.109463,-0.0500189,-0.173467}
,
{0.0531176,-0.0816158,0.676316,-0.0302748,0.407929,-0.0463449}
,
{0.0903822,0.0716964,0.104009,0.141841,0.0525472,0.00611478}
,
{0.164338,-0.0389907,0.0983277,-0.161075,0.0381064,0.00671128}
,
{-0.246843,0.128296,0.101236,-0.0690753,0.0737202,0.0486326}
,
{-0.0596254,-0.0220529,-0.0766639,0.0406642,-0.1282,-0.086214}
,
{-0.0967631,-0.119504,-0.200852,-0.16486,0.0368503,-0.175317}
,
{-0.0533731,-0.102683,0.0299283,-0.0851726,-0.134072,-0.0561359}
,
{-0.0940785,-0.0305709,-0.245758,-0.00842549,0.015186,0.117945}
,
{-0.0203928,-0.174375,0.702856,-0.339589,0.408707,-0.340674}
,
{-0.163281,-0.08005,-0.0277279,0.0103951,-0.0296192,-0.0303523}
,
{1.62509,-0.62367,-0.974854,0.635658,-0.33034,0.467985}
,
{-0.152995,0.0911595,-0.0164901,-0.0808245,-0.0253398,-0.140147}
,
{-0.071325,0.121572,-0.102808,0.0477718,0.248529,-0.00705672}
,
{-0.0782564,-0.287678,-0.20079,-0.171144,0.112359,0.00350353}
,
{-0.135428,0.110697,0.0698938,0.040516,-0.0305859,-0.144385}
,
{-0.106233,-0.000136462,-0.0021131,-0.250129,0.0138167,-0.0598468}
,
{-0.0717312,-0.140211,-0.0895168,0.0256574,0.118869,0.158204}
,
{0.0194713,-0.10953,0.150847,-0.104709,0.00936585,0.219398}
,
{0.0247936,-0.22468,-0.120718,0.0993376,0.18044,0.0769056}
,
{-0.0643896,0.0912852,0.105882,0.0289583,-0.0889631,-0.0234424}
,
{-0.559546,-0.724682,0.415438,-0.703693,0.331549,-0.435781}
,
{0.117049,0.129049,0.00847409,-0.169928,0.0482655,0.0174989}
,
{0.0801355,-0.0267632,0.0971931,-0.11357,-0.165342,0.182141}
,
{0.0934946,-0.108072,-0.00222211,-0.104908,0.146163,-0.0135767}
,
{-0.17489,0.00923413,0.0198997,-0.181985,-0.0569315,0.247114}
,
{0.00228339,0.0164878,0.036546,-0.0585383,0.136988,0.0607134}
,
{0.0136974,-0.0127139,-0.0813042,0.117499,0.0608677,0.0103574}
,
{-0.00954725,-0.0220563,0.0443682,-0.039769,-0.0327378,0.0358028}
,
{0.0275091,-0.196459,-0.0199527,0.193187,0.0187394,-0.0386671}
,
{-0.0205817,0.00835968,0.0864331,0.0716851,-0.0845141,-0.0914664}
,
{-0.107992,-0.118286,-0.000119996,0.0762599,-0.0321084,-0.0559256}
,
{-0.0454366,-0.0845661,0.0384847,-0.0778532,-0.063826,-0.0483267}
,
{-0.0155175,-0.122496,-0.0550452,-0.0689786,0.0157506,-0.00858358}
,
{-0.125602,0.0290116,0.0649227,-0.192487,-0.056276,0.0740948}
,
{-0.0213644,0.0185497,0.0332701,0.000719901,-0.0219668,0.0140679}
,
{0.0583019,0.0189598,-0.0928209,0.0553203,0.0485992,-0.101124}
,
{-0.0570955,0.0181282,-0.0153094,0.126726,-0.00502845,-0.00915552}
,
{-0.00430509,0.0379208,0.0454248,0.019429,-0.0149914,0.0333903}
,
{0.0808535,0.0832978,-0.0344122,-0.0677313,0.0406314,0.041475}
,
{-0.00385098,-0.00454058,-0.0551592,-0.0494115,0.0324037,0.00342209}
,
{0.0290268,0.122996,-0.0250915,-0.0970356,0.0172831,0.0047359}
,
{0.0234095,0.116596,0.112562,0.0122212,-0.0701423,-0.0266323}
,
{0.00517152,0.0425656,0.032737,0.0579699,-0.0169533,0.0102897}
,
{-0.0119252,0.133592,-0.0478556,0.00611474,0.0297371,-0.0774734}
,
{0.0102179,-0.0163124,-0.00880643,0.00438319,0.00846645,0.026583}
,
{0.136304,0.0999238,0.0415855,0.0387036,-0.000803105,-0.0521415}
,
{0.0284775,0.0250914,-0.00870928,-0.0388225,0.0842303,0.0455971}
,
{0.0771538,0.0612145,-0.0817152,-0.0717737,0.112111,-0.00774797}
,
{0.073422,-0.0365115,-0.166899,-0.151268,0.121728,0.0686393}
,
{-0.130123,0.0322256,-0.0360048,0.020946,0.0141657,0.369382}
,
{0.0444105,0.0747482,-0.141006,-0.100101,0.0201061,-0.00209184}
,
{0.0518301,0.11678,0.196798,0.0192468,0.100494,0.185236}
,
{-0.0563349,0.120962,-0.0636086,-0.0286966,-0.0738078,-0.0294249}
,
{0.0454043,0.285917,-0.00043324,-0.0179844,0.298052,0.206735}
,
{-0.284935,-0.467965,-0.131393,0.686648,-0.16477,0.0472844}
,
{0.0298586,0.0410629,0.161148,0.0532275,0.0191968,-0.0690097}
,
{0.00586541,-0.0937441,0.028088,0.103139,-0.000775142,-0.0420116}
,
{-0.00180854,-0.0800315,0.0578892,0.106778,0.00574588,0.0149641}
,
{0.134345,0.380061,0.0845448,0.0166101,0.122129,0.0389726}
,
{-0.120243,0.0616962,0.208974,0.332593,-0.0462035,-0.334481}
,
{-0.0264942,-0.0571047,-0.164412,-0.064407,-0.0296888,0.00294913}
,
{-0.0446646,-0.0519683,-0.0524594,0.105172,-0.140577,-0.187541}
,
{-0.0282328,0.0679511,0.110031,0.00691934,-0.0741383,-0.035134}
,
{0.0152235,0.234259,0.254392,-0.00217987,0.0725531,0.186808}
,
{0.0339914,-0.00274759,-0.684829,0.264204,0.526287,0.282582}
,
{-0.0805756,0.0220039,0.117461,-0.117326,-0.0246192,0.442531}
,
{0.0432203,0.0728891,-0.138624,-0.131966,0.122643,0.389574}
,
{-0.183609,0.162048,0.0998012,-0.0981904,-0.177033,0.268547}
,
{-0.322154,0.24982,-0.0400192,0.403549,0.067247,0.200362}
,
{0.054172,-0.0239219,0.095312,0.0336018,0.163833,0.0185708}
,
{0.542783,-0.0610935,0.731317,-0.906781,-0.286283,0.135044}
 };
  static const float bias2[1] = { 0.348318 };
  static const float weights2[][1] = { {-0.0535717}
,
{-0.00739273}
,
{0.0246705}
,
{-0.034742}
,
{0.0334352}
,
{-0.0154635}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_0(v, index);
}
static int assign_gen_lepton_prior_1_2_0() {
  global_gen_lepton_prior.at(1,2,0) = &specialized_gen_lepton_prior_1_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_0 = assign_gen_lepton_prior_1_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.115827,0.104522,-0.0600129,0.0954921,-0.13022,-0.0143225 };
  static const float weights1[][6] = { {0.0568314,-0.169698,-0.0852526,0.587568,0.191954,-0.608688}
,
{0.11749,-0.0947891,-0.323521,-0.243632,-0.269166,0.253613}
,
{-0.272299,-0.0361256,0.0322724,-0.266705,-0.404649,-0.31765}
,
{0.204792,0.356684,-0.173257,0.583855,0.175486,0.209314}
,
{-0.13252,0.195388,-0.180246,0.139089,0.0534016,0.229191}
,
{0.100071,-0.00041817,-0.0987831,0.11248,0.0498728,-0.0453856}
,
{-0.0510295,0.069807,-0.0411126,0.184922,-0.184998,0.104111}
,
{-0.121956,-0.0282517,0.0596835,-0.0316964,0.260934,-0.103698}
,
{-0.191844,0.381816,0.00195319,-0.313425,0.445602,0.0503981}
,
{0.131777,-0.0573248,-0.0375808,0.206372,-0.137791,0.139239}
,
{0.141663,0.139793,0.0628107,0.0878919,-0.22404,0.0228981}
,
{-0.188324,0.0751016,-0.0729399,0.0294228,0.0714956,0.122293}
,
{-0.116135,0.133646,0.00648352,-0.233604,-0.453829,0.161463}
,
{0.193099,0.181775,0.0497648,-0.0952282,-0.420803,-0.0961741}
,
{0.00190243,-0.0669115,0.03014,0.174285,-0.199112,-0.103848}
,
{0.0302938,-0.17416,-0.0393314,-0.0925404,0.240804,-0.0845075}
,
{-0.0560495,0.314368,0.142406,-0.428211,0.14066,0.509885}
,
{-0.140658,-0.182491,0.111782,-0.160363,-0.444847,0.0637782}
,
{-0.176014,-0.20648,-0.20591,-0.0306516,-0.631885,-0.0670234}
,
{0.0865584,-0.0120947,0.103141,-0.0116833,-0.0816329,-0.119777}
,
{-0.0235503,-0.0686695,-0.0139974,0.150175,-0.21783,0.127094}
,
{0.0741239,-0.0163323,0.001558,0.0291166,0.0103287,0.0396983}
,
{-0.101654,0.113731,0.0723118,-0.0630314,0.0612238,0.143831}
,
{-0.0877279,-0.00750057,0.0329375,0.0480822,-0.180193,0.0402146}
,
{0.137398,-0.123643,0.12709,0.0258337,-0.134368,-0.0462066}
,
{0.132969,0.0627936,-0.0408061,0.238711,0.0807129,0.061946}
,
{-0.263886,-0.253825,-0.191403,-0.0454514,0.0363558,-0.0112353}
,
{0.00305681,-0.280993,-0.00922145,0.128371,-0.0459527,0.0495582}
,
{-0.229361,0.394843,0.416058,-0.124576,0.419972,0.140524}
,
{-0.0335686,0.113078,-0.00657098,0.0444397,0.191885,-0.00676161}
,
{-0.0552575,-0.0915361,-0.0410033,-0.0174408,-0.00473373,0.0846678}
,
{-0.0648748,-0.145273,0.230382,-0.128674,-0.0937763,-0.146366}
,
{-0.196697,0.0274823,-0.0358707,-0.0159548,-0.0320023,0.216919}
,
{0.0315173,-0.106582,0.0238041,0.193275,-0.0771284,-0.104203}
,
{0.056183,0.0025703,-0.17562,-0.0601834,0.0491765,0.081455}
,
{0.109498,-0.00921355,0.139764,-0.00216035,-0.0242665,-0.0350405}
,
{0.345046,0.313929,0.13804,0.014983,0.154893,-0.253794}
,
{0.0422665,-0.0305067,-0.0369298,0.0365736,0.054991,0.0531366}
,
{-0.0300115,0.233162,-0.269196,0.196599,-0.158997,-0.0313082}
,
{-0.109004,-0.109608,-0.0280695,-0.0179219,-0.0128772,0.0985608}
,
{-0.0467722,0.0109776,-0.0129309,0.0222832,-0.0127622,0.00433756}
,
{-0.113121,0.0485221,-0.106361,0.0132665,-0.224237,0.011703}
,
{0.0177161,0.0314307,0.00551286,-0.0378764,0.0888158,-0.0432841}
,
{-0.116108,0.0836095,0.07206,-0.146464,-0.0624083,-0.152587}
,
{0.0985269,0.0206585,-0.0368885,-0.0500856,0.0672315,0.000705378}
,
{-0.0757354,-0.0306211,-0.035494,-0.024349,0.0200717,0.0303793}
,
{-0.0563243,0.0322188,-0.118901,0.28293,0.0556768,0.0439554}
,
{-0.101148,0.0431801,-0.000275585,-0.010309,-0.0469379,-0.0461088}
,
{-0.273772,-0.0397838,-0.052973,-0.252232,0.115669,-0.05252}
,
{-0.0613319,0.000137948,-0.0108561,-0.0357352,0.109806,-0.0126283}
,
{-0.0375586,-0.0202712,-0.00255603,0.0500513,0.0527811,0.0182674}
,
{0.0431662,0.213317,-0.124813,0.0872572,-0.278958,-0.0494528}
,
{0.0401335,0.0363807,0.0271571,-0.00617604,-0.0251921,-0.0406615}
,
{-0.0440646,0.129805,-0.0825322,-0.372904,-0.16112,-0.170201}
,
{-0.00647688,-0.0681037,-0.31049,0.0203659,0.0546948,0.00603862}
,
{-0.147719,0.177027,-0.101136,0.00886162,0.00396043,-0.0723028}
,
{-0.157108,0.235319,0.495531,-0.198709,-0.546199,0.0556242}
,
{0.5894,-1.42419,-1.10607,-0.302312,0.134438,0.544045}
,
{-0.415724,-0.0790406,-0.485079,0.135001,0.2153,0.00289727}
,
{0.231099,0.0900796,0.229913,0.155316,-0.0140813,-0.0215531}
,
{0.0236789,-0.0402454,0.245986,0.119204,-0.0256674,0.0397354}
,
{0.997904,0.634488,-0.365495,0.0902404,0.185511,0.258303}
,
{-0.141072,-0.114824,-0.620132,0.926018,0.0551696,-0.932118}
,
{-0.0149782,0.299132,-0.258625,0.0300397,0.012,0.0246071}
,
{-0.315469,-0.144292,-0.0400804,-0.18455,-0.0697127,-0.16215}
,
{0.297385,0.248578,-0.239698,-0.220561,0.0600533,-0.0499234}
,
{0.0450083,0.192048,0.395051,-0.570197,-0.0569191,0.162041}
,
{0.215378,-0.717855,-0.474152,0.581185,0.635795,-0.162239}
,
{-0.366639,-0.143936,-0.166452,0.346517,-0.012649,0.00747965}
,
{-0.224214,0.0149251,0.0293607,-0.0588097,-0.127167,-0.11952}
,
{0.094827,0.0615543,0.0385548,0.0362525,-0.0593552,0.0734488}
,
{-0.0437437,0.00748715,-0.423956,-0.171827,0.554882,-0.0324808}
,
{-0.417335,0.624502,0.14838,0.19816,-0.806701,0.0619903}
,
{0.0618722,-0.49134,0.233024,-0.165265,0.134682,-0.0339822}
,
{-0.185992,-1.21313,0.948949,-0.139248,-0.687596,0.14091}
,
{-0.974906,0.336581,-0.737937,-0.0360267,0.203187,-0.0612056}
,
{-0.940428,1.05813,1.10551,-1.4199,0.340451,1.20101}
,
{0.013635,0.0404572,-0.115565,0.0115831,0.0451643,0.119257}
,
{0.546802,-0.0631214,0.215636,0.0959283,-0.328342,-0.22513}
 };
  static const float bias2[1] = { 0.0371317 };
  static const float weights2[][1] = { {-0.04046}
,
{0.0665813}
,
{0.0393461}
,
{-0.0440279}
,
{0.114379}
,
{0.0709517}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_1(v, index);
}
static int assign_gen_lepton_prior_1_2_1() {
  global_gen_lepton_prior.at(1,2,1) = &specialized_gen_lepton_prior_1_2_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_1 = assign_gen_lepton_prior_1_2_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0336744,0.208334,0.141141,0.167984,0.116979,-0.0136983 };
  static const float weights1[][6] = { {-0.107421,0.157029,0.226737,-0.44872,0.595133,-0.552375}
,
{-0.42707,0.262128,-0.253387,-0.17771,0.00433446,-0.20978}
,
{0.0552523,0.175976,-0.14032,0.0471562,0.292767,0.0935606}
,
{0.336459,0.794693,-0.291882,1.07378,0.49369,0.989683}
,
{0.0606606,0.266915,0.333916,0.206187,0.109865,0.0944029}
,
{-0.139676,0.359442,0.223804,0.161665,-0.185229,0.130769}
,
{-0.070642,0.141415,-0.0298329,0.152723,0.0788475,0.107746}
,
{-0.00748087,-0.1157,-0.0427455,0.0684512,-0.170181,0.163324}
,
{-0.0884376,0.360443,-0.163126,0.237231,-0.13589,0.0293231}
,
{-0.185308,-0.0719124,0.111775,-0.0172933,0.156323,-0.120057}
,
{-0.0804791,-0.156599,0.0134407,0.138758,-0.181178,-0.0492286}
,
{-0.118454,0.0445503,-0.106529,-0.0809789,-0.193525,-0.0205253}
,
{-0.181512,0.0106131,0.0948155,0.135288,-0.0427905,-0.053858}
,
{-0.0601951,0.156141,0.148083,-0.0425275,0.133904,-0.0340665}
,
{-0.131508,-0.131422,0.10105,-0.0810232,-0.0309817,0.00674607}
,
{-0.0886912,-0.200403,-0.154899,-0.00401475,0.11248,0.0571556}
,
{-0.0364407,0.485645,-0.134657,0.445791,0.0240705,0.553155}
,
{-0.257544,-0.135853,0.370903,-0.0760352,-0.154304,0.276992}
,
{0.0456724,-0.120988,1.18218,-0.56514,0.459835,-0.338378}
,
{0.042547,0.126773,-0.0305673,0.100832,0.0573556,-0.0814052}
,
{0.0572114,-0.0168912,-0.00420017,0.154249,-0.0658707,0.0497472}
,
{-0.124423,-0.0607935,-0.072743,0.109842,-0.245197,-0.0904887}
,
{0.102275,0.00086666,0.100907,-0.10554,-0.10578,-0.011615}
,
{-0.163741,0.0700044,-0.025813,0.0105702,0.00455825,-0.120243}
,
{-0.0103647,-0.113756,0.146134,-0.051547,0.00435674,0.0581988}
,
{0.142036,-0.242509,-0.0535935,0.397563,0.0201639,0.104565}
,
{-0.178418,0.164155,0.0715487,-0.0702852,0.0732403,0.0936082}
,
{0.153445,0.036018,-0.175911,-0.00241553,0.0738631,-0.073733}
,
{-0.860641,0.188081,-0.762482,0.57473,0.207399,0.47283}
,
{0.149146,-0.00795252,-0.165884,0.0884175,-0.039505,0.0308338}
,
{-0.10517,-0.109944,0.232588,0.0475358,0.131067,-0.0861788}
,
{-0.0973275,0.096985,0.192774,-0.0833301,0.102285,0.174559}
,
{0.073295,-0.0789142,0.0253068,-0.0711158,0.0844261,0.264662}
,
{-0.0287118,0.113413,0.106416,-0.0179459,0.110751,0.100059}
,
{-0.0753887,0.0797332,0.0378216,-0.0242585,-0.158476,-0.149568}
,
{0.00335434,-0.0699218,-0.0455158,0.0753106,0.0274886,0.0363274}
,
{0.356545,0.0676456,-0.0687985,-0.134907,-0.0724618,0.0968554}
,
{0.0535084,-0.011317,-0.0403389,-0.0211825,-0.0377381,0.0444102}
,
{-0.0321094,0.11101,0.0168647,-0.0714406,-0.197835,-0.155973}
,
{0.0163972,0.0186908,0.09233,0.0333183,-0.0136031,-0.0641763}
,
{0.0636199,-0.0134297,-0.035852,0.0398089,-0.0125318,-0.0462961}
,
{0.0473148,0.054702,-0.302304,-0.211485,-0.082833,-0.122648}
,
{0.0357489,-0.0143216,0.0571364,0.0595441,-0.00240112,-0.0212798}
,
{-0.211708,0.125696,-0.103491,-0.156567,-0.372079,-0.15166}
,
{-0.0735123,0.0163792,-0.0177089,0.0680291,0.125288,-0.116207}
,
{0.00122256,0.0248434,0.0199622,-0.0770382,0.0159071,0.0755784}
,
{-0.142832,-0.0844016,0.128343,0.00723913,-0.0115976,0.273942}
,
{0.0893321,0.0119547,-0.0116051,-0.00563594,-0.0016085,0.00964945}
,
{0.124972,0.02881,-0.107302,0.0496452,-0.188618,-0.115954}
,
{-0.109338,-0.0033502,0.0351417,0.0342638,0.0215863,-0.027729}
,
{-0.0705647,0.0194913,-0.0112681,-0.0391787,0.03467,-0.0161652}
,
{-0.400924,0.02765,0.0627455,0.164362,-0.0326754,-0.240798}
,
{0.00726942,-0.0566284,0.0193491,0.075275,-0.105584,0.012316}
,
{-0.26773,0.034361,-0.00772845,-0.208007,-0.195291,0.0592306}
,
{-0.211595,0.0500961,-0.254698,0.0796513,0.126606,-0.213273}
,
{-0.00823936,0.00506658,-0.0381315,-0.0933473,0.0150074,0.0367499}
,
{0.0807103,0.315755,-0.0300958,0.130845,0.257309,-0.364571}
,
{0.041266,0.0911421,-0.0770144,-0.0566289,-0.0523226,-0.145458}
,
{0.155346,-0.118951,-0.334232,0.255573,0.287752,0.0889257}
,
{0.166961,0.00973402,-0.0407828,-0.0942929,-0.00391875,0.106669}
,
{0.109541,0.0417694,0.0461132,0.0381671,-0.0464987,0.0824902}
,
{0.0909053,0.346812,-0.848135,-0.435308,0.426506,0.185872}
,
{0.0991697,0.0587961,0.0698514,-0.180638,-0.129513,0.0630048}
,
{-0.120867,0.36617,0.119061,-0.173034,-0.0816595,-0.037154}
,
{0.113527,-0.163232,0.0379153,-0.0278885,0.0409178,0.35437}
,
{-0.234269,-0.252117,0.0578287,0.034674,-0.104065,-0.0818538}
,
{0.566348,-0.223228,-0.00352791,0.183148,-0.280131,-0.0186601}
,
{0.136815,-0.216894,0.00205204,0.0595205,-0.182022,-0.144764}
,
{0.0375674,0.0497741,0.242405,-0.312685,-0.236952,0.0575841}
,
{-0.170274,-0.0330925,0.271191,0.124139,-0.0953331,-0.136333}
,
{0.0938359,0.102175,0.107542,0.110289,0.00690611,-0.0115739}
,
{0.243383,-0.0196212,0.0820428,-0.221024,-0.161565,0.170439}
,
{0.019917,-0.16071,0.0592711,-0.0535527,-0.0930596,-0.0768369}
,
{-0.34324,-0.0469839,-0.295415,-1.06649,-0.186089,0.504571}
,
{-0.165178,-0.570675,-0.674554,0.360769,-0.15183,-0.935727}
,
{-0.107662,0.317022,0.488803,-0.210944,-0.0881633,0.0615312}
,
{-0.99371,0.164579,0.844527,-0.591737,0.371929,0.958407}
,
{0.0157823,0.0602323,-0.100417,0.0451549,0.0876324,-0.271214}
,
{-0.741473,-0.086901,0.16344,0.0344743,1.20705,0.329704}
 };
  static const float bias2[1] = { 0.131218 };
  static const float weights2[][1] = { {-0.0492397}
,
{0.0426698}
,
{-0.031643}
,
{0.0284152}
,
{-0.069753}
,
{0.0339504}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_2(v, index);
}
static int assign_gen_lepton_prior_1_2_2() {
  global_gen_lepton_prior.at(1,2,2) = &specialized_gen_lepton_prior_1_2_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_2 = assign_gen_lepton_prior_1_2_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0235413,0.0409444,-0.230741,0.0260523,-0.171313,-0.164706 };
  static const float weights1[][6] = { {0.121708,-0.0868451,0.0358517,-0.0520211,-0.0984065,0.0418378}
,
{0.307043,0.393503,-0.354698,-0.648554,0.71409,-0.218538}
,
{-0.565322,0.0973453,-0.326727,0.479834,0.238487,0.39461}
,
{0.193351,-0.209852,-0.0284283,1.1409,-1.68906,-0.282836}
,
{-0.0485038,-0.0943515,-0.364391,-0.0231357,-0.143289,-0.167172}
,
{-0.0767018,0.185417,-0.202534,0.304431,-0.0704658,-0.303926}
,
{0.0357653,0.0817339,-0.233382,-0.193749,0.141511,-0.0385579}
,
{-0.169263,-0.0608494,0.139181,-0.305579,0.0770928,0.233843}
,
{-0.241178,0.176604,0.0958871,0.0492523,-0.119211,-0.0674666}
,
{-0.0235938,0.0987959,-0.179723,-0.104577,0.0991076,-0.164661}
,
{-0.166375,0.0435707,0.0442451,-0.0599046,-0.0926807,0.144534}
,
{-0.112313,0.0462776,0.106204,-0.0130327,-0.0652003,-0.010531}
,
{0.0416015,0.0446685,-0.0134627,-0.346042,-0.0677988,-0.0197507}
,
{-0.00341247,0.124868,-0.000706259,-0.219473,-0.0720632,0.190857}
,
{0.0584931,-0.0869703,0.0243067,0.00104051,0.098741,0.0330984}
,
{0.201843,-0.0125655,-0.197403,0.128067,-0.018479,0.00451738}
,
{-0.21668,0.0686595,0.479364,-0.103944,0.0203621,0.15861}
,
{0.0826891,-0.0921932,0.0703048,0.0431897,-0.220604,0.180093}
,
{0.00852256,-0.578814,-0.581686,0.283997,0.154114,-0.269419}
,
{-0.104217,0.0677038,0.0426081,-0.128591,-0.0400926,0.143835}
,
{0.0121322,0.106487,0.029451,-0.0707538,-0.10561,-0.0998236}
,
{-0.0514693,-0.0448218,0.0347148,-0.0138925,-0.0660346,-0.10331}
,
{-0.028072,-0.0714567,-0.220004,0.154524,-0.0914401,0.0464082}
,
{0.0224382,0.0102623,0.00899045,-0.20202,-0.0722525,-0.04631}
,
{-0.145507,0.00118272,0.15328,0.214734,-0.0816459,-0.153183}
,
{-0.011212,-0.0781993,0.157166,0.178571,0.0946629,-0.0735075}
,
{-0.0117039,-0.0726169,0.112692,0.0306146,0.0413775,0.0691334}
,
{-0.0421136,0.186195,-0.0594571,0.0160901,0.246394,-0.0637973}
,
{0.13345,-0.00268385,0.118188,-0.314907,-0.257188,-0.200762}
,
{0.182317,0.171725,-0.0158851,0.015722,-0.0459953,-0.0306575}
,
{-0.185903,-0.0717837,0.0566244,0.22106,-0.0497652,-0.0963262}
,
{0.109155,0.0219114,-0.0271985,-0.129463,-0.0323062,0.0583613}
,
{-0.147022,-0.207737,0.0815168,-0.0300139,0.085648,0.242947}
,
{-0.22884,-0.0321481,-0.0814389,0.0762231,-0.0408895,0.0417799}
,
{0.0278121,-0.00200911,0.0718675,0.14234,0.0377399,-0.127767}
,
{-0.0154241,-0.0891457,0.107457,0.00245844,0.063542,-0.115992}
,
{0.30383,-0.00296954,0.137977,0.0142654,0.00758675,-0.130212}
,
{-0.0841457,0.0814659,-0.104836,-0.146428,-0.0125597,0.0728824}
,
{-0.410612,0.112956,-0.0871869,0.070463,-0.207965,-0.079812}
,
{0.195366,0.0376661,-0.104072,-0.0253027,-0.191839,0.195492}
,
{0.0965617,-0.0399826,0.0045398,0.144131,-0.0962602,0.00718106}
,
{-0.162853,-0.0441659,-0.156862,0.00671948,-0.170866,0.518213}
,
{0.0167978,0.0179529,-0.0202187,-0.0171662,0.0386484,0.0235984}
,
{0.226945,-0.0779189,0.0591613,-0.221936,-0.487187,-0.13995}
,
{-0.154308,0.0635714,-0.120993,-0.144993,-0.00432519,0.135234}
,
{-0.141875,0.0494639,-0.00903972,0.0517497,0.0760814,-0.0837661}
,
{-0.054544,-0.0937006,-0.0344167,-0.12841,0.480789,0.459831}
,
{0.0591883,-0.0249975,0.025501,-0.0984149,0.0347563,-0.00881076}
,
{0.251386,-0.154712,0.157718,-0.0989745,-0.371991,-0.218975}
,
{0.190207,-0.148262,0.154913,0.0416006,0.160928,-0.0173679}
,
{-0.0426288,-0.0384557,0.0220581,-0.00865623,0.0620866,0.0486545}
,
{0.499804,-0.16362,0.113247,-0.288754,-0.0737947,0.177814}
,
{-0.076251,0.0226399,-0.0299239,-0.0237315,0.0692723,0.0191546}
,
{-0.00962652,-0.121444,0.0379795,-0.478321,0.340266,0.253116}
,
{-0.105368,0.053232,0.0266732,0.240564,0.140807,-0.0464435}
,
{-0.183278,-0.0439879,-0.0110555,0.120996,0.11646,0.113666}
,
{0.0350832,-0.0541703,0.318421,0.324376,0.123271,-0.134936}
,
{-0.185636,0.0372824,0.133638,-0.0622007,-0.14167,0.00495382}
,
{-0.130614,0.188856,0.344087,0.194386,-0.174763,0.0772127}
,
{-0.0172077,0.101954,0.0396864,0.0499773,-0.0949227,-0.00788197}
,
{0.0208857,0.00227889,-0.197889,0.131359,0.0219765,-0.066619}
,
{-0.00450185,-0.134576,-0.0668585,-0.0516017,-0.0889023,-0.162645}
,
{-0.118347,-0.0598436,0.0840209,0.211444,0.109648,-0.0407779}
,
{0.142197,-0.0906668,0.332885,0.0611116,-0.127341,0.0236881}
,
{-0.03729,0.140775,0.0245638,-0.041788,-0.155996,-0.117196}
,
{-0.134184,0.0906084,-0.134747,0.2224,-0.078677,0.0592006}
,
{-0.234752,0.189047,0.0430176,0.133778,-0.296239,0.203503}
,
{-0.219514,0.169341,0.147664,0.0362906,-0.134758,0.00602101}
,
{0.118661,0.0540032,-0.164365,-0.121567,0.21761,-0.0209253}
,
{0.247725,0.0483605,0.286376,0.0405457,-0.0248307,-0.0575197}
,
{-0.168886,-0.00848817,0.0168323,-0.0852925,0.265446,0.0355153}
,
{0.285437,0.0863592,-0.199072,0.0388998,-0.0169164,-0.135527}
,
{0.170141,0.168085,0.0707241,-0.00225066,0.180745,-0.123083}
,
{-0.0514465,-0.181377,-0.233561,0.155272,-0.108648,-0.0406361}
,
{0.215275,0.132347,-0.164706,0.245687,0.440375,-0.0812741}
,
{-0.0519546,-0.0680062,0.339356,-0.280193,-0.0530367,0.0361132}
,
{-0.0196047,0.016142,-0.175634,0.343888,0.238163,-0.0259737}
,
{-0.0200811,-0.0361851,-0.080549,0.0473727,0.162675,-0.146079}
,
{0.0458797,-0.0642702,0.0928486,-0.118929,0.0257743,0.073726}
 };
  static const float bias2[1] = { -0.140592 };
  static const float weights2[][1] = { {-0.0758735}
,
{0.0605642}
,
{0.0648157}
,
{-0.196431}
,
{-0.151623}
,
{0.0477525}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_3(v, index);
}
static int assign_gen_lepton_prior_1_2_3() {
  global_gen_lepton_prior.at(1,2,3) = &specialized_gen_lepton_prior_1_2_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_3 = assign_gen_lepton_prior_1_2_3();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.059306,-0.247921,-0.126835,-0.18949,0.0116363,0.0678766 };
  static const float weights1[][6] = { {0.0329003,-0.0362291,-0.118154,-0.286915,0.0112652,0.298742}
,
{-0.0888811,-0.692457,0.157244,-0.262395,0.280319,-0.718967}
,
{-0.197351,0.186629,-0.0410452,-0.492484,0.497611,-0.200274}
,
{-0.545329,-0.946385,-0.166794,0.581694,1.04993,-0.00366942}
,
{0.230663,-0.125683,-0.136916,0.0405611,0.165182,-0.0459478}
,
{0.077643,-0.158283,-0.194429,-0.297906,-0.245672,0.000421002}
,
{0.310298,0.0788334,-0.324969,-0.176182,-0.164437,0.2692}
,
{-0.0631525,0.22713,0.0674539,-0.219957,-0.00986032,0.356762}
,
{0.192565,-0.286489,0.140315,0.0097561,-0.320112,0.303593}
,
{-0.126831,0.0443074,-0.0718159,0.0580502,-0.15249,-0.0844521}
,
{0.139287,0.16056,0.142193,-0.110312,0.114947,-0.24989}
,
{0.0320362,0.0856848,0.188596,0.0770437,-0.0853754,-0.334956}
,
{-0.111607,-0.0439741,0.170986,-0.181076,0.32806,0.0632945}
,
{0.160151,-0.205304,-0.0243648,-0.0720273,-0.457789,0.0803677}
,
{0.124793,0.110373,0.0492571,-0.162191,0.106287,-0.0664341}
,
{-0.0514093,-0.236875,-0.130823,0.128806,-0.0582195,-0.15124}
,
{0.0603556,-0.0676293,0.134938,0.102849,0.201877,-0.177017}
,
{-0.0835613,-0.200193,-0.00988478,0.0473453,-0.061447,0.0920504}
,
{0.136936,-0.327844,-0.210507,0.0532672,-0.0515717,0.0619723}
,
{-0.190527,-0.137316,0.01582,0.101694,-0.0452002,-0.234552}
,
{-0.066444,-0.224838,0.0258167,0.00673867,-0.0657602,0.1123}
,
{0.0699052,-0.125992,0.110653,-0.0514883,0.0594193,-0.0625739}
,
{0.0707701,0.18338,0.130109,0.102898,-0.197168,0.0175108}
,
{0.0889379,-0.0229959,0.0991819,-0.0839366,-0.00539829,-0.169888}
,
{-0.0396815,-0.0469676,-0.0146161,-0.0473727,-0.104119,0.153525}
,
{-0.0703673,0.0819216,0.0321437,0.0254892,0.128586,-0.0604783}
,
{0.0224421,-0.110176,-0.00466942,-0.0183529,0.0420229,-0.0690432}
,
{0.144599,-0.0992744,-0.0628235,0.15324,2.47728e-06,0.111822}
,
{0.166466,0.0792908,-0.0973194,-0.0282052,-0.19648,0.268352}
,
{0.190534,-0.130828,0.183709,-0.140153,-0.141339,0.0783211}
,
{-0.0822277,0.0593964,-0.135218,0.210563,0.00942422,0.0232558}
,
{-0.0492861,-0.0103504,0.216256,-0.111995,-0.0713846,0.114045}
,
{-0.12927,-0.0235975,-0.116375,0.204915,-0.22286,-0.134262}
,
{-0.0377881,-0.0830506,0.214786,0.182074,0.187049,0.180317}
,
{-0.0201899,0.441736,-0.0631099,0.138782,0.110347,0.306251}
,
{-0.026075,-0.0363614,-0.00308748,0.0247203,-0.0892384,-0.00848903}
,
{-0.0802355,-0.0877009,0.0123102,0.164748,-0.0759886,0.327872}
,
{0.0571085,0.235149,0.0423857,-0.0862734,0.0671116,-0.0530013}
,
{0.205371,0.0365421,0.198714,-0.163363,0.156448,0.0610294}
,
{-0.0912789,-0.0516479,0.0244917,0.057556,-0.22783,0.249116}
,
{-0.0632727,-0.0601778,-0.0657768,0.0637385,-0.0497871,-0.0166835}
,
{0.0623399,0.181049,0.0630183,-0.0887014,-0.100068,0.123039}
,
{-0.038279,0.0747992,-0.0788884,0.0510001,0.0464084,0.0339108}
,
{-0.0384712,0.270857,0.021132,-0.171215,0.0834779,0.370423}
,
{-0.0838043,-0.337991,-0.105912,0.128711,-0.0494472,-0.270244}
,
{0.000927802,-0.0357214,-0.0104214,-0.0131086,0.0120734,-0.137135}
,
{0.164031,-0.433976,0.126484,0.0527636,-0.045765,0.335511}
,
{0.0148542,-0.0637988,0.066038,-0.115555,-0.0691982,0.00598578}
,
{0.191517,-0.479455,-0.00786708,0.156489,0.043973,0.291067}
,
{-0.0769512,0.0766699,-0.062835,-0.0118998,0.103506,-0.0893704}
,
{-0.0682298,-0.0836165,-0.0529998,0.04252,-0.0477673,0.00378281}
,
{0.0845212,0.340131,0.0495315,0.0868828,0.135124,0.0782348}
,
{-0.0112837,0.243744,0.0081256,-0.034858,-0.0896896,-0.0223552}
,
{-0.175825,0.182151,-0.0984556,0.00470305,-0.143219,0.073635}
,
{0.0156264,-0.0260341,0.149645,0.0449896,0.179823,0.0980214}
,
{-0.0288814,-0.0163939,-0.0321746,0.00357452,-0.12975,0.101524}
,
{0.128226,0.115538,-0.176158,0.0440154,0.195514,0.0341279}
,
{0.256146,-0.0526891,-0.166692,0.00274575,0.117178,0.0830681}
,
{-0.108281,-0.0243515,-0.126532,-0.0852974,-0.0926154,0.222983}
,
{0.148034,-0.0743181,-0.0268818,0.0194156,0.0546717,-0.116651}
,
{0.277699,0.0328386,-0.134208,-0.0349452,0.109975,0.0577779}
,
{-0.149143,0.00558852,0.153375,0.0627625,-0.0723597,-0.189994}
,
{-0.0291662,0.0151946,0.11692,0.0704957,-0.143087,-0.0841206}
,
{0.00533307,0.0858858,0.207856,0.192446,0.152026,-0.0162403}
,
{-0.151012,0.0752062,-0.0962311,0.0295273,0.064787,0.0392771}
,
{0.0620525,0.0523047,-0.00838749,-0.183433,0.140572,-0.076716}
,
{-0.169651,-0.00166424,-0.0477351,0.182666,0.185854,-0.00589889}
,
{-0.114199,-0.157404,-0.121784,0.0422807,-7.8059e-05,-0.0795874}
,
{-0.0648566,-0.0975986,-0.125581,-0.0218676,0.140283,0.0675738}
,
{0.0429638,0.0345281,0.027163,-0.0651955,-0.0452587,0.0832868}
,
{0.210422,0.195365,0.305836,-0.0924494,0.146755,-0.126558}
,
{-0.143795,0.213878,-0.127676,0.100403,0.147189,-0.116304}
,
{0.0798515,-0.0703814,0.0780219,-0.170557,0.138229,0.149019}
,
{-0.0576221,-0.142262,-0.196886,-0.0235753,-0.056415,-0.076548}
,
{0.0508268,-0.0935941,-0.00222365,-0.124852,-0.296663,0.179227}
,
{-0.239585,0.0725736,0.210423,-0.00683699,0.224061,-0.276523}
,
{0.134077,0.0752208,0.0206072,-0.160268,-0.125254,-0.128752}
,
{-0.0232915,-0.0623701,-0.0363759,-0.149742,-0.0656701,-0.142928}
,
{0.157139,-0.0222856,-0.0715442,0.0272914,-0.127696,-0.014212}
 };
  static const float bias2[1] = { -0.0776727 };
  static const float weights2[][1] = { {-0.0809299}
,
{0.867979}
,
{0.0621656}
,
{0.0581081}
,
{0.0560001}
,
{-0.612137}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_4(v, index);
}
static int assign_gen_lepton_prior_1_2_4() {
  global_gen_lepton_prior.at(1,2,4) = &specialized_gen_lepton_prior_1_2_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_4 = assign_gen_lepton_prior_1_2_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0710458,-0.196221,-0.0192304,0.00286845,0.084611,-0.0261438 };
  static const float weights1[][6] = { {0.126923,-0.104765,-0.00411239,0.11186,-0.065605,0.0172836}
,
{-0.177877,0.169219,0.251897,0.0569267,0.227919,-0.157482}
,
{-0.27655,0.00532412,-0.0233418,0.122357,-0.105704,-0.0543332}
,
{0.442986,-0.211774,0.230986,-0.0467055,-0.67746,0.381351}
,
{0.182727,-0.348131,-0.0637191,0.247582,0.0462604,0.10228}
,
{0.316939,-0.084284,-0.0443811,0.0470364,0.341732,0.0349312}
,
{0.057135,-0.110315,0.0263586,0.0196624,-0.0358432,-0.0111136}
,
{-0.13381,0.385593,-0.235687,0.211168,0.0230903,0.105648}
,
{0.0571515,-0.0844803,-0.123697,-0.0992574,0.327288,-0.32504}
,
{4.46561e-05,-0.0330475,-0.00871638,0.029394,-0.060157,0.0136407}
,
{-0.0919315,0.125606,-0.0355013,-0.0727853,-0.0884146,-0.21239}
,
{-0.202835,0.161107,0.0535405,-0.0269425,-0.0569144,0.111388}
,
{0.112162,-0.0558047,-0.0648367,0.136605,0.00761104,0.0115946}
,
{0.0152163,0.153715,0.226411,0.0860839,0.0460141,0.0261988}
,
{-0.0086394,0.114362,-0.108338,-0.071744,0.133164,0.0748036}
,
{-0.0212313,-0.185364,0.20461,0.0846283,-0.0568687,0.249636}
,
{-0.235798,0.0129079,-0.128707,0.0174003,-0.105848,0.113814}
,
{-0.169331,0.23546,-0.100234,0.170212,0.266265,-0.0942182}
,
{0.51758,-0.141478,0.0752903,0.0610486,0.145943,-0.0285502}
,
{-0.141806,0.0822895,-0.364373,0.0321789,-0.095765,-0.197379}
,
{-0.18053,0.0610648,-0.105385,0.00662584,0.12077,0.0942658}
,
{0.076883,-0.0297754,0.210305,0.177715,0.0901646,0.0247583}
,
{-0.176398,-0.155867,-0.0907121,-0.0210068,-0.124727,-0.0900578}
,
{0.0495223,0.165598,-0.0696741,-0.135838,0.0148967,-0.0752886}
,
{0.0228585,0.0255424,0.152596,-0.0203786,-0.0117443,-0.19536}
,
{0.00333018,-0.0608972,-0.0686037,-0.153601,0.0250385,-0.0688188}
,
{-0.0979604,-0.128951,0.0823237,0.125435,0.0661256,-0.107901}
,
{0.0865667,-0.0608928,0.145326,-0.0113597,-0.116148,-0.14081}
,
{0.174818,-0.112328,0.0126434,0.125961,0.18228,-0.0466118}
,
{0.00795366,-0.146347,-0.213074,0.0397957,0.0064861,0.0258051}
,
{0.0782037,-0.187528,0.0289233,0.149732,-0.000978923,0.0689787}
,
{-0.0750128,0.160892,-0.00620161,-0.0287592,0.114773,-0.179148}
,
{0.0597237,0.0937996,-0.0505331,0.0689385,-0.0877292,-0.107579}
,
{0.0857473,-0.244668,-0.0146694,0.0682234,0.0858331,0.16684}
,
{0.089227,0.123285,0.233044,-0.14117,0.0613356,0.1162}
,
{0.172467,0.0926815,0.0870535,-0.0659117,0.000873191,0.0225775}
,
{-0.325257,-0.377039,0.285305,0.241891,0.0325547,0.296388}
,
{-0.0851628,0.225124,-0.260417,-0.172267,0.0254765,-0.0059828}
,
{-0.00757642,-0.136501,0.0348805,-0.0456742,-0.161788,0.0788452}
,
{-0.0204853,0.197471,-0.0277067,-0.062537,0.142381,0.0517161}
,
{0.123721,0.0540937,-0.0164468,-0.0650622,0.00396021,0.0675392}
,
{-0.0814669,-0.226934,0.00612882,-0.0356321,-0.0909077,-0.123377}
,
{-0.134432,0.0541759,0.00851173,0.0620223,-0.0346711,-0.343465}
,
{-0.387897,-0.0170778,0.101273,0.0907054,0.1627,-0.135907}
,
{-0.0248126,0.0572744,-0.55796,0.178754,0.319498,0.0232089}
,
{0.0176247,0.0888539,-0.0189662,-0.0203487,0.0285912,-0.0574022}
,
{0.154877,0.118304,0.0580258,0.187618,0.417666,0.205739}
,
{0.106347,-0.0560431,0.0127547,0.122175,0.0339293,-0.0773218}
,
{-0.0777536,-0.0702617,-0.195003,0.0408235,-0.0151399,-0.0825877}
,
{0.00525937,0.0142925,-0.17636,-0.149859,-0.0883173,0.00488515}
,
{-0.0356939,0.125001,0.0162953,0.0948186,0.232926,0.0351733}
,
{0.126488,-0.523922,-0.285439,0.282485,-0.257954,-0.204473}
,
{0.176871,0.0129768,-0.0676038,-0.0386631,-0.0110323,0.0862489}
,
{0.701116,-0.161229,0.30964,0.26576,0.127301,-0.058224}
,
{0.0253563,-0.1102,0.0136988,0.0323937,0.102723,0.0785743}
,
{-0.247852,0.169926,0.0357758,0.00338012,-0.0441328,0.201152}
,
{0.175475,-0.0501735,-0.0366943,0.121429,-0.0442036,0.107587}
,
{0.199755,-0.0103392,-0.105072,0.022094,0.0737071,-0.20608}
,
{0.186569,0.140944,-0.197186,-0.103304,-0.0112175,-0.0345974}
,
{0.0466947,0.0355303,-0.112485,0.0561533,0.0937705,0.232508}
,
{0.0878517,0.0532577,0.0249487,0.0110625,0.0338435,0.148163}
,
{0.128535,-0.0880165,-0.111734,0.110997,-0.122239,0.0958565}
,
{0.139121,-0.109019,-0.0162462,-0.129724,-0.230952,0.190273}
,
{0.0836207,-0.239432,-0.0366144,-0.2204,-0.0817707,0.101094}
,
{0.0803779,0.0777957,-0.174482,-0.108154,0.0461742,0.0249078}
,
{0.146822,0.0134579,0.114049,-0.0265249,-0.146266,0.0589493}
,
{0.0238819,-0.24199,0.0493717,-0.183446,0.12623,-0.0247223}
,
{-0.209795,-0.18271,-0.147597,0.126318,-0.0556962,-0.20379}
,
{-0.168442,-0.228604,-0.0338153,-0.122358,0.00267103,-0.0802386}
,
{-0.0960114,-0.0833332,0.0824049,0.0976355,-0.0968062,0.0537783}
,
{0.0855257,-0.0943736,-0.0295816,-0.0474212,0.146028,-0.118326}
,
{0.0235508,-0.00216516,-0.046295,-0.110663,0.10191,-0.0985399}
,
{0.147977,-0.0236299,0.0178822,-0.15439,0.0452974,-0.0887159}
,
{0.171538,0.0468847,-0.191848,0.129992,-0.234325,0.100749}
,
{-0.0126653,-0.0770511,0.0537103,-0.0125866,-0.0853803,0.1113}
,
{0.0465741,0.189053,-0.264582,0.229525,0.058132,-0.15502}
,
{0.24292,-0.172621,-0.0897493,0.0258321,-0.227942,0.190685}
,
{0.0684995,0.010497,0.0817085,0.01447,-0.187072,0.153284}
,
{0.166871,0.211204,0.00460039,-0.0751843,0.105413,0.184662}
 };
  static const float bias2[1] = { -0.140803 };
  static const float weights2[][1] = { {-0.705169}
,
{0.0519983}
,
{-0.934801}
,
{0.0657505}
,
{-0.0604688}
,
{0.102046}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_5(v, index);
}
static int assign_gen_lepton_prior_1_2_5() {
  global_gen_lepton_prior.at(1,2,5) = &specialized_gen_lepton_prior_1_2_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_5 = assign_gen_lepton_prior_1_2_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0477562,-0.148006,0.233381,0.208983,-0.152939,0.229359 };
  static const float weights1[][6] = { {-0.0675966,-0.0804666,0.169646,0.200277,0.018863,0.0107056}
,
{0.0831759,-0.0280591,0.0778777,-0.106736,-0.0146706,0.00547653}
,
{-0.00979965,-0.152954,-0.163309,-0.0170922,0.178379,-0.0199214}
,
{0.215341,0.21534,0.164078,0.527003,-0.139198,0.569294}
,
{0.00875534,-0.217218,0.0852901,0.116994,-0.05256,0.195083}
,
{-0.119068,-0.133726,0.220672,0.190709,-0.192638,0.132448}
,
{0.0673207,-0.0625673,0.150942,0.0868516,-0.0697884,0.250212}
,
{0.0425717,0.0119027,0.180283,-0.0373901,0.00451228,0.022157}
,
{-0.122589,0.0886442,0.231613,0.0370002,0.074788,-0.206986}
,
{0.00918875,0.0495888,-0.17637,0.134549,0.0487015,0.00453637}
,
{-0.0169002,-0.012932,-0.209457,0.00500998,0.2353,0.0164004}
,
{0.0709581,0.0790306,-0.0163165,0.132752,0.0902278,0.0224506}
,
{0.137379,0.0593471,0.0713738,0.155344,-0.122288,0.0499973}
,
{0.0173841,-0.0184141,-0.0172499,0.0244649,-0.080035,-0.0558777}
,
{-0.0417666,-0.0136844,-0.0784192,-0.0177176,0.126455,-0.126932}
,
{0.066315,0.113532,-0.0665524,-0.1914,0.1845,0.1904}
,
{-0.191543,-0.272538,0.192728,0.27381,-0.25724,0.242274}
,
{-0.10705,-0.0711267,-0.201003,0.0284147,0.0725478,0.0499988}
,
{0.237452,-0.0660454,0.0556948,-0.0980723,-0.0460031,0.197602}
,
{-0.028372,0.154352,0.145177,0.0259508,0.152585,0.0335858}
,
{-0.0202217,-0.0245741,-0.00915843,0.0273691,0.0830487,-0.0643461}
,
{0.0463825,0.142105,0.0708093,-0.0607719,0.0113053,0.209214}
,
{0.023854,0.216606,-0.00992584,-0.00889132,-0.165904,0.10012}
,
{0.0605157,0.125214,0.0630066,0.152347,0.0246278,-0.0115028}
,
{-0.0548594,-0.182191,0.178164,0.0930875,0.155106,-0.139795}
,
{0.14827,0.0341371,-0.00993595,0.0378406,0.207869,-0.0509429}
,
{-0.0481693,-0.227381,-0.085223,0.0515337,0.0860732,-0.0941292}
,
{-0.297354,0.103101,-0.044998,0.0099561,-0.152889,0.0764344}
,
{0.018932,0.019239,-0.0232333,0.0705256,0.41539,0.134897}
,
{-0.167353,-0.108814,0.00753795,-0.0546835,-0.0496987,-0.00926884}
,
{-0.0126226,-0.0290843,-0.105112,0.047858,0.0151967,0.0278219}
,
{-0.0750462,-0.0471605,-0.180849,0.0157179,-0.0418481,0.0724775}
,
{-0.0186342,-0.0591545,-0.0989567,0.05752,0.128645,-0.0018903}
,
{0.00278761,-0.0282239,0.0727255,0.138855,0.100195,-0.0735902}
,
{-0.117058,-0.121517,-0.297431,-0.0637926,-0.151434,0.090363}
,
{0.0543605,0.045582,0.164954,0.000854552,-0.0133972,-0.0870418}
,
{0.321426,-0.156445,-0.146622,0.0331682,-0.115116,-0.0348447}
,
{-0.0225374,0.0657151,0.0905051,-0.0671722,0.0295516,0.0795737}
,
{-0.139828,-0.108575,-0.122737,-0.129975,0.0114898,0.0539371}
,
{0.0579905,0.0644595,0.0694464,-0.119328,-0.04354,0.160814}
,
{0.0145044,-0.0995576,-0.100441,0.0318402,-0.029102,-0.0785391}
,
{0.0735786,-0.0924164,-0.0876153,0.0565107,0.0123522,-0.157115}
,
{-0.0189026,0.0411496,0.12845,0.0851344,0.0419119,-0.154097}
,
{0.223082,0.0703898,0.183601,0.186437,0.00132558,-0.153906}
,
{0.118702,0.120513,0.112746,0.101999,-0.0137593,0.0413902}
,
{0.00458856,-0.0869679,-0.0677988,0.000205753,-0.00261367,-0.0643492}
,
{-0.226628,0.0673447,-0.0110808,-0.0136338,0.134745,0.138846}
,
{-0.0530449,-0.0555784,-0.136028,0.0424946,-0.121968,-0.0238676}
,
{-0.114632,-0.0307504,-0.1029,0.0130971,-0.121121,-0.0676566}
,
{0.0977206,0.0864898,0.0676949,0.175207,-0.122868,-0.113644}
,
{-0.046888,-0.0385394,-0.0845746,-0.0434066,-0.0248348,0.0476229}
,
{-0.326228,-0.0539525,0.0719665,-0.28002,-0.171719,-0.0154294}
,
{-0.00725038,0.0149045,-0.0587547,0.0321989,0.0990372,0.0754839}
,
{0.0162689,-0.0926387,-0.021742,-0.0186131,-0.0908807,-0.202192}
,
{-0.44423,0.250262,-0.120647,0.0291948,-0.192698,0.237806}
,
{0.0456059,-0.133987,-0.0814774,0.131851,0.0563184,-0.122862}
,
{-0.216046,-0.219521,0.12116,0.34824,-0.0316254,-0.161841}
,
{0.151646,0.251856,0.133181,0.0294478,-0.00906498,-0.0983226}
,
{0.157709,-0.0107093,0.10138,0.158873,-0.0975291,-0.211616}
,
{-0.339337,0.042015,-0.11601,-0.0643079,-0.0508833,-0.0256095}
,
{-0.147703,0.0204467,-0.0224788,-0.158909,-0.309192,0.092841}
,
{0.521211,-0.510746,0.163965,0.0766117,-0.0699323,-0.130285}
,
{-0.118159,-0.0243582,0.065761,-0.105426,-0.0340719,0.0210617}
,
{-0.572114,-0.123696,-0.279312,0.128139,0.0633476,-0.0335697}
,
{-0.189152,-0.070906,0.024596,-0.129655,-0.0236131,-0.109554}
,
{0.194887,-0.0101216,-0.0408799,0.0965396,-0.00583884,-0.0691506}
,
{-0.00562636,-0.0467658,-0.102116,0.485185,-0.122931,0.0327176}
,
{0.413698,-0.0504446,0.0535061,0.0288981,-0.019755,-0.0260701}
,
{0.257731,-0.334132,-0.131028,-0.0900122,0.139,0.353221}
,
{0.392922,0.0966389,0.22254,-0.140317,0.0150702,-0.10398}
,
{-0.33095,0.0537277,0.0184472,-0.175127,-0.0649373,0.260377}
,
{0.0463921,-0.00366821,0.472514,0.101035,-0.440732,-0.242091}
,
{-0.197267,-0.103207,0.146249,-0.229008,-0.153546,-0.0341976}
,
{-0.39958,0.270593,-0.353387,-0.211356,0.151133,0.0575385}
,
{-0.361797,-0.166313,0.0666166,0.621683,-0.408739,-0.512841}
,
{0.321914,0.155311,-0.170511,0.157307,-0.362691,-0.132293}
,
{-0.0586562,0.860003,-1.01945,-0.894639,0.96583,-0.916781}
,
{0.0129501,-0.33432,-0.17721,0.17032,0.113391,0.572171}
,
{-1.23612,0.0330111,0.364438,0.982026,-0.914351,0.965921}
 };
  static const float bias2[1] = { 0.271839 };
  static const float weights2[][1] = { {-0.0398502}
,
{-0.0969302}
,
{0.0680623}
,
{0.0662469}
,
{-0.0215205}
,
{0.0640192}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_4(v, index);
}
static int assign_gen_lepton_prior_1_0_4() {
  global_gen_lepton_prior.at(1,0,4) = &specialized_gen_lepton_prior_1_0_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_4 = assign_gen_lepton_prior_1_0_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_2_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.216854,-0.0537155,-0.0326295,-0.0433332,0.228833,0.134853}
,
{-0.0215536,-0.0604803,-0.0612039,-0.17339,0.0498686,0.144136}
,
{0.0483223,0.0833312,-0.195364,-0.0917734,-0.0677896,-0.076423}
,
{-0.0104514,0.0183817,0.0817903,0.163099,0.147152,-0.0253933}
,
{0.0396496,0.172229,-0.161416,-0.106104,-0.209832,0.0206005}
,
{0.0154433,0.0699311,0.0742505,0.175543,0.213247,0.137625}
,
{0.173296,0.224206,-0.0403128,0.082539,0.129794,0.00848151}
,
{-0.00699342,-0.0694582,-0.0349445,-0.0459475,0.033661,-0.0543402}
,
{0.0157992,-0.206935,0.0637892,0.165864,-0.0251226,-0.170931}
,
{0.152617,0.0012697,-0.185385,0.161085,-0.205702,0.142594}
,
{-0.185777,-0.0109245,-0.0429033,-0.15021,-0.0344335,-0.187383}
,
{0.102807,0.0924064,-0.230207,0.00315008,-0.100284,0.0339138}
,
{0.052962,-0.124111,-0.0858368,-0.022304,0.13283,-0.235427}
,
{0.0432853,0.175788,0.000993627,-0.0359837,-0.0386554,0.113985}
,
{-0.203564,-0.187132,-0.0643434,-0.00494846,-0.145455,0.12933}
,
{0.00822453,-0.231915,0.120907,0.123505,-0.217817,0.029648}
,
{0.0765102,-0.0427055,-0.202482,0.0245584,0.120653,-0.121744}
,
{-0.0130664,0.16973,-0.0812757,-0.0525117,-0.20365,-0.0738056}
,
{-0.153376,-0.0544474,-0.172022,-0.12701,-0.0302973,0.153091}
,
{0.0731188,0.051741,0.075514,0.190834,0.177492,0.226455}
,
{0.121346,0.0917606,0.0756146,0.103461,-0.0425809,-0.0909192}
,
{-0.165374,-0.0405349,0.190854,0.109176,-0.147406,0.112024}
,
{0.0921261,0.185471,-0.0438096,0.104626,-0.0515082,0.127091}
,
{-0.19569,0.121221,0.0623108,0.0890248,-0.057418,0.152222}
,
{-0.183431,0.0847178,-0.0363197,-0.158301,-0.161008,-0.124406}
,
{0.185087,-0.089467,0.0935993,0.163405,-0.160609,0.0728527}
,
{-0.0529656,-0.0979988,0.0255351,0.137067,0.047985,-0.104729}
,
{-0.0773084,-0.0748437,-0.0982177,0.0190421,-0.0814418,-0.0240023}
,
{0.0247956,-0.165818,-0.171196,-0.0785689,0.000910379,0.0935353}
,
{-0.114022,0.074085,0.162825,0.0379446,-0.0256529,0.0566641}
,
{-0.100058,-0.0898919,0.0446054,-0.117317,0.018005,0.0997386}
,
{-0.0356065,-0.153288,0.0589949,-0.00805401,0.0942615,-0.0396194}
,
{0.126673,-0.112911,-0.0924137,0.217966,-0.0265663,0.045332}
,
{0.131587,-0.0500851,0.052786,-0.201008,0.0485281,0.150633}
,
{0.142924,-0.00994361,0.050665,0.0341588,0.205174,0.149847}
,
{-0.191146,0.0847894,0.0271449,-0.100503,0.0920023,0.0508849}
,
{-0.13448,-0.191861,-0.245072,-0.114093,-0.145726,0.0867902}
,
{0.0195645,0.0408592,0.0141997,0.157488,0.0414794,-0.240676}
,
{0.0337708,0.0620514,-0.130524,0.0908216,0.0546591,0.0813543}
,
{0.129592,0.0617342,-0.100298,0.0533994,-0.00980547,0.095373}
,
{-0.0396858,0.154658,0.0924561,-0.00437577,0.0167172,0.197951}
,
{-0.117038,0.0804752,-0.0780358,-0.200739,0.0598563,0.156226}
,
{-0.210609,-0.210122,-0.17838,0.195468,-0.102592,-0.0108463}
,
{-0.184599,-0.113829,-0.10499,-0.0890287,0.147302,-0.0986305}
,
{0.0824167,0.113378,0.101698,-0.0329481,0.0820832,-0.114198}
,
{-0.121602,-0.0859459,0.169612,-0.239122,0.0385248,-0.204196}
,
{-0.0154493,-0.192395,0.141781,-0.01282,-0.0101703,0.106563}
,
{-0.00381007,0.0749028,-0.0139668,-0.104872,0.190291,0.00790099}
,
{0.031292,0.200208,0.112266,0.0812609,0.0922752,0.0199478}
,
{-0.107735,0.16273,0.12484,0.179513,0.00521512,0.248381}
,
{0.149327,-0.00890258,0.104408,0.00651561,-0.0466767,0.174271}
,
{-0.0533328,0.062763,0.0465285,-0.0465649,0.088833,0.189068}
,
{-0.0432517,0.0149342,-0.193974,-0.14773,0.159999,0.0646351}
,
{-0.00515533,-0.00234497,-0.210538,0.0110728,-0.20206,-0.00734034}
,
{0.0409978,-0.215645,0.0831996,-0.0422174,-0.119644,0.0947279}
,
{-0.165722,-0.23223,0.0107867,0.131153,-0.199403,-0.0599246}
,
{-0.0490044,0.063738,-0.0645909,-0.156128,-0.102636,0.0564984}
,
{-0.0500574,-0.0925286,-0.0974822,-0.177344,0.0148939,-0.22596}
,
{0.0961059,0.118406,-0.15124,0.0179959,-0.015627,0.0213483}
,
{0.072529,0.0159178,0.0828459,-0.0247027,-0.0287399,-0.0209199}
,
{-0.0484513,0.109277,0.0725412,-0.00827848,0.209011,0.143053}
,
{0.124532,0.0717582,-0.0564174,0.0146343,-0.136192,0.0242395}
,
{-0.158862,0.0123301,-0.198285,-0.144738,0.00675455,0.00916667}
,
{-0.0716161,-0.0386158,-0.000112449,0.01687,0.13783,0.160297}
,
{0.152634,-0.100884,0.0785228,-0.177553,-0.0607608,-0.165718}
,
{-0.0515099,-0.0559112,-0.0992231,-0.0568736,-0.0222414,0.117458}
,
{-0.108048,0.0508373,0.137076,-0.182915,-0.0748217,-0.039781}
,
{0.016144,-0.117512,-0.218962,0.140077,-0.225648,0.0958491}
,
{-0.175708,-0.0365735,-0.0445337,0.125014,-0.121055,0.0193998}
,
{0.0231732,0.111073,0.112291,-0.169309,0.0166876,0.0888303}
,
{-0.085141,-0.00936842,0.14107,0.00951388,-0.116092,0.0675491}
,
{0.0634638,-0.0952532,0.0602747,0.0179006,0.0149637,0.0498958}
,
{-0.192519,-0.08301,0.0289745,-0.110967,-0.125867,-0.11383}
,
{-0.114001,0.0436966,-0.111429,0.0892318,-0.00660126,0.098572}
,
{0.0535978,-0.0552756,0.147266,0.0995855,-0.156006,0.0123756}
,
{-0.068659,-0.151813,0.0291816,0.141562,0.213581,0.206418}
,
{0.183939,-0.000350971,0.0148082,0.152284,0.19287,0.0539674}
,
{0.00636896,-0.043309,0.158048,-0.113537,0.0296475,0.0101789}
,
{-0.0620966,0.0811613,0.00944061,0.191761,0.0147545,-0.0699451}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {0.0302262}
,
{0.0155813}
,
{-0.0296011}
,
{-0.153016}
,
{-0.146421}
,
{-0.209651}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_2_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_2_9(v, index);
}
static int assign_gen_lepton_prior_1_2_9() {
  global_gen_lepton_prior.at(1,2,9) = &specialized_gen_lepton_prior_1_2_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_2_9 = assign_gen_lepton_prior_1_2_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.312135,0.28994,-0.154073,-0.397441,-0.189834,0.207817 };
  static const float weights1[][6] = { {0.159787,0.149832,0.21549,-0.219634,-0.397661,0.392436}
,
{-0.0780815,-0.0772232,-0.116398,-0.0545033,-0.0626125,0.0686478}
,
{-0.155581,-0.0714665,0.561624,0.227723,-0.0533189,0.0733276}
,
{0.670411,0.152305,0.26687,0.056545,-0.544025,0.376951}
,
{0.371354,0.28595,-0.253788,-0.325771,-0.22296,0.209176}
,
{0.176381,0.0779693,-0.129931,-0.500512,-0.315601,0.0205319}
,
{0.382129,0.111998,-0.229727,-0.682574,-0.146406,0.0982594}
,
{-0.0195011,0.102081,0.0541811,-0.15268,-0.00969388,0.0826447}
,
{-0.00916316,0.13123,0.0952675,-0.0446981,0.0513214,-0.177288}
,
{0.0197133,-0.0438285,-0.139196,-0.0785611,-0.0159132,0.0729682}
,
{0.114785,-0.0174549,0.0211244,-0.00464837,0.0324765,-0.0151794}
,
{0.0828171,0.19427,-0.395524,-0.344224,0.0419669,-0.0774881}
,
{0.245365,0.165668,-0.136483,-0.230848,-0.227512,-0.0897122}
,
{-0.1768,-0.0822577,0.214571,-0.0563096,-0.0739272,-0.0385069}
,
{0.0627152,-0.0207765,-0.0611635,-0.0576385,-0.018637,-0.0964602}
,
{-0.130603,-0.054727,-0.0543154,0.0274698,0.144808,-0.001665}
,
{0.496918,0.104529,0.186375,-0.0421051,-0.197713,0.355745}
,
{0.121194,-0.173532,-0.228691,-0.119865,-0.00928797,0.000850759}
,
{0.208324,0.00336534,0.172835,-0.468376,0.183959,-0.0766522}
,
{0.0189631,0.0801844,0.138087,-0.192127,0.222574,0.00907294}
,
{0.0628426,0.0340551,-0.348745,0.033014,0.169625,0.0615651}
,
{-0.0776369,-0.115821,-0.147512,-0.295315,-0.0891403,0.0865638}
,
{-0.0622117,0.11583,-0.0050484,-0.0970414,0.117695,-0.0568457}
,
{-0.00329122,0.0783424,-0.0789232,-0.1503,0.137007,0.149308}
,
{-0.083956,0.124727,-0.11694,-0.0505104,-0.10607,0.0680575}
,
{0.0904167,-0.192603,0.0103376,-0.00360576,-0.0880572,-0.266449}
,
{0.0518494,0.0720195,0.00157079,0.0627278,0.210901,0.0621466}
,
{0.230867,-0.207826,-0.0251052,-0.103669,-0.0996886,-0.262497}
,
{-0.0133658,0.214886,-0.0891266,0.240427,0.124579,0.269612}
,
{0.150658,-0.0130343,0.00531251,-0.0242142,-0.127927,0.17426}
,
{0.000101113,-0.00922339,0.0684095,0.0507116,0.0341193,0.0777388}
,
{-0.0163092,0.00514735,-0.117143,-0.210544,-0.108019,0.15766}
,
{-0.0876046,-0.158868,0.0412678,-0.102045,-0.144049,-0.0877024}
,
{0.0335836,0.0485874,0.126921,-0.116751,0.115616,-0.19468}
,
{0.00089967,0.0137091,0.110622,-0.0743594,-0.0018584,-0.035005}
,
{-0.0123362,-0.145276,0.1467,0.181447,0.0175106,0.217001}
,
{-0.00830804,-0.0343314,0.489769,-0.134111,-0.0146726,0.048487}
,
{0.187289,-0.136636,0.0389246,-0.0381192,0.00340967,-0.0873048}
,
{0.115377,-0.0303676,0.394247,0.00247563,-0.0154861,-0.097517}
,
{0.188695,0.15275,0.0311955,-0.000601977,0.2426,-0.0366742}
,
{-0.0441527,-0.00990403,-0.0898038,0.113447,-0.109979,-0.133755}
,
{0.0439126,0.0823224,0.156155,0.187431,0.0740119,0.00116734}
,
{0.086573,-0.209439,-0.0837567,0.19805,-0.0688223,-0.0283148}
,
{0.0520764,0.115253,-0.200723,0.0476637,0.258956,0.213081}
,
{0.0658038,-0.0951952,-0.125986,0.16273,-0.0295872,-0.0414508}
,
{-0.05706,0.0437981,-0.00447032,-0.181173,-0.00720923,0.0141083}
,
{0.0315373,-0.0643244,-0.0313656,-0.0737449,0.0944522,0.211117}
,
{0.0671141,0.11059,0.115991,-0.0836347,0.112898,-0.0186722}
,
{0.00868364,-0.0131795,-0.390439,0.122435,-0.0332315,-0.147163}
,
{-0.0227056,0.0566721,0.12259,0.14085,0.00276237,-0.0159612}
,
{0.00696822,-0.0075172,-0.11676,-0.134052,-0.0329963,-0.0715629}
,
{0.0290957,0.109274,0.232276,0.0234219,0.043231,-0.127471}
,
{-0.0467491,0.0259803,-0.151444,-0.0661863,0.0456156,0.0963769}
,
{-0.190998,-0.00366645,-0.270538,0.181889,-0.0712171,0.141448}
,
{0.269008,0.208838,-0.0759788,0.00947815,0.38391,-0.303032}
,
{-0.0371796,0.0467446,0.0151935,0.00676005,-0.0859125,-0.122223}
,
{-0.0579632,0.119983,-0.918893,-0.405513,0.210111,-0.823363}
,
{-0.416402,-1.10981,-0.363144,0.368029,-0.346542,0.310034}
,
{0.0153388,-0.631833,0.339327,-0.181116,0.274285,0.4164}
,
{-0.0489933,0.166434,-0.170231,0.104171,0.209636,0.0384069}
,
{0.0883285,-0.35114,-0.0671405,-0.191323,0.112293,-0.0468775}
,
{0.00670587,0.636673,0.644515,0.532365,-0.241514,0.216706}
,
{0.266868,-0.108693,0.221849,0.730192,-0.555086,0.2168}
,
{-0.123901,0.219316,-0.213602,0.0738901,-0.141861,-0.612823}
,
{0.436663,-0.465916,0.236877,0.361836,0.158621,-0.449722}
,
{-0.042667,0.167134,0.0179342,0.131746,-0.0847443,-0.140548}
,
{-0.0957179,-1.05255,0.259694,0.197949,0.283091,-0.798564}
,
{-0.0151899,-0.561085,-0.297523,0.289064,0.183979,0.0768087}
,
{-0.0334994,-0.220832,-0.0779285,-0.0163137,0.29761,-0.599356}
,
{-0.220541,0.00531381,-0.106324,0.138242,-0.319948,-0.299197}
,
{0.0431406,-0.0787104,0.103591,-0.0517091,0.145808,0.350544}
,
{-0.473658,0.603596,-0.375994,-0.861562,0.60254,-0.903737}
,
{0.668861,0.511812,0.8069,0.100279,1.02518,0.0174687}
,
{-0.140246,1.15884,0.138704,0.112953,0.293856,-0.431909}
,
{0.15618,-1.08861,-0.282936,-0.0491238,-0.979224,1.10614}
,
{0.0521641,-0.251054,0.0498335,-0.0897873,0.27678,0.0899089}
,
{0.123376,0.0904798,0.106133,-0.0549994,0.0425908,0.16525}
,
{-0.25779,-0.407425,0.158456,0.266842,-0.0174744,0.00662312}
,
{-1.35406,-0.751281,-0.10336,-0.0757776,-0.371335,0.150173}
 };
  static const float bias2[1] = { 0.252792 };
  static const float weights2[][1] = { {0.0704775}
,
{0.0608206}
,
{-0.400791}
,
{-0.62439}
,
{-0.0912224}
,
{0.0524985}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_5(v, index);
}
static int assign_gen_lepton_prior_1_0_5() {
  global_gen_lepton_prior.at(1,0,5) = &specialized_gen_lepton_prior_1_0_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_5 = assign_gen_lepton_prior_1_0_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.120726,-0.149737,0.255673,0.33137,0.148582,-0.266284 };
  static const float weights1[][6] = { {-0.0952136,-0.0376719,0.0361741,-0.00536994,-0.252327,0.0306943}
,
{-0.0668745,0.132738,-0.0722002,0.0288763,0.116741,0.452075}
,
{0.00419895,0.0538718,-0.0198163,0.142635,0.0529414,-0.720059}
,
{-0.3449,-0.103304,-0.0053338,0.388566,-0.0182052,-0.915644}
,
{-0.214178,-0.0796464,0.276648,0.165024,0.258244,-0.19149}
,
{0.122128,-0.128901,0.354043,0.312981,0.101567,-0.0318815}
,
{-0.0194047,-0.0888921,0.238281,0.423848,-0.0538262,-0.0187567}
,
{-0.201622,-0.0749739,-0.113785,-0.116631,0.17212,0.064212}
,
{-0.214431,0.142207,-0.374965,0.0144316,0.180449,-0.202771}
,
{-0.0768025,0.145038,-0.157371,-0.132059,-0.137714,0.0146179}
,
{0.0542145,-0.0200579,-0.0507368,0.000838032,-0.0747297,-0.0188082}
,
{0.112579,-0.0067546,0.0475936,-0.453448,0.126127,0.0716118}
,
{0.185753,0.0396215,0.23795,0.111675,0.0814392,-0.275721}
,
{-0.168242,0.336494,-0.0498386,0.310867,0.184934,-0.291126}
,
{-0.0203428,0.0702294,-0.100662,-0.0677642,-0.19682,0.0634119}
,
{-0.103164,0.139719,-0.140961,-0.0308919,0.037122,-0.138159}
,
{-0.0758493,-0.384537,0.218453,-0.481087,-0.0577337,0.238096}
,
{0.0882525,-0.0323537,0.0729062,-0.0251444,-0.100887,0.103308}
,
{0.144939,0.0828622,0.317711,0.355764,-0.113209,0.395673}
,
{0.0529746,0.0268171,0.0134182,-0.0750581,-0.000831916,-0.271331}
,
{0.0556404,0.170753,0.0603831,0.00040034,0.132085,-0.0703645}
,
{0.0102475,0.0756508,-0.0342689,0.0565122,0.115502,0.0241672}
,
{0.151852,-0.195773,-0.172877,0.156883,-0.167488,-0.0453105}
,
{-0.0664992,0.00129776,-0.0668118,-0.0444492,0.00611037,-0.0293336}
,
{0.0551457,0.236138,-0.184273,0.0738316,-0.0864228,-0.21461}
,
{0.0489825,0.0210895,-0.119286,0.0748314,-0.141494,-0.165274}
,
{0.0408377,0.0323873,-0.0699757,0.186908,-0.126965,-0.057579}
,
{-0.0654351,-0.062771,-0.0672613,-0.105333,-0.0370889,-0.132227}
,
{0.165063,-0.126072,-0.15455,-0.0680749,0.0954324,0.0254052}
,
{0.181909,-0.0311623,0.0165701,0.150049,-0.0368584,-0.0634485}
,
{0.0561114,0.0527491,0.154842,0.0694139,-0.0237592,-0.602673}
,
{-0.00379211,0.0960096,-0.0337513,-0.166946,0.102316,0.107459}
,
{-0.175883,0.0347646,0.17557,0.18044,-0.0718205,0.0676922}
,
{0.0505047,-0.026017,0.00355144,-0.109152,-0.154087,-0.035343}
,
{-0.0749351,-0.0172603,-0.234031,-0.108614,0.0689737,0.0234677}
,
{0.205943,0.0755526,0.269625,-0.0125059,-0.000395666,0.0586101}
,
{0.147332,-0.308281,-0.268343,-0.0034315,-0.067734,0.700783}
,
{-0.0696359,0.0790489,0.161024,0.0973164,-0.0634006,0.163238}
,
{-0.224572,0.120626,-0.0290902,0.215555,-0.00192007,0.0874152}
,
{-0.0381537,-0.000420224,0.085617,0.0260778,-0.0453005,-0.0762932}
,
{-0.107025,-0.0697916,-0.29311,-0.0304603,0.0623143,0.0529185}
,
{0.0188671,0.0857725,-0.244587,-0.157841,0.224384,-0.411725}
,
{0.0269125,-0.000762246,0.0442453,0.200174,-0.0303989,-0.0476011}
,
{-0.0689481,0.0337962,0.147262,-0.119096,-0.135456,0.0578491}
,
{-0.103455,-0.0174477,-0.0542352,-0.0395005,-0.0240905,-0.179506}
,
{-0.257664,0.0752566,0.0229954,-0.0621675,-0.0656413,0.227526}
,
{0.0892109,-0.0339382,0.312846,0.203913,-0.104897,0.168358}
,
{0.0262384,-0.0914579,-0.146264,-0.0977874,-0.012173,0.0795065}
,
{-0.381893,-0.00498023,-0.280792,-0.160364,-0.0541951,0.45103}
,
{-0.135686,0.0508484,0.19859,-0.0292514,-0.109725,-0.353437}
,
{-0.0412941,0.0363497,0.0225768,-0.0113688,0.000985686,0.04851}
,
{-0.199956,-0.178287,-0.325135,-0.300487,-0.0817118,-0.432775}
,
{-0.0492939,0.00124024,0.143943,0.199293,-0.136207,0.143178}
,
{0.00121141,-0.109568,-0.255432,0.0666667,0.0248002,-0.456364}
,
{0.138216,-0.0942553,-0.0373578,-0.177675,0.208973,-0.192606}
,
{0.0189278,-0.114265,0.161191,-0.146569,-0.0605915,-0.0651331}
,
{0.358942,-0.101751,-0.0691589,-0.113639,0.212869,-0.12796}
,
{0.129653,0.0859438,-0.00691685,0.155413,0.108995,0.0272486}
,
{0.179919,0.0957911,-0.0846413,-0.26526,0.0910937,-0.230329}
,
{-0.110991,-0.13786,0.0815282,-0.0828527,-0.00258299,-0.0797468}
,
{0.149775,0.0163459,0.191466,0.0502554,-0.09259,0.0614536}
,
{-0.0560971,0.0644238,-0.0594715,0.220375,0.0225467,-0.0354234}
,
{-0.0787255,-0.0955681,0.017223,0.103161,-0.0961796,0.0260641}
,
{-0.0962267,0.0389141,-0.0937024,-0.214414,0.116145,0.0898702}
,
{-0.279726,-0.0268014,0.103099,0.0982682,0.194141,0.0945703}
,
{0.00315739,-0.0190929,0.0172783,0.025277,-0.0088447,0.115287}
,
{0.224576,0.106261,0.0401589,0.00560398,0.107725,0.147184}
,
{0.08082,-0.054071,-0.0647647,-0.222942,0.00404956,0.0282575}
,
{-0.251698,0.00638217,-0.0443854,-0.125293,0.0695131,0.248801}
,
{0.167332,0.156122,-0.115797,0.12327,0.0544403,0.0703119}
,
{-0.109856,0.0319374,-0.0127122,0.0425928,-0.0822369,0.1356}
,
{-0.123523,-0.00827993,-0.098819,-0.0218072,0.124546,0.0476001}
,
{0.0794493,-0.0795625,-0.0391014,-0.129357,0.00982776,-0.131608}
,
{-0.0595095,-0.0493549,-0.0543996,-0.137925,0.129245,-0.00037851}
,
{0.143844,0.0211154,0.0710367,0.115832,0.172895,0.145017}
,
{-0.230331,0.0603345,-0.000184684,0.159776,-0.0366453,-0.171848}
,
{-0.152784,-0.0570968,-0.00781664,-0.0423589,0.183964,-0.138355}
,
{-0.116267,-0.0705614,0.17108,0.0526442,-0.032231,-0.0194454}
,
{0.0462873,-0.10522,0.100859,-0.224533,-0.162436,-0.0760487}
 };
  static const float bias2[1] = { 0.190264 };
  static const float weights2[][1] = { {-0.0650517}
,
{-0.128284}
,
{0.0779013}
,
{-0.109859}
,
{0.118962}
,
{0.399026}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_6(v, index);
}
static int assign_gen_lepton_prior_1_0_6() {
  global_gen_lepton_prior.at(1,0,6) = &specialized_gen_lepton_prior_1_0_6;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_6 = assign_gen_lepton_prior_1_0_6();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0787262,0.0451947,-0.124337,0.156475,0.154221,0.155411 };
  static const float weights1[][6] = { {0.0363908,0.230668,0.20121,0.00498514,0.191926,0.196035}
,
{-0.0387768,0.0433928,0.39931,-0.0358136,0.0698347,-0.0781211}
,
{0.0650358,-0.384019,0.141522,0.101309,0.0219585,-0.0584072}
,
{-0.107129,0.050252,-0.140211,0.155643,0.427942,0.380514}
,
{0.0291747,-0.0233225,-0.264571,0.250868,-0.0598375,0.207359}
,
{-0.0488618,0.131886,-0.0296262,0.158184,-0.0994888,0.101002}
,
{-0.10609,0.0246125,-0.0729151,0.144167,0.13094,0.166699}
,
{0.0159498,-0.153375,0.0363033,0.0789846,-0.0139706,-0.00240797}
,
{0.100354,-0.145182,-0.319652,0.013969,0.25347,-0.0373537}
,
{-0.0986354,-0.00735057,-0.0107482,-0.0412765,-0.0406441,0.0193692}
,
{-0.00410074,0.0718071,-0.0666623,0.103213,0.130282,0.0698637}
,
{-0.12724,0.0270266,-0.0692621,-0.101463,0.112932,0.108417}
,
{0.0807626,-0.0122047,-0.0817405,-0.113864,0.231719,0.0772032}
,
{0.0672715,0.101473,-0.0943859,-0.0875168,-0.0738754,0.0972045}
,
{-0.110808,0.202059,-0.085655,0.014497,0.0418486,0.0908323}
,
{0.109906,0.0568051,0.000214856,0.03502,0.164967,-0.00388836}
,
{-0.404634,0.0554523,0.0892727,0.357226,0.14463,0.377605}
,
{0.0656371,-0.42057,-0.20654,-0.0165129,-0.158598,0.105822}
,
{0.0154584,0.14073,-0.175333,0.122909,0.164588,0.0817712}
,
{0.0782355,-0.16028,0.160683,-0.0333379,-0.0985777,0.0471118}
,
{-0.00653699,-0.254179,0.0150393,-0.0016105,-0.082201,-0.0500644}
,
{0.194103,0.00485668,-0.181412,0.104722,-0.0470072,-0.0268899}
,
{-0.169055,0.115333,0.147691,-0.0318834,-0.0811016,0.0259754}
,
{0.0614196,-0.0385663,-0.0828187,-0.038258,0.0871046,0.0764681}
,
{0.0932266,0.262416,-0.143262,0.0910684,-0.0957952,-0.316892}
,
{0.0123139,0.0422179,-0.0932466,-0.206377,-0.149899,0.12516}
,
{-0.0528774,0.257447,0.0166452,0.0923298,-0.0248513,0.134596}
,
{0.163236,0.0821075,0.0451484,-0.1349,-0.132816,0.203083}
,
{-0.265637,-0.0731379,0.0165465,-0.07804,0.227879,0.425329}
,
{-0.0452492,0.0907556,-0.0518062,-0.0349311,-0.097862,0.0644039}
,
{0.0872494,-0.165685,-0.0663035,-0.0415761,-0.112471,0.170841}
,
{0.0578805,0.151637,-0.190345,0.140059,-0.16755,0.0783068}
,
{0.0295248,0.262516,-0.121269,-0.111223,0.0883709,0.213258}
,
{0.133687,-0.103399,-0.0979702,-0.170683,0.219627,0.0572168}
,
{-0.224736,0.560297,0.186687,-0.0497183,-0.281355,0.00652804}
,
{-0.152912,0.131877,0.254136,-0.0471186,-0.0466856,-0.0460503}
,
{-0.145111,0.221697,-0.24112,-0.0941486,0.303654,0.0191516}
,
{-0.0107183,0.204193,-0.128249,0.121356,-0.315584,-0.101388}
,
{0.263445,-0.0159015,0.142819,-0.0234622,0.631903,0.0341875}
,
{-0.0888041,-0.343872,0.242361,-0.107518,-0.1552,0.142767}
,
{0.101507,-0.240922,-0.0825414,0.0233763,0.0228032,0.0393034}
,
{-0.0484566,-0.714154,0.197802,-0.0790156,0.273324,-0.0104983}
,
{-0.00681405,-0.0368735,0.247657,-0.0169971,-0.0530506,0.0450338}
,
{0.108951,-0.0367228,-0.044423,0.167227,0.186874,-0.248572}
,
{0.0582733,0.11828,0.188252,0.128503,-0.0971284,-0.111293}
,
{-0.0271725,-0.0248101,0.0576362,0.0176546,-0.171342,0.00503702}
,
{0.106487,0.234655,-0.570954,0.118731,0.0170765,-0.119108}
,
{0.00329494,0.0534233,0.108621,-0.0929802,-0.138056,0.191411}
,
{-0.00102802,0.122824,-0.0115335,0.0407019,-0.178158,-0.0759032}
,
{0.152286,-0.0325285,-0.11187,0.144333,-0.167921,-0.0310322}
,
{-0.0669789,-0.150414,0.0876724,-0.152518,0.105905,0.124605}
,
{-0.0331882,0.451326,0.375109,-0.0868711,-0.420602,0.222547}
,
{-0.0513403,-0.0421762,0.196661,0.0524047,-0.210611,-0.0597048}
,
{-0.0472905,0.115977,-0.194811,-0.0570878,-0.304015,0.110744}
,
{0.0904175,-0.0213079,0.0479791,0.122776,-0.115958,-0.0548524}
,
{0.152744,0.11952,-0.0242103,-0.0158223,-0.0796311,0.156374}
,
{-0.0420273,-0.0661887,-0.0116731,-0.212682,0.0907618,-0.632477}
,
{-0.266917,0.0725829,0.063205,-0.0330393,0.0727759,0.390781}
,
{0.274526,0.016123,-0.0437902,-0.0659742,-0.181012,-0.582239}
,
{0.0795257,0.0577345,-0.154553,0.0484995,-0.0968398,0.424627}
,
{0.208369,0.167849,-0.0661761,0.151612,0.0283346,0.0643646}
,
{0.491811,0.156921,0.178953,-0.0537998,0.0174251,-0.292562}
,
{0.0636037,0.0186565,0.0623256,0.184045,-0.136035,0.0849085}
,
{0.125294,0.0882093,0.0739579,-0.319894,0.0831355,-0.807395}
,
{-0.209297,0.0817605,-0.236143,-0.185203,-0.0792026,-0.00574757}
,
{-0.0604436,0.255692,0.0623866,0.135662,0.0247445,0.181151}
,
{-0.0259757,-0.0131882,0.000167179,-0.331528,0.066424,0.0960998}
,
{0.123079,-0.0537392,0.0419859,0.282994,-0.00300272,0.0989855}
,
{-0.28975,-0.0905215,-0.171676,0.016352,-0.0217124,0.526563}
,
{0.333488,-0.0314287,0.170648,0.091766,-0.0510338,-0.31855}
,
{-0.0454461,0.157426,0.152373,0.140727,-0.0508158,0.0717323}
,
{0.354802,0.199621,-0.255958,0.0766276,0.111189,0.126879}
,
{-0.248589,0.197862,-0.000999737,-0.0324467,0.0581813,-0.395289}
,
{0.053311,-0.18665,-0.150759,-0.294251,0.00831409,0.133593}
,
{-0.0508057,-0.309798,-0.0552549,-0.142706,0.135385,0.672066}
,
{0.200731,-0.0290348,-0.0356115,-0.0555229,-0.0907408,-0.256856}
,
{-0.123526,0.0874385,0.0765182,0.0497827,4.61204e-05,-0.160316}
,
{0.0215688,0.130049,-0.11219,0.159683,-0.00482657,0.317851}
,
{-0.127354,-0.0433099,-0.124986,0.116024,-0.122643,0.0711333}
 };
  static const float bias2[1] = { 0.139051 };
  static const float weights2[][1] = { {-0.0657993}
,
{-0.58868}
,
{0.0887519}
,
{0.130391}
,
{0.0429687}
,
{0.077804}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_7(v, index);
}
static int assign_gen_lepton_prior_1_0_7() {
  global_gen_lepton_prior.at(1,0,7) = &specialized_gen_lepton_prior_1_0_7;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_7 = assign_gen_lepton_prior_1_0_7();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.082239,-0.118837,0.0219407,0.0416492,-0.141097,-0.0590275 };
  static const float weights1[][6] = { {0.107216,-0.0386461,-0.206346,0.0520534,-0.152389,-0.0847312}
,
{-0.100194,-0.3545,0.14581,0.43193,-0.425037,-0.293594}
,
{-0.281876,0.415929,-0.337481,0.145058,0.117427,0.0340744}
,
{0.565241,-0.533924,0.55354,1.50023,0.517866,0.746749}
,
{0.0808913,0.0447807,0.0678955,-0.00325608,-0.157581,0.138521}
,
{-0.0486833,-0.0541486,-0.180591,-0.126654,-0.217234,-0.373224}
,
{-0.234331,-0.0424383,-0.089591,-0.0178424,-0.24684,-0.260991}
,
{0.0290026,-0.149074,-0.0520245,-0.163883,0.0558241,0.0224071}
,
{0.424163,0.321302,0.599068,-0.0757532,-0.00098282,0.590607}
,
{0.0180752,-0.0185937,0.167038,0.0549374,-0.0602136,0.1957}
,
{0.00695986,0.105545,0.193926,-0.210212,-0.0944981,-0.0812085}
,
{0.181948,-0.0200043,0.164106,0.0346654,0.0802269,0.170981}
,
{-0.101216,-0.0755482,0.0073935,-0.0747381,-0.0235829,-0.234246}
,
{0.064605,-0.156653,0.164696,0.102897,-0.0287346,0.0904881}
,
{-0.112149,-0.0114026,0.00923706,-0.0717094,-0.131913,-0.190636}
,
{-0.0798873,0.185186,0.153796,0.0146581,-0.0107556,0.0694944}
,
{0.277964,0.0910133,0.453274,-0.214586,-0.0862627,0.376934}
,
{0.0459274,0.0199018,-0.0342518,0.10238,-0.119075,-0.178996}
,
{-0.471283,-0.0539531,-1.07059,0.2279,-0.567047,-0.597121}
,
{0.067921,-0.170001,0.17416,-0.285282,-0.0398087,-0.12498}
,
{0.00111081,-0.13186,0.0688942,-0.109865,-0.257591,0.0521263}
,
{-0.11549,0.18561,0.0851728,-0.0375405,-0.0219968,-0.0738829}
,
{0.0511429,-0.0304726,0.237678,0.201854,0.153618,-0.0231777}
,
{0.0172419,0.1174,-0.0210723,-0.163829,0.154755,0.0790779}
,
{-0.152398,-0.128814,-0.199667,-0.0392569,0.039882,-0.117387}
,
{-0.371708,0.16832,0.112745,0.578257,0.325589,0.0187885}
,
{0.152389,0.0279493,-0.0678815,-0.0039029,0.0635314,-0.235071}
,
{0.185984,-0.340409,-0.128323,-0.218386,0.0947878,-0.303755}
,
{0.452346,0.377909,0.840148,0.0736621,-0.258261,0.74267}
,
{0.137198,0.203758,-0.111541,-0.0151841,-0.040449,0.152232}
,
{0.00770569,-0.164173,-0.183817,0.000337896,-0.0392364,0.13862}
,
{-0.0127305,0.144649,0.061952,0.0808904,0.017984,-0.146448}
,
{-0.0160444,-0.152686,0.235874,-0.0430443,-0.10271,0.0216599}
,
{-0.212877,-0.0689253,-0.0734249,0.015626,-0.0467461,0.0922872}
,
{-0.0804233,0.179742,-0.0585929,-0.115986,-0.161176,0.0443784}
,
{-0.0306651,-0.0518561,0.0342355,0.0187649,0.0418971,0.010339}
,
{-0.230949,0.0448895,0.0893746,0.0399638,0.0910875,0.0501841}
,
{0.0643744,-0.0148903,0.0376424,-0.00517264,0.0552381,-0.129656}
,
{0.162873,0.180022,-0.0421395,0.115708,-0.199613,-0.286694}
,
{-0.093567,0.0591159,0.113744,0.245838,0.184661,-0.0200219}
,
{-0.0466674,-0.0430882,0.0489421,0.0252162,0.099058,0.00232546}
,
{-0.220648,-0.0191746,0.0128297,-0.00215324,-0.0389163,0.177115}
,
{-0.0125893,0.00540171,0.0287306,0.0904837,-0.0613206,-0.0762836}
,
{-0.0549463,-0.0421369,0.0108028,-0.140754,-0.0362022,0.0487285}
,
{-0.095576,0.112888,0.16729,0.259162,-0.0180453,-0.26574}
,
{0.0621872,0.0120961,-0.0688552,-0.0599483,-0.098747,0.00620211}
,
{0.0641751,0.123162,-0.191368,0.0802387,-0.407378,0.0458162}
,
{-0.0474004,0.0160149,-0.0383271,0.0288947,-0.0187798,0.126382}
,
{0.0281323,0.0369572,-0.0423264,-0.00185443,-0.0125536,0.0227064}
,
{-0.00331654,-0.0113483,0.0661862,0.0595519,0.00986067,-0.0756903}
,
{-0.00775065,-0.00619925,0.038987,0.105437,0.00843363,-0.0339491}
,
{-0.20265,0.0265219,0.0697928,0.103563,-0.0803345,0.0988884}
,
{0.0124754,-5.38701e-05,-0.0204084,-0.0431117,0.00388262,0.0318225}
,
{0.12115,0.0935504,-0.056423,-0.0332678,0.0179685,0.0027238}
,
{0.271184,-0.137809,-0.12566,0.296088,0.0981397,0.153134}
,
{0.359595,-0.237033,-0.0486913,0.0510441,0.110738,-0.133525}
,
{-0.0353605,-0.208377,-0.100108,0.254857,-0.113723,0.46212}
,
{1.37591,-0.466061,0.058244,-0.62267,-0.952947,0.413796}
,
{0.02319,-0.193977,-0.0726082,0.0314231,-0.402918,-0.0499225}
,
{0.289616,-0.203716,-0.304495,-0.274425,0.0490644,-0.151631}
,
{-0.115219,0.305693,0.0424411,0.0651036,0.0627223,0.127996}
,
{-0.0651969,0.243011,0.104761,0.477847,0.172004,0.339328}
,
{0.485759,-0.954008,-0.287968,0.454203,-0.116235,0.675717}
,
{0.0766663,0.392394,-0.0655561,0.356098,0.465439,0.262176}
,
{0.0951234,-0.0968928,0.20579,0.263265,-0.235909,0.191746}
,
{-0.0201586,0.0184283,0.0895071,0.0389714,0.057712,-0.142466}
,
{0.00431274,-0.101689,-0.0654681,-0.0407085,0.341334,0.517679}
,
{-0.49891,-1.44523,1.14305,0.208162,-0.165921,-0.870026}
,
{0.115405,0.01486,0.0359322,-0.175373,-0.0177787,-0.444977}
,
{-0.0609798,0.172982,0.0648501,0.00879316,0.140157,-0.0387993}
,
{0.258911,-0.0105909,-0.0756021,0.116275,0.0279691,0.0968222}
,
{0.429738,-0.0191994,-0.388057,-0.31782,-0.0371327,-0.0555411}
,
{0.00924187,0.147012,0.968341,-0.137915,-0.430168,0.800915}
,
{-0.0706935,-0.193102,0.36636,-0.054554,-0.249071,-0.496697}
,
{-0.117551,-0.101055,-0.965184,-0.564597,0.0809288,1.61134}
,
{0.0128316,-0.174804,-0.244304,-0.489037,0.176146,0.0938464}
,
{0.560917,0.74068,-0.558566,-0.102573,-0.420204,-0.832671}
,
{-0.0132167,0.0791065,-0.237718,-0.226725,0.237823,0.0526258}
,
{1.1852,-0.561007,-0.480783,0.0749983,0.195237,0.545132}
 };
  static const float bias2[1] = { -0.0105534 };
  static const float weights2[][1] = { {0.0234811}
,
{0.0225175}
,
{0.0367844}
,
{-0.0335413}
,
{-0.0208761}
,
{0.0224676}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_3_0(v, index);
}
static int assign_gen_lepton_prior_1_3_0() {
  global_gen_lepton_prior.at(1,3,0) = &specialized_gen_lepton_prior_1_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_3_0 = assign_gen_lepton_prior_1_3_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_3_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0289982,-0.296919,0.0541517,-0.171841,-0.140367,-0.0586379 };
  static const float weights1[][6] = { {-0.163487,0.230744,0.0455456,-0.0754321,-0.24405,-0.485016}
,
{-0.0391167,0.0912171,-0.079354,-0.156921,-0.127451,0.0096428}
,
{0.186482,-0.617118,-0.26342,-0.113905,0.0877264,0.239435}
,
{-0.0299305,-0.721243,0.706755,-1.52038,0.12925,0.462047}
,
{0.2077,-0.486138,0.0996076,-0.164539,-0.186148,0.132361}
,
{-0.0745367,-0.219948,-0.0722075,-0.098597,-0.0416094,-0.347567}
,
{-0.267267,-0.236291,-0.0299433,-0.0186816,0.0240121,-0.00199335}
,
{-0.00747701,-0.0911507,-0.0306705,-0.0390765,-0.205675,0.0502168}
,
{0.0604669,-0.295866,0.156064,-0.154439,-0.10889,0.0605507}
,
{0.0139649,0.0740464,0.119011,0.0487705,0.109732,0.0966769}
,
{0.0224601,-0.0476515,0.0948837,-0.0498968,-0.0290831,-0.0883629}
,
{0.0181472,0.0608459,0.257593,0.198428,-0.249015,0.066326}
,
{0.145529,-0.400075,-0.110516,-0.0431555,-0.220324,-0.1946}
,
{-0.0453412,-0.286005,-0.110471,-0.0863209,-0.166873,0.0119525}
,
{0.0198956,0.0507589,-0.0835274,0.0303396,-0.0223578,-0.0148859}
,
{0.0433301,-0.0588486,0.128224,-0.0936673,0.106183,0.0729675}
,
{0.0119467,-0.0700517,-0.155855,0.0194791,0.00480995,0.149087}
,
{0.159315,0.0956667,-0.226829,-0.104019,-0.0484571,0.121352}
,
{0.0474206,-0.67872,-0.0660024,0.114276,-0.152915,-0.467774}
,
{-0.0124086,0.166525,-0.0427837,-0.120158,-0.294664,0.300223}
,
{-0.187501,0.091181,0.0507315,-0.00221666,0.0377801,0.0830066}
,
{-0.0117526,-0.00298859,-0.0130612,0.00648705,-0.160117,0.0142681}
,
{0.128733,0.13446,0.204344,0.0878741,-0.203651,-0.104196}
,
{-0.139676,-0.0681405,0.102231,-0.041447,-0.317336,-0.0305632}
,
{-0.0186366,-0.0737944,0.00464069,-0.0700752,-0.123001,-0.233547}
,
{-0.0438091,0.123044,-0.127537,-0.0965785,0.0683975,0.120613}
,
{-0.152771,0.164457,-0.205041,-0.15981,-0.243799,-0.128143}
,
{-0.177609,0.189838,-0.023897,0.197791,-0.0464792,0.0197036}
,
{0.196617,0.498877,0.549958,0.294311,-0.0367875,0.111433}
,
{-0.133145,-0.0186133,-0.0797487,0.142145,-0.182897,0.088734}
,
{0.0260947,-0.0561558,0.0335115,-0.197424,-0.0780622,0.0291823}
,
{-0.198512,-0.159125,0.0943528,-0.101879,0.044325,-0.0877418}
,
{-0.0471508,0.0699319,0.128939,-0.0123312,0.0759308,-0.0562126}
,
{-0.135789,0.0546836,-0.226335,-0.146762,-0.0219176,0.146963}
,
{-0.0984994,-0.038445,-0.156827,-0.102091,0.025526,0.121325}
,
{-0.030533,0.0469488,0.054035,0.0444853,0.0588257,-0.00813215}
,
{-0.0363764,-0.0419259,0.163581,0.066719,0.132913,-0.064717}
,
{-0.0248192,0.0194361,0.135483,-0.0267602,-0.13069,-0.040623}
,
{-0.0480919,-0.0120606,-0.256982,0.178049,-0.142937,0.0358332}
,
{-0.0960231,0.00904316,-0.0494549,-0.0378585,0.10168,0.0683265}
,
{0.0474745,0.027888,-0.0191462,0.0125449,0.164866,0.000174589}
,
{0.0907983,-0.0636662,0.103588,0.047929,0.0989474,-0.145541}
,
{0.0765975,0.0453602,0.0881687,0.0390594,-0.112699,-0.0510607}
,
{0.283865,0.0865091,0.387514,-0.0731009,-0.0975082,-0.164506}
,
{-0.141588,0.10076,0.105552,0.00323755,-0.00702457,0.0245302}
,
{-0.0860431,-0.00702014,0.0696189,-0.0124851,-0.0876753,-0.00350424}
,
{-0.189074,0.0645845,-0.0740503,0.0816539,0.176469,0.180815}
,
{0.0214005,-0.0231149,-0.11518,0.0229321,0.0427525,0.0297444}
,
{0.70253,-0.217421,-0.0426596,-0.124665,-0.179735,-0.116178}
,
{-0.238346,0.0227087,0.0651044,0.0308604,-0.131767,-0.00235173}
,
{0.00814872,-0.0673114,0.0272405,-0.0390232,0.209519,-0.0314859}
,
{0.0404072,0.0439395,0.0877081,-0.0474745,0.00246869,-0.0379677}
,
{0.00905807,-0.0357934,-0.103962,-0.0160712,-0.0921741,0.0237386}
,
{-0.282687,-0.144313,-0.0848123,0.0672451,0.199524,-0.0288442}
,
{0.158125,0.380428,-0.142347,0.166651,0.0245121,0.0752486}
,
{-0.160192,-0.303255,-0.127188,0.0554404,-0.13512,0.142996}
,
{-0.26153,-0.270598,-0.239613,-0.324452,0.0485799,-0.101929}
,
{0.593222,-0.696526,-0.0749122,0.278849,-0.231224,1.79222}
,
{-0.33093,-0.226762,-0.386089,0.35712,-0.108835,-0.163608}
,
{-0.116052,-0.357011,0.0914341,0.0797474,0.0385969,-0.35268}
,
{0.0379961,0.24227,0.0287482,0.0210036,-0.0172623,0.279967}
,
{0.881028,0.105013,-0.0982244,-0.27057,-0.146252,-0.266713}
,
{-0.639186,-0.264233,-0.10369,-0.808108,0.0709304,-1.36941}
,
{0.878678,0.504565,0.0041078,-0.228617,0.166947,0.448215}
,
{-0.254861,0.309805,0.00607479,0.27404,-0.00806837,0.0949712}
,
{-0.0181978,0.142373,0.139188,0.0450221,0.0826731,-0.128396}
,
{0.332886,0.123484,-0.198753,0.354318,-0.126169,0.959391}
,
{0.95344,-0.319393,0.262509,0.81315,-0.277061,1.65273}
,
{0.373924,0.774097,-0.11206,-0.156716,-0.0474289,0.163527}
,
{0.00660165,-0.342182,-0.104985,-0.0310924,0.0398496,-0.301302}
,
{0.105729,-0.104369,-0.0590648,0.0192916,0.102179,0.0954709}
,
{-0.315201,-0.530355,0.128994,0.0846682,-0.227433,0.698845}
,
{0.497404,0.0429875,0.0770526,0.0759664,0.393574,-0.291664}
,
{-0.408132,0.090468,0.0293897,0.139137,0.0427305,-0.967356}
,
{1.09402,0.678587,-0.921564,-1.07447,0.160854,0.313753}
,
{0.332321,0.605447,0.210049,-0.121195,-0.173326,-0.339518}
,
{0.0359991,0.0369254,0.312754,0.198239,0.0685842,0.330153}
,
{-0.10713,0.0189861,-0.109022,0.133555,0.0673168,0.229483}
,
{1.9987,0.0745873,-1.11889,-1.02214,0.0971504,2.10133}
 };
  static const float bias2[1] = { -0.104559 };
  static const float weights2[][1] = { {0.0399422}
,
{-0.0597741}
,
{0.0327564}
,
{0.0540117}
,
{0.271256}
,
{0.0510897}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_3_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_3_1(v, index);
}
static int assign_gen_lepton_prior_1_3_1() {
  global_gen_lepton_prior.at(1,3,1) = &specialized_gen_lepton_prior_1_3_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_3_1 = assign_gen_lepton_prior_1_3_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_3_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.199609,-0.129625,0.119848,-0.139783,-0.037552,-0.115353 };
  static const float weights1[][6] = { {0.186288,0.0838002,0.0740157,0.418037,0.150563,0.147437}
,
{-0.0664885,0.531413,-0.048476,0.180258,-0.180685,-0.168156}
,
{0.175623,-0.230324,-0.413175,0.553984,0.13503,-0.0663378}
,
{-0.756808,0.254749,0.976563,0.145539,0.614102,0.09137}
,
{0.0303068,-0.214155,0.0740395,-0.299432,-0.280804,-0.0532436}
,
{-0.273527,-0.0652352,0.177414,-0.299875,-0.210007,-0.15461}
,
{-0.115477,-0.282836,0.214438,-0.298404,-0.167448,-0.227926}
,
{0.0232913,-0.0408426,-0.111309,-0.0267117,0.0678046,0.0208495}
,
{0.315494,-0.0359269,0.00297536,-0.278897,-0.202483,0.183794}
,
{-0.172344,0.0456285,-0.12404,0.011108,0.0117152,0.0293543}
,
{-0.182517,-0.0847483,0.0898756,0.130965,-0.0172264,0.0325465}
,
{0.138122,-0.257814,-0.325258,0.0599776,-0.309637,-0.0120658}
,
{-0.097841,0.138595,0.316613,0.00101562,-0.055111,0.0462032}
,
{-0.0862155,-0.315472,0.0586412,-0.315414,-0.127166,0.0879422}
,
{-0.160753,0.0162087,0.0417137,0.13583,0.184735,0.0899451}
,
{0.115999,-0.23141,-0.130186,0.0737653,-0.00794033,0.191528}
,
{0.509963,0.478045,-0.249658,-0.317105,-0.155018,0.478776}
,
{-0.199752,0.405349,0.333844,-0.0995115,0.0655952,-0.120881}
,
{-0.496274,-0.782732,0.502447,-0.109664,-0.0262666,-0.259999}
,
{0.190782,0.0683123,-0.237926,0.0920628,-0.353931,0.0116324}
,
{0.171207,-0.0484073,-0.0691218,-0.0030813,-0.147742,-0.146969}
,
{-0.00612148,-0.117579,-0.0701893,-0.0661817,-0.239799,0.0657667}
,
{0.221109,0.0023278,0.0183708,-0.200566,0.0509211,-0.0740223}
,
{0.00472629,-0.00968565,-0.00831541,-0.204434,-0.121704,-0.0789401}
,
{0.0864757,0.00846533,0.156643,0.357963,0.091777,-0.125991}
,
{0.0408272,-0.251931,0.409561,0.132253,-0.19333,-0.147447}
,
{0.1272,-0.174563,0.124073,-0.0860433,-0.210807,-0.152548}
,
{-0.0313089,-0.00914638,0.141868,0.16693,-0.0619669,0.0713551}
,
{0.00651521,-0.119275,0.208604,0.0560009,0.0654806,-0.0868496}
,
{-0.0163481,0.12719,0.239699,0.150137,0.0236414,-0.0758567}
,
{-0.0332279,-0.0971414,-0.068243,-0.0776454,0.167282,-0.232119}
,
{0.17754,-0.0536267,-0.0333507,0.0493831,-0.0155704,0.226232}
,
{0.0664368,-0.316479,-0.0549327,0.0130432,-0.0230387,0.0120344}
,
{0.115726,-0.0348362,-0.146415,-0.160353,-0.0186404,0.175399}
,
{-0.0056122,0.00165133,-0.00363654,0.0046102,0.0337976,0.0371084}
,
{0.00410502,-0.00868536,-0.0249734,0.0137525,-0.0629137,-0.0110079}
,
{0.123863,-0.228041,0.243702,-0.0562497,-0.128523,-0.141852}
,
{-0.0110574,-0.0795266,0.0191306,0.0997239,0.0596474,0.108953}
,
{0.048781,0.0872547,0.296603,-0.103316,0.025765,-0.214621}
,
{-0.0321367,0.00848781,0.04282,0.0516585,-0.148681,0.0574133}
,
{0.0223418,0.0439135,0.121637,-0.0333966,-0.0357341,-0.0674815}
,
{0.0945408,-0.238135,-0.219439,0.218498,-0.209843,0.0172417}
,
{-0.01026,0.0572895,0.0103041,-0.0228481,0.0258095,0.00738581}
,
{0.0194855,0.0657449,-0.125332,0.188357,0.139347,-0.0138343}
,
{-0.0743572,0.0191442,-0.089933,0.0803939,-0.0575225,0.118815}
,
{-0.00618305,-0.0328075,-0.0712102,0.0171051,0.025256,0.0460506}
,
{-0.169192,0.0976836,-0.0616945,-0.0980975,-0.213085,0.24306}
,
{0.0119421,-0.0715377,-0.0637962,-0.0885468,0.082407,-0.0276921}
,
{0.113436,0.0335384,-0.238006,-0.355075,0.0149537,-0.401176}
,
{0.0157549,-0.052328,0.0734506,-0.0671605,-0.150201,-0.0660532}
,
{-0.0063622,-0.0102004,-0.0302432,-0.0389139,-0.0234639,-0.00898811}
,
{0.0810736,0.156697,0.665359,-0.206956,0.0840511,-0.245582}
,
{-0.00274589,-0.051169,0.0129873,0.0297055,-0.0145336,0.0381233}
,
{-0.0639849,-0.0954907,-0.295154,0.00385846,0.163758,0.11845}
,
{0.222944,0.055079,0.295754,0.134897,-0.177992,0.244067}
,
{-0.0475467,-0.070898,0.186999,-0.172356,-0.0743813,0.0296445}
,
{0.0926026,-0.105715,-0.0518912,0.100911,-0.151031,-0.0561697}
,
{0.0579589,-0.057654,-0.0253586,-0.0442586,-0.0126906,0.180018}
,
{0.313289,0.114413,-0.0978909,-0.11319,-0.0845444,0.0463791}
,
{-0.0814179,-0.078699,0.0434412,-0.212365,-0.139626,0.0118037}
,
{0.0794966,0.157806,-0.0478803,-0.251977,0.299373,0.0329288}
,
{-0.420814,-0.0188958,0.02105,0.11118,-0.107098,-0.135049}
,
{-0.0288852,-0.0873601,0.0013963,-0.0267868,0.102172,-0.0712022}
,
{-0.143324,0.0910759,0.0581297,0.0276618,0.141785,-0.118876}
,
{0.0660875,-0.200108,-0.111922,0.131413,-0.168048,0.12984}
,
{-0.0314523,-0.0603056,0.336024,-0.0547698,0.0109475,-0.0637556}
,
{-0.0164195,-0.0729047,0.0319004,0.0783806,0.027217,0.0961792}
,
{-0.106247,0.000535609,0.11915,-0.0563431,-0.136489,-0.179863}
,
{-0.321621,0.0120815,-0.120451,0.0228753,0.281286,-0.0651284}
,
{-0.0805992,0.0494029,-0.0998805,0.100121,0.245865,-0.176026}
,
{-0.0362374,0.161082,0.223392,0.021386,-0.169827,-0.0351909}
,
{0.402813,0.0885979,-0.186607,-0.00452888,-0.0723187,0.220176}
,
{-0.056434,0.019826,0.00493797,-0.0261898,-0.155559,0.0140353}
,
{-0.0664877,-0.138861,0.237893,0.0752901,0.0874367,-0.0593392}
,
{-0.491543,-0.101337,0.171765,-0.0564694,-0.0424727,-0.15167}
,
{-0.175654,0.0689738,-0.219462,-0.0221719,-0.0787075,-0.103669}
,
{-0.186064,-0.149447,0.249528,0.118175,-0.193552,-0.200059}
,
{0.336744,-0.04043,0.0550395,0.203128,-0.280185,0.0783805}
,
{-0.0126351,-0.0798534,-0.142903,0.00831309,0.00826784,-0.0571012}
 };
  static const float bias2[1] = { -0.10598 };
  static const float weights2[][1] = { {0.0527857}
,
{0.0399226}
,
{-0.0555364}
,
{-0.0490256}
,
{-0.169716}
,
{0.0386351}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_3_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_3_2(v, index);
}
static int assign_gen_lepton_prior_1_3_2() {
  global_gen_lepton_prior.at(1,3,2) = &specialized_gen_lepton_prior_1_3_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_3_2 = assign_gen_lepton_prior_1_3_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00550033,0.0,0.00600206,-0.0358471,0.0374794,0.0 };
  static const float weights1[][6] = { {0.055478,-0.0962846,-0.0963541,-0.0536873,-0.0863517,0.0744482}
,
{-0.131251,-0.248741,-0.149765,-0.233154,0.0519923,-0.0735904}
,
{-0.212727,0.0859568,0.00513473,0.131448,0.0366566,0.0696213}
,
{-0.00191038,0.045603,-0.0197971,0.143247,0.18583,0.134094}
,
{0.0149023,-0.0038232,0.0124087,0.0860515,0.258193,-0.00084776}
,
{0.0151755,-0.0952935,-0.107529,0.163574,0.121317,-0.0208446}
,
{0.0442809,-0.0362886,-0.151016,-0.134184,0.160905,0.0179758}
,
{0.0405982,-0.0215504,0.144639,-0.0878501,0.155846,-0.0351424}
,
{-0.00282359,0.000478555,0.0431725,0.0155056,0.118789,-0.164823}
,
{0.103656,0.0169921,-0.00928026,0.0951171,-0.032455,-0.0509427}
,
{-0.0944232,0.111129,0.150899,0.197922,0.0918301,-0.162729}
,
{0.117525,0.0973639,-0.158496,-0.128183,0.141801,0.0222065}
,
{0.0200725,0.151493,0.0814647,-0.10989,0.159987,-0.15156}
,
{-0.0403203,-0.153848,0.0624288,0.0195463,0.0924953,0.0782698}
,
{0.0769515,-0.000309229,0.180334,-0.0494851,0.153276,-0.121247}
,
{0.00614127,-0.161795,0.0652039,0.144494,0.145434,-0.110689}
,
{0.109412,-0.00721179,0.0461226,-0.0393402,0.0347256,0.092568}
,
{-0.0139241,0.114514,-0.00545275,0.11746,0.0409262,0.186444}
,
{0.0718523,-0.071504,0.080351,-0.126628,-0.0149033,-0.212702}
,
{-0.0645241,0.0681344,-0.0919406,-0.000655359,0.0997091,-0.0562219}
,
{0.00968758,0.00122556,-0.066761,-0.0441929,-0.0411371,-0.0289281}
,
{-0.17072,-0.176784,0.158155,-0.216723,-0.0622428,-0.0321651}
,
{0.100395,0.0618708,0.101817,-0.00196027,0.106752,-0.0995808}
,
{-0.139515,0.0284945,-0.113959,-0.0274466,0.16898,-0.159958}
,
{-0.010662,0.0363225,-0.196762,-0.112962,0.00166189,0.0142758}
,
{0.041724,-0.070005,-0.0479368,-0.125343,0.109241,0.14061}
,
{-0.134477,0.0733903,-0.138894,0.0398576,-0.146085,-0.078482}
,
{0.131987,0.0539672,-0.0888152,-0.112545,0.0502031,-0.0957621}
,
{-0.0392211,0.0252726,0.0431485,0.216078,0.0410341,0.0295552}
,
{-0.121015,-0.0403573,0.0425891,-0.0116145,-0.0366729,0.128116}
,
{-0.062721,-0.0133631,-0.0953006,-0.149252,-0.01338,-0.0141814}
,
{-0.123846,0.0148482,0.0467091,0.0504332,0.00422232,0.0223569}
,
{-0.0783447,0.0040751,-0.15329,0.0723963,0.146941,-0.204198}
,
{0.0426762,0.209211,-0.237617,0.0341048,0.00615187,-0.234265}
,
{0.220424,-0.0689511,-0.134351,-0.0654127,0.13258,-0.0106673}
,
{-0.110091,0.123596,0.0329449,0.0231696,0.120548,-0.0277802}
,
{-0.00774223,-0.0042366,-0.106426,0.00877068,0.0213637,-0.0366821}
,
{-0.226,-0.162056,-0.107678,-0.212537,-0.0378648,0.163348}
,
{0.00789881,0.103221,-0.106002,-0.0565078,0.0382801,-0.123925}
,
{-0.0136987,-0.13354,-0.0627756,-0.230741,0.0153575,0.0427244}
,
{0.0251645,0.02743,-0.238657,-0.227833,-0.00570573,0.0583796}
,
{0.0320187,-0.225844,-0.0285177,0.191639,-0.0761902,0.0150484}
,
{0.118198,0.132476,-0.00835756,0.206137,0.140048,0.085011}
,
{0.130554,0.127661,-0.0573091,0.174745,-0.0121635,0.0767981}
,
{0.22826,-0.0780506,0.103566,0.0272801,0.11189,0.144945}
,
{-0.198604,0.0541384,0.171533,0.116384,0.187179,-0.00208595}
,
{-0.0303187,0.0402706,0.0713631,0.0527243,-0.0838659,-0.0875496}
,
{0.034242,-0.0567808,-0.213086,0.058666,-0.165647,0.0161731}
,
{0.0422038,0.15669,-0.131923,-0.133741,0.0231499,-0.0794785}
,
{0.0220138,-0.120473,0.0654012,0.0774251,-0.152292,0.0750116}
,
{-0.093681,-0.00299316,-0.0228897,0.00552819,-0.00786074,-0.0718511}
,
{0.114797,-0.0638926,0.017638,0.228333,0.00622618,0.00778906}
,
{0.0592151,-0.203471,0.137422,-0.102053,-0.0383817,0.110252}
,
{-0.062964,-0.0106009,-0.0665352,-0.0171871,0.234605,-0.215613}
,
{-0.0487326,0.0495148,0.162759,-0.0769148,0.0437106,-0.0120665}
,
{-0.167216,-0.0161461,0.165394,-0.0530808,0.121079,0.0761704}
,
{0.0218309,0.149841,0.0796163,0.113064,-0.153714,-0.115159}
,
{-0.157902,0.030194,0.0961178,-0.148715,-0.0378557,0.0165161}
,
{-0.0151006,0.0279242,0.135269,0.0229308,0.0111599,0.00574469}
,
{0.0116096,-0.180345,0.0801319,0.0527631,0.0185071,-0.0857893}
,
{0.00899273,0.121833,-0.0858284,-0.160259,-0.050327,0.17671}
,
{-0.0275653,0.179391,-0.0394817,-0.105845,0.193001,-0.0244178}
,
{0.0497474,-0.0596379,0.0721223,0.020096,-0.126537,0.0491035}
,
{0.126972,-0.0779899,0.0525204,-0.0507751,0.0218922,0.0322676}
,
{0.0449849,0.108079,0.121225,-0.0819169,0.179045,0.11435}
,
{0.0352976,-0.163171,-0.00373137,0.0229434,0.126888,0.136006}
,
{0.105501,0.10411,0.151362,0.0392201,0.0455752,-0.0785012}
,
{0.118637,-0.0610901,-0.098954,0.0253875,-0.0486111,-0.0651824}
,
{-0.119452,-0.0411292,0.144235,-0.164127,-0.0873962,0.151808}
,
{0.179122,-0.0677645,-0.0564964,0.0666961,0.0293597,0.10456}
,
{0.0292565,-0.0493165,0.0203016,-0.0959097,-0.0404793,-0.0996223}
,
{0.161911,-0.0213761,-0.0195346,0.133125,0.0174088,0.240989}
,
{-0.0144014,-0.0263831,-0.0427819,0.047363,0.0911506,-0.107635}
,
{-0.0261986,0.0762477,0.143223,-0.0523043,-0.0173039,0.121178}
,
{0.0212614,-0.14984,0.0529511,-0.147765,-0.0181256,-0.112079}
,
{0.182228,0.0191062,-0.0585446,-0.0787257,0.0705439,-0.131043}
,
{0.0991961,0.0951653,-0.154062,-0.244254,-0.0980519,0.053596}
,
{-0.0922614,-0.212095,0.0422878,-0.0361174,0.188386,-0.203255}
,
{0.0641663,-0.158929,-0.0266295,0.119013,-0.190703,-0.0661035}
 };
  static const float bias2[1] = { -0.0367235 };
  static const float weights2[][1] = { {-0.0153297}
,
{-0.133728}
,
{-0.194719}
,
{0.0510931}
,
{-0.0549835}
,
{-0.071486}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_8(v, index);
}
static int assign_gen_lepton_prior_1_0_8() {
  global_gen_lepton_prior.at(1,0,8) = &specialized_gen_lepton_prior_1_0_8;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_8 = assign_gen_lepton_prior_1_0_8();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.268773,-0.00184407,-0.285337,-0.144875,-0.0788866,-0.110291 };
  static const float weights1[][6] = { {0.032165,0.174671,0.107113,-0.0216333,-0.156141,-0.264803}
,
{0.240079,-0.0022284,0.126049,0.00218963,-0.380894,0.199534}
,
{-0.0775966,-0.154535,0.0183357,-0.0506275,0.25611,0.0794491}
,
{0.292166,-0.154678,-0.00485963,-0.296906,0.0204187,0.248064}
,
{0.419507,-0.171857,-0.27709,-0.072204,-0.152992,-0.232851}
,
{0.288951,-0.0494167,-0.354387,-0.21761,-0.226119,-0.0488743}
,
{0.114845,-0.0758231,-0.23765,-0.353402,0.00214448,-0.113601}
,
{0.0546173,0.0323249,0.246096,0.158032,-0.0314521,-0.246185}
,
{0.0180854,-0.385542,-0.153274,-0.0211732,0.0400586,0.102452}
,
{-0.140848,0.114835,-0.0320708,0.00633662,0.0102024,-0.156324}
,
{0.197891,-0.207273,0.0159161,0.0475861,-0.0384124,-0.0634152}
,
{0.155198,-0.239027,-0.134623,0.0543185,-0.078854,0.00555817}
,
{0.0136215,0.116811,0.221783,0.0314462,-0.0207414,0.0719673}
,
{0.156347,-0.0748794,-0.0633248,0.0848434,-0.104053,-0.124722}
,
{0.0732396,0.0953791,0.0341702,-0.070129,-0.112091,0.0959039}
,
{-0.233656,-0.0900365,0.0722139,-0.154966,-0.0287362,0.0873785}
,
{0.142807,-0.436245,-0.271218,-0.210211,-0.174462,-0.15254}
,
{-0.0366334,-0.0387966,-0.348067,0.063006,-0.231611,-0.0866205}
,
{-0.0269659,0.300835,-0.00585699,0.210306,0.0371351,-0.0169309}
,
{0.134916,0.114368,-0.06248,0.0111955,-0.0202597,0.116945}
,
{0.109546,0.0356853,0.00231166,0.0934233,-0.158909,0.0131627}
,
{0.12899,0.0105762,-0.0445487,0.0851873,-0.17147,0.0594675}
,
{0.055444,0.0477638,0.0628651,0.0491812,-0.131576,0.185173}
,
{0.15592,0.0109283,0.0691773,0.123853,-0.0422877,0.0170549}
,
{-0.0885419,-0.0624044,0.187117,-0.215558,-0.0458564,0.026504}
,
{0.0194258,0.00568355,-0.126519,0.000258959,-0.334248,-0.00903294}
,
{0.00896248,-0.113767,-0.118474,-0.139912,0.0812847,-0.164316}
,
{0.22528,-0.0480592,-0.231632,-0.0176538,0.153363,0.0310624}
,
{-0.269361,0.297648,0.731432,-0.0439948,-0.244435,-0.364598}
,
{0.0169487,-0.113903,-0.140314,0.165923,0.0647126,0.0642664}
,
{0.104615,0.20163,-0.0584706,-0.112265,-0.0153591,0.0876159}
,
{0.0418741,0.0934439,0.00619979,-0.140957,-0.0200333,-0.0881671}
,
{-0.0116272,-0.0410651,-0.0150355,0.0137097,0.0351626,-0.015177}
,
{-0.034458,-0.234105,0.0184033,-0.0349583,-0.0883171,0.0338181}
,
{0.0931693,-0.109349,-0.0661213,-0.0455568,0.141012,0.100841}
,
{0.0792279,0.0359068,0.0810173,0.0262001,0.0257284,0.0391643}
,
{0.00516464,-0.0335078,0.0666876,-0.0618881,-0.025765,0.113124}
,
{0.0368752,-0.0332903,-0.15247,-0.00915002,0.10711,0.0387455}
,
{-0.035905,-0.0927666,0.363663,-0.0137049,-0.0107633,0.00631218}
,
{0.0054547,-0.148797,0.0557861,-0.0239695,-0.131129,0.0496929}
,
{0.120475,0.0477394,-0.117068,0.0791721,-0.0822853,0.0174203}
,
{0.164368,0.0298373,0.0649776,-0.00356326,-0.204149,0.115688}
,
{-0.022482,-0.0303055,-0.0569578,-0.052652,-0.0813403,0.0228589}
,
{0.0228031,0.0609771,0.168467,-0.0294315,-0.152513,0.00109731}
,
{-0.0876245,0.0561655,0.196546,-0.200691,0.281059,0.114801}
,
{0.112497,0.0175543,-0.0792243,0.0445509,0.0339292,0.046873}
,
{0.0586329,-0.0128658,-0.0739192,-0.0328749,-0.126472,0.0620584}
,
{-0.0240363,-0.0150605,0.0356842,0.019849,0.0336933,-0.0225986}
,
{-0.0323261,0.184228,0.19985,0.0898665,-0.0794523,-0.110654}
,
{-0.13658,0.0183885,0.178599,-0.0663465,0.0766166,-0.0375578}
,
{0.0245289,-0.0308187,0.141404,-0.0312467,0.0974795,0.043292}
,
{-0.107234,-0.033198,0.136113,-0.0622576,-0.211501,-0.0500593}
,
{0.287489,0.0121382,-0.115155,0.176168,-0.0663108,0.050542}
,
{0.0881989,-0.1479,-0.124187,0.0172289,-0.0125086,0.0824653}
,
{-0.113284,0.0140386,-0.281322,-0.0265326,-0.422602,-0.159403}
,
{0.3402,0.242023,-0.695056,-0.138039,-0.127272,-0.203563}
,
{0.402535,0.0894397,0.564403,0.0654916,-0.422398,0.461985}
,
{-0.034794,-0.149416,-0.0130439,0.0198656,-0.0560764,0.290914}
,
{-0.785827,0.362742,0.389467,-0.168016,-0.181653,-0.181231}
,
{-0.480381,0.036992,0.114801,0.0563444,-0.0794459,0.0526638}
,
{0.0198025,-0.182267,0.0505284,0.114422,-0.141702,0.0567196}
,
{0.438696,-0.172012,0.0188607,-0.136656,-0.277549,0.359529}
,
{0.00566501,0.00192451,0.0862456,0.112162,-0.0327929,0.105826}
,
{-0.152837,-0.00232344,-0.0829507,0.0262355,0.536405,0.600641}
,
{0.276162,-0.255667,-0.0525173,0.0103611,-0.00435967,-0.0180028}
,
{-0.00118914,0.16645,-0.419041,-0.189646,-0.322112,0.150618}
,
{-0.198997,0.524612,0.134287,0.0496979,-0.0567012,-0.296078}
,
{-0.00550462,-0.0682659,0.0191705,-0.0137168,0.126432,-0.0781416}
,
{-0.625277,-0.20578,-0.0242572,-0.0436896,0.220346,0.356469}
,
{0.147255,0.194689,0.224373,-0.1026,0.125459,0.0550028}
,
{0.335292,-0.0359326,-0.114327,0.17124,-0.0355131,0.455589}
,
{0.150569,0.276602,-0.112468,-0.0239033,-0.0918433,-0.0940258}
,
{0.148707,0.178373,-0.1495,0.0489458,-0.0233394,-0.0157715}
,
{-0.182776,0.369009,-0.72194,-0.0815652,-0.360273,0.623762}
,
{-0.513038,-0.076032,0.19629,0.0925362,0.0441782,-0.439521}
,
{-0.501347,-0.0580566,0.301758,0.0498115,0.114563,0.484869}
,
{0.0372494,-0.17424,-0.0433047,-0.0686046,0.0295691,-0.00216857}
,
{-0.233985,0.288471,0.681765,-0.0526303,0.239846,-0.00173467}
,
{-0.0438205,-0.0913039,-0.0189827,-0.0840994,0.233966,-0.0285438}
 };
  static const float bias2[1] = { 0.289077 };
  static const float weights2[][1] = { {0.0997846}
,
{-0.187566}
,
{0.286062}
,
{-0.110512}
,
{-0.368342}
,
{-0.147918}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_9(v, index);
}
static int assign_gen_lepton_prior_1_0_9() {
  global_gen_lepton_prior.at(1,0,9) = &specialized_gen_lepton_prior_1_0_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_9 = assign_gen_lepton_prior_1_0_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_10(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0695475,0.0248776,-0.0950623,0.00605543,0.323313,-0.22703 };
  static const float weights1[][6] = { {0.125152,0.280512,-0.00808857,0.153145,-0.199953,0.0220255}
,
{0.327366,0.25234,0.0639871,0.0337022,0.186848,-0.0382756}
,
{-0.0947589,-0.209512,0.208392,0.246449,-0.0943869,0.0194047}
,
{-0.42062,-0.141268,-0.297028,0.201725,0.407948,-0.402222}
,
{0.0657695,0.0461563,-0.0345735,0.161968,0.43092,-0.171566}
,
{0.364059,0.07457,0.0343805,-0.0406584,0.261767,-0.00282138}
,
{0.121159,-0.0199865,0.140809,-0.00698342,0.198269,-0.143969}
,
{-0.0868777,-0.147912,0.220735,-0.207392,-0.160755,-0.0978341}
,
{-0.101407,0.195121,-0.329686,-0.0745099,-0.0673905,-0.117243}
,
{-0.140125,-0.104886,-0.0291651,-0.130674,-0.0502821,0.0109301}
,
{0.0492467,0.154179,0.0706147,-0.050514,-0.18048,-0.0581298}
,
{-0.0898266,-0.0298947,0.0289559,0.146417,-0.101963,0.0569548}
,
{-0.00660251,-0.113636,0.0775253,-0.139495,0.140616,-0.0693964}
,
{0.215629,-2.81294e-05,0.0438351,-0.207027,-0.0939862,0.333457}
,
{0.0301392,0.109866,0.0121529,0.0491818,0.0879355,-0.0364916}
,
{0.170901,0.191567,0.076119,-0.115931,-0.045827,-0.0281257}
,
{0.386418,-0.0392574,-0.161827,-0.0645313,-0.39814,0.174278}
,
{0.0160429,-0.0683974,0.0545767,-0.216645,-0.00192726,0.00691942}
,
{0.121467,0.101391,0.128105,-0.142325,0.130135,-0.304904}
,
{0.0732666,0.227057,-0.171694,-0.0484905,0.0478283,0.0334195}
,
{0.045453,0.112954,-0.0452701,0.00845664,0.0140744,-0.0373736}
,
{0.0421334,0.0466618,-0.0462784,-0.15264,0.0486393,-0.0790909}
,
{0.0384569,0.0378813,-0.232086,-0.00912314,0.238936,-0.0226254}
,
{0.0599212,-0.0829082,0.0454535,-0.016675,-0.00129187,-0.0487261}
,
{-0.188,-0.326326,-0.195862,-0.175657,0.100269,-0.00438161}
,
{-0.0798195,0.0207799,-0.123449,-0.187264,-0.185556,0.123513}
,
{-0.22999,0.320155,0.109984,-0.0632526,0.203355,0.0898935}
,
{0.0400746,0.0809688,-0.0879421,-0.079942,-0.085373,0.00310245}
,
{-0.0111877,-0.347549,0.136469,0.00728666,0.170622,-0.498081}
,
{0.00668025,0.102295,-0.0838477,0.0377163,-0.0268065,0.0243216}
,
{0.161328,0.120379,-0.15078,0.0181122,0.142365,-0.243596}
,
{0.0512646,-0.030859,-0.117054,0.0102529,0.0511091,-0.0117276}
,
{-0.019079,-0.0314855,0.208123,-0.288546,-0.0159479,0.105132}
,
{0.123394,-0.0532091,0.00891633,-0.0272621,-0.0108134,0.141839}
,
{-0.0491873,-0.0340744,-0.10899,0.160639,-0.10058,-0.0785165}
,
{-0.02843,0.156669,-0.339928,0.132519,-0.0182073,-0.0990513}
,
{0.329014,0.351942,0.143573,0.0822964,0.184738,-0.567355}
,
{0.109443,0.220013,-0.232595,-0.197544,0.0298212,-0.166036}
,
{0.289012,0.0930464,-0.330473,0.742466,0.0498557,-0.552038}
,
{0.0214055,-0.101913,-0.30661,-0.0726105,0.0128362,0.256064}
,
{0.0480052,0.0211094,0.0591314,-0.086823,0.0825326,0.157069}
,
{0.180155,0.11374,0.171298,0.231511,0.260465,0.261447}
,
{-0.0334124,0.0567333,-0.109146,0.00544021,-0.0187579,0.0311369}
,
{0.0542778,-0.179059,0.281083,0.0108428,-0.0855769,-0.113702}
,
{-0.112245,0.0165958,0.235843,-0.136983,-0.00108742,0.0633053}
,
{0.118273,0.00188543,0.103055,-0.0163849,0.00885698,-0.137595}
,
{0.0223496,-0.0614471,-0.0952256,0.173712,-0.163946,-0.422994}
,
{-0.0809922,0.11657,-0.062127,0.250287,0.00352075,0.0157277}
,
{-0.0641006,-0.110931,-0.0113545,0.0675807,-0.0892659,0.197728}
,
{-0.0203787,-0.066882,0.0660517,-0.337418,0.0267834,0.093746}
,
{-0.0916369,-0.0303724,-0.158611,0.431002,-0.0898903,-0.164749}
,
{-0.243342,-0.327702,0.049456,-0.0826834,-0.252532,0.0810139}
,
{0.0704044,0.0262902,-0.0250091,0.0242276,0.0468214,-0.0273422}
,
{0.201156,0.0648285,-0.467052,-0.213851,-0.0455067,-0.13733}
,
{-0.000738855,0.167198,0.0847262,-0.00417207,-0.33203,-0.47688}
,
{0.124569,-0.606438,-0.121299,-0.114168,-0.741038,-0.260192}
,
{0.016987,-0.0127203,-0.0739752,-0.0891622,-0.408786,-0.223407}
,
{-0.0365823,-0.150983,-0.0420469,-0.13157,0.31462,0.414257}
,
{-0.209064,0.223108,-0.0574082,0.0414742,-0.492619,0.607786}
,
{0.147835,0.0867901,-0.0172798,0.12601,0.0560803,-0.27075}
,
{-0.185442,0.0278208,-0.117744,0.0280434,-1.11591,0.145052}
,
{0.0844336,-0.0878453,0.0566814,-0.0205766,-0.167478,0.2686}
,
{0.119163,-1.05707,-0.144563,0.182268,0.733243,-0.752079}
,
{-0.101213,-0.419355,-0.180749,-0.0854231,0.672787,0.503132}
,
{0.00537801,-0.0307431,-0.164054,-0.00741778,0.275598,-0.0173919}
,
{-0.103423,-0.181318,0.0749655,-0.105821,-0.16557,-0.138031}
,
{-0.147535,-0.174805,0.0542109,0.0100416,0.123024,0.212172}
,
{0.108542,0.792865,-0.0563159,0.0318175,-1.16348,1.05085}
,
{-0.0574291,0.304338,0.0877454,-0.0291668,-0.17995,0.399313}
,
{-0.0504725,-0.0246981,0.0490959,-0.0716721,0.171014,0.102423}
,
{-0.140329,-0.784676,-0.107804,-0.155081,0.113773,-0.573685}
,
{-0.00396848,0.634239,-0.0875666,0.0586915,-0.537133,0.463947}
,
{0.0012471,-0.430105,-0.226902,-0.0451081,0.953458,-1.59887}
,
{-0.103239,-0.569766,-0.128715,0.208756,0.535729,-0.965536}
,
{0.0784106,-0.489825,-0.0934411,0.0192869,0.988358,-0.912012}
,
{0.118755,-0.200734,-0.0434952,0.102571,-0.095587,-0.146518}
,
{0.0727073,-0.0703084,0.0807588,0.0676158,0.128675,-0.219936}
,
{-0.00970121,0.116444,0.0591438,-0.205746,0.0128747,-0.160138}
,
{0.2044,0.12582,-0.0776564,-0.111027,0.0418833,-0.0420579}
 };
  static const float bias2[1] = { 0.0630695 };
  static const float weights2[][1] = { {0.0736116}
,
{0.0269104}
,
{0.261475}
,
{0.638606}
,
{-0.160041}
,
{0.122726}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_10(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_10(v, index);
}
static int assign_gen_lepton_prior_1_0_10() {
  global_gen_lepton_prior.at(1,0,10) = &specialized_gen_lepton_prior_1_0_10;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_10 = assign_gen_lepton_prior_1_0_10();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.352627,-0.191747,-0.119764,0.429954,-0.196042,-0.21572 };
  static const float weights1[][6] = { {0.0916878,-0.214074,-0.0502002,-0.00508122,0.0794925,-0.0426803}
,
{-0.0105827,0.57049,0.262752,-0.343689,0.400538,-0.151118}
,
{-0.0583442,0.0532199,0.0394914,0.440876,-0.0857109,0.233946}
,
{-0.258921,0.985124,-0.178388,1.6186,-0.054134,0.907044}
,
{0.258286,-0.306165,-0.183964,0.307978,0.0838431,-0.160081}
,
{0.481896,-0.356245,-0.0018097,0.394323,-0.2134,-0.289491}
,
{0.398553,-0.0949069,-0.291813,0.378712,-0.229563,-0.405617}
,
{-0.0419632,-0.119046,0.0224417,-0.0782713,0.439975,-0.103968}
,
{-0.472026,0.487806,0.225356,-0.109957,0.130682,0.168179}
,
{0.0407728,-0.112172,-0.208298,0.0443611,-0.136765,0.0541683}
,
{-0.0661626,0.106282,-0.0309301,0.165106,-0.215436,-0.173426}
,
{0.199339,0.17143,0.161138,-0.0768869,0.178738,0.275112}
,
{-0.0015648,-0.156321,0.0972946,0.0590855,-0.0103132,0.184639}
,
{-0.028557,-0.0422377,-0.0569542,0.104796,0.0485561,-0.0272632}
,
{-0.0740352,0.0735117,0.0118039,-0.0643901,0.0459585,0.107909}
,
{0.0887786,-0.0628176,0.0309015,-0.108776,-0.0799889,-0.126484}
,
{0.18831,0.169776,0.281886,0.0936228,0.20305,-0.079402}
,
{-0.0289061,-0.140505,0.0771344,0.0482931,0.0323965,-0.070651}
,
{0.566805,-0.451263,-0.248205,0.248143,-0.218796,-0.18027}
,
{0.0825887,0.256375,0.0406707,0.0062872,-0.0502376,0.196004}
,
{0.00940332,0.156629,0.120088,-0.426999,-0.250543,-0.19157}
,
{0.117106,-0.131852,0.153438,0.0896208,-0.0453691,0.103421}
,
{0.0728361,-0.12974,-0.101639,0.126353,0.0950587,0.216048}
,
{0.0088974,0.0520843,0.0292164,0.0358258,-0.18578,0.0250982}
,
{-0.0567614,-0.245128,0.130356,0.202341,-0.0267011,-0.0516309}
,
{0.0680205,-0.22264,0.0330035,0.278389,-0.073056,-0.0641975}
,
{0.00121179,0.12976,-0.177319,0.172082,0.0430795,0.000836327}
,
{-0.102683,-0.164956,-0.219001,0.0811268,-0.100585,-0.155727}
,
{0.01838,0.0158334,-0.139298,0.136017,-0.08659,0.0947848}
,
{-0.0461069,0.230516,0.01068,0.172926,0.126076,-0.026498}
,
{0.166188,-0.00649104,0.0614261,-0.156355,0.0958652,-0.02823}
,
{0.0753572,-0.090092,0.0296,0.0414258,0.0892705,-0.0937691}
,
{0.0233524,0.0263467,-0.128647,0.0531282,0.17552,0.221315}
,
{-0.145115,0.0364758,-0.0926194,0.0629966,-0.107179,0.16537}
,
{0.0392522,0.123812,-0.173532,-0.0526405,0.0277382,0.074013}
,
{-0.0437363,0.0422711,-0.0295359,0.0682027,0.00203391,-0.0567634}
,
{0.14195,-0.133255,0.234084,-0.0826304,-0.242606,0.152051}
,
{0.132913,-0.0247218,0.0140363,-0.0427569,0.0643567,0.0917802}
,
{0.202243,0.000472243,-0.10358,-0.0939911,0.0976195,0.267474}
,
{-0.0562397,0.0211317,-0.0533378,0.0617312,-0.156022,0.0759596}
,
{-0.00278129,0.0428666,-0.0106506,0.102038,-0.0717142,0.022349}
,
{-0.0851638,0.0507685,0.0198488,0.0710407,-0.0780047,-0.0899203}
,
{-0.115971,-0.0739947,-0.00542508,-0.126873,0.0844288,-0.104331}
,
{0.111418,-0.0340511,0.282577,0.115559,-0.108981,-0.0289234}
,
{0.084808,-0.0689788,0.0616272,-0.0522377,0.0277924,0.0963348}
,
{-0.0725273,-0.0301478,-0.0849036,-0.0866284,0.119137,-0.0458154}
,
{-0.00573883,-0.182207,-0.0141898,-0.212765,0.176319,0.105311}
,
{-0.0361839,-0.0761175,0.031774,-0.116804,0.0013582,-0.0122808}
,
{0.0191457,-0.0439601,0.142869,-0.0882558,-0.0348088,-0.0808578}
,
{0.00967302,0.0253821,-0.0372196,0.0106908,-0.15694,0.0612032}
,
{0.00554166,-0.0319479,0.0339005,-0.061544,0.0157592,-0.00707534}
,
{-0.125551,-0.05316,-0.0293724,-0.076922,0.0753841,-0.0499952}
,
{-0.078573,0.0277931,-0.00914837,0.0425352,-0.0632398,-0.0688152}
,
{0.0620451,0.0691088,0.109857,0.0903544,0.162396,-0.0832352}
,
{0.136771,-0.00560779,0.0390766,0.0666776,0.0473425,0.161621}
,
{0.0103562,0.0241863,0.00581268,0.14373,0.132688,0.0623442}
,
{-0.047893,0.106348,-0.112932,-0.102855,0.190509,-0.12575}
,
{0.111466,-0.132683,-0.111173,-0.112507,-0.17308,0.0546224}
,
{-0.184006,-0.290023,0.158108,0.223804,0.0831577,0.107111}
,
{0.0714932,-0.113686,-0.0367775,0.149688,-0.0332898,0.0545475}
,
{-0.215219,-0.0162795,-0.0465482,0.00604419,0.107438,-0.101108}
,
{-0.117433,0.20207,-0.0175041,-0.0576431,0.112834,0.127978}
,
{0.0579499,-0.0108933,-0.0393736,0.0619313,-0.0702757,-0.00958925}
,
{-0.0437428,-0.0776705,0.0487071,-0.0495471,0.12084,0.104708}
,
{-0.0950111,0.0463524,0.117993,0.177258,0.0542925,0.00708654}
,
{0.131087,-0.0337411,0.0213273,-0.205121,0.156535,-0.00175553}
,
{0.22905,0.0790862,-0.165172,0.149825,0.213894,-0.000789239}
,
{-0.0328904,-0.0188664,0.0386008,-0.00972915,-0.0812364,0.0940661}
,
{-0.0961575,0.039333,0.0214275,0.0479081,0.137348,-0.0654104}
,
{0.0323842,0.152892,0.0767231,-0.0740778,0.110024,-0.0771922}
,
{0.0842065,-0.0234302,0.0629456,-0.0250282,-0.142403,0.0223297}
,
{-0.000108534,0.128089,0.118143,0.0580806,-0.110871,0.125643}
,
{-0.066808,-0.161454,0.00823089,0.0567952,-0.062882,-0.00205349}
,
{-0.0134725,0.0887069,0.0373936,0.21166,-0.0302863,0.101995}
,
{0.114187,-0.326069,0.174523,0.273942,-0.0341846,0.0556393}
,
{-0.0909835,0.165784,-0.151671,-0.111601,-0.0228089,-0.0629359}
,
{-0.107224,-0.129053,0.0821253,-0.257787,-0.0252309,0.0718322}
,
{-0.1477,-0.0778732,0.025759,0.00574199,-0.0839407,0.130616}
,
{-0.0249254,0.00498768,0.190487,-0.196654,0.057453,0.0679242}
 };
  static const float bias2[1] = { -0.053257 };
  static const float weights2[][1] = { {-0.037775}
,
{0.0319377}
,
{0.0274346}
,
{-0.0230075}
,
{0.0146803}
,
{0.0378686}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_4_0(v, index);
}
static int assign_gen_lepton_prior_1_4_0() {
  global_gen_lepton_prior.at(1,4,0) = &specialized_gen_lepton_prior_1_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_4_0 = assign_gen_lepton_prior_1_4_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_4_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.117184,0.150705,-0.293831,0.206877,0.167724,-0.135073 };
  static const float weights1[][6] = { {-0.1176,-0.237152,-0.120093,-0.0508793,-0.162396,-0.0606422}
,
{-0.755127,-0.0173166,0.0756936,0.298136,0.530538,0.801808}
,
{0.517041,-0.86455,-1.4506,-0.951941,0.189804,0.122806}
,
{-2.23602,3.17672,-1.64472,2.31967,1.4247,-0.0210332}
,
{-0.0727777,0.257798,-0.309727,0.169903,0.234107,-0.157675}
,
{-0.0533145,-0.129077,-0.0154101,-0.230337,-0.226419,-0.172788}
,
{-0.143389,-0.154241,0.15,-0.369385,-0.183068,-0.190881}
,
{0.17885,0.0473203,-0.0384081,-0.208438,-0.0245621,-0.0193156}
,
{0.0602514,-0.170076,0.128997,0.122573,0.0294457,0.0535725}
,
{-0.107336,0.0408289,-0.0419805,-0.115426,-0.189806,0.0208422}
,
{0.00176448,-0.100661,-0.187704,0.108322,0.14584,0.042095}
,
{0.054055,-0.0293912,0.0734978,-0.133536,-0.144462,0.296913}
,
{-0.133928,0.0358325,-0.194147,0.273143,-0.000298209,0.135062}
,
{-0.202299,0.244168,-0.310264,0.377566,0.253517,0.0629581}
,
{-0.117184,0.0140193,0.174657,0.236946,0.143319,0.149604}
,
{0.194687,0.234575,0.00492726,0.0248953,-0.114667,-0.0749355}
,
{0.238881,0.202449,-0.128929,0.0697666,0.1756,0.248074}
,
{0.36495,0.202631,-0.407129,-0.109617,0.423907,-0.438154}
,
{-0.421219,-0.840893,-0.413228,0.651657,0.302851,-0.598976}
,
{-0.0356283,-0.0361497,0.153752,-0.205026,-0.0228958,0.242961}
,
{-0.187896,-0.113023,-0.217679,-0.117352,-0.0308767,0.244741}
,
{-0.104585,0.0443917,-0.0671682,-0.149782,-0.0282594,-0.0720503}
,
{0.145912,0.184817,0.188522,-0.0229834,0.100909,-0.144255}
,
{0.131938,-0.040481,-0.120641,0.0685946,-0.398274,-0.141087}
,
{-0.0691078,0.161792,-0.143774,0.175509,0.0736858,0.0270945}
,
{-0.0236861,-0.00194293,0.07403,0.12737,-0.140408,0.0416091}
,
{-0.0491328,-0.0551247,-0.122792,0.177712,-0.0714003,-0.136982}
,
{-0.0271566,-0.103059,0.233996,-0.0298407,-0.0482494,0.0322566}
,
{0.0214926,-0.0617648,0.0930979,0.109288,0.0460345,0.110204}
,
{0.0793258,-0.0148219,-0.0445806,-0.0710779,0.0864867,-0.165488}
,
{0.0043986,0.0204588,-0.0143314,0.066936,-0.0454511,-0.0894134}
,
{0.146882,-0.0954598,0.0689531,-0.0238084,-0.0539969,0.0852635}
,
{-0.286103,-0.0707227,0.0193364,0.0132944,0.0603743,0.194468}
,
{-0.144085,-0.0812396,0.118579,0.0499152,-0.109301,-0.0351341}
,
{0.0403801,-0.0198072,0.167356,0.0651231,-0.0184897,-0.0651106}
,
{-0.0125284,-0.0325821,0.043268,0.0504948,0.013125,0.0179485}
,
{-0.165564,0.272595,0.103063,0.201415,-0.0164726,0.0142569}
,
{0.0807039,-0.027139,-0.00563353,-0.0747265,-0.0337418,-0.0385402}
,
{-0.0021931,0.473357,0.0890856,-0.0456295,0.0257404,-0.150399}
,
{-0.0192658,-0.0890595,-0.0264764,-0.232123,0.219362,0.0733839}
,
{-0.0188283,-0.0270799,0.0488627,-0.0170301,0.0559628,0.0428138}
,
{-0.0857755,-0.134038,-0.0257318,0.0874058,-0.118018,0.0775936}
,
{-0.0399113,0.0647856,0.0941892,0.0179324,0.0299107,-0.0140508}
,
{0.0374715,0.0575892,-0.0586439,0.0256071,0.285893,0.0512236}
,
{-0.0751015,0.0981377,-0.0182791,0.0066949,0.0719151,0.0287898}
,
{0.0235111,0.0128395,-0.00212592,0.041245,-0.0644871,-0.041843}
,
{0.178048,-0.401275,0.0404015,0.428903,-0.213227,-0.196952}
,
{-0.0323546,0.103938,0.0403665,-0.0692245,0.0380057,-0.0344901}
,
{0.117937,0.000198137,-0.0783783,-0.0758325,0.0901143,-0.0135051}
,
{0.0561948,-0.113961,-0.0877092,-0.0138125,0.0550495,0.0200139}
,
{-0.0160416,0.00911193,-0.0260234,-0.014599,-0.0211389,-0.00423409}
,
{-0.142431,-0.112193,-0.0504518,-0.0867429,-0.598992,0.0198383}
,
{-0.0359715,0.020788,0.0176406,-0.0385276,-0.0313784,0.00406545}
,
{-0.0125888,-0.263993,-0.0893141,-0.105862,-0.343642,0.0404998}
,
{0.0102908,-0.142045,-0.129491,0.121047,0.0368248,-0.219919}
,
{-0.100377,0.250175,-0.0949815,-0.115177,0.210256,0.0754584}
,
{0.157955,-0.166144,-0.0950279,-0.0499477,-0.123114,0.14744}
,
{0.126033,-0.224101,0.173889,-0.126898,-0.0670125,0.0783611}
,
{0.0849849,0.01351,0.103786,-0.144706,-0.154999,-0.128936}
,
{0.033609,-0.144529,-0.136384,0.0885326,-0.0904159,-0.140307}
,
{0.0948367,-0.0793268,0.123515,-0.0996855,-0.174464,0.185849}
,
{0.170228,0.0194443,-0.149591,0.0694619,-0.0268893,0.0299097}
,
{-0.0454484,0.0797437,-0.126475,0.053029,-0.24081,-0.0250879}
,
{0.14916,0.0567743,0.0630638,0.0169895,0.116539,-0.151298}
,
{-0.0270013,-0.0874764,0.151067,0.0519732,-0.0948194,0.14873}
,
{-0.00616001,-0.00663759,-0.10021,-0.0811659,0.00603885,0.0669935}
,
{0.152792,0.0855236,-0.142892,-0.112149,-0.168704,0.0823914}
,
{-0.0906755,-0.0629133,-0.0514777,-0.146308,-0.160546,0.0240786}
,
{-0.203186,0.0978731,0.102882,-0.0173089,-0.00323562,0.0617786}
,
{0.0412345,-0.133959,-0.181111,-0.00349845,0.0785509,0.140428}
,
{0.0627356,-0.111289,0.00401196,-0.130064,-0.0619486,-0.035396}
,
{-0.227094,-0.03603,-0.0300117,-0.134125,0.039944,0.116278}
,
{-0.0531085,0.0429222,-0.0782131,-0.108814,-0.14681,0.0502486}
,
{-0.155633,0.0894058,0.0578097,0.0405186,0.207931,0.104984}
,
{-0.148594,0.0264468,0.0781099,0.0804452,0.0887486,-0.0536134}
,
{0.0435798,0.220651,0.0314235,-0.0320724,-0.206483,-0.0166307}
,
{0.0152643,-0.144538,0.0694246,-0.0344195,-0.0539259,-0.0936239}
,
{0.0117411,0.239011,-0.0458556,-0.0508343,-0.108357,-0.15945}
,
{0.0441384,-0.0520944,0.127142,0.170062,-0.00702591,0.165856}
 };
  static const float bias2[1] = { -0.138 };
  static const float weights2[][1] = { {0.0413373}
,
{0.0388702}
,
{0.629437}
,
{-0.672761}
,
{-0.0905797}
,
{0.0367026}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_4_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_4_2(v, index);
}
static int assign_gen_lepton_prior_1_4_2() {
  global_gen_lepton_prior.at(1,4,2) = &specialized_gen_lepton_prior_1_4_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_4_2 = assign_gen_lepton_prior_1_4_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_11(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.088163,-0.1292,0.0926907,-0.138466,0.272971,0.116338 };
  static const float weights1[][6] = { {-0.0767465,-0.104017,0.0739029,0.156889,0.0893198,-0.129545}
,
{-0.381821,0.132593,0.564671,-0.0944703,0.0698188,0.0540381}
,
{-0.0542738,-0.172335,0.278829,-0.00656219,0.0270478,-0.0096282}
,
{0.550832,0.278513,-0.402645,0.302812,-0.103342,0.0666414}
,
{0.113659,-0.152963,0.073375,-0.104907,0.187937,-0.0360224}
,
{0.170812,-0.0792183,0.176772,-0.210098,0.24567,0.187477}
,
{0.271219,-0.0932024,0.231252,0.0443523,0.190399,0.174413}
,
{-0.108031,-0.314229,-0.0769333,-0.146548,0.18182,0.0265608}
,
{-0.158809,0.00462257,-0.0387075,-0.0283093,-0.0959926,0.0145957}
,
{0.0688371,0.0295388,-0.0362388,0.183949,0.0569424,0.0719272}
,
{-0.156077,-0.120259,0.00558324,-0.0539493,0.155857,0.0809521}
,
{0.0538246,0.0721914,0.149587,0.00755331,-0.0383504,0.0193617}
,
{-0.245427,0.0625852,0.0250771,0.19908,0.0314078,-0.095451}
,
{-0.0677564,0.0165805,-0.0975408,-0.0748302,-0.0350924,0.0781061}
,
{-0.0356354,0.16254,-0.0729196,0.148732,-0.0742802,0.0571576}
,
{-0.0169589,-0.169387,0.0402285,-0.0539183,-0.0953615,-0.0828807}
,
{-0.0513861,0.143117,0.216127,-0.270798,0.481387,0.388034}
,
{-0.0812398,0.0507489,-0.305972,0.0352769,0.0174419,0.0280649}
,
{-0.0992653,-0.0610387,-0.0706312,-0.0632155,-0.0666691,-0.221256}
,
{0.0536288,-0.106551,-0.217256,0.0875589,0.0559219,-0.0282658}
,
{-0.0779843,-0.131447,-0.108262,0.0809371,0.027909,0.0353042}
,
{0.106859,0.0894731,0.0683707,0.0813557,-0.13408,0.114159}
,
{0.0511916,-0.0771058,-0.160511,0.00159318,-0.0167612,-0.0342098}
,
{0.148582,0.0619275,-0.132399,0.00670185,-0.0113989,-0.057106}
,
{0.063416,-0.247841,-0.123078,0.378024,-0.0689036,0.0780652}
,
{0.132808,-0.117762,-0.023349,-0.0605235,0.0899806,-0.211636}
,
{-0.0913449,-0.0498375,-0.0321327,-0.225911,0.102078,-0.0105492}
,
{0.0598155,0.0209975,0.00118793,0.161,-0.178431,0.141332}
,
{-0.249542,-0.0769013,-0.0495753,0.103858,-0.207568,-0.283096}
,
{0.205826,0.0169619,-0.00762068,-0.0167258,-0.0535986,-0.0862018}
,
{0.123364,0.114221,-0.185387,0.0882995,-0.0472775,0.0501388}
,
{-0.123854,-0.00154947,0.0248682,-0.0469594,-0.0217369,-0.0516535}
,
{0.00497926,0.121753,0.294064,-0.0714466,0.299697,-0.306379}
,
{0.135344,0.0734331,0.0966541,-0.0646138,0.0729197,0.0150214}
,
{0.0186636,-0.0832649,0.068609,-0.0804169,-0.122844,0.00282525}
,
{0.0656704,0.0215939,-0.0108342,-0.0209002,-0.174393,0.0929662}
,
{0.334805,0.0601623,0.148405,0.201903,0.0350581,-0.160148}
,
{-0.0919077,0.158329,-0.423717,-0.133505,-0.0528914,0.0117986}
,
{-0.280248,-0.208953,-0.226418,-0.225338,-0.0171133,0.0293529}
,
{0.278929,0.302991,0.314102,-0.0758313,-0.447785,0.211346}
,
{-0.0179044,0.0420548,-0.0248017,-0.0426946,0.109347,-0.0627995}
,
{0.153725,0.611781,-0.453849,-0.136982,0.0725149,-0.0939153}
,
{0.0546975,-0.0148147,0.283671,0.0774817,0.064739,-0.0671556}
,
{0.0185727,0.166578,-0.226477,0.0150612,0.00105369,0.0556864}
,
{0.161494,-0.15973,0.120189,0.0463747,-0.138902,0.0274087}
,
{-0.0107774,0.0155127,0.0340095,-0.0213789,-0.0202107,0.030157}
,
{-0.190711,0.10764,0.093666,-0.194137,0.155682,-0.276245}
,
{0.00656404,0.00958348,-0.154893,-0.152674,-0.137031,-0.0344777}
,
{0.218919,0.236944,-0.293436,0.0779214,-0.158347,0.0729399}
,
{0.00408845,-0.0630983,-0.0505999,0.214814,0.184155,-0.02574}
,
{0.00917249,0.0785695,-0.0043429,-0.112023,0.0330293,-0.0661807}
,
{-0.0789874,-0.00315636,0.504905,0.100959,0.0476273,-0.00528092}
,
{-0.0526014,0.098571,0.11679,-0.0918938,-0.0742202,0.0162666}
,
{-0.183673,-0.333863,-0.148341,0.127826,0.113905,-0.0838004}
,
{-0.0227238,-0.139969,-0.0905745,0.268929,-0.33047,-0.124065}
,
{-0.226989,-0.129604,-0.0139091,0.18597,-0.684554,-0.285359}
,
{0.677643,0.12407,0.0306333,-0.893384,0.67331,0.580579}
,
{0.24725,0.0364295,0.0241232,-0.173527,0.610446,0.177216}
,
{0.17181,0.00303042,-0.0835613,-0.0274295,0.218402,0.100368}
,
{-0.230938,0.0476332,-0.0739954,0.00378153,-0.483756,-0.447784}
,
{-0.026928,0.0344147,0.124542,0.0836284,-0.114414,-0.0168543}
,
{0.0391288,0.201441,0.213929,-0.21603,0.526897,0.0804626}
,
{0.173668,0.118128,0.0324738,-0.146541,0.14892,-0.00369951}
,
{-0.515307,-0.0336062,-0.071629,0.322141,-0.562216,-0.0483266}
,
{0.24687,0.116496,0.11663,-0.167004,-0.285416,0.0891231}
,
{-0.135378,0.0143915,0.0288259,0.363323,-0.185174,-0.217545}
,
{-0.22196,-0.103544,0.137523,0.142446,0.90099,0.275204}
,
{-0.179305,0.089641,0.196327,0.25542,-0.369035,-0.102238}
,
{0.127593,0.064931,-0.0136007,-0.316221,-0.150136,-0.0153836}
,
{-0.177655,0.179801,-0.0566275,0.29134,-0.0985804,0.0625158}
,
{-0.0874415,-0.201438,-0.133783,-0.242249,0.0604181,-0.00485524}
,
{-0.00844944,0.133257,-0.0297391,-0.0350845,-0.379714,0.432867}
,
{-0.541493,0.0168525,-0.158628,0.132565,0.203134,0.107806}
,
{0.452276,-0.0534538,-0.22253,-0.00886898,0.29025,0.268689}
,
{-0.0392131,0.00897333,-0.0440728,0.112332,0.107883,0.197747}
,
{-0.142484,0.0547028,0.00631131,0.358426,-0.380706,-0.0162115}
,
{0.120708,0.207148,0.149587,0.0648571,-0.0318708,-0.160784}
,
{0.313425,0.0504229,0.105512,-0.263684,0.761142,-0.00762905}
,
{-0.128077,0.0128773,-0.0786875,0.0790657,-0.116433,0.0866157}
 };
  static const float bias2[1] = { 0.125938 };
  static const float weights2[][1] = { {0.0608763}
,
{-0.0896744}
,
{1.48611}
,
{-0.0790304}
,
{0.104104}
,
{0.115796}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_11(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_11(v, index);
}
static int assign_gen_lepton_prior_1_0_11() {
  global_gen_lepton_prior.at(1,0,11) = &specialized_gen_lepton_prior_1_0_11;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_11 = assign_gen_lepton_prior_1_0_11();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_12(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0800772,-0.170125,-0.00700985,-0.125811,0.196628,0.0189147 };
  static const float weights1[][6] = { {0.100343,0.0363976,-0.181763,0.00857902,-0.0722647,0.138182}
,
{-0.00290707,-0.200691,0.12576,-0.0948898,-0.0535985,0.371073}
,
{0.0127902,0.0943654,0.0270488,-0.148549,0.268997,-0.269921}
,
{0.210774,-0.205697,-0.0652096,-0.813363,0.482103,-0.0764547}
,
{0.129212,-0.132033,-0.0904982,-0.110755,0.239136,0.0202329}
,
{0.0994659,-0.176336,-0.154312,-0.061437,0.238991,-0.0221164}
,
{0.111933,-0.389708,-0.181532,-0.14704,0.250448,-0.0248118}
,
{-0.104571,-0.157001,-0.0916131,0.0872355,0.0117193,0.0423217}
,
{-0.150674,0.0728612,-0.0141756,-0.230629,0.0155414,0.0202635}
,
{0.0243344,0.164869,0.0690419,0.200764,0.00823762,-0.180503}
,
{-0.130987,0.128922,-0.0852139,0.108488,-0.223526,-0.138938}
,
{0.0801888,-0.211801,0.0779083,0.0935091,0.0749719,-0.129674}
,
{0.0104377,0.00841591,0.208807,-0.0565126,0.163977,-0.0353015}
,
{-0.111109,0.0762971,0.107312,0.0282228,0.0869814,-0.0225827}
,
{-0.146623,-0.235977,-0.0152756,-0.13133,-0.0376555,0.146543}
,
{-0.115948,-0.158434,0.147035,0.174065,0.0527008,-0.0621011}
,
{0.148133,-0.0361362,-0.480641,0.015186,0.215083,0.193892}
,
{0.0678318,-0.166135,-0.0243971,-0.172164,-0.142933,-0.13545}
,
{0.244139,-0.187466,0.320782,0.249367,0.133903,0.013494}
,
{-0.234596,0.0642105,-0.0189238,-0.223359,-0.00425731,-0.03463}
,
{-0.0531984,0.184228,0.0399622,0.118119,0.131192,0.0266178}
,
{0.136398,0.111559,-0.0152712,-0.0257343,0.0906831,-0.11218}
,
{-0.141686,-0.179615,0.157121,-0.0546939,0.0139363,0.111624}
,
{-0.306008,0.0531987,0.071377,0.00195773,0.112067,0.0808289}
,
{0.19523,-0.110193,0.128965,0.00257618,-0.0674735,-0.00918267}
,
{0.0238993,0.24079,-0.0399632,-0.0701189,-0.0866439,0.000692208}
,
{-0.179476,0.191321,-0.0989702,-0.0633904,-0.170932,-0.214471}
,
{0.0244099,-0.010152,0.0401828,0.0968976,-0.0417891,0.0498854}
,
{0.00249149,0.148365,-0.0474807,-0.0841741,-0.104113,0.163575}
,
{-0.061337,0.0658982,-0.18634,0.124868,0.0118145,0.225766}
,
{0.224453,-0.10306,0.0648363,0.0685152,-0.0540232,0.129822}
,
{0.0532179,0.177302,0.0628201,0.20778,-0.160463,0.0689564}
,
{-0.0531095,-0.0865482,-0.0154166,0.0965647,-0.0495434,-0.0665959}
,
{-0.0223718,0.22857,0.0538358,-0.0967632,-0.187142,0.107775}
,
{0.447941,0.138166,-0.0951389,-0.243275,0.0227025,0.0744861}
,
{0.179071,-0.106671,0.0604637,0.194608,0.0107648,-0.0525726}
,
{0.0875431,-0.0139724,0.0640563,0.0819978,0.0831976,-0.168813}
,
{0.217006,-0.0419131,-0.0233578,-0.0468572,-0.0203908,-0.0133991}
,
{-0.0496157,-0.186381,0.0299756,0.35728,-0.06339,-0.339899}
,
{0.248694,0.240446,-0.266294,-0.235139,0.0137207,0.114509}
,
{-0.152608,-0.0293781,0.0817679,0.141131,0.052007,-0.0556611}
,
{-0.224078,0.0707821,0.132352,0.733757,0.0669818,0.0184743}
,
{-0.197716,0.282036,-0.143433,0.210965,-0.0228018,0.22187}
,
{-0.598326,-0.049609,-0.101632,0.255699,-0.114222,0.171843}
,
{0.00465736,0.1446,-0.023116,0.0294688,0.0833993,0.0627437}
,
{0.0375986,0.100292,-0.0961077,0.080416,-0.01416,-0.0341728}
,
{0.288619,0.124025,-0.0377359,0.437116,0.0952744,-0.0512387}
,
{-0.336913,-0.142603,0.10147,-0.0758215,-0.0417971,0.0842835}
,
{0.0331197,-0.0571365,0.179969,0.193742,0.120827,-0.169935}
,
{-0.345694,-0.183781,0.00602199,-0.0420992,-0.131651,0.090467}
,
{0.421707,-0.151263,-0.0366217,-0.248532,-0.13425,-0.038545}
,
{0.418012,0.0509245,-0.181893,-0.375501,-0.129766,-0.331292}
,
{-0.60758,0.112351,0.00217039,0.0568655,0.11265,-0.0400603}
,
{-0.278692,-0.194404,0.30963,-0.266313,0.238571,-0.267549}
,
{-0.163109,0.154177,0.0525299,-0.0438175,-0.0844852,-0.170717}
,
{-0.141581,0.118437,0.0257651,0.0637948,0.00542464,0.118781}
,
{-0.108702,-0.135651,-0.145574,-0.195269,-0.135918,-0.0437191}
,
{0.0665637,0.0301573,-0.0628237,0.142639,0.227987,0.0423551}
,
{-0.156835,-0.0819797,-0.0947,0.0568652,0.194877,0.0362981}
,
{-0.0236557,-0.204455,0.124461,-0.159892,0.00165103,0.10004}
,
{0.154245,0.0240782,0.247907,-0.0296267,-0.0376321,0.0492123}
,
{0.127053,-0.00490118,-0.0391122,0.136047,-0.0923131,0.170493}
,
{0.215436,-0.14631,-0.08916,-0.0791083,0.0565163,-0.101884}
,
{-0.0653658,-0.102338,-0.0383114,-0.0465663,-0.0269674,-0.0535446}
,
{-0.0521878,0.0181426,-0.0489064,-0.0741934,-0.120387,-0.11199}
,
{-0.206211,0.00452378,-0.138238,0.023973,0.0122139,0.0246063}
,
{0.22632,0.0557867,0.18258,-0.122542,0.187483,0.164954}
,
{-0.178523,-0.122586,-0.10686,0.117254,-0.170107,-0.120211}
,
{-0.0218912,0.0442566,0.0609741,-0.0189507,-0.0499258,0.0828614}
,
{0.0551132,0.0294889,-0.000657302,0.0232274,0.0986892,0.116067}
,
{-0.0319575,-0.0754876,-0.0691734,-0.0166783,-0.210397,0.177317}
,
{0.069283,-0.158823,-0.0542389,-0.131702,0.0602419,-0.0134285}
,
{-0.0817839,-0.242499,-0.214506,0.0615803,-0.140844,0.0777484}
,
{-0.030449,0.0527438,0.0389056,0.0102641,-0.153586,0.0880355}
,
{-0.0575201,-0.0105972,0.0387598,0.0715221,0.0597215,0.0971302}
,
{0.225421,0.111863,0.0682379,-0.190984,0.0262387,-0.233632}
,
{-0.0108953,-0.157065,-0.071737,0.0343027,-0.00285074,0.0756236}
,
{-0.186683,-0.0838808,0.0746675,-0.0363627,-0.126678,-0.0912105}
,
{0.0243607,-0.0674742,0.086959,-0.0467646,0.148673,-0.0648583}
 };
  static const float bias2[1] = { 0.220558 };
  static const float weights2[][1] = { {-1.65845}
,
{-0.0797808}
,
{-0.145688}
,
{0.266491}
,
{0.0907576}
,
{0.190363}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_12(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_12(v, index);
}
static int assign_gen_lepton_prior_1_0_12() {
  global_gen_lepton_prior.at(1,0,12) = &specialized_gen_lepton_prior_1_0_12;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_12 = assign_gen_lepton_prior_1_0_12();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_13(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.401714,0.243784,0.107901,0.44755,-0.220297,0.24326 };
  static const float weights1[][6] = { {0.142259,0.091596,0.0970788,-0.25403,0.169374,-0.122991}
,
{0.0227576,0.0995658,-0.889094,-0.0247199,0.162416,-0.0225111}
,
{0.0248152,-0.0147015,-0.00434688,0.23589,0.044841,-0.133127}
,
{0.00578795,0.663838,0.536403,0.714781,-1.96542,1.15461}
,
{0.434869,0.275842,0.295382,0.306074,-0.0589896,0.0212074}
,
{0.353218,0.270223,0.18068,0.453986,-0.0659176,0.16365}
,
{0.292436,0.291271,-0.339738,0.329726,-0.176074,0.106499}
,
{0.141459,0.136515,-0.0732245,-0.167823,0.0130108,0.187902}
,
{-0.0233397,-0.120626,-0.130987,-0.0747756,-0.000526876,-0.0509695}
,
{-0.114131,0.0321959,-0.189227,0.101784,0.0829811,0.112872}
,
{-0.132899,-0.0997575,-0.157775,-0.156915,0.00201271,0.0321807}
,
{0.10733,0.0880584,-0.289646,-0.107058,0.0363283,0.154412}
,
{0.17261,0.0108646,-0.0152328,0.0845736,0.366785,0.00611373}
,
{-0.060484,-0.064967,0.129784,-0.1518,0.128666,-0.118456}
,
{-0.108725,-0.0749331,-0.146391,-0.064537,0.175371,-0.00320505}
,
{0.0658111,0.103329,0.237576,-0.153834,0.0907659,-0.0498448}
,
{0.263625,0.0939137,-0.110254,0.0767573,-0.1009,0.219581}
,
{0.0302825,-0.213047,-0.0893321,0.0107958,-0.00602338,0.0257475}
,
{0.124512,0.18222,-0.11979,0.374767,-0.120533,0.179427}
,
{-0.257245,-0.0821199,-0.0715187,0.0601819,-0.122497,0.0685745}
,
{0.048526,0.141567,-0.0984195,-0.103471,-0.00911654,-0.1348}
,
{0.0394191,-0.139033,0.12969,-0.0487791,0.168985,0.121775}
,
{-0.107788,0.0414694,0.0822841,0.212484,-0.116249,-0.115798}
,
{-0.0279708,0.128578,-0.136185,0.00555627,0.141477,0.0175852}
,
{0.0165168,0.0300211,0.0305347,-0.100758,-0.102685,-0.0687737}
,
{-0.0545883,0.0927574,0.153344,0.172911,-0.0861734,0.224428}
,
{-0.07018,0.0625456,0.0594245,0.0892474,-0.040857,-0.18756}
,
{0.189783,0.0570007,0.0664812,-0.0665091,0.0326638,0.0713512}
,
{0.00593976,0.200941,-0.277073,-0.133545,-0.0578674,-0.037139}
,
{-0.0586788,-0.113441,0.0835888,0.0298982,-0.0871545,0.109477}
,
{-0.109805,0.0552664,0.204683,0.245165,0.107651,0.0215824}
,
{-0.0218181,-0.0515983,0.0553251,-0.113726,0.0887738,-0.0585176}
,
{0.107295,0.104417,-0.0879392,-0.355859,-0.159883,-0.0743104}
,
{0.104899,-0.0530372,0.023004,0.24299,0.221425,-0.118546}
,
{0.000250971,-0.109839,0.267609,-0.0346659,0.117264,0.133746}
,
{-0.153031,-0.0386585,-0.22793,0.219298,-0.159558,0.0196594}
,
{0.0126977,0.201015,-0.0101884,-0.0227673,-0.0286791,-0.0542694}
,
{-0.0247751,-0.0665232,-0.125283,-0.22585,0.0909767,0.193397}
,
{0.142839,-0.269536,-0.049353,0.298377,0.132308,-0.11829}
,
{-0.0862939,0.00961612,-0.0527047,-0.151397,-0.149263,0.0228723}
,
{0.081003,-0.0907622,0.0703871,-0.0150174,-0.030597,-0.00451235}
,
{0.308997,-0.184382,-0.358267,0.295791,0.226699,-0.228399}
,
{0.0578472,-0.324045,0.274863,0.0250161,-0.0174309,0.14974}
,
{-0.184514,0.603876,-0.421513,-0.0519766,0.0377525,-0.0211504}
,
{0.0600872,0.0602657,0.0403773,0.0923275,0.361078,0.0618969}
,
{0.0687589,-0.218615,0.0185207,0.0340784,0.174155,0.127087}
,
{0.328976,0.352367,0.633738,0.0617102,0.0962939,-0.499627}
,
{-0.247542,0.0720695,-0.182746,0.119847,-0.144857,0.064138}
,
{-0.08516,-0.0059099,0.300592,0.500964,-0.111191,-0.110425}
,
{-0.0679607,-0.0704867,0.354735,-0.0299754,-0.0456128,0.13054}
,
{0.0290393,0.0607569,-0.204672,-0.0924999,-0.102077,-0.0835766}
,
{-0.115684,0.0192979,0.256323,-0.237056,0.0256635,0.256419}
,
{0.165376,-0.207986,0.112047,0.0283367,0.12797,0.00620206}
,
{0.0408504,-0.298387,0.577624,-0.121419,-0.159604,0.105215}
,
{0.0362639,-0.0855042,0.0499371,-0.0261116,0.0543641,0.132432}
,
{0.0956994,-0.0408492,-0.262038,0.0373701,0.0204514,0.237712}
,
{-0.0282071,0.158918,0.0139159,0.158267,-0.158773,-0.00785176}
,
{-0.0861229,-0.185104,0.269537,0.0656527,-0.23071,0.0136051}
,
{0.0589546,0.00642984,-0.152182,-0.00242592,-0.0836588,-0.132621}
,
{0.355647,0.0791859,-0.182015,0.286485,0.161572,0.109881}
,
{-0.157821,0.112286,0.0421293,-0.25012,-0.0275112,-0.238663}
,
{-0.0468041,0.0576744,-0.00960114,-0.185591,-0.0101316,0.00249937}
,
{0.0985799,0.130317,-0.166783,0.320435,-0.00542687,0.0163688}
,
{0.0566837,0.000427758,0.00346017,0.114647,0.0765787,-0.00603991}
,
{-0.218531,0.157968,0.182828,-0.156715,0.037455,-0.0599298}
,
{0.157485,0.19436,-0.201401,0.213015,-0.00645263,0.0639295}
,
{0.20852,0.157423,0.205779,-0.205517,-0.0483379,0.00789614}
,
{0.0827385,-0.0349638,0.143772,0.225686,-0.0844315,-0.05617}
,
{-0.131335,-0.165727,0.198392,-0.00502012,-0.0275285,-0.14389}
,
{-0.153034,-0.0800085,0.282029,-0.230529,-0.0173197,0.119031}
,
{-0.272469,0.10843,0.144563,-0.0633674,-0.0847608,-0.0406867}
,
{-0.151462,-0.0357588,0.328885,-0.31325,-0.095721,-0.0700461}
,
{0.370426,0.0137214,-0.20253,0.310294,0.156776,0.265312}
,
{-0.284667,0.0113423,0.304519,-0.237293,-0.232314,-0.0528506}
,
{-0.0205723,-0.0368878,0.118271,0.206384,-0.0464348,0.0133877}
,
{-0.232029,-0.0376525,0.130671,0.0477615,-0.0508039,0.0896571}
,
{-0.113334,-0.00539547,-0.023819,0.0629959,-0.0336224,-0.0576118}
,
{0.0477568,0.0892543,-0.096747,-0.113152,0.0359676,0.0465488}
,
{-0.0681641,0.115328,-0.195556,-0.057013,0.0455046,0.0625665}
 };
  static const float bias2[1] = { 0.125373 };
  static const float weights2[][1] = { {0.134435}
,
{0.0623212}
,
{-1.33521}
,
{0.0930945}
,
{-0.0535735}
,
{0.114225}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_13(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_13(v, index);
}
static int assign_gen_lepton_prior_1_0_13() {
  global_gen_lepton_prior.at(1,0,13) = &specialized_gen_lepton_prior_1_0_13;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_13 = assign_gen_lepton_prior_1_0_13();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -1.15633,0.566884,0.347262,0.515323,0.0724849,0.406308 };
  static const float weights1[][6] = { {-0.298592,-1.35482,-1.62046,1.59091,-0.0382487,-0.954348}
,
{-0.656889,0.120658,-0.101485,0.280479,0.0164569,0.336975}
,
{-0.653754,0.00165015,0.0936305,0.377021,-0.35062,0.160161}
,
{-0.469307,1.27897,1.11583,-0.0314383,0.0201403,0.716514}
,
{-1.11131,0.559668,0.307009,0.655966,0.0917806,0.446508}
,
{-1.09959,0.272715,0.132527,0.629379,0.0892533,0.291797}
,
{-1.03742,0.585419,0.182168,0.531562,0.116686,0.462596}
,
{0.102754,0.0168361,0.0205506,0.00724804,0.133872,0.134593}
,
{0.0908082,-0.100057,0.123138,-0.0622635,0.0528311,-0.118085}
,
{-0.013521,0.0580484,-0.0590664,-0.0414429,0.126634,0.00591902}
,
{-0.232951,-0.149676,0.0304915,-0.245575,-0.015171,-0.0923452}
,
{0.220929,-0.207216,0.134536,-0.105516,-0.00522322,-0.0940935}
,
{0.0335015,0.0141877,-0.217041,-0.0372344,-0.0885262,0.161313}
,
{0.0488288,0.137889,-0.168037,-0.0700251,-0.0499078,0.0447876}
,
{-0.0396399,-0.0817647,-0.0942373,-0.16378,0.0967192,-0.06597}
,
{-0.00440584,0.110654,0.0977843,0.196239,-0.0730596,0.184526}
,
{-0.207148,0.189402,-0.0718604,0.00652252,0.10426,-0.00387384}
,
{-0.109755,0.124795,-0.198925,-0.0577003,0.00533976,0.113368}
,
{0.0690844,-0.884547,-1.42896,0.528908,-0.293306,-0.45361}
,
{-0.0655377,0.0361,-0.173982,0.16099,-0.100908,0.0567783}
,
{0.165494,0.123093,0.22752,-0.190507,-0.101624,0.141469}
,
{0.272878,0.0974095,0.126503,-0.0759778,0.0646951,-0.134878}
,
{-0.0953456,0.112858,-0.0868463,0.00677029,0.000355215,0.0661882}
,
{0.40829,0.0433999,0.149634,-0.0706079,-0.055099,0.0634747}
,
{-0.0897278,-0.0138213,0.107373,0.0683347,-0.0429646,-0.149949}
,
{-0.139207,0.0493457,0.0279525,-0.0384398,-0.172005,-0.0593398}
,
{-0.11328,-0.0104785,0.0750708,0.0515127,0.0998211,-0.0898005}
,
{-0.142068,-0.124794,0.0307692,0.00542924,0.0766535,0.0932354}
,
{0.653374,0.696513,0.902036,-0.569457,-0.183126,0.674391}
,
{-0.156846,-0.0522358,0.213588,-0.0113364,-0.0813193,-0.216526}
,
{0.119868,-0.095992,-0.0285368,0.0258997,-0.00265645,0.0863155}
,
{-0.0473442,-0.0160607,-0.0329466,0.140896,-0.0863437,0.0417062}
,
{0.188904,0.00547852,0.0590145,0.0717894,0.0910471,-0.0726825}
,
{0.0245413,0.22598,-0.0108151,0.00893472,0.017375,0.158496}
,
{-0.0999276,-0.0556925,-0.0315024,-0.0122986,0.0290945,0.0423026}
,
{-0.0242609,0.00634292,0.00131002,-0.00400951,-0.0933387,-0.0464306}
,
{0.0990202,0.0613706,0.0276567,0.00944188,-0.0903288,-0.210068}
,
{-0.0447533,0.02369,-0.0192802,0.053488,0.0824551,-0.0317831}
,
{-0.000745151,0.0495268,-0.0144993,0.0109831,-0.124385,0.0510063}
,
{0.0175759,-0.0599578,0.00725188,-0.0323971,-0.026275,0.13164}
,
{-0.121028,-0.0490126,-0.0319407,0.00538412,0.0113932,0.0995633}
,
{0.00681358,0.129025,-0.0556989,0.0157134,-0.113449,0.0517999}
,
{0.0784362,0.0834818,-0.00874209,0.0786226,0.247479,-0.00399917}
,
{0.142229,0.0330101,0.0143489,0.0397964,0.195782,-0.0902878}
,
{-0.0194205,-0.0672695,-0.00762046,-0.0132247,0.0934413,0.118615}
,
{0.103759,0.0623089,0.0311378,0.0292161,0.0425159,-0.119746}
,
{-0.0109435,0.13214,0.00424536,0.0795477,-0.0388903,-0.250637}
,
{-0.0182463,-0.0327166,0.00813697,-0.0424196,-0.0964799,0.0379876}
,
{-0.0862717,-0.0456116,-0.00814218,-0.0314333,-0.15024,-0.0153166}
,
{0.0323394,-0.0285457,0.0202194,-0.00327396,0.0635743,-0.0441426}
,
{0.0147171,0.00852989,0.00279582,0.000999391,-0.00833593,-0.00821417}
,
{-0.0372587,0.142433,-0.0792684,-0.0160239,-0.280301,0.0909696}
,
{-0.000213492,0.0181394,-0.00152207,0.00644718,0.00466551,-0.0266969}
,
{-0.0384361,-0.0154309,-0.0140992,-0.0041454,0.0264368,0.0622324}
,
{0.10185,0.0491487,0.0296357,0.0429644,0.00417812,-0.0973156}
,
{-0.0755286,-0.0892939,-0.00834454,-0.0370467,0.015031,0.0549165}
,
{0.0869509,-0.0268363,0.0145935,0.0620428,-0.00421427,0.285498}
,
{-0.101885,-0.0400045,-0.0234638,-0.0827972,-0.365443,-0.375817}
,
{-0.0602594,-0.0707781,0.0123483,0.00148577,0.0651142,0.000141556}
,
{0.0649421,0.0563442,0.0169567,0.0577056,-0.0173358,0.106654}
,
{-0.0894672,-0.0631014,-0.0165889,-0.062943,-0.0423517,0.0204852}
,
{-0.0203932,-0.0625566,-0.0100904,-0.0876035,0.00686542,-0.143832}
,
{0.183417,-0.199851,0.0126819,-0.0733292,0.0523684,-0.375894}
,
{-0.00377237,-0.129556,0.0524688,-0.03549,-0.0473659,-0.00302966}
,
{0.139794,0.116016,-0.0060015,0.0709537,0.0495895,0.114316}
,
{-0.0774597,-0.0760079,0.00271096,-0.0347223,-0.0984083,-0.00730363}
,
{-0.000826219,-0.194041,0.037731,-0.0502334,0.0560188,-0.247156}
,
{0.00853253,0.105065,-0.0599169,0.0107424,-0.407929,-0.558005}
,
{0.0581131,-0.0193385,0.0152618,-0.000167726,0.0790831,-0.0641544}
,
{-0.080535,-0.140655,0.00509922,-0.0830323,-0.093075,-0.0338217}
,
{-0.204934,-0.179674,-0.0140512,-0.105675,-0.00275987,0.0596543}
,
{0.0246004,0.0235399,-0.0270737,-0.0510761,-0.119333,0.0376535}
,
{0.41398,-0.417293,0.0998271,0.205934,0.13112,0.296046}
,
{0.0718591,0.0979646,-0.0505347,-0.0193393,0.0449153,0.248533}
,
{-0.177392,-0.19589,-0.0178549,0.034732,0.388963,-0.271542}
,
{-0.12038,0.0446987,-0.0398144,-0.0252719,-0.139085,0.0655062}
,
{-0.178326,0.00183193,0.197454,-0.186825,-0.174753,0.153175}
,
{0.124139,0.0518165,0.956142,-0.7886,-0.107867,0.781393}
,
{-0.246337,0.134604,-0.0496912,-0.000465306,-0.291224,0.695121}
 };
  static const float bias2[1] = { 0.278715 };
  static const float weights2[][1] = { {-0.0263195}
,
{0.0382103}
,
{0.0704672}
,
{-0.0437998}
,
{0.0134767}
,
{0.0115333}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_1_0(v, index);
}
static int assign_gen_lepton_prior_0_1_0() {
  global_gen_lepton_prior.at(0,1,0) = &specialized_gen_lepton_prior_0_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_1_0 = assign_gen_lepton_prior_0_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0133604,-0.0484702,0.274702,-0.106382,0.19692,-0.167389 };
  static const float weights1[][6] = { {0.422206,0.216674,0.0283126,-0.37098,0.214776,-0.832677}
,
{-0.195297,-0.262481,0.624489,-0.721881,0.0823343,0.588788}
,
{0.525136,-0.385806,0.124087,-0.768643,0.141562,-0.448897}
,
{0.0633749,-0.593724,0.731029,-1.4895,1.39137,-0.87448}
,
{0.164218,0.11385,0.433732,0.0600855,0.0942358,-0.300462}
,
{-0.153547,-0.161423,0.140789,0.0489734,-0.0444865,-0.0907362}
,
{-0.114025,-0.143062,0.0504333,-0.0545839,0.0758836,-0.0844429}
,
{0.0434383,-0.0757264,-0.199256,-0.117032,-0.0508889,-0.275211}
,
{0.268794,-0.280754,-0.0307735,0.10137,0.274304,0.492663}
,
{-0.0467354,0.154357,0.215217,-0.18675,0.0989183,-0.147186}
,
{-0.1007,-0.17984,0.0184333,0.00904643,0.0345832,0.187755}
,
{-0.15838,0.0902675,-0.120386,-0.162794,0.00599712,0.238074}
,
{0.0202962,-0.0149756,0.131824,-0.0368063,0.211564,-0.204884}
,
{0.0120963,0.0348078,0.285972,-0.264922,-0.0135645,0.00363409}
,
{-0.00416218,0.0833765,-0.079883,0.111721,0.0434064,0.146173}
,
{-0.0988539,0.0589896,-0.0975207,0.0396832,-0.182343,-0.0361094}
,
{-0.171715,-0.0670761,-0.0424377,0.250169,-0.0467256,-0.0190257}
,
{0.299167,-0.050581,0.105985,0.100048,-0.00669354,-0.226983}
,
{0.138494,0.195575,0.153303,-0.00421682,0.062585,0.132987}
,
{-0.204432,0.0822967,-0.0747606,0.198639,0.0608004,-0.0200691}
,
{-0.018701,-0.029032,0.0103904,-0.162406,0.225803,-0.0557142}
,
{-0.145891,-0.532782,-0.101131,0.133697,-0.101776,0.00978954}
,
{0.057202,-0.128259,0.0391286,-0.0949304,0.11404,-0.0895239}
,
{-0.0858078,-0.091356,0.0607054,-0.255258,-0.0723081,-0.156401}
,
{0.076367,-0.0500578,0.0113371,-0.163603,-0.197249,-0.427995}
,
{-0.0381564,-0.030941,-0.00495597,-0.0600597,0.0599715,0.159137}
,
{0.147167,0.0317268,0.183338,-0.152406,0.148238,0.111671}
,
{-0.0682637,0.149876,-0.017906,0.0341595,0.143143,-0.0744718}
,
{-0.161635,0.162481,0.1037,-0.321407,0.552417,-0.192014}
,
{0.0297449,-0.138372,-0.0968174,-0.119759,0.0929618,-0.103215}
,
{-0.158354,0.0758847,0.0608185,0.0833032,-0.0259405,-0.19}
,
{-0.12842,-0.117092,0.150468,0.238577,0.146261,-0.0153916}
,
{-0.0775313,-0.0631307,0.0730331,0.121258,-0.074619,-0.00492705}
,
{0.0511952,-0.0873982,0.140292,0.07426,-0.0468949,-0.0923338}
,
{0.172639,0.0712045,-0.322896,0.156011,-0.115315,-0.205877}
,
{-0.00541458,-0.0253304,0.169988,-0.000634133,0.0389456,0.124597}
,
{-0.341841,0.283187,0.233034,-0.0549446,-0.359792,-0.0346935}
,
{-0.0192503,-0.0468761,0.0491377,-0.0605837,-0.0596695,0.022263}
,
{0.0673419,9.09167e-05,0.111146,0.198584,0.0114337,0.19699}
,
{-0.0194321,0.226092,-0.0369814,0.27179,-0.181209,0.0317892}
,
{0.0416923,0.0211964,0.0765092,0.042603,0.0793318,0.12328}
,
{0.0624462,0.162142,0.144035,0.0325575,0.0252667,0.11355}
,
{-0.149737,-0.0807809,-0.0674028,-0.12144,0.0191993,-0.0510286}
,
{-0.0955313,-0.153656,0.209611,-0.135727,0.175001,0.194782}
,
{-0.233783,-0.017503,-0.289692,-0.0378322,-0.0453923,-0.14233}
,
{0.0753511,-0.0803341,0.0486871,-0.00676108,0.00306057,0.0208167}
,
{0.191347,-0.122494,0.0543963,0.0522016,-0.0615612,-0.0742879}
,
{-0.101511,0.078373,-0.14059,-0.0235568,0.0624512,-0.0766068}
,
{0.10166,-0.173151,0.0124767,0.0321246,0.183056,0.0127873}
,
{0.0139605,-0.0667438,-0.0245497,-0.0389147,0.0341686,-0.0863511}
,
{-0.0380191,0.0907027,0.0447734,0.0151315,-0.0290397,-0.0089697}
,
{-0.00553595,0.0300358,-0.415605,-0.0606116,0.0614832,-0.387781}
,
{0.0267943,0.0266505,0.0696458,-0.005006,-0.00852489,0.0145943}
,
{0.12929,0.0129294,0.144017,-0.0274634,-0.017235,-0.0372377}
,
{0.0702817,0.0774669,0.0308934,0.139443,0.0996822,0.0936725}
,
{0.0361952,-0.0105198,-0.0565746,0.0055941,0.135584,0.0546361}
,
{0.106969,-0.0407413,-0.0333453,-0.10807,0.0161291,-0.143543}
,
{-0.397095,0.161287,0.203704,-0.226705,-0.0458572,0.225428}
,
{-0.136544,0.0324737,-0.120745,-0.131022,0.0631159,0.0474914}
,
{-0.101308,-0.0445804,-0.242263,-0.0129718,0.0509357,-0.0288334}
,
{-0.120223,-0.0874831,-0.150021,0.00577127,-0.113132,-0.0168492}
,
{0.00515736,-0.294858,-0.191322,0.211938,-0.139579,0.15142}
,
{-0.590601,0.871711,-0.243449,0.683135,0.128557,-0.740219}
,
{-0.0176702,0.0178507,-0.00642275,-0.0237892,-0.00770925,-0.0507751}
,
{-0.0090555,0.0436822,-0.10202,0.154683,0.136241,0.0867485}
,
{-0.0114738,-0.051698,-0.0997455,0.0468866,0.0527206,0.0390289}
,
{0.121222,-0.0635442,0.0165365,-0.248931,0.0593458,0.0260864}
,
{0.136546,-0.160188,-0.156327,0.542093,-0.363053,0.212777}
,
{0.0927881,-0.0808629,-0.000300982,0.147102,0.00715505,-0.00505039}
,
{0.0986566,-0.01828,0.0289712,0.158216,0.00139535,0.0284284}
,
{0.0294942,0.0346862,0.0889542,-0.0327218,-0.0262264,-0.0126619}
,
{-0.0466797,-0.0305238,-0.0555107,-0.0782346,0.0241007,-0.0861361}
,
{0.460588,0.499648,-0.218155,-0.238459,1.17363,-0.100895}
,
{0.0187848,0.0205517,0.114634,0.0707252,-0.0688695,-0.0713193}
,
{-0.193985,-0.577433,-0.486421,-0.631531,-0.796909,0.34893}
,
{-0.118465,-0.0173913,0.0485689,-0.298051,-0.129964,-0.19611}
,
{0.174602,0.430376,0.0570103,-1.04719,1.01284,-0.30806}
,
{0.0270015,2.96417,-0.152775,0.103127,-2.73586,0.236813}
,
{0.143567,0.0690337,-0.559844,-0.298042,1.12904,-0.0928032}
 };
  static const float bias2[1] = { 0.344346 };
  static const float weights2[][1] = { {-0.0679191}
,
{-0.0714139}
,
{0.0602224}
,
{0.0995445}
,
{0.0470958}
,
{-0.0947265}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_0(v, index);
}
static int assign_gen_lepton_prior_2_1_0() {
  global_gen_lepton_prior.at(2,1,0) = &specialized_gen_lepton_prior_2_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_0 = assign_gen_lepton_prior_2_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.180122,0.231481,-0.166311,0.278841,-0.0287342,-0.154817 };
  static const float weights1[][6] = { {-0.529864,-0.716342,-0.0865546,-0.560591,-0.0083636,0.102344}
,
{0.00321868,0.0678116,0.0299324,-0.0566314,-0.474386,-0.643787}
,
{0.183748,-0.446252,0.353231,0.300896,0.0141131,0.292223}
,
{1.10747,0.7584,-0.0574789,0.0349247,-0.35702,-0.0567131}
,
{-0.207733,0.249104,-0.175551,0.449209,0.0275395,-0.299882}
,
{-0.282649,-0.109069,-0.408355,0.0358631,-0.0198048,-0.357336}
,
{-0.331757,-0.135779,-0.156386,0.170973,-0.0720595,-0.0938423}
,
{0.114896,0.121512,-0.00267147,0.0168534,-0.110983,-0.280095}
,
{-0.161649,0.042027,0.532559,0.164678,0.315033,0.694099}
,
{-0.0375033,-0.038708,-0.0991046,0.0729237,-0.105515,0.0136178}
,
{0.0858882,0.165604,7.96653e-05,-0.0269889,0.0863693,-0.0392904}
,
{0.0748972,0.0158618,0.0540895,-0.0100333,-0.0533949,-0.182288}
,
{-0.11669,0.0841365,0.0412274,0.108122,-0.137438,-0.193065}
,
{0.0124391,0.235355,-0.228409,0.0377168,0.00701957,0.00462048}
,
{-0.111496,0.121013,-0.128544,-0.00466631,0.0575726,-0.105471}
,
{-0.211464,0.104751,-0.168022,-0.0428577,0.0588141,0.0312843}
,
{0.197104,0.212878,-0.161899,0.0160426,0.0821155,0.122309}
,
{-0.120082,0.207109,-0.04567,-0.353612,0.169589,-0.121957}
,
{-0.0279827,-0.0558874,-0.231192,0.102308,-0.13727,-0.0624052}
,
{0.0129872,0.0776424,-0.102421,0.00864963,-0.281565,-0.0251615}
,
{-0.0164127,-0.0401305,-0.158832,0.114825,-0.480632,-0.0918103}
,
{0.0582493,0.107024,0.234816,0.026222,-0.0114281,0.120643}
,
{-0.0553695,0.218884,-0.00629205,-0.0878942,-0.0196929,0.0628997}
,
{-0.00155197,0.079317,-0.133912,-0.123779,-0.11723,-0.0566214}
,
{-0.19011,0.00203935,-0.0498558,0.0488909,-0.325758,0.195506}
,
{-0.121512,0.0975401,0.130188,-0.0488823,-0.072083,-0.0888535}
,
{0.0440057,0.054106,0.0490366,-0.0246,-0.178795,-0.0697959}
,
{0.0875098,0.096245,0.0256846,-0.10784,-0.0641274,0.00668236}
,
{-0.263276,-0.132021,0.0335569,0.730636,0.0857054,0.319626}
,
{-0.0584723,0.061872,0.134541,-0.088353,-0.227202,-0.177577}
,
{0.0158519,0.0477531,0.0539368,-0.0352315,0.0262522,0.0405933}
,
{0.0782565,0.051009,0.0923429,0.13302,-0.107044,-0.082134}
,
{0.0551236,0.161615,-0.0687039,-0.0363524,0.177532,0.169857}
,
{-0.0854547,0.0289428,-0.0325686,0.111113,0.0613149,0.188329}
,
{0.13934,0.224818,0.160243,0.00978468,-0.372595,0.0888097}
,
{-0.074809,-0.138817,-0.0258534,0.0169163,0.263334,-0.0488008}
,
{-0.42847,-0.25409,0.193324,-0.217043,0.0648801,-0.122102}
,
{-0.0817053,0.0731955,-0.00451734,-0.130969,-0.170599,0.0478593}
,
{0.0382877,0.0987041,-0.142396,-0.049523,0.0492792,-0.365612}
,
{-0.118889,-0.0579549,-0.10676,-0.22639,-0.268829,0.149433}
,
{-0.0593745,-0.0625237,-0.00450663,-0.0270926,-0.0742596,0.00380153}
,
{-0.161268,-0.220623,-0.130857,-0.147447,-0.361448,-0.325059}
,
{0.109703,0.243053,-0.0186504,-0.0565263,-0.0373652,-0.0102821}
,
{0.336667,0.32862,0.176547,0.225979,-0.0816607,0.155541}
,
{0.074176,-0.0851995,-0.0443955,0.116035,-0.107658,-0.107573}
,
{-0.0625325,-0.0902847,-0.0597452,-0.0426713,-0.0239854,-0.0669211}
,
{0.177576,0.377,0.313222,-0.185768,0.11801,-0.164317}
,
{0.00750154,-0.0103995,0.00761287,-0.0326898,-0.0833014,0.0173911}
,
{-0.101552,-0.00444804,0.257453,-0.212004,-0.575709,-0.381637}
,
{0.00476374,0.0451536,-0.0858478,-0.0473332,0.185008,0.0564621}
,
{-0.0357762,-0.0430798,-0.0114341,-0.00118243,0.0114465,-0.00291662}
,
{0.283573,0.511894,0.155965,-0.136505,-0.484591,-0.0376362}
,
{0.0385996,0.128626,-0.0655111,-0.0949424,-0.057989,0.0445041}
,
{-0.024714,0.175742,0.28947,-0.218257,-0.41148,0.0277529}
,
{0.0370746,0.0340071,-0.000537243,0.0114745,-0.0985372,0.00429371}
,
{0.138252,-0.0720183,-0.0646848,0.188572,-0.139983,0.0360167}
,
{-0.708332,-0.0956876,-0.0106215,0.118397,0.389011,0.215989}
,
{0.185651,-0.80933,-0.779422,0.714546,0.351283,0.0152318}
,
{-0.156134,-0.0959996,-0.171904,-0.0320775,-0.226127,0.0121486}
,
{-0.0802712,-0.0290365,0.0379326,-0.0137275,0.0531804,-0.0439481}
,
{-0.0387096,0.00105808,-0.0104491,0.000436624,0.0445167,0.0360412}
,
{0.467074,-0.157843,-0.504503,-0.458955,-0.0421248,-0.556234}
,
{-0.428946,-0.333368,-0.583912,-0.0607784,-0.270081,0.365923}
,
{-0.118192,0.159514,0.0498968,-0.221942,0.0837332,0.0294835}
,
{-0.0434258,0.0510725,0.0698475,-0.0327021,-0.0425426,-0.0370336}
,
{0.0976475,0.023604,0.00972638,0.126153,-0.134122,0.0717412}
,
{0.502897,-0.310121,-0.654704,-0.252233,-0.335032,-0.033575}
,
{0.324561,-0.420456,0.504005,0.460171,-0.65218,-0.0102405}
,
{0.0503766,-0.0403314,0.00807441,0.137421,0.305526,0.11402}
,
{0.044943,-0.0486332,-0.0830372,0.0511871,0.0280719,0.0232632}
,
{-0.0489269,0.011769,0.0200019,-0.148111,-0.123963,-0.0579286}
,
{0.501018,-0.286932,-0.201973,0.280674,-0.0539265,-0.43518}
,
{0.299949,-0.576558,-0.178911,-1.0478,0.428616,-0.458509}
,
{-0.0917077,-0.128128,-0.0337495,0.0554783,0.143511,0.0215506}
,
{0.093919,-0.435377,1.44516,-0.671874,-0.181234,-0.0938514}
,
{0.690015,-0.0472466,-0.352064,0.0175408,0.0360103,-0.0665425}
,
{0.034602,-0.122018,0.209858,0.0650834,-0.0271093,0.057298}
,
{-0.12689,-0.0459801,-0.0178388,0.0436812,0.0894326,0.207653}
,
{1.91523,0.448819,0.342996,1.24819,0.587569,1.11196}
 };
  static const float bias2[1] = { 0.170864 };
  static const float weights2[][1] = { {-0.119312}
,
{0.0686542}
,
{-0.16519}
,
{0.0784314}
,
{-0.704656}
,
{-0.126246}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_1(v, index);
}
static int assign_gen_lepton_prior_2_1_1() {
  global_gen_lepton_prior.at(2,1,1) = &specialized_gen_lepton_prior_2_1_1;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_1 = assign_gen_lepton_prior_2_1_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_14(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.013812,-0.016536,-0.0051518,-0.0286026,-0.0251176,0.011077 };
  static const float weights1[][6] = { {0.10076,0.0395661,0.120518,0.0710187,-0.00716863,-0.235177}
,
{-0.195946,-0.115659,-0.119089,0.112811,0.290013,0.00146262}
,
{0.122457,-0.185276,-0.104235,0.145767,-0.368575,-0.138245}
,
{-0.106682,-0.0649427,-0.0337357,-0.0123245,-0.0312716,0.195725}
,
{0.0406426,0.0597482,0.0696822,-0.0337399,-0.0488654,0.0152588}
,
{-0.0345762,0.00639539,-0.127609,0.0880853,-0.143735,-0.123585}
,
{-0.0793658,0.0523307,0.176292,-0.0787983,-0.123121,0.00548361}
,
{0.0747907,-0.00447075,-0.027239,-0.0325663,-0.241731,-0.0770375}
,
{0.232799,0.0805563,0.00191352,-0.0299217,-0.0836112,-0.1891}
,
{-0.00996585,0.0392092,0.241944,0.153513,0.11361,-0.0813498}
,
{0.211895,-0.0106786,0.0517505,0.0300678,0.0571,-0.0406105}
,
{-0.0826137,-0.0914119,0.157391,-0.245713,-0.0827565,-0.00132011}
,
{-0.12781,-0.0353951,-0.0166306,-0.0903461,0.105626,-0.153854}
,
{0.0122794,0.0125041,-0.123148,-0.0119442,-0.128844,0.0406886}
,
{-0.0807624,-0.0399151,0.109622,0.185862,0.0102582,0.181816}
,
{0.064329,-0.0661938,-0.0116858,0.108196,-0.0871164,0.198896}
,
{0.0876076,-0.0451673,0.180597,0.0724513,-0.135818,0.0838905}
,
{0.12575,0.0592576,-0.0598643,-0.204639,-0.274654,-0.12201}
,
{-0.0296879,-0.160535,-0.0218118,0.00687841,0.0280386,0.0328741}
,
{0.0917747,-0.0767358,-0.233656,0.0783768,0.0218023,0.0657059}
,
{0.148214,-0.00694379,0.0148504,0.198694,-0.193211,0.188459}
,
{-0.00904709,-0.201095,0.183599,-0.0388409,0.00122465,0.011592}
,
{0.134487,-0.226894,0.0279483,-0.0507619,-0.0703268,0.243901}
,
{0.0736354,-0.135334,-0.154284,0.00429297,0.247348,0.149334}
,
{0.0253481,-0.0673276,0.00321531,-0.117127,0.0112798,-0.229996}
,
{0.044971,-0.106445,0.104001,-0.147586,0.0769373,-0.0311494}
,
{-0.0656387,-0.0681187,0.0711322,-0.0761194,0.056147,-0.0435205}
,
{0.0640886,0.146993,-0.25321,-0.143754,-0.249671,-0.0383481}
,
{0.000727084,-0.146748,-0.192707,0.116492,-0.0187941,0.0850153}
,
{0.202305,-0.168369,0.00657544,-0.235353,-0.089549,0.208477}
,
{-0.00538163,-0.0681942,0.126306,-0.22302,-0.36121,0.0673021}
,
{0.00739277,0.0285493,-0.0118732,-0.0741624,0.061911,0.142446}
,
{0.0598228,0.0389722,-0.065998,-0.0760615,0.0398643,-0.144447}
,
{0.000865438,0.146571,-0.104963,-0.174081,-0.0648468,0.239811}
,
{-0.09314,-0.100363,0.143996,0.0336023,-0.0199665,-0.246271}
,
{0.198132,0.227406,0.157881,-0.0839574,-0.103715,0.0903424}
,
{-0.159635,0.141315,0.0850733,-0.0390417,-0.0567976,-0.210603}
,
{0.0232912,0.177554,0.126983,-0.00536389,0.0438952,-0.139384}
,
{-0.119892,0.149976,0.0851032,-0.0372074,0.127117,-0.224815}
,
{0.0968986,-0.0587351,-0.122651,0.00685863,-0.0784858,-0.0748894}
,
{0.153136,-0.0421461,-0.181323,0.180539,0.306642,-0.0744388}
,
{-0.0780134,0.0314602,0.106335,-0.0866954,-0.0627691,-0.166847}
,
{-0.137064,0.106298,-0.112502,0.0602281,0.219288,0.00493867}
,
{-0.0571802,0.0401354,0.198543,-0.157764,0.019604,-0.0751668}
,
{0.22468,-0.0518931,0.0885254,-0.00178837,0.03908,0.0353312}
,
{-0.0507281,-0.0481736,0.0753832,0.0121744,-0.148926,0.0528621}
,
{0.100667,0.0968492,0.202497,-0.0873652,-0.0408168,0.0970907}
,
{0.21719,-0.139673,0.141116,-0.105876,0.0490487,0.0230993}
,
{-0.133757,-0.103824,-0.0345926,-0.00703394,0.146427,0.0737863}
,
{-0.0601733,0.0384234,0.115649,0.0869976,-0.141245,0.00248739}
,
{0.0210395,0.00580976,0.0940065,-0.147092,-0.150316,0.0747843}
,
{-0.103047,0.0683877,0.190434,0.106294,0.0214562,-0.206045}
,
{-0.0719611,-0.0612372,0.168148,-0.111381,0.150603,0.202269}
,
{0.0444652,-0.0712722,0.0931212,0.0918027,0.218623,-0.0677188}
,
{-0.0718823,0.1749,0.126035,-0.0829726,0.0139172,-0.105009}
,
{0.079808,-0.0355577,-0.115853,-0.0656084,0.0377082,-0.0531924}
,
{-0.0829846,-0.0184967,-0.0577121,0.0514168,0.1166,0.0108076}
,
{-0.0360186,-0.0347268,-0.139464,0.0236604,0.162951,-0.174411}
,
{-0.0677694,-0.0642692,0.0894771,-0.0435977,-0.0885819,0.0264764}
,
{0.208794,0.0968519,-0.140089,-0.375802,-0.351616,0.134167}
,
{0.251819,-0.0849178,-0.00569701,-0.137028,0.139983,-0.0438331}
,
{0.0765864,0.0585523,-0.102078,-0.103823,0.0802134,-0.00991403}
,
{0.00116658,-0.0626438,-0.0172763,0.195717,0.0193386,0.154913}
,
{0.165011,-0.0715096,-0.133578,0.117836,0.156664,-0.0549027}
,
{0.079683,0.0629338,0.0273668,0.183755,0.0441465,-0.00805766}
,
{-0.0355063,-0.237345,-0.0397641,0.017515,0.051175,-0.0824582}
,
{-0.0630467,0.0762082,-0.0379258,0.0147339,-0.0846056,0.085354}
,
{-0.145531,0.106565,-0.13113,-0.0244501,0.038079,-0.184416}
,
{-0.156163,0.239736,0.150399,0.14489,0.165588,0.222334}
,
{-0.0002211,0.0315644,0.0853441,0.271477,-0.0737467,-0.184786}
,
{0.254637,-0.095821,-0.0489499,0.00910345,0.194932,0.0777908}
,
{-0.0457604,-0.0318536,-0.189561,-0.0065594,-0.295635,-0.0720823}
,
{0.143813,-0.0978619,0.11288,0.124389,-0.150082,0.200556}
,
{0.13604,0.0487348,0.091257,0.2757,0.231829,-0.134121}
,
{0.0727301,0.0477917,-0.014023,-0.039198,0.0678502,-0.11873}
,
{-0.0154533,0.17244,0.0756265,0.0343412,-0.0688199,-0.0812901}
,
{0.097652,0.144636,0.0393337,-0.148817,-0.202388,0.0542921}
,
{0.00399012,-0.221552,-0.0696671,-0.0981108,0.13608,-0.0305821}
,
{-0.0696696,0.141706,0.0975904,0.136544,-0.137111,-0.0797006}
 };
  static const float bias2[1] = { -0.0693109 };
  static const float weights2[][1] = { {-0.208212}
,
{0.111907}
,
{0.035401}
,
{0.10974}
,
{0.134404}
,
{-0.140642}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_14(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_14(v, index);
}
static int assign_gen_lepton_prior_1_0_14() {
  global_gen_lepton_prior.at(1,0,14) = &specialized_gen_lepton_prior_1_0_14;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_14 = assign_gen_lepton_prior_1_0_14();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.282803,0.0282893,-0.0495042,0.389525,-0.249298,-0.108631 };
  static const float weights1[][6] = { {0.145546,-0.36511,0.10753,-0.157437,-0.879732,-0.176484}
,
{-0.0267283,0.165969,-0.0704624,0.0014162,-0.866393,0.289602}
,
{-0.173028,-0.719578,-0.00885407,-0.0239563,-1.58622,0.136373}
,
{0.00717435,-0.9694,0.157653,-0.384262,0.025687,-0.443457}
,
{0.330175,0.0338303,-0.252032,0.446755,-0.218636,-0.265503}
,
{-0.0492024,0.0760505,0.0328558,0.315555,-0.41041,-0.139215}
,
{0.142578,0.325525,0.124979,0.50026,-0.395145,-0.232274}
,
{0.0829068,-0.323646,-0.441337,0.156264,0.109887,-0.211179}
,
{-0.0739316,-0.0481166,0.137603,-0.179315,-0.384075,0.142803}
,
{0.184148,0.127546,-0.000701885,-0.0567798,-0.084635,0.0194161}
,
{-0.120485,0.0382329,0.0770811,0.0182465,-0.0487417,0.140883}
,
{-0.129291,-0.286394,-0.0067702,0.176959,-0.166938,-0.188339}
,
{-0.272489,-0.0126284,0.154408,0.0944178,-0.256736,-0.29472}
,
{0.196636,0.0700606,-0.0753428,0.506492,-0.178668,-0.00366284}
,
{0.112877,-0.000723818,-0.146397,-0.223756,0.109226,0.0364819}
,
{0.109109,0.230482,-0.0310322,-0.169054,0.094143,0.112188}
,
{-0.049463,0.13687,-0.0448269,0.110056,-0.122542,-0.186313}
,
{-0.524114,0.105447,0.155816,-0.0306221,-0.109266,0.126247}
,
{0.234453,-0.111353,-0.0632849,0.0696702,-0.0718116,-0.271958}
,
{-0.0251312,-0.201971,-0.166082,0.0224522,-0.00114515,-0.118892}
,
{0.116859,-0.218074,0.0482652,-0.116972,-0.0784412,-0.171146}
,
{0.208841,-0.222373,-0.0219964,-0.173,-0.0948206,-0.124195}
,
{0.142395,-0.118114,0.0287723,0.0289227,0.168114,0.0954143}
,
{-0.0214137,-0.170278,0.0944043,0.059503,-0.401323,-0.0236736}
,
{0.0761356,0.0645344,0.164219,0.035517,-0.0393088,-0.0940814}
,
{0.0275805,-0.0420726,-0.080653,-0.0140327,0.1455,-0.158369}
,
{-0.0119,0.043571,0.00128852,0.0491474,-0.049936,-0.223266}
,
{-0.00767141,-0.0241627,-0.0641172,-0.0217935,0.0363082,-0.165223}
,
{-0.103479,-0.382641,-0.131302,-0.3093,-0.632007,0.0434903}
,
{-0.0888071,-0.190244,0.104454,-0.0847251,-0.0614956,0.0201737}
,
{0.185429,0.0602748,-0.0393217,-0.0408496,0.0421847,-0.0425319}
,
{-0.124366,-0.0590914,0.122969,0.184819,-0.141618,0.0596685}
,
{0.00440683,0.364537,0.0392853,0.0409443,0.0732296,-0.176161}
,
{-0.0194709,0.169128,-0.119003,-0.121643,0.00710158,-0.0183217}
,
{0.0288804,-0.247327,0.330473,-0.0260953,0.0223647,0.0997601}
,
{0.0345135,-0.0152133,-0.0220157,-0.0165206,-0.0478846,0.0573578}
,
{0.381352,0.412699,0.343102,-0.107313,0.568546,-0.053901}
,
{0.0679343,-0.175966,0.113407,-0.0187482,0.0167828,-0.10061}
,
{-0.0682184,-0.249912,0.158094,0.0764393,-0.319506,0.348062}
,
{0.192464,-0.170177,0.141078,-0.0589585,0.208094,-0.077112}
,
{-0.117342,-0.171972,-0.0615704,0.110546,-0.00556422,0.0421968}
,
{-0.274279,-0.322612,-0.28085,0.293393,0.784698,0.00717352}
,
{0.0215906,-0.0536385,0.0437854,-0.0579895,0.129809,-0.0537148}
,
{0.0628947,0.43377,0.249723,-0.0867957,-0.0937855,0.195004}
,
{0.0398128,0.286947,-0.0390343,0.0247808,0.0483325,-0.0313664}
,
{-0.0717511,-0.0413621,-0.123119,0.00602441,-0.047475,0.0185201}
,
{-0.302332,0.151679,-0.660053,-0.0774544,-0.138918,0.0862903}
,
{0.00814619,0.113769,0.0179956,-0.0281556,-0.0816358,-0.199639}
,
{0.144406,-0.887967,0.112156,-0.217993,0.176712,0.010886}
,
{0.0860449,0.0414006,-0.0518946,-0.107258,-0.135051,-0.212529}
,
{-0.00614848,0.238483,-0.10296,-0.0320005,-0.0378197,-0.0777802}
,
{0.456383,0.125541,0.365089,-0.402066,-0.0891037,0.220163}
,
{0.0147646,-0.139276,0.113035,0.00474524,0.113473,-0.130115}
,
{-0.29497,-0.523729,-0.481019,0.0253293,-0.0465475,0.358264}
,
{-0.029845,-0.0986442,0.121141,0.0451816,0.0428697,0.00357807}
,
{0.0427417,-0.0592779,0.0436834,-0.0484495,0.0450518,-0.0266955}
,
{0.219242,0.0651271,-0.247271,-0.144407,-0.245307,-0.303756}
,
{0.0825361,-0.0393823,0.0328437,-0.0524086,0.07732,0.0194528}
,
{0.0325751,-0.168373,-0.316829,-0.147051,0.0776126,0.250366}
,
{0.0658794,-0.0528628,0.125754,-0.000945251,0.0454932,-0.131677}
,
{-0.0174323,0.0224653,-0.0490025,-0.00802272,-0.0360304,0.0291511}
,
{-0.250593,0.0169187,-0.338039,0.11868,-0.0763241,-0.0763402}
,
{0.0840851,-0.0226548,-0.113142,-0.0643302,0.057716,-0.0722633}
,
{-0.222404,-0.313039,0.345996,0.328367,-0.299153,-0.278742}
,
{-0.10803,0.109335,-0.0348442,0.0957676,-0.0546869,-0.0654809}
,
{-0.0197371,0.0186811,-0.139379,-0.0707993,0.00503404,0.0265848}
,
{0.00945112,0.00319306,-0.193286,0.120721,0.196093,0.0677621}
,
{-0.0161981,0.00354771,-0.0680862,-0.0532045,0.0244919,0.217289}
,
{-0.219482,-0.136637,-0.135604,0.179848,-0.548783,-0.437248}
,
{-0.0414064,0.0171624,-0.116544,-0.0381446,-0.00259838,-0.0378592}
,
{0.0439463,-0.0250633,0.071335,0.00590611,0.00222603,-0.0505468}
,
{0.0672518,-0.147649,0.270918,0.132901,-0.175126,0.18169}
,
{0.0165202,-0.00354805,-0.375132,-0.241987,0.018526,0.0705033}
,
{0.0762992,-0.227637,-0.067371,-0.100341,0.209811,-0.129132}
,
{-0.682936,0.478804,-0.0434195,-0.287758,1.0906,0.45944}
,
{0.0464173,0.593882,0.168319,0.497463,0.142725,-0.298999}
,
{1.67578,-0.13666,-2.06885,1.50573,-0.386146,-0.315308}
,
{-0.0835823,-0.623937,-0.466435,-0.0399159,-0.387378,-0.0903513}
,
{-4.18095,1.9691,0.100417,-2.05957,0.148822,0.0381491}
 };
  static const float bias2[1] = { 0.110792 };
  static const float weights2[][1] = { {0.0608945}
,
{-0.105927}
,
{-0.0373118}
,
{0.0590476}
,
{-0.723361}
,
{-0.339292}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_2(v, index);
}
static int assign_gen_lepton_prior_2_1_2() {
  global_gen_lepton_prior.at(2,1,2) = &specialized_gen_lepton_prior_2_1_2;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_2 = assign_gen_lepton_prior_2_1_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.164754,-0.215753,-0.069036,0.167007,-0.096864,0.168474 };
  static const float weights1[][6] = { {0.46658,0.0537705,-0.189522,0.123126,0.394769,-0.178859}
,
{0.231911,-0.443791,-0.327515,0.0708058,0.409789,0.162511}
,
{0.0153802,-0.0951993,-0.76477,0.805147,-0.0595107,-0.00935199}
,
{-1.15691,-0.542645,-0.291564,-0.0930701,-1.12902,-0.185263}
,
{-0.132049,-0.195168,-0.046994,0.125166,0.106603,0.23027}
,
{-0.112631,-0.274694,0.0150112,0.103284,0.0487007,0.16424}
,
{0.0647395,-0.183032,-0.0876717,0.163812,-0.0648171,0.320382}
,
{-0.0478743,0.503378,0.126769,-0.0349016,-0.0964913,0.171022}
,
{0.207484,0.00184873,-0.0480346,-0.219648,-0.668746,-0.0195637}
,
{0.0281678,-0.200373,-0.116226,0.0115752,0.197152,-0.132191}
,
{0.166297,-0.0383665,0.103182,-0.166184,-0.160968,-0.223579}
,
{-0.0189778,0.0470194,0.0280339,-0.216,0.0639375,-0.00147276}
,
{0.077267,0.00481388,-0.14128,0.204065,-0.205932,-0.0504701}
,
{-0.343763,-0.258753,-0.0923145,0.183982,-0.00782742,0.138758}
,
{0.101025,-0.204548,0.224837,-0.097496,-0.0884046,-0.107522}
,
{0.0621441,0.091095,-0.128525,-0.156271,0.0864081,0.171507}
,
{0.0899847,0.0186461,0.11598,-0.356513,0.00598723,-0.0196117}
,
{-0.482604,0.42733,-0.145731,-0.385558,0.310516,-0.507481}
,
{-0.00762129,-0.100304,0.10724,-0.0152319,-0.0367299,-0.0211526}
,
{0.0278587,-0.225847,0.103863,-0.22192,-0.0392477,0.0731329}
,
{0.175472,-0.177965,-0.187738,-0.428783,-0.175159,0.142782}
,
{0.0139913,-0.0976702,-0.0278079,-0.00516428,-0.0757853,0.020946}
,
{0.0343243,0.135144,0.0271742,-0.00972408,-0.205027,-0.0328481}
,
{0.056601,0.129087,-0.221924,-0.103789,-0.118231,0.0269175}
,
{0.195881,-0.0634475,-0.219905,-0.103933,0.00126359,0.0631682}
,
{-0.027712,-0.00530522,-0.112749,-0.155176,0.00912869,0.0594417}
,
{-0.418693,0.134547,0.178443,-0.136175,0.142125,0.0895618}
,
{0.00626663,-0.152824,-0.0543383,-0.0437443,-0.0679728,-0.0479528}
,
{0.500422,0.0845018,-0.481171,-0.208606,-0.0659853,0.210027}
,
{-0.0246317,-0.17208,-0.0444462,0.116654,-0.103242,-0.131404}
,
{-0.122959,-0.171893,-0.0770451,0.0269363,-0.0753861,-0.0120159}
,
{-0.0754495,-0.178999,-0.127544,0.0125264,0.110885,0.151122}
,
{-0.0492314,0.0971031,-0.0389313,0.331186,0.0120619,-0.0432614}
,
{-0.0895268,-0.240295,0.0216288,-0.0141096,-0.10927,0.0434293}
,
{-0.232194,0.108484,-0.281051,-0.108717,0.0304313,-0.402034}
,
{0.174047,0.0240643,0.15045,-0.227857,-0.13214,0.256331}
,
{0.365598,0.0458982,-0.00136506,-0.065953,0.429456,0.476433}
,
{-0.055035,-0.0406157,-0.00745845,0.337344,0.146391,-0.043675}
,
{-0.0310466,-0.119536,-0.012896,0.886749,0.355704,0.0198921}
,
{0.0137066,0.14519,-0.0591879,-0.0930947,0.707056,-0.013417}
,
{-0.0386674,-0.0439218,0.0994861,0.0628607,-0.0639425,-0.037005}
,
{-0.0679718,-0.00120899,-0.319887,-0.0767966,0.350966,-0.0585797}
,
{0.0157778,-0.0139963,0.0318623,-0.0661054,0.0792626,0.0398223}
,
{0.052037,-0.300419,-0.0401408,-0.062351,-0.249643,0.111694}
,
{-0.0238806,-0.037838,-0.0162182,0.0136824,-0.0838863,-0.0448062}
,
{0.00460146,-0.0658296,0.0177428,-0.0162155,-0.0170957,0.0149607}
,
{-0.0359537,0.336228,0.0280528,0.126986,-0.263329,-0.0792789}
,
{-0.0238086,0.0376928,-0.0508173,-0.209462,-0.0703825,-0.0244068}
,
{0.0892864,-0.387687,-0.340281,0.170097,0.0590345,0.0827491}
,
{0.0082439,0.00784068,-0.12577,0.0500127,0.462611,-0.00761311}
,
{0.0374463,0.0109239,-0.0281998,0.106217,0.243257,0.0329405}
,
{0.270544,0.222742,0.0529193,-0.410154,0.32396,0.279965}
,
{-0.042129,-0.0249461,-0.0634236,0.159698,-0.0161207,-0.0511358}
,
{-0.023571,-0.186219,-0.231895,0.560645,0.41174,-0.0345475}
,
{0.0634319,-0.379186,-0.160689,0.232638,-0.0343584,-0.0741213}
,
{-0.0896625,-0.0723529,-0.0631569,-0.0859441,0.039505,-0.0478867}
,
{0.264815,-0.0387175,0.435115,0.0105407,0.210262,0.209252}
,
{-0.457147,0.481037,-0.02829,0.044433,0.208683,0.052992}
,
{-0.355297,0.37298,1.40542,-0.0516027,-0.0695221,-0.234741}
,
{-0.0499894,0.256573,0.0948336,0.116299,0.0284356,0.0872608}
,
{0.0818671,-0.0257562,-0.0160926,0.00944588,-0.0381091,-0.00900998}
,
{0.247622,0.525763,-0.647012,0.157869,-0.327322,-0.381754}
,
{-0.0119261,0.203103,-0.118852,0.0841934,-0.418896,-0.35019}
,
{-0.450532,-0.121406,-0.115892,0.189228,0.0888975,-0.0427098}
,
{0.128608,0.0340466,-0.0126049,0.00149472,-0.103397,-0.1465}
,
{-0.128883,0.0312047,0.0441767,-0.0769204,-0.0510365,-0.11908}
,
{-0.168332,-0.494393,-0.784521,-0.105448,0.261664,0.0429061}
,
{0.400133,-0.377441,1.14569,-0.053009,-0.311844,-0.586556}
,
{-0.342717,0.385263,-1.03158,-0.131515,0.244334,0.116177}
,
{-0.0672993,0.083679,0.330259,-0.178372,-0.0802984,-0.00833825}
,
{0.0239955,0.0305326,-0.0125762,0.0180401,-0.00142249,0.0427817}
,
{0.235604,-0.179081,-0.617005,0.120366,-0.0194256,0.141226}
,
{-0.193329,-0.0352457,-0.776799,-0.215843,0.53583,0.232164}
,
{0.115164,0.280138,-0.358919,-0.0695591,0.0659252,-0.307718}
,
{1.87525,1.43453,0.987023,-0.114765,0.299539,-1.39869}
,
{0.0672516,0.0907475,0.506422,0.0491189,-0.242129,-0.0805006}
,
{-0.323531,-0.228251,0.451139,-0.0164655,0.0852822,0.261559}
,
{0.147141,0.13774,-0.101718,-0.00867865,-0.114714,-0.0911734}
,
{0.0843965,0.13019,0.20323,0.0520119,0.0558657,-0.153854}
 };
  static const float bias2[1] = { 0.309872 };
  static const float weights2[][1] = { {-0.180301}
,
{-0.947063}
,
{-0.162144}
,
{0.884811}
,
{-0.240112}
,
{0.158456}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_3(v, index);
}
static int assign_gen_lepton_prior_2_1_3() {
  global_gen_lepton_prior.at(2,1,3) = &specialized_gen_lepton_prior_2_1_3;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_3 = assign_gen_lepton_prior_2_1_3();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.138547,0.0326796,0.1298,0.046592,0.146739,0.134759 };
  static const float weights1[][6] = { {0.692529,0.352972,0.5445,0.460886,0.199262,0.344781}
,
{0.0728511,0.246082,-0.0254332,0.712995,-0.288404,0.324641}
,
{-0.224114,0.33406,-0.129169,0.331142,-0.0699596,0.286535}
,
{-1.32261,0.533414,0.0972017,-0.617565,0.125095,-0.048214}
,
{0.0200432,0.0153518,0.145319,0.0147162,0.0217616,0.199525}
,
{0.158932,-0.253947,-0.115474,0.245202,-0.181002,0.13201}
,
{0.0420216,-0.268187,-0.082645,-0.0585971,0.131613,-0.023996}
,
{-0.260839,-0.058646,-0.166367,0.164498,-0.204988,-0.0963559}
,
{0.284164,-0.33657,0.207807,-0.24861,0.183137,0.00549014}
,
{-0.0239996,0.0499999,0.133226,0.00921113,0.201716,0.0248765}
,
{-0.115891,-0.100157,-0.0773668,0.08668,0.145458,-0.032078}
,
{-0.0871297,-0.189265,0.00435261,-0.103538,0.0282876,0.028728}
,
{0.083276,-0.101716,0.172717,-0.111279,0.203692,0.137193}
,
{0.039286,0.0224818,0.0652532,-0.059835,-0.0586182,0.1285}
,
{-0.172963,-0.0788907,0.164422,-0.192322,-0.112626,0.143356}
,
{-0.0182948,-0.140241,-0.152255,-0.12951,-0.0663659,0.112968}
,
{0.0532392,-0.0171096,0.109619,0.0308185,-0.0890005,0.0809544}
,
{0.0572365,0.461467,0.0608682,0.303518,-0.111594,0.112978}
,
{0.0950447,0.00794123,0.0983665,-0.0409675,0.147971,0.0339326}
,
{-0.0209837,-0.073386,0.0605798,-0.126987,-0.0131599,-0.0746436}
,
{-0.0415762,-0.115357,0.0982202,-0.271078,-0.102545,-0.0517757}
,
{0.0169229,-0.173079,-0.0548842,-0.107728,-0.0788719,-0.0428179}
,
{0.202961,-0.055224,0.0643242,-0.162171,-0.0122894,0.19556}
,
{-0.000756979,-0.163445,-0.00571633,0.0260018,-0.00220184,0.0349652}
,
{-0.396364,-0.127599,0.0349423,-0.148879,-0.0727104,0.184206}
,
{0.0485284,0.212278,-0.0671999,0.00487738,0.0696459,-0.177944}
,
{0.121278,-0.303808,-0.0276968,-0.441288,-0.170009,0.060444}
,
{-0.148432,-0.0935501,-0.19906,-0.0367621,0.180099,-0.0807421}
,
{0.777676,0.111931,0.143998,0.391372,-0.501483,-0.331691}
,
{-0.187226,0.0241336,-0.112687,-0.0991201,0.00734155,-0.180366}
,
{0.0331567,0.0910072,-0.00897237,-0.0470692,-0.00587229,-0.0137089}
,
{0.0741655,-0.0468068,0.127726,-0.0290086,0.0435315,0.139838}
,
{-0.0203385,0.0495556,0.0488574,0.0387102,-0.0510723,-0.0120162}
,
{-0.0627785,-0.0842422,0.163594,0.173171,-0.00376781,0.188138}
,
{0.0219244,0.286012,-0.166208,0.058502,0.150575,0.215559}
,
{-0.00199537,-0.0907961,0.029803,0.116835,-0.0638598,-0.0149171}
,
{-0.474796,0.138418,0.275305,-0.559504,0.187479,-0.00543536}
,
{0.00249621,0.138792,-0.0449923,0.0534652,0.0226689,0.0867806}
,
{0.0454892,-0.471357,-0.0371947,0.0900286,-0.267688,0.189366}
,
{0.214877,0.0416579,-0.0937866,-0.181901,0.0802783,-0.008243}
,
{0.0173408,-0.106103,0.0164178,0.0373511,-0.0732998,-0.00405974}
,
{0.0541352,-0.750278,-0.361767,-0.178709,0.114973,0.309608}
,
{-0.0879574,-0.0995886,0.0671014,0.105442,-0.0529229,-0.0426591}
,
{0.239835,-0.627771,0.00346065,0.456547,-0.187205,-0.544027}
,
{0.204974,-0.139113,-0.212663,0.213829,0.0732505,-0.0621878}
,
{-0.0143754,0.000888922,0.00275819,0.147703,0.0177103,0.0545552}
,
{-0.223161,0.131389,0.246681,-0.0334917,0.172977,-0.237017}
,
{-0.00155698,0.215327,0.0108589,-0.0450681,-0.100624,0.0597731}
,
{0.0780497,-0.206316,0.0124817,-0.0884251,0.0872365,-0.249795}
,
{0.144371,0.147105,0.0123453,-0.216266,0.194246,-0.368887}
,
{0.0368519,-0.0806409,-0.0253926,0.00296672,-0.00149104,0.0162172}
,
{-0.261234,0.0838792,0.0903447,0.13117,0.1812,0.324159}
,
{-0.0174917,0.109939,0.0163302,0.0157154,0.0657396,-0.0812234}
,
{0.127639,0.330553,-0.192532,-0.0263636,0.00365974,-0.0657592}
,
{-0.694821,0.154654,0.0541195,0.0874572,0.302214,-0.257126}
,
{-0.231515,0.0470153,-0.0434435,-0.115564,-0.0216263,0.0430796}
,
{-0.105074,-0.0893068,0.0497015,-0.241402,0.130991,0.0860529}
,
{-0.0292366,-0.0400924,0.0216333,-0.0424135,-0.00958534,-0.156456}
,
{-0.361424,-0.0855331,-0.0175923,0.252754,0.349972,-0.264934}
,
{-0.385485,0.35754,-0.120952,0.0309154,0.106698,0.0219568}
,
{-0.0797598,-0.117047,-0.262837,-0.279433,0.0709688,0.0174213}
,
{0.374243,-0.0424643,0.943346,-0.425563,-0.0457555,-0.27635}
,
{0.0886734,-0.0148658,0.194929,-0.0384119,0.0329651,-0.0573139}
,
{-0.319218,0.0337084,0.636108,-0.113615,-0.253021,0.288722}
,
{-0.244493,-0.140312,-0.000480398,-0.0498661,0.0346526,0.0901467}
,
{0.0523676,-0.205,-0.0781936,-0.284797,0.0340178,0.00104083}
,
{-0.451296,0.425509,-0.655083,-0.03892,0.614783,0.07381}
,
{0.0100403,0.00465698,-0.0789777,-0.135432,0.0728167,-0.110571}
,
{0.690618,0.1326,-0.412359,-0.323825,0.419082,-0.0699306}
,
{-0.234358,-0.0384574,0.103963,-0.533169,-0.0539342,-0.0535689}
,
{-0.0856604,0.169803,0.0322488,0.165115,-0.0193412,0.0134496}
,
{0.718203,0.346332,-0.703517,-0.245074,0.206174,0.294254}
,
{-0.101324,0.0480765,-0.215026,-0.132232,-0.0647795,0.0821417}
,
{0.549697,0.392759,0.00948319,-0.380629,-0.682609,0.251373}
,
{-2.00324,-1.98904,-1.17803,1.95664,-2.28728,-1.2932}
,
{0.00727438,0.312917,0.00228241,-0.318968,0.173947,0.368267}
,
{-0.078123,0.118447,0.00155642,-0.0393326,0.11876,-0.132204}
,
{1.32125,0.800041,-0.930886,0.671889,0.222998,-0.269151}
,
{-0.0110228,0.000107093,-0.0259484,0.32697,-0.0565548,-0.151776}
 };
  static const float bias2[1] = { -0.00578866 };
  static const float weights2[][1] = { {0.108753}
,
{1.14646}
,
{0.0671173}
,
{-1.23336}
,
{0.110382}
,
{0.064793}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_4(v, index);
}
static int assign_gen_lepton_prior_2_1_4() {
  global_gen_lepton_prior.at(2,1,4) = &specialized_gen_lepton_prior_2_1_4;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_4 = assign_gen_lepton_prior_2_1_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0576611,-0.111559,0.0602492,0.0733768,0.108697,-0.0989833 };
  static const float weights1[][6] = { {-0.0903373,0.566058,0.0823945,-0.479648,-0.17041,0.48846}
,
{-0.541233,-0.19139,0.0953924,0.0597291,-0.267539,0.0465333}
,
{-0.104746,0.377472,0.205165,-0.12945,0.460172,0.0730751}
,
{-0.683784,-1.00235,-0.0161415,-0.423543,-0.239377,0.330226}
,
{0.093498,-0.0846209,0.174667,0.0909589,0.144226,-0.349543}
,
{0.092622,-0.133657,-0.0120303,0.248996,0.16904,0.0607525}
,
{-0.0418475,-0.080269,0.168216,0.112061,-0.15959,-0.225732}
,
{-0.116027,-0.118156,-0.165926,0.0208972,0.154761,0.0767393}
,
{-0.0903096,-0.0291359,0.0558052,0.103459,0.106248,0.282289}
,
{-0.160635,-0.213232,0.126792,0.0211463,0.0378859,0.169113}
,
{0.172816,0.0775686,0.0169976,-0.0405057,-0.0363997,0.0537907}
,
{0.0634607,0.188766,-0.0994021,-0.301453,0.0625779,-0.124777}
,
{-0.238078,-0.00516065,-0.0454089,0.0854012,-0.0566842,-0.0512405}
,
{0.279691,0.143518,-0.104877,-0.130469,0.124464,-0.00975077}
,
{0.0978565,0.0166917,0.113019,0.169595,-0.0448547,0.0263957}
,
{0.141031,0.222462,-0.00957495,0.0353629,-0.0351181,-0.040925}
,
{-0.0109371,-0.132427,0.100164,0.104555,0.206375,-0.0092071}
,
{-0.227777,0.242004,-0.0552668,-0.277345,0.111109,0.0425031}
,
{-0.22595,0.0589417,0.042988,0.13348,-0.0495481,0.0709895}
,
{0.0669786,0.0122418,0.187854,-0.0224735,0.0394302,0.00566022}
,
{-0.346266,-0.027583,0.0496758,-0.0051289,0.0470351,0.0882571}
,
{-0.0777244,-0.160691,-0.111767,0.0164311,-0.0181346,-0.0779682}
,
{0.0777073,0.0294402,0.001495,-0.000106855,-0.0581933,0.0449985}
,
{0.0590807,-0.0420855,0.090565,0.0569084,-0.0466002,0.190617}
,
{-0.0253854,-0.010997,-0.0271243,0.237246,-0.147796,0.164919}
,
{0.193294,-0.0627243,-0.171029,-0.0492583,-0.078054,0.0612441}
,
{0.0486366,0.0556335,0.162827,0.0504748,-0.375438,-0.00835775}
,
{-0.254913,0.0569633,0.000624237,-0.00774275,-0.0378775,-0.0923883}
,
{0.205544,-0.00243179,-0.355664,0.425414,-0.630739,0.107784}
,
{0.0794427,0.0838864,0.0264503,-0.143735,0.053741,0.0371843}
,
{-0.268295,0.0846559,-0.0111795,0.00356873,0.168054,0.0885821}
,
{-0.109922,-0.0112073,-0.012416,0.117974,0.100612,0.0028578}
,
{0.148257,-0.0988442,-0.109744,0.0767036,0.174128,0.0204643}
,
{-0.144562,0.136498,0.0505447,-0.0378303,0.0188935,0.200839}
,
{0.175832,0.0254865,0.0522034,-0.0841593,-0.10016,-0.0101389}
,
{-0.171445,-0.145987,0.049496,0.125036,-0.092043,0.185613}
,
{0.156145,0.367159,-0.173655,0.104536,0.398438,-0.0740377}
,
{-0.266408,0.302534,0.0612995,-0.0521311,0.332954,0.238183}
,
{-0.15544,-0.00122863,0.453532,0.0604269,-0.242313,0.561069}
,
{-0.00946908,0.457555,0.165343,-0.40779,0.146647,-0.234366}
,
{-0.23215,-0.058164,0.0992886,0.078893,-0.141929,0.104275}
,
{-0.277877,0.00213472,0.0623445,-0.0811128,-0.00488467,-0.0186841}
,
{0.097523,-0.184332,-0.0155966,0.130195,0.016753,0.098323}
,
{-0.152393,0.0211433,0.102523,0.120528,-0.0163255,-0.0548204}
,
{-0.0527881,-0.0117907,0.170728,-0.0472801,-0.304516,0.0115193}
,
{-0.0727962,-0.0366279,0.0280548,-0.0416129,-0.167704,-0.163873}
,
{0.616703,-0.162365,0.0877007,0.026196,-0.150741,0.177334}
,
{0.189355,-0.190077,-0.145156,0.069621,-0.0418374,-0.0782337}
,
{-0.16878,-0.0680062,-0.38747,0.0329096,0.096711,-0.390921}
,
{0.228857,-0.1159,0.00841319,0.0441461,-0.0135143,0.144721}
,
{0.150074,-0.00863884,-0.0868731,0.00522834,0.0748704,-0.0203104}
,
{-0.286165,0.161528,0.113641,-0.12289,0.0563025,-0.0515301}
,
{0.0820383,0.0274739,0.104351,0.0546926,-0.116651,0.125988}
,
{-0.179091,-0.0970021,0.136744,-0.00612097,-0.0228511,0.298811}
,
{0.254266,0.249106,-0.278741,0.460263,0.839806,0.249047}
,
{-0.0635254,-0.0831132,0.0648584,0.00895768,0.291086,0.205504}
,
{0.0913178,0.320137,0.596337,-0.145237,-0.797608,-0.129046}
,
{-0.049294,0.543766,0.16872,-0.703276,0.0927173,0.38078}
,
{0.467321,-0.0676868,0.150976,-0.19553,0.0164329,-0.104915}
,
{0.349649,0.141357,0.0485547,-0.0662633,0.899668,0.0590554}
,
{-0.00737793,0.0115675,-0.0290362,-0.0704467,0.187646,-0.136911}
,
{0.532593,-0.912735,0.166216,-0.55889,-0.813964,0.589841}
,
{-0.0663609,-0.00614959,-1.13858,0.147938,-1.09686,0.490158}
,
{-0.63774,-0.860071,-0.460867,0.283774,-0.762502,0.247446}
,
{-0.127778,-0.158891,0.202653,0.023775,1.26536,0.317645}
,
{0.0762804,0.238873,-0.169025,0.0328417,-0.056069,-0.229476}
,
{-0.309944,0.950171,0.47186,0.0712447,0.43324,-1.60092}
,
{-0.503135,-0.517989,0.308576,0.570963,-1.22206,-0.281593}
,
{-0.155468,-0.0301035,0.29045,-0.404346,-0.805775,-0.51183}
,
{-0.0768934,0.290509,0.51016,-0.0696118,0.394254,-0.0880313}
,
{0.0350061,0.0484017,-0.17069,-0.0129766,0.110336,-0.181937}
,
{-0.666815,-0.0144874,-0.280386,0.0017398,1.89849,-0.0231853}
,
{0.00462507,-0.749996,-0.388956,-0.125048,1.75176,0.0877025}
,
{-0.0501181,0.249942,-0.256859,-0.0211619,-0.376921,-0.368311}
,
{-0.458957,0.661303,-0.939053,-2.20127,-0.30046,1.43755}
,
{0.403726,0.510528,-0.508208,0.195326,0.863984,0.324818}
,
{-0.126155,-0.158503,0.090442,-0.0365955,0.0178925,-0.0202237}
,
{-0.0723415,-0.0858787,-0.0423898,0.107484,0.0572658,-0.0188515}
,
{-0.789206,0.325778,-0.456013,-0.783486,-0.617218,0.496314}
 };
  static const float bias2[1] = { 0.100724 };
  static const float weights2[][1] = { {1.09759}
,
{-0.120274}
,
{0.104561}
,
{0.158917}
,
{0.0859687}
,
{-0.0909272}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_5(v, index);
}
static int assign_gen_lepton_prior_2_1_5() {
  global_gen_lepton_prior.at(2,1,5) = &specialized_gen_lepton_prior_2_1_5;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_5 = assign_gen_lepton_prior_2_1_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0618439,-0.0843418,0.00064467,0.209407,-0.0169437,0.151813 };
  static const float weights1[][6] = { {-0.0806639,0.1122,-0.0455918,0.0688239,0.13976,0.021303}
,
{-0.0661872,-0.552649,-0.119868,0.00534103,0.130689,0.131869}
,
{0.299606,-0.480146,0.179595,0.00508801,0.174263,-0.150592}
,
{0.0655048,-0.350631,0.221197,0.157716,-0.03352,0.374518}
,
{-0.100306,-0.247361,0.196504,0.440571,0.23137,0.139729}
,
{-0.196847,0.0200937,0.0938708,0.298605,0.00961828,-0.0286289}
,
{-0.142666,0.0647241,0.00923746,0.356506,-0.0276217,0.282584}
,
{0.0702692,0.274638,0.0397418,0.160562,-0.0799887,-0.0612098}
,
{0.256598,0.323136,0.210625,-0.157726,-0.0762273,-0.208766}
,
{0.0175599,-0.0676761,-0.0741337,-0.0858182,-0.0712566,-0.118284}
,
{0.0628433,-0.0288812,-0.0147467,0.01037,-0.0866756,0.247468}
,
{-0.304311,0.21838,0.165924,-0.031657,0.00731688,0.0583519}
,
{0.0753132,-0.169135,0.247384,0.270026,-0.0170448,0.324415}
,
{0.173054,-0.0649273,0.0542883,-0.00478378,0.0927045,-0.0173021}
,
{-0.228257,-0.0951975,0.0642256,-0.035949,0.0757622,-0.0864657}
,
{0.143454,0.0784723,-0.123676,0.000938228,-0.0245672,-0.00394539}
,
{-0.132408,-0.0117996,0.119047,0.107085,-0.105413,0.0358837}
,
{-0.105636,0.0037623,-0.116197,-0.150676,0.141321,-0.0881038}
,
{-0.0718403,-0.0363935,-0.0890891,0.0615556,-0.234431,-0.0351636}
,
{-0.0248378,-0.0247776,-0.216715,0.0804059,0.146346,-0.119359}
,
{0.0163894,-0.0494217,-0.146112,0.00893258,-0.0928941,0.0286018}
,
{-0.11899,-0.250672,-0.00186214,-0.0591605,-0.152589,0.0639166}
,
{0.182232,0.237379,-0.000807155,0.108956,0.091218,-0.00768524}
,
{-0.00186815,-0.0512674,-0.0594909,-0.0817227,-0.182567,0.107922}
,
{-0.14174,-0.109849,-0.108826,-0.0128064,-0.11047,-0.107316}
,
{-0.0216327,-0.0482541,-0.000997595,0.0145137,-0.142203,0.0858307}
,
{0.132124,0.0638563,0.194459,-0.0560853,0.186266,0.147169}
,
{-0.1932,0.130218,-0.0367022,0.227542,0.0756623,-0.154007}
,
{-0.0284837,0.00647281,-0.131359,-0.078417,-0.104,0.0584785}
,
{-0.153359,-0.188202,-0.133853,-0.0504697,0.00560086,-0.0750234}
,
{0.294143,0.0225245,-0.127441,0.0588669,-0.0468374,0.117927}
,
{0.171264,0.223071,-0.124689,-0.0494852,0.147028,-0.179762}
,
{0.0110715,0.141186,0.0418824,-0.0234164,-0.036956,-0.100179}
,
{0.0321422,0.212287,-0.00551337,0.0822095,-0.0417367,-0.0393204}
,
{-0.100765,-0.148516,0.00821967,0.0112331,-0.00511162,0.287652}
,
{-0.0750886,-0.0326475,-0.132624,-0.160824,-0.0844324,0.0721575}
,
{0.719795,-0.0293493,-0.0135481,-0.046175,-0.205929,0.00125419}
,
{-0.182427,0.450122,0.142044,-0.0865653,0.0569226,0.17361}
,
{-0.245696,0.091556,0.137026,0.113012,-0.0102637,-0.0698414}
,
{-0.119994,0.219016,0.130336,-0.135319,0.219059,-0.247533}
,
{0.0941077,-0.119576,0.0438743,0.0393871,0.0800411,-0.0107629}
,
{0.556195,0.324476,-0.0419397,0.0306295,0.171818,0.00252698}
,
{-0.427298,0.0919397,0.0590503,-0.237803,-0.128612,0.548989}
,
{-0.0369087,0.325196,-0.0816875,0.0983903,-0.0450347,0.256486}
,
{0.364769,0.206442,0.0984446,0.0467842,-0.0514061,0.0352548}
,
{0.368979,0.132985,0.218788,-0.153854,0.0239686,0.225485}
,
{0.171454,-0.198519,-0.0473022,-0.184997,-0.0800431,0.178334}
,
{0.126686,0.000342512,0.060594,-0.228196,-0.0534437,0.337166}
,
{-0.596654,1.18278,0.247411,-0.116853,0.0507611,0.272463}
,
{-0.201067,-0.315875,-0.171184,0.00060152,0.065082,0.0244373}
,
{0.0510598,0.124506,-0.0791431,-0.067051,0.012527,0.0813894}
,
{-0.132251,0.228647,0.106349,-0.0599841,0.0450739,0.0655199}
,
{-0.13424,0.0810319,0.0684889,0.0108917,0.0448107,0.0258547}
,
{0.349414,-0.134017,0.171862,0.156069,0.0867024,-0.0488605}
,
{-0.0628087,0.127392,0.000863453,-0.152326,-0.00423625,0.545161}
,
{-0.175228,0.0282274,-0.161672,-0.126802,0.0109032,0.0519274}
,
{-0.0170863,0.10817,-0.119384,-0.112692,-0.0940563,0.139767}
,
{-0.0619947,-0.010644,-0.0019928,0.0513322,0.193233,-0.122188}
,
{-0.0944891,0.110578,-0.093137,-0.0516733,-0.0710411,-0.456227}
,
{-0.0424139,-0.191672,0.173437,0.1446,-0.087798,-0.272232}
,
{-0.0626182,-0.0849421,0.0259351,0.204519,-0.00657898,0.0251356}
,
{0.146195,0.0660561,0.115602,-0.0193759,-0.0672109,-0.160834}
,
{0.0170412,-0.0656612,0.228072,0.14983,0.125321,-0.151413}
,
{-0.0385974,-0.118948,0.137997,0.144927,0.180828,-0.0754955}
,
{-0.00605471,0.0663572,0.039306,-0.120989,0.191097,-0.134474}
,
{-0.0291456,-0.0526505,0.214295,0.0611143,-0.065054,-0.00246426}
,
{-0.110296,0.0520621,-0.137298,-0.0553242,-0.171252,0.305327}
,
{0.0140082,0.272974,0.0437291,0.110284,-0.031568,-0.122987}
,
{0.0126819,-0.0318737,-0.0660086,-0.150767,-0.00861537,0.139467}
,
{-0.0289876,-0.0525593,0.140777,0.0753626,0.150905,-0.0512669}
,
{0.192178,-0.131545,-0.224835,-0.046956,0.208557,-0.392414}
,
{-0.113177,-0.322821,0.192481,0.138293,-0.0332749,0.323602}
,
{0.0887455,-0.0371354,-0.0242449,0.194302,-0.100512,-0.0359447}
,
{-0.195314,-0.0397212,0.0396725,-0.0708773,-0.199285,0.260376}
,
{-0.0271508,-0.0170173,-0.0711476,-0.0836239,0.0196099,0.144995}
,
{0.180074,0.0280993,-0.215514,-0.173816,0.015064,-0.274794}
,
{0.20814,-0.0778581,0.0198427,-0.0744783,0.132939,-0.0449068}
,
{-0.107567,0.248144,-0.0875584,0.0221162,0.193107,0.212758}
,
{-0.0215985,-0.0866518,0.092832,0.0306171,0.0580316,-0.0612892}
 };
  static const float bias2[1] = { 0.0633198 };
  static const float weights2[][1] = { {-1.46001}
,
{-1.57413}
,
{-0.253188}
,
{0.0930667}
,
{-0.148687}
,
{0.0707668}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_6(v, index);
}
static int assign_gen_lepton_prior_2_1_6() {
  global_gen_lepton_prior.at(2,1,6) = &specialized_gen_lepton_prior_2_1_6;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_6 = assign_gen_lepton_prior_2_1_6();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.145305,-0.0618919,0.0986115,0.139121,0.199655,-0.10239 };
  static const float weights1[][6] = { {0.0869664,0.170174,-0.422669,-0.0286796,0.125519,-0.216304}
,
{-0.0685954,-0.0151754,0.325962,0.212967,0.207102,-0.105954}
,
{0.385908,0.309235,-0.255357,0.375919,-0.456388,-0.782158}
,
{0.0674866,-2.28505,0.193354,-0.673145,0.0173224,-0.375699}
,
{0.0931813,0.0408464,0.00569047,0.246,0.175019,-0.142474}
,
{0.0492949,0.0523296,0.00684992,0.29518,0.138168,0.237475}
,
{0.194213,-0.161782,-0.00779923,0.0267692,0.304019,0.00319027}
,
{-0.115719,0.208502,0.00145182,-0.165154,-0.00212689,0.178296}
,
{0.167086,0.164292,-0.0746933,-0.0478272,0.00867065,0.335903}
,
{0.214651,0.106277,-0.0413856,0.0807334,-0.121547,-0.183441}
,
{0.163508,0.248257,-0.0795126,0.168318,0.0474729,0.170713}
,
{0.097844,0.056807,-0.011876,-0.110668,0.0121984,-0.0832534}
,
{0.166797,-0.11699,0.0653088,0.196785,0.144897,0.140291}
,
{0.0452733,-0.148442,0.0531813,0.050195,0.300924,-0.0250084}
,
{0.0135376,-0.0654973,-0.106669,0.0149788,0.131868,0.00739858}
,
{0.0530025,0.188248,0.13228,0.143076,-0.0198418,-0.00701536}
,
{-0.147679,-0.227937,0.17024,0.13595,0.0403789,-0.169536}
,
{0.151988,0.0493748,-0.0862428,-0.45885,-0.200574,0.0684802}
,
{0.171186,0.06067,0.0626448,0.0374748,-0.119364,0.128788}
,
{-0.118093,0.0139066,-0.0266334,-0.11868,-0.0116893,0.0637326}
,
{-0.123998,-0.159327,0.169849,-0.0450334,-0.199677,-0.18461}
,
{-0.0393004,0.0801935,-0.039918,-0.0814607,0.104768,-0.0301842}
,
{-0.0666521,0.199893,0.00359316,0.239124,0.0356914,-0.203383}
,
{-0.0411529,-0.060475,-0.0357715,0.0441158,0.130983,-0.132659}
,
{-0.10429,-0.180812,-0.12225,-0.225307,0.00546305,-0.0270927}
,
{-0.0586304,0.0219809,0.0233506,0.0187208,0.17306,-0.0222598}
,
{-0.0656798,0.0815817,0.0532906,-0.0426972,0.0512924,-0.0307387}
,
{0.126577,-0.076301,-0.149371,-0.12297,0.143761,-0.0101929}
,
{-0.3079,0.810377,-0.415984,-0.033071,-0.00266208,0.178073}
,
{-0.129995,-0.0896191,-0.0721492,-0.100007,0.135277,-0.126508}
,
{-0.044764,0.0708724,0.21843,-0.0510956,-0.250846,0.175029}
,
{0.0460797,-0.174869,-0.0737457,-0.0345929,-0.128393,-0.142668}
,
{-0.17332,-0.284814,-0.0941557,-0.0130218,0.285377,-0.105278}
,
{-0.213294,-0.128529,-0.038732,-0.183935,0.0636766,0.12015}
,
{-0.117818,-0.141321,-0.250617,-0.053469,0.152278,-0.058028}
,
{0.0909408,-0.212721,-0.0159765,-0.125935,-0.154519,-0.0447536}
,
{0.0764251,-0.470533,-0.057045,-0.432912,0.0976919,0.0319102}
,
{0.0327534,0.072372,0.114344,-0.0269485,-0.204082,-0.0542046}
,
{-0.0396839,0.0256572,0.256479,-0.300974,-0.469349,0.776062}
,
{0.17092,0.154235,0.175791,0.0557009,-0.00484936,-0.212834}
,
{-0.0682678,-0.0410477,0.0117458,-0.0185611,0.0150019,-0.0472972}
,
{0.227517,0.224461,-0.290633,0.426951,0.313438,-0.0967692}
,
{-0.172698,-0.157101,-0.18773,0.0741569,0.138392,0.117014}
,
{-0.429961,-0.588747,-0.424235,-0.24237,0.218428,-0.109926}
,
{-0.10653,-0.350855,0.0245465,-0.0051333,0.0624453,0.103728}
,
{-0.00313647,0.148016,0.021492,-0.0774005,-3.34616e-05,0.110111}
,
{0.0936132,-0.132075,-0.0536521,-0.252342,-0.0345083,0.0606572}
,
{0.0419828,3.75858e-06,-0.100896,-0.0144012,0.0543388,0.119329}
,
{0.262751,0.421146,-0.361882,0.102581,0.277774,0.159844}
,
{0.0146547,0.191264,0.0472609,0.0708788,0.068741,-0.233167}
,
{-0.0648473,-0.0685502,0.00219726,-0.00545378,0.0144456,-0.14094}
,
{0.0569523,-0.252348,-0.289646,0.0959077,0.272139,-0.628423}
,
{-0.0121355,-0.0464183,-0.0568585,-0.00673772,0.0488288,-0.0243291}
,
{-0.0834486,0.16582,0.0083008,-0.214255,-0.239265,-0.289012}
,
{0.423183,-0.18479,-0.113292,-0.195379,-0.192176,-0.0497826}
,
{0.0948314,-0.0995218,-0.0169622,0.114089,-0.0150124,0.168209}
,
{0.266765,-0.195558,0.0806519,0.0892262,0.0819266,-0.0960092}
,
{0.0434716,-0.142668,-0.0666433,0.0500899,0.0923138,-0.268895}
,
{-0.134785,0.146572,-0.099047,-0.128619,0.374765,0.123824}
,
{0.322521,-0.0822299,0.010593,-0.0427762,0.353541,-0.219811}
,
{-0.00643504,-0.0780037,-0.138418,-0.0271326,0.122645,0.088992}
,
{-0.114863,0.0918179,-0.116558,-0.200664,0.0554952,0.00341138}
,
{0.0246556,-0.0611623,0.201758,-0.030119,-0.091497,-0.0166969}
,
{-0.337205,-0.0383531,0.129845,0.0595126,0.112482,-0.0968135}
,
{0.272018,-0.226425,0.060516,0.0176178,0.302562,-0.206717}
,
{-0.11864,0.115588,0.135219,0.0970202,0.163647,0.0471153}
,
{-0.479484,0.375916,-0.0408018,0.00744187,-0.545037,0.402342}
,
{-0.0853758,0.468398,-0.1571,0.0472889,-0.199106,0.149826}
,
{0.069317,0.0174803,-0.0115455,0.0749492,0.0597692,0.0298895}
,
{0.162176,0.19686,-0.0906778,-0.106175,0.199183,-0.0106553}
,
{0.159385,0.0293265,-0.160195,-0.175696,0.264889,0.102123}
,
{0.110618,0.0190693,0.134103,0.0530058,-0.0533141,-0.246276}
,
{0.0520315,-0.0980329,0.147101,-0.169253,-0.115645,0.0310275}
,
{0.0619668,-0.0578736,-0.00624001,0.0450966,-0.181375,-0.166215}
,
{-0.713063,0.598442,-0.554866,0.0392552,-0.302959,0.694313}
,
{0.439733,0.173238,0.182597,0.0141521,0.335396,-0.458553}
,
{0.0409751,-0.0800986,0.0510889,0.163371,-0.0569716,0.141925}
,
{-0.130571,-0.0925792,0.157479,0.142576,0.34148,-0.0821529}
,
{-0.142024,-0.243869,-0.0358676,-0.0238548,-0.171434,0.0936764}
 };
  static const float bias2[1] = { 0.141759 };
  static const float weights2[][1] = { {0.207728}
,
{-0.20833}
,
{0.0855964}
,
{-0.274739}
,
{0.0755679}
,
{-0.238461}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_7(v, index);
}
static int assign_gen_lepton_prior_2_1_7() {
  global_gen_lepton_prior.at(2,1,7) = &specialized_gen_lepton_prior_2_1_7;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_7 = assign_gen_lepton_prior_2_1_7();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.102927,0.154156,-0.0106394,0.189452,-0.00192493,0.101419 };
  static const float weights1[][6] = { {-0.0526776,0.147969,0.1549,-0.194897,0.214036,0.104469}
,
{0.107098,0.398694,0.0527965,0.0664022,0.21737,-0.139417}
,
{0.0398823,0.324711,0.396805,0.17598,0.439018,-0.297845}
,
{-0.246597,0.185507,0.0382764,0.666063,0.619497,0.153344}
,
{-0.139734,0.333008,-0.397273,0.137424,0.178701,0.18369}
,
{0.128855,0.115238,0.313383,0.16225,-0.0569558,0.0589595}
,
{-0.134632,0.202728,0.0386435,0.224556,-0.0132099,0.25605}
,
{0.0425448,-0.0369697,-0.400478,0.122365,0.0238241,-0.0408329}
,
{-0.00695561,0.108118,0.293616,-0.299226,-0.103825,0.144729}
,
{-0.0585287,-0.193822,0.187456,0.0092485,-0.0562767,-0.095876}
,
{-0.0974141,-0.143527,-0.0340314,0.0418885,-0.0780534,0.0139968}
,
{0.0299025,-0.0970191,-0.218344,-0.14706,0.0284374,0.0548528}
,
{0.126734,-0.0275618,-0.231598,-0.122698,-0.138246,0.0656394}
,
{-0.186875,0.146022,0.153186,0.089896,0.0234518,0.0848315}
,
{0.0139655,-0.107041,0.132485,-0.118952,0.0443382,0.176891}
,
{0.186525,0.119262,0.013301,0.00237006,-0.0910003,-0.0201025}
,
{-0.0964361,-0.0270969,0.184526,0.0907505,-0.00303357,-0.0319777}
,
{-0.191965,0.163233,-0.0574611,0.32055,0.424586,-0.435754}
,
{-0.123102,-0.13735,0.118123,0.0996684,0.0611513,-0.00889825}
,
{0.14653,0.161268,-0.17357,-0.10954,-0.219739,0.117554}
,
{0.0689414,-0.0050605,-0.0510568,-0.0539497,-0.136051,0.0747078}
,
{-0.0718861,-0.156794,-0.172809,0.027481,0.082289,-0.00579448}
,
{-0.131049,-0.117701,-0.0824778,-0.0600094,0.203534,0.0106644}
,
{0.0957815,0.0998289,-0.0911053,-0.151068,-0.189407,0.0666794}
,
{0.125124,0.105737,-0.0934037,0.0173994,0.0460143,0.0415837}
,
{0.138797,0.00638452,-0.0543388,-0.196716,-0.0187523,0.0512166}
,
{0.044623,0.153144,-0.103072,0.0223131,-0.0989952,-0.00149712}
,
{0.164932,0.0392474,-0.00397448,0.0975246,0.150235,-0.0821629}
,
{-0.0260692,0.240651,0.0673724,0.182576,0.434449,0.218005}
,
{-0.102668,0.0898867,-0.123005,-0.00803298,0.117844,0.0234869}
,
{-0.0812946,-0.162004,-0.123247,0.0660859,-0.0871584,-0.00551599}
,
{-0.116558,-0.0295273,-0.210007,0.0548614,-0.143244,0.0599828}
,
{0.115522,-0.0194887,0.228337,-0.0281188,0.357805,0.131135}
,
{0.0569041,0.050614,0.126651,-0.124876,-0.0338611,0.0751655}
,
{0.454346,0.723207,-0.248721,-0.0842935,0.123589,0.111474}
,
{-0.064278,-0.179207,0.254444,-0.215486,-0.198848,0.0191736}
,
{-0.288023,-0.224334,-0.118048,-0.197914,-0.123694,-0.252318}
,
{-0.0436543,-0.00342037,0.106771,0.0501121,-0.259344,-0.0599514}
,
{0.107689,0.266389,-0.123041,-0.0303374,0.327392,0.0201738}
,
{0.0183077,-0.188139,0.127544,-0.313396,-0.120856,0.0214328}
,
{0.0731166,0.0787558,-0.24572,-0.0231386,0.0774431,0.0120646}
,
{0.0125892,0.105271,-0.295212,-0.266294,-0.173813,0.0429455}
,
{0.103173,0.23844,0.0245648,-0.0110462,0.037982,0.0517984}
,
{0.442381,0.757472,-0.160725,-0.162758,0.514036,0.0922826}
,
{0.0266583,-0.0182346,0.0949317,0.0712862,-0.340038,0.10175}
,
{0.0503932,0.0431517,0.187364,0.00193529,-0.138913,0.0471874}
,
{-0.0580617,0.217451,0.0452399,0.28978,-0.00871304,-0.347666}
,
{0.0463449,0.130447,0.277505,-0.0384239,0.185376,-0.0189778}
,
{0.0822089,0.113665,-0.0505855,-0.481915,0.235958,0.154492}
,
{-0.0201194,-0.12241,0.371869,-0.0676338,0.125021,0.121503}
,
{0.0735461,0.110477,0.0851977,-0.103465,0.0935792,0.0284334}
,
{-0.149566,-0.0531202,-0.707787,-0.133202,0.198045,-0.319074}
,
{0.00921359,-0.0255117,-0.126991,-0.0569873,-0.249747,0.0553161}
,
{0.00216722,0.153491,-0.445101,0.210234,0.137773,-0.130878}
,
{0.03099,-0.0947063,0.128235,-0.21246,0.0523639,-0.0176105}
,
{0.262681,-0.125098,0.0966608,-0.118504,-0.136009,-0.250673}
,
{-0.169883,0.14691,-0.0497272,0.340661,0.386228,0.196295}
,
{-0.0754278,0.041128,0.068627,-0.285902,-0.389022,0.0367979}
,
{-0.0808852,-0.237245,-0.0199639,0.00104395,-0.555661,-0.0779616}
,
{-0.245832,-0.0033778,-0.205262,0.123426,0.260423,0.0527815}
,
{-0.0955146,0.24606,-0.0231151,-0.00795151,-0.107442,0.0124316}
,
{-0.119249,0.516281,0.157019,-0.0265837,0.278803,0.205528}
,
{0.284373,-0.0858037,-0.0449467,0.206788,-0.158304,-0.274797}
,
{-0.0138658,-0.259578,-0.0319212,-0.142846,-0.528558,-0.405688}
,
{-0.36686,0.0670811,0.0648331,-0.0362179,0.245262,0.382282}
,
{0.137272,-0.0309969,0.221793,-0.123011,-0.497121,0.136359}
,
{0.344902,-0.613241,-0.00276704,-0.452153,-0.808748,-0.362365}
,
{-0.0481688,0.0399989,0.119513,0.182186,0.234538,0.0287274}
,
{0.107377,-0.228653,-0.0912722,-0.2664,-0.26419,-0.0411828}
,
{-0.349461,0.334456,0.067912,0.132388,0.158996,0.0641082}
,
{0.162796,0.0511701,0.134683,0.104441,0.255467,0.250906}
,
{-0.246821,0.333124,-0.0972766,0.16015,0.183985,0.36015}
,
{-0.406942,0.29194,0.0360859,0.113918,0.531122,0.0868094}
,
{-0.000297761,-0.0345978,-0.136645,-0.0575639,-0.439374,0.0948125}
,
{0.263806,-0.133462,-0.0465425,-0.385518,-0.606675,-0.204587}
,
{0.161982,-0.265008,0.109112,-0.269691,-0.767696,-0.0712867}
,
{0.0779508,0.0340142,-0.131949,0.0125902,-0.0475189,0.0274331}
,
{0.0346954,0.0268648,-0.0388246,0.0369366,0.0343527,0.183254}
,
{0.0238773,-0.154959,0.0770543,0.170807,-0.124011,-0.010816}
 };
  static const float bias2[1] = { 0.0842645 };
  static const float weights2[][1] = { {-0.213998}
,
{0.126071}
,
{-0.851733}
,
{0.149815}
,
{0.224133}
,
{0.12852}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_8(v, index);
}
static int assign_gen_lepton_prior_2_1_8() {
  global_gen_lepton_prior.at(2,1,8) = &specialized_gen_lepton_prior_2_1_8;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_8 = assign_gen_lepton_prior_2_1_8();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0876655,0.110458,-0.084434,0.00030926,-0.250125,-0.0962867 };
  static const float weights1[][6] = { {0.501502,0.0118471,0.0624598,0.0585357,0.0266379,-0.0793335}
,
{-0.102026,-0.137628,-0.11503,0.0128306,-0.595762,-0.249273}
,
{-0.0667618,-0.135019,0.10359,-0.494902,0.289031,0.0150764}
,
{0.00168488,-0.61118,-0.434085,0.53171,-0.257604,-0.366963}
,
{0.165853,0.176797,-0.0438745,0.0683488,-0.234597,-0.0129053}
,
{-0.118956,0.255157,0.0890606,0.299683,-0.201734,-0.0710076}
,
{0.0962581,0.292203,0.0337992,0.205156,-0.0808621,-0.119467}
,
{0.00674187,0.283203,-0.119481,-0.0795767,-0.178425,-0.510808}
,
{-0.0784757,-0.202974,-0.0415015,-0.104567,0.179552,-0.0711592}
,
{-0.078428,0.0159193,0.0254353,0.0732089,-0.0177446,-0.106258}
,
{0.019046,-0.188619,0.0183214,0.076693,0.0459708,-0.0433621}
,
{-0.0539922,0.14815,0.0666435,0.121372,0.0429373,-0.0498507}
,
{-0.0121652,0.0664824,-0.0321075,0.162487,-0.127508,-0.35737}
,
{-0.0200175,0.128152,-0.234863,-0.0345839,-0.478177,-0.145104}
,
{-0.21735,-0.0185762,0.192105,0.0594829,-0.0853621,-0.00101321}
,
{-0.026825,0.0699922,0.0689535,-0.150976,-0.037349,0.0706625}
,
{-0.0135731,0.0328554,-0.0604194,-0.0986244,0.048284,-0.0492653}
,
{-0.23078,-0.080596,-0.559777,0.40684,0.127589,-0.200004}
,
{0.196895,0.0693939,0.030448,-0.0510565,-0.260663,-0.1297}
,
{-0.115662,0.0887485,0.0600933,-0.108444,0.00564688,0.0947649}
,
{-0.0788353,0.0528895,0.0134576,-0.0236335,-0.143396,-0.0142221}
,
{0.050153,0.0284,0.0727112,0.011136,0.105493,-0.0603659}
,
{0.0690348,0.0273757,-0.21464,-0.0572395,0.121155,0.0302159}
,
{0.000401858,0.0974231,-0.00952133,0.095812,0.0819794,-0.0140384}
,
{-0.0940753,0.187817,-0.0865551,0.0413502,0.10609,-0.11493}
,
{0.0212443,0.0569712,0.0414947,-0.112738,0.138327,-0.0969532}
,
{-0.209863,0.195044,-0.213942,0.0196768,-0.0321408,-0.00762087}
,
{0.0587016,-0.0846014,-0.0869409,-0.00262369,-0.107287,-0.252866}
,
{0.17804,0.331135,-0.0934014,0.205265,0.122589,-0.111917}
,
{0.165447,-0.0113386,-0.0301555,-0.229957,0.128129,0.0355105}
,
{-0.159218,0.0212512,0.200826,0.182751,0.00691345,-0.0139721}
,
{-0.216624,-0.128026,0.139213,0.0119054,0.187115,0.0791975}
,
{0.237939,-0.317521,0.0405123,-0.310501,-0.109661,-0.299526}
,
{-0.0740324,-0.0156164,0.0621993,-0.0625705,0.0391139,-0.117628}
,
{-0.403805,-0.28372,-0.169967,-0.0641611,-0.379838,0.0632895}
,
{0.283648,-0.0931939,0.161856,-0.175289,-0.217085,0.00451509}
,
{0.712049,0.0946987,0.308112,-0.0115131,0.13468,0.334407}
,
{0.0540813,0.0392961,0.172895,-0.0799602,-0.14647,-0.00712822}
,
{-0.205142,0.111465,0.0117303,-0.134078,-0.432866,-0.250967}
,
{0.171935,0.0525158,0.088161,0.0311552,0.383779,-0.0844713}
,
{-0.0877804,-0.0187545,-0.0118701,-0.104132,0.00154877,0.0316442}
,
{-0.137759,-0.219329,-0.106973,-0.270058,-0.0286157,0.0992038}
,
{0.0091899,-0.0445356,-0.0147741,0.0811683,-0.0246978,0.0345887}
,
{-0.0540252,0.298565,0.114293,0.292324,-0.31065,0.0271774}
,
{-0.00584355,-0.0779318,-0.0882894,-0.0470431,-0.143743,0.0555841}
,
{0.0256259,0.0290314,-0.0269344,0.0778745,-0.151988,-0.292581}
,
{-0.128835,0.306745,-0.0687196,0.196702,-0.421583,-0.00884614}
,
{-0.0736962,0.0460582,-0.0469415,0.0332937,0.0414912,-0.036135}
,
{-0.126692,-0.012762,-0.104607,-0.0134328,-0.152211,0.625047}
,
{-0.0150471,-0.199208,-0.0319042,-0.154266,0.171118,-0.318636}
,
{0.0783184,-0.10849,0.067471,-0.0287366,0.0949729,0.121596}
,
{0.132002,-0.184317,0.191862,-0.0843851,-0.0770207,0.00761374}
,
{0.0244734,0.215665,0.0826024,0.144799,-0.0573885,0.0755148}
,
{0.155763,-0.00869031,-0.163829,0.258925,0.0425158,0.537352}
,
{-0.0492148,-0.971833,-0.0921569,0.258258,0.159283,-0.071848}
,
{0.0697351,-0.550794,0.127579,-0.216,0.28879,-0.0755664}
,
{0.0171666,-0.500885,-0.14531,0.209921,-0.209514,-0.110563}
,
{0.0592112,-0.310135,-0.102459,0.344984,0.0944098,-0.128687}
,
{0.23167,0.186903,-0.163287,-0.650789,0.0462259,0.0472198}
,
{-0.135964,-0.566932,0.0580989,0.532013,-0.0139854,0.0413317}
,
{-0.0799267,0.645116,-0.227125,-0.440032,0.0217346,0.00567023}
,
{0.065977,-0.278217,-0.0534012,-0.748717,0.27128,-0.0956463}
,
{0.120296,-0.400253,0.0141552,0.437691,-0.00817017,-0.0550094}
,
{-0.237746,0.121541,0.133872,-0.00681417,-0.00611934,0.176328}
,
{0.0355522,-0.496567,-0.0637079,-0.100335,0.129209,-0.160068}
,
{0.26048,0.502917,-0.0276789,-0.0516121,0.0825439,0.0464443}
,
{-0.0611414,-0.847934,0.0248611,-0.620476,0.149425,-0.126443}
,
{-0.102431,-0.251017,0.0878304,0.216297,-0.00329489,-0.0444931}
,
{0.102423,-0.69621,0.0567621,0.986803,0.00114473,0.120392}
,
{-0.147204,-0.875138,0.0436657,-0.692462,-0.170319,-0.0596537}
,
{-0.356725,0.299754,-0.0224871,0.335321,-0.0101492,0.0438254}
,
{0.406315,-0.560251,-0.00709655,-0.775593,-0.217415,0.0544707}
,
{-0.190544,0.155838,-0.0259471,0.200655,0.283955,-0.0281698}
,
{0.276353,0.810943,0.000618169,0.427762,0.172648,-0.122543}
,
{-0.12349,-0.267899,-0.10283,0.165884,0.0578191,0.0461935}
,
{-0.233547,0.58798,0.0995496,-0.645093,0.0568971,0.120884}
,
{0.0487777,-0.247754,0.153429,-0.0338622,-0.14311,-0.057844}
,
{-0.10339,0.335787,0.0902783,-0.44679,-0.0165389,0.14543}
,
{-0.0410246,-0.0366892,0.116738,0.176392,-0.146008,-0.0571631}
 };
  static const float bias2[1] = { 0.0921626 };
  static const float weights2[][1] = { {0.139119}
,
{0.0755533}
,
{-0.139247}
,
{-0.0979607}
,
{-1.28604}
,
{-1.3607}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_9(v, index);
}
static int assign_gen_lepton_prior_2_1_9() {
  global_gen_lepton_prior.at(2,1,9) = &specialized_gen_lepton_prior_2_1_9;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_9 = assign_gen_lepton_prior_2_1_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_10(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.151225,0.0931192,-0.0469942,0.0798068,-0.0794842,-0.00853959 };
  static const float weights1[][6] = { {-0.00281913,0.23356,0.0779061,-0.199412,0.133205,-0.0965623}
,
{-0.209401,0.0200294,0.0263982,-0.291819,-0.388098,-0.149891}
,
{0.106095,-0.223741,0.45337,-0.122123,-0.253404,-0.0246933}
,
{0.193816,0.0687043,0.174601,-0.584514,0.0106383,-0.0418979}
,
{0.264349,-0.0236169,-0.156744,0.321393,-0.150541,-0.0204175}
,
{0.260695,0.218639,-0.201108,0.0606596,-0.160391,-0.00418075}
,
{0.0749979,0.176225,-0.148501,0.131016,-0.198041,-0.0326624}
,
{-0.182146,0.081172,-0.0877793,-0.688777,0.267462,0.0463214}
,
{-0.0140732,0.372952,-0.396345,-0.609369,0.0663388,0.134613}
,
{0.179499,-0.150731,0.0384127,0.110896,0.0740081,0.00420724}
,
{0.168886,0.00588389,0.0626961,0.0679713,0.0148001,0.043154}
,
{0.0637956,0.157962,0.0915897,-0.204494,0.100608,0.109065}
,
{-0.0827421,-0.111478,-0.237191,0.193084,0.169719,-0.148987}
,
{0.0199023,0.163687,0.094782,-0.0201286,-0.320475,0.0453368}
,
{-0.0312256,-0.107158,-0.0638445,-0.067022,-0.082431,-0.141123}
,
{0.0243873,0.0778766,0.0707634,0.237386,-0.0714665,-0.0347067}
,
{0.282914,-0.27125,0.21365,0.000552157,-0.147921,-0.0529502}
,
{-0.0840414,-0.29989,-0.0350507,-0.24141,-0.167001,-0.029621}
,
{0.0195848,0.0365736,-0.0514464,-0.0302174,-0.066611,-0.0355655}
,
{0.0439394,0.183411,0.0845352,-0.0103587,0.24139,-0.0917238}
,
{-0.0016424,0.00418983,0.108618,-0.362468,-0.0755957,-0.0465039}
,
{-0.139667,0.062645,-0.226944,-0.107884,0.0614997,-0.00321438}
,
{0.0245974,0.0715759,0.127784,0.0363764,-0.0546314,0.00551921}
,
{-0.00724138,0.0670657,0.061417,0.081901,0.0381641,-0.134993}
,
{-0.228732,-0.25075,-0.0932595,-0.10661,-0.0271371,-0.0357849}
,
{-0.159296,0.0367558,-0.0154921,-0.0992766,-0.162,0.0489168}
,
{0.11901,0.344869,0.0631137,0.14715,-0.106032,0.0303027}
,
{-0.0385241,0.00971962,-0.0248408,-0.0471544,-0.0805203,-0.0737919}
,
{-0.139523,-0.345646,-0.157886,0.17639,0.184381,0.0214567}
,
{0.0634018,-0.0949319,-0.186023,0.0476361,-0.0183247,0.109852}
,
{-0.121919,0.0584481,0.234461,-0.0462525,0.0886104,-0.176601}
,
{0.0157777,-0.171165,0.0184793,-0.148372,-0.0151234,-0.0125196}
,
{-0.252891,-0.186122,-0.0172262,0.597976,-0.389559,0.1239}
,
{-0.0992688,-0.1846,-0.0807301,0.0350832,0.0123077,0.00272889}
,
{-0.124959,-0.472989,-0.435758,-0.0124763,0.0160506,0.0067959}
,
{0.155143,0.277761,0.139235,0.240933,0.123502,-0.0607539}
,
{-0.182828,0.427132,-0.275838,0.212047,0.0115329,0.107505}
,
{0.101205,-0.365659,-0.197002,-0.3585,-0.125624,0.070691}
,
{0.113407,0.125676,0.0177228,0.207379,0.354522,-0.233014}
,
{-0.18068,-0.26706,-0.396792,-0.0044966,-0.0836643,-0.0165252}
,
{-0.160283,0.250648,0.108561,-0.0647241,0.0376658,-0.181595}
,
{-0.253045,0.191391,0.146144,-0.277536,-0.242803,-0.133744}
,
{0.163582,0.0655827,-0.00215004,0.130446,0.139693,-0.0447174}
,
{-0.192244,-0.359539,-0.228224,-0.149625,-0.364502,0.0442096}
,
{-0.260901,0.0194452,-0.548311,0.393826,-0.011936,0.0460309}
,
{0.251283,-0.147793,-0.000785116,-0.212211,-0.00290835,0.17857}
,
{0.40212,0.190759,0.585374,0.0802132,0.123737,-0.131485}
,
{-0.207583,0.0419578,0.0412746,-0.0422179,-0.131001,0.0217044}
,
{0.221961,-0.121744,-0.217766,0.345289,0.155194,0.0428601}
,
{-0.101073,0.171766,0.0965238,-0.185129,0.120416,-0.120645}
,
{-0.222681,0.0908416,0.0342506,0.312756,-0.00697157,-0.119326}
,
{0.466697,-0.014089,0.0130917,-0.556878,0.614359,0.0039677}
,
{0.199655,-0.188143,-0.0941988,-0.170103,0.0275442,-0.0529589}
,
{0.337634,-0.338413,-0.138553,0.0519795,0.0818467,0.0244819}
,
{-0.0985663,0.0314155,-0.164641,0.133294,-0.0404283,-0.0160196}
,
{-0.0643537,-0.206245,-0.0792602,-0.011432,-0.0897675,0.0621372}
,
{0.100403,-0.141225,0.0852366,-0.118619,-0.0259108,-0.038973}
,
{-0.0855863,-0.152365,0.201887,0.146183,-0.158923,0.128117}
,
{0.0137831,0.10723,0.114549,0.186136,0.110463,0.122433}
,
{-0.155887,-0.927485,-0.0362715,0.0633505,-0.213129,-0.0798583}
,
{0.187538,0.308882,0.0772293,0.0358279,-0.0340739,-0.0911852}
,
{0.026884,-0.459161,-0.132567,-0.0433095,-0.00600331,-0.13613}
,
{0.0359783,-0.495777,0.116919,0.0181925,0.0991884,0.143173}
,
{-0.0621784,-0.233118,-0.115347,0.032698,-0.0368804,-0.0296186}
,
{-0.117233,-0.0808754,0.238955,-0.103795,0.142962,0.0892594}
,
{0.127012,-0.053536,-0.00974469,-0.0715935,0.0845238,-0.047691}
,
{-0.0463543,1.142,0.0291871,-0.189215,-0.203926,-0.0782738}
,
{0.139475,-1.3619,0.392913,-0.169235,0.00978123,-0.0354183}
,
{-0.0352117,-0.576249,-0.103365,0.0795571,0.128455,-0.037392}
,
{-0.187091,-1.32357,0.0807779,0.0294564,-0.0482381,0.0608341}
,
{-0.00681283,-0.820709,-0.160744,0.07061,-0.0641374,-0.0731657}
,
{-0.142049,-0.309789,0.0638951,0.00868301,-0.198627,-0.0297386}
,
{0.0860424,0.920576,0.0920639,-0.0891597,0.0766941,-0.0399792}
,
{-0.198226,1.42151,-0.100124,-0.168239,7.9802e-05,0.233135}
,
{-0.0528996,0.067794,-0.146613,0.089411,-0.175147,-0.21885}
,
{0.064685,-0.116546,-0.0171595,-0.0734189,0.0737551,-0.0935111}
,
{0.0053882,0.143577,-0.163996,0.184139,0.0203862,0.0185602}
,
{-0.0109533,0.15583,-0.0742937,-0.0714566,0.0766733,-0.0105235}
,
{-0.222493,0.091957,0.155884,0.0154269,0.0266314,-0.0561986}
 };
  static const float bias2[1] = { 0.0375284 };
  static const float weights2[][1] = { {0.128135}
,
{0.107049}
,
{-0.0874184}
,
{-2.53589}
,
{-0.122742}
,
{0.143019}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_10(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_10(v, index);
}
static int assign_gen_lepton_prior_2_1_10() {
  global_gen_lepton_prior.at(2,1,10) = &specialized_gen_lepton_prior_2_1_10;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_10 = assign_gen_lepton_prior_2_1_10();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_11(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0718371,0.185919,-0.0527361,-0.0981912,0.0608306,-0.0338273 };
  static const float weights1[][6] = { {0.0998642,0.173576,-0.0989538,0.0704365,-0.156478,0.00858469}
,
{-0.200231,-0.010546,0.209016,-0.310668,-0.172449,-0.399809}
,
{-0.164165,0.25061,0.400054,0.91986,0.0747572,0.103954}
,
{-0.0294953,0.602407,0.169239,-0.0747535,-0.639541,0.198921}
,
{0.000882539,0.0560984,0.0937367,-0.0846595,0.145974,-0.115334}
,
{0.0254792,0.0645891,0.0215284,-0.229466,0.229845,-0.0342722}
,
{0.122279,-0.0428644,-0.178377,-0.0228981,0.0875914,-0.114465}
,
{-0.271094,-0.00355653,-0.126617,-0.24784,-0.274124,-0.0984945}
,
{0.267196,0.229299,0.152426,-0.22214,0.136909,-0.389912}
,
{0.154109,0.00380625,-0.191347,-0.0784806,0.0703543,-0.116829}
,
{-0.175152,-0.0560825,0.0822361,-0.16256,-0.0911382,0.140813}
,
{-0.188686,0.0931619,-0.133199,0.0396055,-0.0489285,-0.214579}
,
{-0.0719395,0.182631,-0.163802,0.0391072,-0.0421029,0.124706}
,
{0.152318,-0.0317936,0.181267,-0.055518,-0.11915,0.183629}
,
{0.13456,-0.00135583,0.0785308,0.105273,0.0730237,0.181324}
,
{-0.151507,0.0386843,-0.0128419,0.0355743,0.19524,0.117768}
,
{0.113961,-0.0199641,0.0360343,0.191566,-0.0562324,0.145087}
,
{-0.0254555,-0.0269875,0.0131587,-0.186769,-0.0586149,0.225079}
,
{-0.100446,0.0796077,0.0451729,-0.168757,0.209599,0.0508392}
,
{0.132295,0.0392369,-0.394439,0.0301906,-0.0328983,-0.0291759}
,
{0.0176891,-0.166278,0.125794,-0.127305,0.0624695,-0.10897}
,
{-0.0703048,0.0600145,-0.102451,-0.0999028,-0.0246926,-0.0291846}
,
{0.0182056,0.194055,-0.222274,-0.102153,-0.0883922,-0.15662}
,
{-0.0761964,-0.0425359,-0.07268,0.0791787,0.026771,-0.00343394}
,
{-0.0344315,-0.0951055,0.0632216,-0.235175,-0.139756,-0.0408188}
,
{-0.128181,-0.102921,0.0198052,0.114619,0.173204,-0.107728}
,
{-0.0917508,-0.148845,0.0818786,0.0966332,-0.122123,-0.148166}
,
{-0.128902,-0.0395088,0.00315803,0.127848,-0.121132,-0.0478417}
,
{-0.165241,-0.00787621,-0.176838,-0.139576,-0.00542534,0.017111}
,
{-0.226812,-0.116319,-0.0700697,-0.00396335,0.062146,-0.0430684}
,
{-0.0627724,-0.277998,-0.124249,0.216729,0.195496,0.10693}
,
{0.0537608,-0.230494,0.0806966,0.0142575,-0.178315,0.0282995}
,
{-0.360104,0.216273,0.196438,0.0207684,0.0645971,-0.0272763}
,
{-0.00170992,-0.0584364,0.000553785,-0.18729,0.0919649,-0.0128176}
,
{-0.0537902,-0.0850371,0.244295,0.0827959,0.0613305,-0.482608}
,
{0.067174,0.00742108,-0.116808,0.0193648,-0.0899688,0.306259}
,
{0.143562,-0.236317,-0.354622,-0.750536,0.0287406,0.891099}
,
{-0.130635,-0.00885651,0.357586,-0.0830951,0.0285993,0.0677043}
,
{-0.399124,-0.22132,0.142145,-0.289575,0.207311,-0.452986}
,
{-0.0371627,0.0983313,-0.47565,0.556403,0.0586849,0.11693}
,
{0.024383,-0.0906981,-0.183579,-0.198871,0.09042,0.196372}
,
{0.221577,-0.205931,0.0757179,-0.199351,0.0374222,0.159952}
,
{0.083257,-0.06466,-0.522203,0.0770326,0.048088,0.13459}
,
{-0.346696,0.241888,0.146829,0.198976,-0.270472,0.0778187}
,
{-0.182798,0.215323,0.0418105,0.568683,-0.0780673,0.214565}
,
{0.0287847,-0.0586772,-0.0514043,0.0673952,-0.0254028,-0.173649}
,
{0.381734,0.0607426,0.889165,-0.1092,-0.0767838,-0.173002}
,
{-0.0578802,0.117802,-0.415932,0.00104332,-0.0645266,-0.0993885}
,
{0.036058,-0.0162778,-0.173846,-0.0157544,0.0302729,0.0381077}
,
{0.0102383,-0.189236,-0.481532,-0.109755,0.0666844,-0.0964014}
,
{-0.0290335,0.0442494,0.0589166,-0.220746,0.0236878,0.0449203}
,
{0.188259,0.293585,-0.973599,-0.497553,-0.0702105,-0.201254}
,
{-0.372979,0.0720745,-0.166627,-0.14524,-0.00213802,-0.0415903}
,
{-0.124855,0.158191,-0.494313,-0.251257,0.0178499,0.487956}
,
{-0.0706037,0.0735571,0.0466292,-0.00766552,0.0588333,-0.00218498}
,
{0.0882163,-0.186797,-0.106949,0.0703538,-0.348693,-0.0283609}
,
{0.0255521,-0.0432703,0.208202,-0.0922771,0.0395223,-0.0780487}
,
{0.0870694,-0.0301524,0.0813852,-0.236635,0.0246386,0.157943}
,
{-0.158674,0.0334772,-0.0479113,-0.288937,0.151601,0.187927}
,
{0.0849077,0.149129,-0.233621,0.00193068,-0.142939,0.21565}
,
{-0.161977,0.142549,0.208389,0.0112581,0.0140714,-0.0769279}
,
{-0.124319,-0.132762,-0.0273446,0.0747479,-0.141673,0.102671}
,
{0.00730367,-0.105136,-0.173102,-0.0486506,-0.0619375,-0.157457}
,
{0.00494632,-0.116784,0.148881,0.133589,0.0160878,-0.163252}
,
{0.223178,-0.0769514,-0.116515,0.108937,0.14408,0.172529}
,
{0.108389,0.0272037,-0.198017,-0.136678,0.048374,0.118677}
,
{0.00500759,-0.1149,-0.380133,0.020825,-0.0760734,0.195377}
,
{0.00621205,0.00631429,0.189462,0.0318622,-0.102889,0.152477}
,
{0.0398899,-0.128005,-0.388873,0.0448015,-0.147568,0.0975661}
,
{-0.0103897,0.129888,0.225737,-0.291243,0.0654188,0.0902465}
,
{-0.0873112,-0.24976,0.0978975,-0.197673,0.0946947,0.0465256}
,
{0.0658626,-0.112644,-0.000691334,-0.0754518,0.0528133,0.117794}
,
{0.0244939,-0.175528,-0.0307111,0.208149,-0.0767933,0.00331791}
,
{-0.0249816,-0.0489302,-0.0725586,0.0961544,0.108586,-0.00247239}
,
{0.0387028,0.0850207,0.066712,-0.0221288,0.193598,-0.0851039}
,
{-0.0485914,0.0406294,0.268649,-0.0868219,0.307326,-0.0896094}
,
{-0.135082,0.0213248,-0.100518,-0.0532973,-0.0978388,-0.135686}
,
{-0.0433042,0.00206759,-0.195524,0.00150984,-0.180844,-0.0158557}
,
{0.0726055,-0.187125,0.200977,0.136599,-0.0633034,0.0161554}
 };
  static const float bias2[1] = { -0.0118206 };
  static const float weights2[][1] = { {0.224577}
,
{0.122687}
,
{1.73959}
,
{2.08526}
,
{0.185884}
,
{-0.172998}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_11(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_11(v, index);
}
static int assign_gen_lepton_prior_2_1_11() {
  global_gen_lepton_prior.at(2,1,11) = &specialized_gen_lepton_prior_2_1_11;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_11 = assign_gen_lepton_prior_2_1_11();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_15(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0197409,-0.0465057,0.0194685,0.0,-0.00371958,-0.00825256 };
  static const float weights1[][6] = { {-0.0956044,0.195078,-0.44306,-0.0364047,0.113619,0.135974}
,
{-0.0178664,-0.0447255,-0.11503,-0.010313,-0.296093,0.154274}
,
{0.044449,-0.0114295,0.0260747,0.0738346,-0.0726782,0.151312}
,
{-0.611786,-0.023487,-0.0295546,0.0375569,0.182647,-0.0676193}
,
{-0.0607377,-0.162497,0.00629828,-0.0570846,0.107284,0.0373113}
,
{-0.00394928,-0.0472919,0.0626079,0.151039,-0.153618,0.21982}
,
{0.00999098,-0.101453,0.0222811,-0.0759474,-0.0995115,-0.0737021}
,
{-0.364204,-0.215676,-0.10639,0.033019,0.146879,0.111203}
,
{-0.209629,0.0328072,-0.537119,0.0778282,0.260884,-0.164036}
,
{-0.176268,0.0112424,0.227179,0.0887538,-0.0916921,0.00281493}
,
{-0.101164,0.00334622,-0.0632237,-0.101375,0.154785,-0.0392123}
,
{-0.135552,0.252791,0.0687041,-0.0045403,0.0980213,-0.157845}
,
{-0.402427,0.0990144,-0.120566,0.0422574,0.192797,-0.0134194}
,
{-0.00194873,-0.246085,0.0648475,0.132194,0.00641563,-0.0754631}
,
{-0.00165036,-0.0234522,0.107646,0.0172873,0.0225461,-0.0352014}
,
{-0.178692,-0.126415,-0.0743557,-0.143019,0.087135,0.135867}
,
{-0.00881506,0.241222,0.177982,-0.00854364,0.0913037,-0.0698254}
,
{-0.191635,-0.16276,-0.0550455,-0.152056,-0.0946729,0.0379554}
,
{0.177494,0.0111145,-0.0540993,0.0745831,0.102961,0.0705095}
,
{0.0609642,0.117503,0.182073,-0.190434,-0.0607578,0.0164314}
,
{0.0395357,-0.000566844,-0.010708,-0.102095,-0.0566132,-0.190013}
,
{0.0411111,0.0280923,-0.123116,-0.00342422,-0.0142098,0.0106826}
,
{-0.0151559,-0.196345,-0.0290886,-0.125361,-0.00425752,-0.116358}
,
{0.118126,0.041122,-0.0245817,0.044852,-0.0192121,-0.153582}
,
{-0.117411,-0.0261833,0.256346,-0.195263,-0.0752898,-0.0850965}
,
{0.106789,0.0265618,-0.0196231,0.00208065,-0.178174,-0.0497913}
,
{-0.119818,-0.00148261,-0.0721741,0.034289,-0.0417526,0.103369}
,
{-0.0754769,-0.0913247,0.304912,-0.108987,0.121178,-0.227696}
,
{-0.0275753,0.395717,-0.71846,-0.00912214,0.226209,-0.0573128}
,
{0.0852173,0.128832,0.138703,-0.210299,0.0377746,0.140165}
,
{0.120335,-0.0615463,-0.197283,-0.00313063,-0.015552,0.0344107}
,
{-0.0767034,0.104703,0.0354691,0.0555345,0.0437366,0.128289}
,
{0.0126077,-0.0613136,-0.115885,0.0570255,-0.174687,0.0829118}
,
{0.0198917,-0.0250643,-0.0391633,0.0628919,-0.102018,-0.0341087}
,
{0.0112192,0.141149,0.340564,-0.178449,-0.0479129,0.00131255}
,
{-0.21593,-0.121838,0.184777,0.0552601,0.42088,0.0385099}
,
{-0.0634304,-0.195817,-0.0383615,0.0638892,-0.149747,0.124683}
,
{-0.021739,-0.123653,0.0606624,-0.0195591,0.323791,-0.060043}
,
{-0.0449806,0.0210946,-0.0451059,-0.0440805,0.397509,0.114131}
,
{-0.00526844,-0.179657,-0.153884,0.0750689,0.241428,0.129544}
,
{0.0460689,-0.0505115,-0.244748,-0.168837,-0.32393,0.0294108}
,
{0.0570066,-0.0726838,-0.0900307,0.0182499,0.118081,-0.133145}
,
{2.30653e-05,0.0702909,-0.04181,0.049951,-0.367764,-0.0707709}
,
{-0.0824715,-0.0107224,0.241474,-0.0942102,0.186857,0.181747}
,
{0.309652,0.0776073,-0.244364,0.169345,-0.132536,0.0303646}
,
{0.0773221,0.0586898,-0.0885896,-0.12951,-0.142426,-0.0105899}
,
{0.0618986,-0.0555817,-0.196993,0.149522,-0.429775,-0.00204547}
,
{0.044624,-0.0429198,-0.227434,0.0317084,-0.225917,-0.127275}
,
{-0.155398,-0.201594,0.17052,0.201008,0.617608,0.0705328}
,
{0.247531,0.00330774,0.0144341,0.0734921,0.377039,0.146248}
,
{0.119775,-0.0384475,-0.0425524,-0.0961149,0.181852,-0.0498298}
,
{0.0195762,-0.0646742,0.336698,-0.027531,-0.0258925,0.200255}
,
{0.0572015,-0.157748,-0.105727,-0.0141017,0.117212,-0.00281407}
,
{-0.191109,0.296401,0.289346,-0.010936,-0.376794,0.157319}
,
{0.0190437,0.0474428,-0.0562009,0.0581993,0.0461962,-0.153708}
,
{-0.156252,-0.0206804,-0.191121,0.0974237,0.0504254,0.0687497}
,
{0.0325898,-0.108372,0.210924,-0.0809623,0.0291374,0.122673}
,
{0.151664,0.119471,0.159352,0.0765335,-0.107911,-0.0919155}
,
{0.199697,-0.0433496,-0.174314,-0.0533134,-0.202064,0.0101602}
,
{0.0599712,0.171323,-0.351805,0.181621,0.23874,-0.206657}
,
{0.125868,0.0135947,-0.128628,-0.123403,-0.00934737,0.025833}
,
{-0.0218465,0.0111048,0.291874,-0.0400912,0.133199,-0.155377}
,
{-0.0639944,0.0517719,0.301998,-0.146162,0.038767,-0.13825}
,
{0.0389022,0.00498908,0.0291288,0.0941229,0.0445812,0.0377597}
,
{0.144703,0.0749164,0.223947,-0.0488255,-0.257719,0.0542415}
,
{-0.0572602,-0.282134,0.326534,0.123495,0.0383219,-0.0391131}
,
{0.0332541,0.110795,-0.0563565,0.0613639,-0.0741877,-0.000361362}
,
{0.0324848,-0.136806,0.101075,-0.0206513,-0.291525,-0.018441}
,
{0.0191919,-0.112547,-0.0899739,-0.171268,0.0791124,-0.0309325}
,
{0.0930703,-0.0166631,0.173515,0.148033,0.141909,-0.0678392}
,
{-0.131233,-0.223624,-0.257274,0.118143,0.0435549,0.00770376}
,
{-0.00509046,-0.192453,0.182164,-0.0176377,0.171133,-0.165954}
,
{-0.236931,0.11774,-0.0252373,0.127149,-0.0889564,-0.11785}
,
{0.0889282,-0.197452,0.167362,-0.0726607,-0.177248,0.0304306}
,
{-0.148481,-0.00552886,-0.241549,0.00835097,-0.0569328,-0.0764657}
,
{0.196745,0.0833356,0.118836,-0.0391236,0.155746,-0.228972}
,
{0.0608343,-0.74603,1.22426,-0.0425932,0.13209,0.231744}
,
{-0.14281,-0.648467,1.05412,0.0885153,0.147419,0.10164}
,
{-0.0400988,0.00824892,0.0481494,0.187828,0.161163,0.0316018}
 };
  static const float bias2[1] = { -0.0351789 };
  static const float weights2[][1] = { {-0.0802203}
,
{0.123379}
,
{-0.0740482}
,
{-0.106966}
,
{0.289481}
,
{0.0512568}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_15(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_15(v, index);
}
static int assign_gen_lepton_prior_1_0_15() {
  global_gen_lepton_prior.at(1,0,15) = &specialized_gen_lepton_prior_1_0_15;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_15 = assign_gen_lepton_prior_1_0_15();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_12(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.182524,-0.0280465,-0.00137866,-0.0313531,-0.174383,0.0 };
  static const float weights1[][6] = { {0.0100127,0.117869,0.116193,0.0230182,-0.0861937,0.0778619}
,
{0.0164081,0.133901,0.00934731,-0.0746681,-0.735268,-0.00903653}
,
{0.102255,0.0234941,-0.0342639,-0.108069,-0.137788,-0.101417}
,
{-0.0997931,-0.0977903,0.848741,0.0933585,-0.661919,-0.0158765}
,
{0.457965,0.00378962,-0.0905233,0.158356,-0.0954197,0.0897436}
,
{0.32013,0.103249,-0.168066,0.0123693,3.81916e-05,-0.0909459}
,
{0.262374,-0.112181,0.0634575,0.00606951,-0.138907,-0.119806}
,
{0.141414,-0.0982738,-0.0980112,-0.0447996,0.276201,0.101759}
,
{-0.128946,-0.237041,-0.148179,-0.131392,0.182334,-0.234357}
,
{-0.0735854,-0.0389421,0.0410092,-0.0327187,0.111433,-0.00210615}
,
{0.00938817,0.214999,-0.207102,-0.080562,0.0758632,0.19382}
,
{0.0384678,-0.129304,-0.0840631,-0.0819269,-0.23284,-0.0610076}
,
{-0.00769447,0.0875449,-0.153871,-0.0114622,0.0465474,0.0696304}
,
{0.0318193,-0.0407996,0.230899,-0.262314,0.0476196,-0.0373948}
,
{-0.0563722,0.0657756,-0.133289,0.188744,-0.239505,-0.0983882}
,
{-0.0463358,0.042797,0.0527489,0.0261696,0.012792,-0.172655}
,
{-0.169321,0.0821065,-0.0994942,-0.0248404,-0.177085,-0.0304623}
,
{0.0835646,0.483783,0.418295,-0.0323925,-0.324682,-0.245639}
,
{0.153796,0.0292211,0.0438798,-0.0339908,-0.155676,-0.0675982}
,
{-0.0464625,-0.0037439,-0.0810124,-0.155555,0.105105,-0.0137699}
,
{0.00324975,-0.0301283,-0.0306363,0.0949063,0.0943177,-0.105414}
,
{0.0292469,-0.0990527,0.0894483,-0.0634522,0.0589478,-0.0561327}
,
{-0.0813268,-0.107286,-0.162742,-0.128821,0.0157943,0.033437}
,
{-0.0299628,-0.0309493,-0.0230398,0.0294345,-0.159795,-0.192298}
,
{0.188156,0.0133557,0.068429,-0.152572,-0.146619,-0.0900877}
,
{0.267812,-0.101052,-0.0163883,-0.0407188,-0.0246676,-0.0903039}
,
{0.176125,0.189841,0.0695853,-0.0331785,0.0259835,0.0182811}
,
{0.22748,-0.137746,-0.156791,-0.0463106,-0.131239,0.119741}
,
{0.20574,-0.015785,-0.127303,0.0781785,-0.094225,-0.0627432}
,
{-0.0348797,0.0112434,-0.051559,0.112962,-0.0324985,0.0228886}
,
{-0.041178,-0.0140686,-0.0314615,0.133766,-0.46866,0.221396}
,
{0.106221,-0.0575298,0.132694,-0.101824,-0.0432781,-0.010823}
,
{-0.0115984,0.228688,-0.354049,0.114514,0.134517,0.0611427}
,
{0.0292255,0.0807843,-0.0635325,0.0239696,0.0495498,0.145363}
,
{-0.0928698,0.0875831,0.26453,-0.0180762,-0.0239911,-0.0031241}
,
{-0.0595111,-0.0103902,-0.287367,-0.079798,0.114457,0.140014}
,
{0.131794,0.0793822,-0.373962,-0.0468578,-0.0473035,0.00855062}
,
{-0.0577693,-0.0163907,-0.0141865,-0.0710999,-0.193693,-0.0717703}
,
{0.154136,0.214247,0.0450052,-0.1286,0.0538572,0.00753193}
,
{-0.208916,0.174286,-0.247905,-0.10442,0.0457253,-0.176231}
,
{0.10222,0.006573,0.134086,0.0595109,-0.235334,-0.0914654}
,
{-0.127403,-0.292211,-0.36827,-0.0110778,-0.0241018,-0.183007}
,
{0.0723573,-0.180615,-0.00189908,-0.217453,-0.0328114,-0.0271169}
,
{0.0287783,-0.0190471,-0.245574,0.234365,0.0774051,-0.111019}
,
{0.0804948,-0.14679,0.24055,-0.168213,0.0383686,-0.0221147}
,
{0.00272867,0.090968,-0.012928,-0.00553048,-0.24817,0.0509024}
,
{0.034001,0.056284,0.187375,0.0069868,0.032182,-0.150724}
,
{-0.0722651,-0.0869301,-0.109192,0.0920471,0.337717,-0.156272}
,
{-0.0490428,0.365774,-0.14877,-0.112771,0.48773,-0.148588}
,
{0.0356821,-0.0339642,0.0372787,0.166844,-0.219753,-0.143422}
,
{-0.0263554,0.103173,-0.0909795,-0.0991847,-0.0595197,-0.03391}
,
{-0.0182974,0.0541939,-0.00976461,0.108557,-0.253936,-0.0136386}
,
{0.0422718,0.0958228,0.092618,0.0318203,0.466406,-0.0715185}
,
{-0.1154,0.163196,-0.305492,0.181844,-0.252564,0.0581736}
,
{0.171199,-0.0240994,-0.0719336,-0.0128598,-0.0299642,-0.0186815}
,
{-0.00382439,-0.0258781,0.190824,-0.0296433,0.0194293,-0.0893046}
,
{-0.0362625,0.105688,-0.0683254,0.108042,-0.051387,0.0368197}
,
{-0.0528152,0.0911364,0.0101724,0.220243,0.0126766,-0.0514123}
,
{-0.123532,-0.0451277,-0.155989,-0.0293652,-0.162964,0.214728}
,
{-0.220152,0.179631,0.0266186,0.0482931,0.0881278,-0.120644}
,
{-0.199993,-0.0452042,-0.0988626,-0.0438975,0.0900077,0.118361}
,
{-0.0684363,-0.042136,0.00386286,-0.0227669,0.0746085,-0.00705567}
,
{0.024888,-0.195365,0.0468468,0.156248,0.0607171,-0.0197977}
,
{-0.180913,-0.0239007,-0.0102722,-0.0560388,0.109479,-0.0361812}
,
{-0.268331,-0.126155,0.0820427,0.197713,-0.00146552,-0.0601837}
,
{0.0313887,0.162039,0.12655,0.0298895,-0.0196282,-0.192832}
,
{0.130839,0.204711,-0.129827,0.114435,-0.0345279,0.0410044}
,
{-0.0927665,0.0528349,0.0500243,0.194556,0.1222,-0.185181}
,
{0.0103735,0.0695127,0.0709825,-0.0188504,0.0098601,0.0578374}
,
{-0.0320369,-0.0176,0.16112,-0.124095,0.0210654,-0.04299}
,
{0.0997308,-0.0018689,-0.177633,0.0137625,0.00167234,-0.0135106}
,
{0.0399202,0.107093,-0.122333,0.14468,-0.0378594,0.0757409}
,
{0.172979,-0.00713693,0.172693,0.0347786,0.000639293,0.0819172}
,
{0.052655,-0.063592,-0.0404972,-0.102545,-0.0361882,-0.154102}
,
{-0.122811,0.189398,-0.123371,0.182734,0.0169117,0.0125992}
,
{0.11634,0.142255,0.0462638,0.0131395,-0.00791289,-0.181429}
,
{0.0123065,0.0380793,-0.0474405,0.000956833,0.00644199,0.0984885}
,
{0.0847435,0.089187,0.0424608,-0.00222008,-0.154502,-0.191565}
,
{-0.0554911,-0.138954,-0.0645466,0.100019,-0.162444,-0.074565}
 };
  static const float bias2[1] = { 0.180706 };
  static const float weights2[][1] = { {0.184522}
,
{-0.322062}
,
{-0.144496}
,
{-0.234493}
,
{-0.777901}
,
{-0.13528}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_12(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_12(v, index);
}
static int assign_gen_lepton_prior_2_1_12() {
  global_gen_lepton_prior.at(2,1,12) = &specialized_gen_lepton_prior_2_1_12;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_12 = assign_gen_lepton_prior_2_1_12();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_13(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0177854,0.00353017,0.023697,-0.0773231,0.0147011,-0.0197379 };
  static const float weights1[][6] = { {0.15637,-0.15972,-0.262255,-0.115331,-0.0884163,0.130306}
,
{0.0430631,-0.0471009,-0.257186,0.167665,0.172432,0.067336}
,
{0.0283613,-0.0574003,0.0173786,0.333483,-0.0241922,-0.022752}
,
{0.10667,-0.0462853,0.191034,0.373987,-0.281937,0.164899}
,
{0.0550121,-0.0723466,0.167646,-0.125408,-0.0214937,-0.145527}
,
{0.125602,-0.0417447,-0.0613749,0.0713694,0.0405761,0.00865624}
,
{-0.174802,0.0631709,-0.079895,0.0537996,0.0911205,0.109762}
,
{-0.213657,0.0727613,-0.254296,-0.128677,-0.00900583,0.248681}
,
{0.0885817,-0.219276,-0.0583659,-0.326797,0.133107,-0.106457}
,
{0.018096,0.0253119,0.0921277,0.108939,0.0877392,0.126597}
,
{0.145749,-0.0796128,-0.137007,0.0753871,0.151018,-0.118406}
,
{-0.222797,-0.0130883,-0.0751057,0.0787965,-0.0235167,-0.0282984}
,
{-0.156602,-0.0652653,0.0386043,0.11457,-0.0277256,0.0922671}
,
{0.0936759,-0.0542522,0.275047,0.103501,-0.0773166,0.062749}
,
{0.08594,-0.0278437,-0.0632529,0.0509566,-0.0595116,0.00350462}
,
{0.0831771,0.0964,0.00398858,0.0352824,-0.134709,0.114783}
,
{-0.102793,0.155388,0.0449139,-0.253001,0.145683,0.115893}
,
{-0.00424163,-0.189926,0.14455,-0.44799,0.0505294,0.0129281}
,
{-0.0588896,0.164896,-0.162071,0.0428603,-0.00514126,0.133441}
,
{-0.0363839,-0.0919803,0.0851535,-0.0329005,-0.0326509,0.0302908}
,
{-0.177509,-0.0120702,-0.104714,-0.0719121,0.116423,0.0415659}
,
{-0.0481812,-0.000542264,0.0304334,-0.178096,0.0172732,0.0562518}
,
{0.0806292,-0.10671,0.14803,-0.00903987,-0.111525,0.0662198}
,
{0.0579914,-0.104296,0.0641528,-0.0482701,0.0963778,0.141799}
,
{0.255152,-0.0034951,0.027228,0.0785301,-0.131454,0.197783}
,
{0.162227,-0.0556429,0.16049,0.00257377,0.0588084,0.145407}
,
{-0.0979368,-0.0882713,0.051258,-0.143784,-0.180799,0.135657}
,
{0.139849,0.183212,-0.131579,-0.143954,-0.0784331,0.0487949}
,
{0.0626142,-0.00530328,0.0334262,-0.13765,0.0717629,0.0973005}
,
{0.0257976,0.192489,-0.0687441,0.097111,-0.00757953,-0.0223239}
,
{0.0384635,0.306732,0.104645,0.177539,-0.149365,0.0121605}
,
{0.0960279,-0.071624,0.101043,-0.121761,0.0801471,0.0672737}
,
{-0.00638023,-0.0867838,-0.172041,-0.708821,0.0650462,-0.0416987}
,
{0.101781,0.162648,0.0303836,-0.109689,-0.213814,-0.096385}
,
{-0.168777,0.00541409,0.108108,-0.421608,-0.108826,0.134234}
,
{-0.128486,0.111268,0.0902303,0.0408259,0.240648,0.100458}
,
{-0.00902777,0.0706113,0.369826,0.18526,0.0101563,0.0180999}
,
{0.0796098,0.0424065,-0.0150095,-0.60412,0.00197673,-0.100902}
,
{0.0203537,-0.0668451,-0.300996,-0.042411,0.0480331,-0.120359}
,
{-0.113112,-0.0398501,-0.0429717,0.10608,-0.230195,0.0625344}
,
{-0.000391107,-0.123952,0.287976,-0.0381316,-0.250292,-0.031353}
,
{-0.118314,0.485456,-0.079713,-1.66738,0.230413,0.0259459}
,
{-0.142872,-0.389526,0.147658,0.496738,-0.00837895,-0.0285735}
,
{-0.172451,-0.598723,0.0631683,0.614124,0.135508,-0.0535471}
,
{-0.0984263,-0.171331,-0.103328,-0.155443,0.153984,0.118796}
,
{-0.155312,0.0457293,-0.240364,0.0829014,-0.00342974,-0.241771}
,
{-0.183004,-0.0311389,-0.221248,0.919005,0.0395598,-0.193596}
,
{0.0485939,-0.109705,0.0157811,-0.00126284,0.0612784,0.0582078}
,
{0.00204755,0.104724,-0.699491,0.136062,0.197501,-0.181933}
,
{0.164003,-0.00246625,-0.1623,-0.028987,0.144337,-0.0513153}
,
{-0.00378031,0.0394831,0.0335363,0.15253,-0.125824,-0.13611}
,
{0.032149,0.0845852,0.527744,0.136251,-0.0734375,0.235173}
,
{0.190221,-0.0620971,-0.0484536,-0.149982,-0.0111059,-0.0745403}
,
{-0.038257,0.150354,-0.00227887,0.277649,-0.00141261,0.0926144}
,
{0.070512,-0.156414,0.113498,-0.00960522,-0.0228664,-0.149812}
,
{-0.206711,0.131676,0.0351317,-0.0489308,-0.047435,0.190516}
,
{-0.0710208,0.169778,0.112032,-0.0698594,-0.179941,-0.000373853}
,
{0.126633,0.127603,-0.0751235,-0.0826304,0.00109369,-0.0299046}
,
{0.00822922,-0.177395,-0.0682487,0.112882,-0.0115065,-0.0166742}
,
{0.122949,-0.00826451,-0.00616097,-0.050706,0.0866113,0.0754547}
,
{-0.00571441,-0.0829618,0.152263,-0.0711339,0.0493205,-0.158011}
,
{0.167272,-0.0732043,0.0353351,-0.143186,0.0573878,-0.225995}
,
{-0.068478,0.0326951,-0.100299,-0.0477406,0.15547,-0.0568249}
,
{0.0658188,0.14805,-0.155474,0.145989,-0.0612904,-0.0647362}
,
{0.0136147,0.108405,0.140438,0.0242603,-0.121797,0.14902}
,
{-0.0157352,-0.00276199,-0.12258,-0.0299951,-0.0559015,-0.0337819}
,
{-0.00300198,-0.0467237,0.0648161,-0.167066,-0.0663664,-0.106922}
,
{-0.111168,0.0924275,0.0653267,0.17689,0.139147,0.188864}
,
{-0.0524642,-0.0878793,0.0764137,-0.0364105,0.0635942,-0.140766}
,
{0.0296705,-0.0268191,-0.0815956,0.155523,-0.0418008,-0.189586}
,
{-0.091947,-0.135995,-0.0610502,-0.0133961,-0.0458616,-0.0176585}
,
{0.0261221,0.0224531,0.0951513,-0.0355502,0.118812,0.0601276}
,
{-0.0951371,-0.0268467,0.113143,0.0144123,-0.0849942,-0.19001}
,
{-0.0984736,-0.175796,0.285665,0.120194,-0.0495498,-0.0349755}
,
{-0.0163357,-0.0923483,-0.0109802,0.0074819,-0.0490437,0.0140151}
,
{-0.202889,0.0292703,-0.028448,0.132163,0.0138184,-0.228072}
,
{0.00526491,-0.0855419,-0.065593,0.220301,0.0512455,-0.160523}
,
{0.0869289,0.0872604,-0.162049,0.0350275,0.165941,-0.00602584}
,
{-0.0462852,0.0155078,-0.0248483,-0.182071,0.0690234,-0.0986129}
 };
  static const float bias2[1] = { -0.0101309 };
  static const float weights2[][1] = { {0.172913}
,
{0.344622}
,
{-0.161649}
,
{-0.446498}
,
{-0.121426}
,
{0.144409}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_13(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_13(v, index);
}
static int assign_gen_lepton_prior_2_1_13() {
  global_gen_lepton_prior.at(2,1,13) = &specialized_gen_lepton_prior_2_1_13;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_13 = assign_gen_lepton_prior_2_1_13();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_14(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00643702,-0.00761526,0.0783735,-0.00986638,-0.00755137,0.077619 };
  static const float weights1[][6] = { {-0.033333,0.00555155,0.14336,0.00573449,0.133453,0.000816646}
,
{0.0960579,-0.0996278,0.28666,0.134908,-0.0105419,-0.130706}
,
{0.0729597,-0.0529223,0.295092,0.10201,0.033619,-0.12407}
,
{0.173599,-0.166652,0.3047,-0.00213219,-0.00691468,0.102737}
,
{0.0116808,-0.227222,0.235252,0.0429561,-0.0048107,0.110649}
,
{-0.0303216,-0.163003,0.0513119,0.203393,-0.209178,0.0907575}
,
{-0.108386,0.0436656,-0.0493426,-0.123189,-0.15049,0.188456}
,
{-0.187311,0.217244,0.34309,-0.0627678,0.0547142,-0.202539}
,
{-0.0750583,0.15886,0.12345,0.0598413,0.0400139,-0.332712}
,
{0.0161308,0.0528075,-0.0790509,-0.0917917,-0.0121017,-0.0275883}
,
{-0.0161663,-0.145255,-0.0988424,-0.0131425,-0.0454811,-0.0406477}
,
{-0.233726,-0.254874,0.00939605,-0.0812797,0.0881094,-0.0302865}
,
{-0.09793,-0.105415,-0.0506195,-0.0949258,-0.0816793,0.0927783}
,
{0.0204334,-0.0729478,0.162862,-0.0544113,-0.0199219,-0.0773514}
,
{0.0730549,-0.0127264,0.10714,0.0493902,-0.045882,-0.106}
,
{0.0646665,-0.19908,-0.243276,-0.0532059,0.0195097,0.134115}
,
{0.223385,-0.109397,0.208612,-0.116913,-0.0539368,-0.0361852}
,
{-0.0400999,-0.470617,-0.167515,0.0604927,-0.0233174,-0.0357842}
,
{0.186068,-0.0450394,-0.0396521,0.0858681,-0.217689,0.257332}
,
{-0.0433326,0.105234,0.061107,-0.227327,-0.139434,-0.0546036}
,
{-0.06721,-0.161458,-0.0154094,-0.201287,-0.0692758,-0.0340362}
,
{-0.0715322,0.0176797,0.00720411,0.017906,0.166487,-0.0348677}
,
{0.0826638,-0.166349,0.0443859,-0.144645,0.009499,0.110782}
,
{0.00726638,0.0715839,-0.067928,0.0372151,-0.0403396,0.0798073}
,
{0.17235,0.0257671,-0.0315237,0.0493885,0.0939267,0.193947}
,
{0.0427492,0.0568887,0.0309615,-0.0286955,-0.0001047,0.0277927}
,
{0.136778,-0.14735,-0.170421,-0.0036757,-0.212839,0.12421}
,
{0.0208184,0.0160519,0.141119,0.06674,-0.0596213,0.115112}
,
{-0.0570383,-0.0584141,-0.0525827,-0.0526667,0.14007,0.15951}
,
{0.0212491,0.166318,0.0353408,-0.0898672,0.132254,-0.0559818}
,
{0.344004,-0.199684,0.0149795,-0.0633828,-0.0845056,-0.201459}
,
{-0.141668,0.0639551,0.043669,-0.0359951,-0.151898,0.123291}
,
{0.175808,-0.0377063,-0.0373598,0.00714285,-0.0609153,0.160315}
,
{-0.240211,-0.028618,-0.0245158,0.0525546,-0.0101281,0.0441592}
,
{-0.124582,0.257438,-0.0417339,-0.156464,-0.0929093,-0.236676}
,
{0.0116535,-0.249242,0.0775483,0.0877423,-0.0548127,-0.0530789}
,
{0.754541,-0.17924,-0.00897833,-0.0552691,-0.154414,0.0629508}
,
{0.00741304,0.32745,0.0275574,0.169016,-0.10284,-0.0243389}
,
{0.098541,0.308884,-0.14084,0.101263,0.229789,0.169524}
,
{0.400583,-0.0836207,-0.176431,-0.0144146,0.0153678,0.05271}
,
{0.00158,0.0763391,-0.461793,-0.0774413,-0.0496804,0.41526}
,
{0.158498,0.042782,-0.416299,-0.203628,0.0803354,0.148422}
,
{-0.345102,0.268528,0.227591,-0.0052207,0.172963,0.100278}
,
{0.000559565,-0.126561,0.296559,-0.0217792,0.150309,0.0541726}
,
{0.081973,-0.472712,-0.215881,0.00937845,0.143531,0.21047}
,
{0.137139,0.0764786,-0.341527,0.0810566,0.0226416,0.31429}
,
{-0.224086,0.423521,0.254204,-0.0151264,-0.036445,-0.380405}
,
{-0.195394,0.00946805,-0.0644178,0.0610873,0.167011,0.090254}
,
{-0.4008,0.468641,0.000393589,-0.180477,0.085805,-0.262495}
,
{-0.0490568,0.555288,-0.0535298,-0.01534,-0.0120495,0.00939901}
,
{0.0586068,-0.376116,-0.223087,-0.177268,0.120326,0.195988}
,
{0.638281,-0.686405,-0.0295234,-0.155752,0.0328678,0.0982118}
,
{0.0378728,0.0713527,0.173738,0.0879182,0.0626126,-0.0755931}
,
{0.257209,-0.514928,-0.236108,0.105596,-0.200592,0.236606}
,
{-0.210796,-0.0766652,0.192254,-0.10576,-0.193536,-0.0177439}
,
{0.0538117,0.0921928,-0.113398,0.0737431,0.100404,-0.0598507}
,
{0.0571517,0.215361,0.201655,-0.0688403,-0.167131,0.10606}
,
{0.124126,0.0685683,0.0683686,0.135533,-0.0137688,-0.0544377}
,
{0.138579,0.13216,0.0512736,-0.120888,0.0434168,0.253724}
,
{0.194226,-0.00272202,0.0909673,-0.131313,-0.0950653,0.0381675}
,
{-0.0773522,0.008125,-0.151581,-0.0470294,0.187742,-0.156524}
,
{-0.0125636,0.0826071,0.0350193,-0.00688186,-0.161243,-0.021673}
,
{-0.125027,0.0484168,-0.115493,-0.125574,-0.0488118,-0.0904698}
,
{-0.0264849,-0.0146177,0.0976157,-0.0637674,0.0286575,0.110965}
,
{0.0976283,0.221324,-0.047788,-0.0109515,0.142344,-0.0814938}
,
{0.129888,-0.117518,-0.0186854,0.0233154,-0.214988,0.0674091}
,
{-0.0674962,0.0169709,-0.00442359,0.236047,-0.0268537,-0.0236613}
,
{-0.023128,0.00429995,-0.124775,0.11946,-0.020604,-0.100134}
,
{0.0704814,0.0726178,0.0658945,-0.153092,0.120101,-0.153457}
,
{0.161867,0.0626201,-0.0421062,0.0179107,0.185832,0.130419}
,
{0.157852,-0.127253,0.07251,-0.0147741,-0.069025,-0.0340072}
,
{0.120662,-0.118481,-0.082625,0.0522333,0.0310728,0.0261825}
,
{-0.0951724,0.0387595,-0.110926,0.110488,-0.112567,0.103303}
,
{0.212074,0.123619,0.0634569,-0.00695599,-0.207391,-0.141019}
,
{0.0535654,-0.070937,0.00355157,-0.0746581,-0.0518471,-0.109289}
,
{0.0200377,0.0900075,-0.0639886,-0.0754875,-0.0690874,0.0432831}
,
{0.135523,-0.153462,0.0316329,0.0802608,-0.143348,0.176306}
,
{0.0900044,-0.0562974,0.0306308,-0.0896554,-0.110226,0.100252}
,
{-0.115549,-0.0897204,-0.0744824,-0.104919,0.182439,0.115466}
 };
  static const float bias2[1] = { 0.0246198 };
  static const float weights2[][1] = { {-0.179415}
,
{-2.24257}
,
{0.118626}
,
{-0.0902147}
,
{-0.0999547}
,
{0.114823}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_14(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_14(v, index);
}
static int assign_gen_lepton_prior_2_1_14() {
  global_gen_lepton_prior.at(2,1,14) = &specialized_gen_lepton_prior_2_1_14;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_14 = assign_gen_lepton_prior_2_1_14();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_17(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.0429971,-0.143029,-0.0066149,0.114721,0.149908,0.102817}
,
{0.0826133,0.177674,0.144382,0.0200217,0.19648,-0.0113687}
,
{0.0137348,0.164696,-0.0357039,0.00568945,-0.106515,0.150234}
,
{0.0669854,-0.19959,0.0996009,0.151758,-0.0899548,0.173126}
,
{-0.0810185,-0.118044,-0.234161,-0.0187945,0.00533468,-0.0201776}
,
{0.197308,-0.233129,0.0647088,-0.020655,-0.0876096,-0.0875416}
,
{0.0729173,-0.222063,-0.000850346,0.0866595,0.0189516,0.181795}
,
{-0.000615402,-0.143611,0.0515616,-0.0693153,0.082048,-0.0825551}
,
{-0.0401195,0.235323,0.0781199,-0.00998977,0.148826,0.0876139}
,
{0.126043,0.122725,-0.100619,-0.133207,0.148873,0.0200978}
,
{0.0305872,-0.0292074,-0.0298239,-0.0572055,0.0731611,0.119528}
,
{-0.0861646,0.0103755,-0.149569,0.140258,-0.0234651,0.0930458}
,
{-0.0670635,0.142293,0.0542544,-0.00345525,-0.0212322,0.0224438}
,
{-0.0543134,0.0669169,0.0276894,0.0621519,-0.0751728,0.150025}
,
{-0.052348,-0.0455832,-0.0348176,0.241733,-0.196508,-0.00861714}
,
{-0.245309,-0.0213438,-0.0385407,-0.146727,-0.0117811,0.0792852}
,
{0.0297534,-0.0354363,0.0116664,0.129236,0.00128213,0.134209}
,
{0.121006,0.0800691,0.0330873,0.113992,0.158913,0.0897333}
,
{0.0414529,-0.05541,0.122808,0.120958,0.0656726,-0.092181}
,
{0.183942,-0.0278034,0.155561,0.0416208,0.118928,-0.0641545}
,
{0.142378,0.0196417,0.189054,0.133916,0.0503545,0.105331}
,
{-0.097646,0.0261954,-0.0306224,-0.0280163,0.0695177,-0.137246}
,
{0.0306593,0.0362738,-0.052308,0.0930442,-0.0172656,-0.0317646}
,
{-0.0454304,-0.0669433,-0.0675542,0.0158845,-0.0244703,-0.0835231}
,
{0.0869478,0.023995,0.00267151,0.00198322,-0.0380133,0.130326}
,
{0.175064,-0.155118,-0.081773,0.017551,-0.198492,0.0207416}
,
{-0.142099,-0.186269,-0.173167,-0.118761,-0.071694,-0.101929}
,
{0.186812,0.0744289,0.00665407,-0.189637,-0.0645117,-0.0676019}
,
{-0.126811,-0.0659283,0.0424539,0.0845965,0.082609,-0.0744435}
,
{0.174098,0.0631356,0.00779646,-0.0401611,0.0687923,0.00717165}
,
{-0.0405899,0.0343509,0.0263187,-0.124255,0.0613047,-0.00489795}
,
{0.201847,0.00983533,0.232161,-0.0891534,0.108473,0.10055}
,
{0.164191,-0.0936072,-0.205796,-0.00623108,-0.0151612,0.0489893}
,
{0.039657,0.10199,0.137711,-0.227815,0.0351626,-0.0585863}
,
{-0.16568,-0.0126293,-0.0783067,-0.00772787,0.106684,0.0385327}
,
{-0.200723,-0.0287439,0.195468,-0.070294,0.202324,0.198766}
,
{-0.0843108,0.0363342,-0.150196,-0.0741635,0.0599461,0.175658}
,
{-0.109703,-0.103631,0.0167216,-0.201665,-0.0543765,0.0511833}
,
{0.199639,-0.245305,-0.116037,-0.208299,0.0315556,0.00203296}
,
{-0.167566,-0.033226,-0.0201258,0.0666056,0.0111362,0.0566811}
,
{-0.135011,0.243325,-0.148744,0.156484,0.0550149,-0.190501}
,
{0.196096,0.156934,-0.0138977,0.028181,-0.177207,-0.195269}
,
{-0.00573316,-0.0208746,0.00261735,-0.0112221,-0.0262393,0.0325148}
,
{0.0857336,0.017108,-0.111047,-0.0787393,-0.0804298,-0.00175641}
,
{-0.0465817,0.166416,0.235777,-0.0785881,-0.143711,-0.0807717}
,
{-0.061016,0.067076,-0.145345,-0.195927,0.0716172,0.130265}
,
{-0.0778078,-0.0951871,0.120167,-0.101998,-0.0640767,-0.147954}
,
{0.0744045,0.0401345,-0.192136,-0.170645,0.161916,-0.0295401}
,
{0.0812855,-0.114237,-0.0186011,-0.130456,-0.00700456,-0.00209377}
,
{0.0222424,0.172365,-0.0848446,-0.0153384,0.0354527,-0.0635369}
,
{-0.00827645,0.0650501,-0.0222976,0.127699,0.115999,-0.00235603}
,
{0.0298601,-0.0930283,0.133315,0.0314035,-0.200007,-0.049944}
,
{0.134334,-0.147759,0.081084,-0.0721118,-0.00279731,0.0556411}
,
{-0.0243995,0.0365174,-0.0101405,-0.0652087,-0.120649,-0.0785729}
,
{0.0278899,0.10756,-0.139501,-0.172507,0.137319,0.101857}
,
{0.00306751,-0.126961,0.211784,-0.0718985,0.0664219,0.03346}
,
{-0.0327393,0.0491193,0.19316,-0.112462,-0.152368,-0.00589983}
,
{0.0412555,-0.0784763,-0.113516,0.165739,-0.106382,-0.00116968}
,
{0.0278578,9.31672e-05,0.0274928,0.112734,-0.169879,-0.0028248}
,
{0.0169918,-0.0657656,-0.117493,0.0681257,-0.0374839,0.046129}
,
{0.152729,-0.0532883,0.188101,-0.170118,-0.0190206,0.217033}
,
{-0.1437,-0.234501,-0.0834573,-0.115748,0.146983,0.0073059}
,
{0.0166477,-0.0536666,0.103644,-0.0395876,-0.214962,0.106885}
,
{0.00410794,0.101739,-0.045124,0.0761653,-0.150573,0.247836}
,
{-0.083127,-0.0982755,0.0335804,-0.0429555,-0.0247071,-0.0202596}
,
{0.116505,0.00557429,0.00765726,0.0238444,0.145596,-0.0228853}
,
{0.0223185,0.090076,0.0984336,0.129043,-0.029215,0.111382}
,
{0.20684,-0.131813,0.0900021,0.2255,-0.0548086,-0.0373793}
,
{-0.0374875,0.0039278,0.0658604,-0.0261356,-0.0854649,0.101652}
,
{0.225198,-0.207125,0.107527,-0.0360626,-0.0529749,-0.0192336}
,
{0.172248,-0.105105,-0.104684,-0.1963,0.0762092,0.0504211}
,
{0.0137231,0.20739,-0.0140584,-0.165769,-0.13341,0.0582407}
,
{0.0721986,0.1074,0.177911,-0.0818679,-0.00521389,-0.00803181}
,
{0.0710755,0.166128,-0.236088,-0.10288,0.0928813,-0.088802}
,
{-0.0299275,-0.154126,0.174762,-0.134798,0.038225,-0.0076323}
,
{-0.0886741,0.0516792,-0.175865,-0.192552,-0.105873,0.00894535}
,
{-0.115543,0.124494,0.104913,0.121683,-0.0398041,0.100505}
,
{0.127825,-0.13211,0.0760754,0.0455466,0.0410484,-0.0629524}
,
{0.123555,-0.247049,0.0270362,0.132836,-0.136449,-0.0366566}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.119373}
,
{-0.00439398}
,
{-0.0752439}
,
{0.0572673}
,
{-0.133142}
,
{-0.14399}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_17(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_17(v, index);
}
static int assign_gen_lepton_prior_2_1_17() {
  global_gen_lepton_prior.at(2,1,17) = &specialized_gen_lepton_prior_2_1_17;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_17 = assign_gen_lepton_prior_2_1_17();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_1_18(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0552643,0.129615,-0.0777499,0.0549185,-0.0877134,-0.00531578 };
  static const float weights1[][6] = { {-0.0900946,0.114799,0.239328,0.207387,-0.0854499,-0.0139087}
,
{-0.125456,0.0284038,-0.352142,0.0809365,-0.465849,-0.0274911}
,
{0.0513035,0.0634532,-0.19714,-0.252859,-0.166465,-0.166707}
,
{0.138164,-0.0528678,0.289591,-0.122701,0.190334,0.0646606}
,
{0.031806,0.148945,-0.1091,0.23365,-0.0018502,0.0298602}
,
{-0.161598,0.233803,0.110863,0.26765,-0.127899,-0.0930161}
,
{-0.02511,0.06088,-0.188827,0.0388067,-0.297409,0.13348}
,
{0.238969,0.352916,0.427048,-0.181538,-0.322593,0.00229654}
,
{0.406223,0.0609549,0.28658,-0.0513044,-0.353841,0.0110184}
,
{0.188766,-0.127212,0.0590816,-0.0395136,0.0225295,-0.0122752}
,
{-0.0779022,0.0123062,-0.0700504,-0.0459109,0.0632505,-0.0160438}
,
{0.0944829,0.10724,-0.296414,-0.0672516,-0.196496,0.0148356}
,
{0.0853493,0.112272,0.0164121,-0.111922,0.124679,-0.0343239}
,
{-0.246076,0.0484833,-0.232316,-0.124826,0.0344796,-0.0286243}
,
{0.0387191,-0.118054,0.126928,0.0411169,-0.130468,0.1915}
,
{0.00317523,-0.139677,0.0873144,0.0234599,0.0511921,0.190486}
,
{0.118325,-0.19697,-0.0109102,0.185737,-0.120968,-0.073708}
,
{-0.148785,-0.463785,0.425473,-0.0876428,-0.202499,-0.194717}
,
{-0.0773513,0.317586,-0.237075,-0.0178695,-0.0325175,-0.157374}
,
{-0.13409,-0.116208,-0.139347,0.110342,0.0262096,0.0248731}
,
{-0.085172,-0.0549455,0.121211,0.0323015,-0.0239959,-0.0401624}
,
{0.0162335,-0.0368833,0.135573,0.0391371,0.0703421,-0.0374655}
,
{-0.0889632,-0.100393,-0.160269,-0.0296076,-0.0480431,-0.161585}
,
{0.115639,0.0333375,-0.062017,-0.0497373,-0.225283,-0.00718885}
,
{0.0277497,0.12743,0.0837942,0.032027,0.00836068,0.0267673}
,
{-0.0168741,0.215001,0.130284,0.0714534,-0.074088,0.0930561}
,
{-0.0584754,-0.0555713,-0.00162268,0.00920051,0.0545333,0.00328179}
,
{-0.0572429,-0.00402824,0.127719,0.0535184,0.111586,0.0724863}
,
{0.0938233,0.213467,-0.0205831,0.112585,-0.0720717,0.0828677}
,
{-0.0240939,-0.157233,0.0617901,-0.114116,0.0365811,-0.00805285}
,
{0.333514,-0.143681,0.685485,0.0912006,-0.358747,-0.0197871}
,
{-0.0749535,0.100049,0.0430286,-0.179094,-0.0395611,0.192244}
,
{-0.782254,0.0505854,0.229955,0.0967028,0.422844,-0.0862166}
,
{0.0738027,0.0689949,0.205318,-0.0546703,0.0823927,-0.0626164}
,
{-0.102926,-0.856206,-0.399446,0.330143,0.361769,-0.178098}
,
{-0.175862,0.204019,0.239719,0.0129818,-0.322068,-0.111427}
,
{0.445427,0.815993,0.0927611,-0.267203,-0.526496,-0.00562523}
,
{-0.149106,0.262087,-0.165244,-0.167617,0.220912,-0.134269}
,
{-0.633983,-0.538277,0.599622,0.139693,-0.263602,0.0120713}
,
{0.0787865,0.363787,0.0632681,-0.151787,0.0304337,-0.165428}
,
{0.0946158,0.305026,-0.101813,-0.335417,-0.163691,0.0707079}
,
{0.567258,-0.110657,0.00324435,0.370488,0.657645,-0.044466}
,
{-0.159703,-0.0700499,0.416428,-0.321298,-0.653309,0.0208806}
,
{0.302373,-0.00919963,0.275822,-0.300347,-0.889901,-0.107387}
,
{0.0702445,-0.290463,-0.0843564,0.332271,-0.0777551,-0.0201747}
,
{-0.175009,-0.333225,-0.0525044,0.158854,-0.02506,-0.0992611}
,
{0.00511216,0.131681,0.63919,-0.0989327,-0.812796,0.23156}
,
{-0.166945,0.154781,0.0668447,-0.213928,0.213481,-0.1254}
,
{0.595221,0.195592,-0.832529,-0.0608657,0.444784,-0.0534847}
,
{-0.0675227,0.161747,0.318557,-0.131499,0.178155,0.0656805}
,
{0.271442,0.28978,0.0385966,-0.196184,0.6169,-0.0276873}
,
{0.187993,0.0349342,0.0343572,-0.0956053,-0.274492,0.00620529}
,
{-0.0715889,0.182501,0.810652,-0.282044,-0.318802,-0.190322}
,
{-0.120386,-0.13462,-0.181193,0.306369,1.17061,0.00247294}
,
{-0.174218,0.134635,0.13978,0.117278,0.0187586,0.111172}
,
{-0.158319,0.0693869,-0.0920602,0.0075917,-0.0495256,-0.0420723}
,
{0.116621,-0.0344896,0.0506904,0.123508,0.100045,0.118786}
,
{-0.0795466,0.173867,-0.143584,-0.00246261,-0.0256179,0.0750909}
,
{0.171913,-0.028025,-0.117251,-0.000536958,-0.199233,0.00918564}
,
{-0.102568,0.0510304,0.0705123,-0.0481586,-0.0228306,0.0527019}
,
{-0.129597,0.128662,0.00644611,-0.0626833,-0.147011,0.165324}
,
{-0.0303215,0.111748,0.0975922,-0.0201177,0.226275,-0.00399631}
,
{-0.0919287,-0.0744045,0.0356029,0.000653274,0.126646,0.0472775}
,
{0.153359,0.0832716,-0.00571649,0.047904,0.0957001,0.0459825}
,
{0.0238097,0.164607,-0.00867512,0.0690636,0.0274791,0.250984}
,
{0.0482453,0.143548,0.116792,-0.119481,-0.215069,-0.100733}
,
{-0.104755,-0.0163096,0.0268266,-0.0939262,-0.0137825,-0.0648686}
,
{0.155172,0.0154433,0.0385508,-0.165734,0.137622,-0.00639326}
,
{0.21795,-0.214201,0.0178096,0.0631058,-0.0317752,-0.0651054}
,
{-0.0582191,-0.225052,-0.0401319,0.117785,-0.0443173,-0.0779009}
,
{0.166474,-0.195985,-0.129397,-0.102236,0.027099,0.0944039}
,
{0.133033,0.088708,0.0901022,0.0704184,0.203153,0.076637}
,
{-0.0442689,-0.046033,-0.0198058,-0.190538,-0.156308,0.0375593}
,
{0.145169,0.00742341,-0.154915,0.0198071,-0.0558521,0.105427}
,
{0.221626,0.093704,0.10228,-0.0375861,0.0786677,-0.0905464}
,
{0.0560387,0.158444,0.0014301,-0.0675018,-0.013425,-0.0621611}
,
{0.00251455,0.0934886,0.00579137,0.127902,0.0352723,0.0113631}
,
{0.0602465,-0.0921833,-0.0275129,-0.157012,0.0819434,-0.0207569}
,
{0.0370222,0.0923627,0.126639,0.0147998,0.0419319,0.151753}
 };
  static const float bias2[1] = { 0.0338961 };
  static const float weights2[][1] = { {-1.41301}
,
{0.155345}
,
{1.96828}
,
{0.13157}
,
{-0.796295}
,
{-0.0192531}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_1_18(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_1_18(v, index);
}
static int assign_gen_lepton_prior_2_1_18() {
  global_gen_lepton_prior.at(2,1,18) = &specialized_gen_lepton_prior_2_1_18;
  return 0;
}
static int initialize_gen_lepton_prior_2_1_18 = assign_gen_lepton_prior_2_1_18();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_16(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.119748,0.108675,-0.014851,0.206157,0.043769,-0.0856018}
,
{0.203217,0.126368,0.0664256,0.0740371,0.069123,0.247521}
,
{0.008082,0.0459041,0.0719442,-0.0357881,-0.167989,-0.0614451}
,
{-0.00149201,-0.135797,-0.140325,0.0214244,0.134188,-0.121591}
,
{-0.053184,0.162978,0.0339113,-0.13653,-0.0698816,0.0976577}
,
{0.101252,-0.190403,0.162957,0.0047805,0.0481689,-0.237247}
,
{-0.125574,-0.0298291,-0.0395137,-0.121544,-0.0968112,0.0158121}
,
{-0.234902,-0.121491,-0.127382,-0.0843223,-0.141171,-0.139595}
,
{-0.0649509,0.104444,0.00209919,0.0745176,-0.0729957,0.0707424}
,
{-0.0463472,0.149017,0.0515918,0.0788749,0.22279,-0.130975}
,
{0.0492714,-0.0208048,0.171767,-0.0904755,-0.0397743,0.00453771}
,
{-0.0465689,-0.0301408,0.0248577,0.0185687,0.206188,0.0342454}
,
{0.0804045,-0.181664,0.199147,-0.161865,0.0223625,-0.0179329}
,
{0.0428285,-0.0985546,-0.0926588,-0.00387906,0.161967,-0.170966}
,
{0.145711,-0.106508,0.213852,0.149038,-0.0591781,0.10498}
,
{0.0596736,0.0397706,-0.107647,-0.126483,-0.0326368,0.205902}
,
{-0.0277339,-0.0279392,-0.067517,-0.0700658,0.0881877,-0.143656}
,
{-0.0237576,0.029646,0.131139,-0.125102,-0.0742793,-0.0826222}
,
{0.0673026,-0.00117347,-0.116991,-0.176831,-0.0966003,0.0863333}
,
{-0.208368,0.0081912,-0.0380424,0.197298,-0.221184,0.0100004}
,
{-0.0152038,0.0773127,-0.0969304,0.0128787,0.063553,-0.0138928}
,
{0.0790599,-0.0837846,0.125846,-0.0231442,0.128241,-0.0611824}
,
{-0.0522098,-0.0467848,0.0473767,0.055125,0.0336391,0.143994}
,
{-0.117164,-0.0561188,-0.041283,0.0796429,0.110258,-0.0507663}
,
{0.0848508,0.161948,-0.048085,0.0505195,-0.132083,0.0453854}
,
{0.106596,0.143409,-0.0537428,0.085301,0.0139656,0.00742886}
,
{0.0644659,0.056438,0.047348,0.131753,0.116695,0.0551441}
,
{0.0543073,0.0643702,-0.0561727,0.0637417,0.111652,-0.139277}
,
{-0.13927,0.0645094,-0.0470263,-0.0181401,0.0987504,0.0361621}
,
{-0.00249222,0.0857519,0.195767,0.0359403,-0.149483,0.0542702}
,
{-0.0208771,0.119007,-0.0761813,-0.0340897,-0.227386,-0.132007}
,
{-0.0100736,0.0776018,-0.102454,-0.0309846,-0.120895,0.120492}
,
{0.079733,0.124934,0.114395,0.0853951,0.0251893,0.12583}
,
{0.0154009,0.187609,-0.0142037,-0.0193389,0.113875,0.110111}
,
{0.140813,0.12839,-0.0728827,0.0424194,0.11858,0.0336331}
,
{-0.0838514,0.16694,-0.027933,-0.075003,-0.211496,-0.0417768}
,
{-0.0667762,0.0175361,-0.0419404,0.0131974,0.242693,0.130764}
,
{0.110131,0.0318072,0.131008,0.155922,-0.0365857,0.107704}
,
{-0.0790213,-0.0666281,0.151499,0.0407012,0.141266,-0.238356}
,
{-0.0826696,-0.149797,0.0432871,-0.11467,0.0154954,0.164743}
,
{-0.136858,0.0143261,0.0872694,0.181911,0.0510481,0.0677018}
,
{0.061222,-0.0251808,-0.120585,0.18681,-0.0612246,-0.0449081}
,
{-0.0564776,-0.0280327,-0.131703,0.111276,-0.00457414,-0.0993889}
,
{0.0628087,0.127903,-0.098024,-0.189634,-0.0515781,0.0983921}
,
{-0.0571609,-0.118779,-0.107858,0.0082276,0.0421608,0.0508312}
,
{0.0763679,0.105696,-0.0238646,-0.194566,-0.127522,0.0189425}
,
{0.0766558,-0.0327823,-0.0784681,0.00991436,0.00358351,0.0477445}
,
{0.0297482,-0.18861,0.0877292,0.00138213,0.0278402,-0.113307}
,
{-0.10128,-0.0699536,-0.00486184,0.0521667,-0.0781171,-0.0169633}
,
{0.148933,0.0965351,-0.0518258,0.231379,-0.0538877,-0.0857459}
,
{0.15422,0.0126353,-0.00439959,-0.123379,-0.0594629,-0.00342238}
,
{0.0472291,-0.0933246,0.0547073,-0.114456,0.0713115,0.0401382}
,
{0.0873708,-0.0737401,0.137215,0.14163,-0.0847879,-0.0292226}
,
{0.0306203,-0.126605,-0.0595884,-0.0110287,-0.137441,-0.249673}
,
{0.0493985,-0.240812,0.048224,0.0389779,0.042699,-0.0484116}
,
{-0.191771,0.24383,0.0344904,-0.0744852,0.13666,-0.13652}
,
{0.114851,-0.0726625,0.191858,0.0332707,-0.0818145,0.0423189}
,
{0.0206352,-0.12725,0.121732,-0.0348364,-0.0567534,0.0505589}
,
{-0.0807464,0.0979327,-0.0931276,-0.00255847,-0.0801165,-0.0425931}
,
{-0.0526385,0.0734405,0.0950828,-0.0679845,0.125174,0.108633}
,
{0.214787,-0.0535476,0.0277943,0.13419,-0.000405843,-0.139866}
,
{-0.195396,-0.212176,-0.188633,0.138651,0.0156,-0.00942138}
,
{0.0709514,0.0285278,-0.159136,0.0280464,-0.061345,-0.00767007}
,
{0.0201346,0.0292829,-0.010025,0.244481,-0.163044,-0.00391158}
,
{-0.0498859,-0.0705652,-0.201245,0.23812,-0.0199831,-0.033774}
,
{0.0212871,-0.123508,0.024604,0.0717468,0.0479505,-0.19579}
,
{0.224249,0.0377776,-0.0416238,0.0782436,0.234603,-0.117883}
,
{-0.00411771,0.0406019,-0.117543,-0.0753744,-0.191369,-0.162062}
,
{-0.181729,-0.039625,-0.209625,-0.248854,-0.0684548,0.160706}
,
{0.131826,-0.035204,0.0355088,-0.14786,-0.155016,0.0442536}
,
{0.0451044,-0.0473099,0.0257956,-0.0250037,0.168537,-0.136407}
,
{-0.100727,0.0365499,0.177671,0.126594,0.113612,-0.0511105}
,
{-0.233701,0.216727,0.137461,0.0149227,0.0795027,0.139043}
,
{0.0680618,-0.11796,0.20798,-0.0262858,-0.0721377,0.087013}
,
{0.0858451,-0.0972168,0.045605,0.0702104,0.018687,-0.056486}
,
{-0.0236669,0.112314,0.0128109,-0.00555664,0.00272069,-0.122359}
,
{0.0825126,0.0704305,0.0124728,0.185298,0.0822677,-0.0134923}
,
{-0.243034,0.112554,-0.106942,-0.0288299,-0.0163879,0.0495161}
,
{-0.0127224,0.0492163,0.206233,0.0770937,-0.246589,-0.0216687}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0725689}
,
{-0.158174}
,
{-0.107223}
,
{0.000532299}
,
{-0.000448929}
,
{0.0572882}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_16(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_16(v, index);
}
static int assign_gen_lepton_prior_1_0_16() {
  global_gen_lepton_prior.at(1,0,16) = &specialized_gen_lepton_prior_1_0_16;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_16 = assign_gen_lepton_prior_1_0_16();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_17(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0124788,-0.217192,-0.116949,0.12606,0.219925,0.439843 };
  static const float weights1[][6] = { {0.0004701,0.118316,0.106539,-0.144764,-0.227832,-0.016704}
,
{-0.130062,0.124046,-0.437028,0.0085988,0.152841,0.174982}
,
{0.0206464,0.165317,0.0407441,-0.212465,0.0300759,0.259402}
,
{-0.228656,-0.0843922,0.6501,0.298873,0.386445,-0.16679}
,
{-0.0542522,-0.0500939,-0.0101757,0.174959,0.257204,0.486307}
,
{-0.141293,-0.166714,-0.187676,0.055466,0.235784,0.327557}
,
{0.00062623,-0.180004,-0.107352,0.185395,0.176775,0.30581}
,
{0.0704773,0.00300415,0.0809128,0.0425504,0.19793,-0.151825}
,
{-0.070985,0.0651304,0.06646,-0.0306321,0.0489813,-0.105314}
,
{0.048224,-0.0573451,0.0902982,0.221227,0.0824424,-0.0360965}
,
{-0.203903,-0.00907272,0.0167191,0.000329932,-0.197888,0.0147834}
,
{-0.0331612,-0.0210393,-0.0415529,0.228239,-0.0648535,0.159465}
,
{0.0960024,-0.0982857,-0.16898,-0.171198,-0.0265461,0.102251}
,
{0.190187,0.10518,-0.224261,-0.128718,-0.228624,-0.192146}
,
{-0.147239,-0.133869,0.0936292,-0.156311,0.106104,0.0786769}
,
{-0.0253177,-0.0659704,0.0106731,-0.010246,-0.000702904,0.132494}
,
{0.0468804,-0.232857,0.188948,0.0133324,0.354097,0.194903}
,
{-0.0268743,-0.0664659,0.164667,-0.109274,0.022272,-0.0468263}
,
{-0.145735,-0.249363,-0.167371,0.0985696,-0.0457484,0.31647}
,
{-0.196085,0.0138898,0.00903273,0.125896,-0.0412563,-0.0857476}
,
{-0.0444544,0.191778,0.0979984,0.250414,0.112091,-0.076999}
,
{-0.0122257,-0.0465541,0.050737,0.0846778,-0.0171961,-0.0901598}
,
{-0.047919,0.0323693,0.0272951,0.234713,0.0646399,0.125789}
,
{-0.128052,0.212253,0.00688797,-0.00614505,0.115833,0.147065}
,
{0.0827891,-0.00122954,0.0630517,-0.144405,-0.108594,-0.0795999}
,
{0.179532,-0.0727499,-0.139362,-0.0794659,0.0229077,0.0916585}
,
{0.014399,0.337461,0.126653,-0.202421,-0.173252,-0.0965524}
,
{-0.0852822,0.237089,-0.11507,-0.0992923,-0.120265,-0.0864529}
,
{-0.0443624,0.0613542,0.124136,0.164777,-0.0769087,-0.0689663}
,
{-0.187613,-0.0645122,0.124647,-0.0430688,0.135611,-0.0278232}
,
{-0.0742088,0.0139564,-0.0225735,-0.0733096,-0.0919964,0.0807557}
,
{0.0159464,-0.12576,0.0373354,-0.103604,0.00922473,-0.0405082}
,
{-0.0054083,0.0137924,0.421053,-0.198868,-0.337635,0.0189261}
,
{-0.0678925,-0.0506674,0.15539,0.179908,-0.106619,-0.175995}
,
{0.0780606,-0.00790867,-0.139285,-0.0310241,0.0249969,0.085277}
,
{-0.144095,-0.0567931,-0.0149798,0.09935,0.0323427,-0.154371}
,
{0.0604014,-0.126146,0.181475,-0.211231,-0.121735,-0.0208277}
,
{-0.00364372,-0.01684,-0.0614994,0.0498104,0.15037,0.0775919}
,
{0.032561,-0.039453,0.0395791,-0.00576746,0.0565641,-0.0162035}
,
{-0.101033,-0.0653465,-0.689315,0.181716,0.179011,0.113011}
,
{-0.172094,-0.087979,-0.347601,0.193467,0.205176,-0.011832}
,
{0.0493918,0.200538,0.299884,-0.00280971,-0.228555,0.025347}
,
{0.0537207,0.106549,0.0430879,-0.0208331,-0.0128585,0.122806}
,
{0.11516,0.0747664,0.0452153,-0.0085636,-0.346239,0.136785}
,
{0.0750245,-0.198631,0.0769152,-0.0616911,-0.259115,-0.0975956}
,
{-0.0556226,0.143527,0.415451,-0.302089,-0.0177118,0.115722}
,
{0.106154,0.348201,0.673093,-0.15173,-0.419191,0.236376}
,
{-0.131119,-0.0232807,-0.184338,-0.106255,0.0433957,0.137115}
,
{0.224213,0.00285143,-0.101649,-0.0900477,-0.155999,0.129764}
,
{-0.0670293,-0.1715,-0.156903,-0.0342626,-0.144206,0.0557676}
,
{-0.00479309,0.188006,-0.0454394,0.081314,-0.127856,0.195675}
,
{0.00969166,-0.114622,-0.121226,-0.00552656,0.12331,-0.00964746}
,
{-0.0849542,-0.0847049,-0.0413492,-0.0870005,0.0280417,0.0383562}
,
{-0.0404227,-0.125354,0.00316172,0.0302079,0.190773,-0.107452}
,
{-0.166969,0.115953,0.166009,0.189599,-0.0927046,-0.13068}
,
{0.0057849,-0.00588797,0.0337046,0.0213449,-0.0191864,-0.0346892}
,
{0.0167182,0.237169,0.151497,0.0343846,-0.0144666,-0.00279391}
,
{0.175,-0.0839242,0.129602,0.0633572,0.0341607,0.00287358}
,
{-0.14377,-0.00537641,0.0347217,-0.107003,-0.0181908,-0.101018}
,
{0.0466548,0.11738,-0.149087,-0.100839,0.268416,-0.00522979}
,
{-0.0959975,-0.0554499,-0.00131378,-0.130816,0.172558,-0.189612}
,
{0.0756482,-0.0560736,-0.0227872,0.163493,-0.117385,0.0088746}
,
{-0.158756,0.0593169,-0.0372154,0.0702713,0.118845,-0.067937}
,
{0.167701,-0.0175882,-0.14248,-0.113201,-0.0549128,-0.0397989}
,
{-0.150276,0.107577,0.0824314,-0.232628,0.18129,0.159875}
,
{-0.00859115,-0.0131422,-0.00373467,-0.220679,0.139524,-0.018424}
,
{0.108605,0.065787,-0.0208017,-0.0597629,-0.212162,-0.0517689}
,
{0.0729179,-0.132398,-0.163396,-0.00385328,-0.0362049,-0.0300001}
,
{-0.0932343,-0.0334071,0.153474,-0.0245787,0.132056,-0.247606}
,
{0.142106,-0.00968639,-0.0815338,0.0314564,0.0685295,-0.141102}
,
{-0.0185454,-0.234255,0.202165,-0.18707,0.024705,0.0153406}
,
{-0.159835,-0.00834665,-0.202173,0.0141859,-0.172403,-0.171115}
,
{0.204049,-0.0639803,-0.111327,-0.0318132,0.0547261,-0.0222356}
,
{0.169962,-0.0779046,0.0142518,-0.0222975,-0.0372536,0.140538}
,
{-0.108386,-0.240002,-0.152219,0.0203601,-0.118632,-0.0940427}
,
{-0.101877,0.0926299,0.230257,-0.0264147,0.0977303,-0.167295}
,
{0.0993539,0.0852245,0.181299,0.0356859,-0.148607,0.158488}
,
{-0.0133039,-0.0531536,-0.00680796,-0.0453171,0.000302968,0.0606092}
,
{-0.00219312,0.157513,-0.0530247,0.0746683,-0.151286,0.122318}
 };
  static const float bias2[1] = { 0.14031 };
  static const float weights2[][1] = { {-0.0647022}
,
{-0.0997928}
,
{0.0780819}
,
{0.0506223}
,
{0.0311349}
,
{0.124685}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_17(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_17(v, index);
}
static int assign_gen_lepton_prior_1_0_17() {
  global_gen_lepton_prior.at(1,0,17) = &specialized_gen_lepton_prior_1_0_17;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_17 = assign_gen_lepton_prior_1_0_17();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_18(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.358471,-0.019686,0.386216,-0.0524152,-0.0288001,0.0 };
  static const float weights1[][6] = { {-0.172371,-0.00390763,-0.0786436,0.0289225,-0.0210722,0.100159}
,
{0.0968548,-0.133007,-0.00811677,-0.327346,0.0033411,-0.0340131}
,
{0.204842,0.209382,-0.041968,0.363773,0.0335228,-0.0512925}
,
{0.229124,0.109578,0.661548,0.052175,0.106332,-0.115106}
,
{0.136029,-0.0997821,0.631297,-0.0769864,-0.0931015,-0.188612}
,
{0.357445,-0.0421254,0.273984,-0.0730005,0.100741,0.0412563}
,
{0.22513,-0.077523,0.382008,-0.0397733,0.0488628,-0.186048}
,
{-0.180602,-0.0329692,-0.0102299,-0.537453,-0.0829834,-0.0859029}
,
{-0.0687797,0.141394,0.081033,-0.372288,0.0626238,0.0866448}
,
{0.0077116,-0.074244,-0.0973047,0.0312443,-0.143876,-0.0484198}
,
{-0.0634881,0.0622332,0.0343454,0.0560129,0.197858,0.0302798}
,
{0.108634,-0.0986666,0.189233,0.0404242,-0.0380605,-0.0568653}
,
{0.116264,-0.0858067,-0.151814,-0.152243,-0.0448957,0.0105139}
,
{-0.105485,-0.257977,-0.124603,0.108607,-0.231396,0.0416817}
,
{-0.0546073,0.161716,0.020072,-0.171681,0.118347,0.0739282}
,
{-0.0517534,-0.166734,-0.0190257,0.00993431,-0.0743982,0.0464415}
,
{0.117046,0.184704,0.159207,-0.252694,0.00622749,0.0974759}
,
{0.148773,-0.0289598,-0.0277854,0.035219,-0.175289,-0.108756}
,
{0.155177,0.0775195,0.136562,0.0888198,0.0845447,-0.00437457}
,
{0.0228964,-0.134525,-0.072927,-0.0652822,0.0398606,-0.111221}
,
{-0.0940512,0.00716672,0.0318522,0.0827007,-0.0465552,-0.0366428}
,
{-0.0632654,0.0669036,0.0102815,0.00542411,-0.103329,-0.128225}
,
{-0.0146938,-0.10744,0.0934715,-0.051954,0.00206024,0.149099}
,
{0.022608,-0.0851809,-0.00396414,0.00957905,0.0254995,-0.0839657}
,
{0.0299356,-0.113584,0.0966896,-0.013423,0.173595,0.156648}
,
{0.116211,-0.0682113,-0.149444,-0.0302432,0.0940534,0.1061}
,
{0.0272485,0.146666,-0.0859031,0.12096,-0.0515207,-0.0114731}
,
{-0.181624,0.153423,-0.00363577,0.201971,-0.122293,0.171667}
,
{-0.129878,-0.0608855,0.0533246,0.118086,-0.159393,-0.0737791}
,
{0.195963,0.200187,0.0377719,-0.116096,-0.00519014,-0.022497}
,
{-0.0362235,0.0731236,0.0613061,0.411582,0.028875,-0.0152727}
,
{0.134105,0.153589,0.079546,-0.0535241,-0.0983905,0.143322}
,
{-0.191741,0.0192288,0.0588651,0.00516625,0.140092,-0.121632}
,
{-0.00892463,0.052913,0.186026,0.0550105,0.0839574,-0.0940633}
,
{-0.118504,-0.0721594,0.00335097,-0.0271586,-0.0618384,-0.0922884}
,
{0.0298905,-0.22175,-0.0511101,-0.152545,-0.00978685,0.0166168}
,
{-0.0142165,-0.183342,0.0534445,-0.14092,-0.102799,-0.0607911}
,
{0.400664,-0.0165875,-0.194978,-0.190234,-0.0762961,-0.184835}
,
{0.0364551,0.146865,0.0854804,-0.00152905,0.137656,-0.153029}
,
{-0.0105217,0.128783,0.0172532,-0.121495,0.207878,-0.0458224}
,
{0.14338,0.0744376,-0.046491,-0.188172,-0.0391509,0.123958}
,
{0.00718877,-0.0756044,-0.0486111,-0.454868,-0.0596736,-0.0396053}
,
{0.00554141,0.0316845,-0.0255859,0.00408649,-0.0877628,-0.0894004}
,
{-0.210038,0.0410976,0.0171313,-0.141408,0.0883195,-0.038919}
,
{-0.308416,-0.0570304,0.182788,0.370835,0.073234,-0.11236}
,
{-0.0527218,-0.188961,-0.0291149,-0.0810063,-0.208854,-0.119353}
,
{-0.0183226,-0.120037,-0.0519976,-0.00663488,0.220097,-0.0853446}
,
{0.0784428,0.0619265,-0.152423,-0.338875,0.181151,-0.0247419}
,
{-0.123919,0.0848158,-0.0817097,-0.243051,0.0316884,-0.191905}
,
{0.13081,-0.150171,-0.0806942,-0.314035,0.167325,-0.0443622}
,
{0.256742,-0.19528,-0.155477,-0.23946,-0.158844,0.026693}
,
{0.559375,0.118703,-0.0842671,0.253797,0.0533968,-0.0069117}
,
{0.114444,0.108387,0.00460763,0.198161,-0.0741602,0.0203139}
,
{0.0500043,-0.23986,0.0528513,0.322055,0.164365,-0.0326445}
,
{-0.0187384,-0.136597,-0.188284,0.0334327,-0.0495815,0.0372599}
,
{0.138315,0.0570051,0.231593,-0.0990396,0.0849434,0.0408064}
,
{0.0117983,-0.0689306,-0.0349821,0.132531,-0.148321,-0.0948899}
,
{-0.0471172,-0.0283897,0.227797,0.150807,0.0458094,-0.0217946}
,
{0.0115139,-0.00882232,-0.0973332,-0.0050961,0.079519,0.00514297}
,
{-0.149025,0.0931741,-0.00022729,-0.19157,0.113565,-0.00224447}
,
{-0.0391165,0.158362,0.109072,0.0627282,0.124774,0.0122831}
,
{-0.169787,0.179364,-0.0675363,-0.0101591,-0.122719,0.0509906}
,
{0.179844,-0.109006,-0.0474407,-0.0993918,-0.148898,-0.0694072}
,
{-0.0327934,0.0782955,-0.0381625,-0.0192331,-0.0691754,0.0485264}
,
{0.105098,-0.0891879,-0.158033,0.0116015,-0.229648,0.152308}
,
{0.0865133,0.238598,0.0901545,-0.0183465,-0.121754,0.0541635}
,
{0.107404,0.159035,0.20847,0.211448,0.144893,0.104225}
,
{0.147811,0.119328,-0.055273,-0.0877828,-0.169331,0.0194708}
,
{0.0929758,-0.111626,-0.0880781,0.210705,0.00719919,0.0212425}
,
{0.120665,-0.125874,-0.135273,0.145444,-0.148259,0.0687469}
,
{0.0146342,0.0733759,-0.172627,0.0622194,-0.103248,-0.244634}
,
{-0.173461,-0.140276,0.0746428,-0.0510265,-0.113047,-0.131789}
,
{-0.105771,-0.134733,0.00763552,0.202453,-0.0913936,0.0548768}
,
{-0.0107253,-0.166573,0.0888523,-0.145495,0.0474057,-0.0991869}
,
{-0.241529,0.136038,0.0449071,-0.0902488,0.0202266,-0.0151209}
,
{-0.153333,0.053935,-0.0892099,-0.238884,-0.14285,0.0602807}
,
{0.114873,0.00225605,0.139327,-0.00164423,0.133462,-0.0991489}
,
{-0.0510534,-0.070797,0.0918456,-0.121589,0.111005,0.00962294}
,
{-0.0574802,-0.0118065,0.104791,0.0449227,-0.216447,-0.0655896}
 };
  static const float bias2[1] = { 0.174091 };
  static const float weights2[][1] = { {0.0958864}
,
{-0.0635888}
,
{0.185884}
,
{-0.123748}
,
{-0.14256}
,
{-0.161768}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_18(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_18(v, index);
}
static int assign_gen_lepton_prior_1_0_18() {
  global_gen_lepton_prior.at(1,0,18) = &specialized_gen_lepton_prior_1_0_18;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_18 = assign_gen_lepton_prior_1_0_18();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.356008,-0.0106681,-0.216554,-0.027209,-0.0284771,-0.459034 };
  static const float weights1[][6] = { {0.449593,0.649273,-0.323617,-0.70792,-0.476076,0.305297}
,
{0.186373,-0.0738783,0.165827,-0.0772395,-0.799921,0.114391}
,
{0.484605,-0.0517181,0.264125,-1.08635,0.398855,0.328564}
,
{0.0288038,1.13927,-0.8205,-0.513954,0.64296,-0.684157}
,
{0.135447,-0.26999,-0.302974,0.11182,-0.144925,-0.364067}
,
{0.301426,-0.196236,-0.0552789,-0.0605427,-0.509535,-0.34146}
,
{0.478984,0.0603196,-0.0675967,0.00506169,-0.240786,-0.383114}
,
{-0.0728423,0.0470179,-0.157783,0.0768758,-0.179339,0.00971755}
,
{-0.0276932,-0.49956,0.0907353,0.290922,0.0985487,0.16227}
,
{0.0267764,0.0941505,0.00952128,-0.180868,0.028946,-0.20986}
,
{0.0354678,-0.0701494,0.0107144,0.18822,-0.0717855,0.0342264}
,
{-0.000205018,-0.263511,0.21037,0.0893863,0.304127,-0.0368082}
,
{0.452578,-0.116912,-0.119823,-0.0657529,0.151205,-0.553353}
,
{0.309593,-0.0418101,-0.0345564,0.206021,-0.0947631,-0.410507}
,
{0.045938,0.0282803,-0.0828846,0.0842567,-0.132404,-0.023843}
,
{0.015197,0.071172,0.0369434,0.0539195,0.0173605,-0.0333815}
,
{-0.0611782,0.0668416,0.0691587,-0.145843,-0.028975,-0.0483172}
,
{-0.324699,0.750333,-0.141531,0.00940633,-0.197253,-0.166424}
,
{-0.0698083,0.161246,-0.117598,-0.0981521,-0.15339,-0.114849}
,
{-0.0351031,-0.377898,-0.0799143,-0.0076177,0.187816,0.131027}
,
{0.184004,-0.232252,-0.042897,0.0809312,-0.128481,0.147312}
,
{0.0726546,-0.249139,0.147479,-0.332102,-0.0963011,0.0778018}
,
{-0.0216399,-0.0922826,0.101314,0.187676,0.049421,0.000632432}
,
{0.0410256,0.013147,-0.165677,-0.186599,-0.00680948,0.0567821}
,
{0.0314643,0.081159,-0.287656,-0.0510742,-0.0666232,0.151291}
,
{-0.0267639,0.0176349,0.16393,0.052681,-0.128056,-0.317977}
,
{0.0705092,-0.0559906,0.173343,-0.155567,0.00129473,-0.195425}
,
{-0.0204859,-0.107531,-0.193123,-0.0429626,-0.0869418,-0.0311637}
,
{0.614762,0.190893,0.0215203,0.114696,-1.01288,0.279295}
,
{0.0488525,-0.00190898,-0.187849,0.0107729,-0.112444,0.00966503}
,
{-0.00794701,-0.0132213,0.0747944,0.120533,-0.00260779,0.00917132}
,
{0.106422,0.148757,-0.15239,0.148303,-0.0768425,0.202273}
,
{-0.0682728,-0.121472,0.0334535,-0.0765927,0.181021,-0.0106443}
,
{0.121061,-0.182092,-0.00621487,0.100521,0.122509,0.0955173}
,
{-0.275075,0.0670451,-0.0645019,0.193147,-0.0113278,-0.218722}
,
{0.0289915,-0.0901781,-0.00545967,0.0396348,-0.00216805,0.0294944}
,
{0.318998,0.131532,-0.066269,-0.0394105,0.0332383,0.358112}
,
{0.0388449,0.0526343,0.0095435,0.141551,0.0371999,0.0658656}
,
{-0.103678,0.125941,0.0228413,-0.336803,0.00930425,-0.191139}
,
{-0.283051,-0.201707,0.00395569,-0.17603,0.112863,-0.202119}
,
{-0.0127473,-0.0120504,-0.0950959,0.0694244,0.00715108,0.0239786}
,
{-0.0891677,0.271846,-0.0617829,0.0253287,0.105807,-0.129116}
,
{0.0313929,-0.0381269,0.0881465,-0.0183346,0.117198,0.0262196}
,
{0.340149,-0.10405,0.0670974,-0.116534,-0.0440143,0.308174}
,
{-0.0802525,0.0210161,-0.00617829,-0.0184675,0.183857,-0.0581566}
,
{-0.00503453,0.0176786,0.0135394,0.037054,-0.0462536,-0.0220152}
,
{0.115708,0.0419833,0.314874,-0.185669,0.137389,-0.00761066}
,
{0.0255656,-0.0106624,0.147526,-0.0696143,0.167356,0.0221059}
,
{0.131779,0.0582055,0.0595524,-0.165494,0.115392,0.0981542}
,
{0.00152383,-0.0853938,-0.0722336,-0.15397,-0.0655146,0.00542696}
,
{0.0225776,-0.0383396,0.120284,-0.129922,0.0849842,-0.00520476}
,
{0.13324,0.248738,-0.249883,-0.0720464,-0.381223,0.104801}
,
{-0.0339347,0.0271077,-0.0535161,0.053809,-0.0696101,-0.0363765}
,
{-0.0562058,-0.0807691,0.0844558,-0.0593831,0.119403,-0.0349691}
,
{-0.0190251,-0.00660836,0.0133527,0.0610895,0.0491853,-0.0901179}
,
{0.0333782,-0.0113292,0.0491502,-0.0161965,0.00380552,-0.0477114}
,
{-0.0115649,-0.000866204,0.0325984,0.0218787,0.139741,-0.0239773}
,
{-0.210783,-0.649436,-0.143416,0.301808,-0.173513,0.193134}
,
{0.0267653,0.0512567,0.124868,0.175473,0.103976,0.121924}
,
{-0.00313338,0.032556,0.0514907,0.328989,0.000197303,-0.0260651}
,
{-0.04113,0.00777059,-0.0477242,0.00186652,0.0721877,0.0967888}
,
{-0.097947,0.0588377,-0.248988,0.0496005,-0.200739,-0.181035}
,
{0.149896,0.19297,-0.629906,0.567352,0.120744,0.566795}
,
{0.0060725,-0.0451931,0.257176,-0.073599,-0.0412654,-0.0363388}
,
{-0.113658,-0.0451305,-0.0838554,0.0511393,-0.0700259,-0.0400318}
,
{-0.017517,-0.0680679,0.0175092,-0.0192686,-0.160483,-0.0682493}
,
{-0.0884869,0.0117531,-0.0173069,0.326486,0.178125,0.0907653}
,
{-0.019505,0.451026,-1.15926,-0.0336203,-0.020936,0.527811}
,
{0.124058,-0.00913291,0.204535,-0.267522,0.0707684,0.0785226}
,
{-0.0108251,0.00447811,0.0299675,0.139798,-0.281729,-0.161964}
,
{0.00483411,0.0693867,-0.0207367,0.10882,-0.00260815,-0.0692382}
,
{0.0518083,0.0492489,0.10947,-0.106857,-0.117986,-0.217603}
,
{-0.216272,-0.34986,0.297262,-0.234958,-0.853608,0.803655}
,
{0.0191931,-0.032313,0.019515,0.000324174,0.0031958,-0.0446872}
,
{-0.777876,0.666171,1.21335,-0.660563,-0.951595,0.106381}
,
{0.073058,-0.0540652,0.0397416,-0.130359,0.0961688,0.232341}
,
{-0.0844672,0.115456,-0.510597,-0.118725,1.39489,0.172903}
,
{0.0940961,-0.153019,-0.0101621,-0.07109,0.011614,0.0777348}
,
{-0.601956,-0.594489,-0.461782,-0.906303,-0.4894,-0.649872}
 };
  static const float bias2[1] = { 0.354862 };
  static const float weights2[][1] = { {0.0847177}
,
{-0.0886473}
,
{-0.0683313}
,
{0.0310931}
,
{0.055932}
,
{-0.0855694}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_0(v, index);
}
static int assign_gen_lepton_prior_2_2_0() {
  global_gen_lepton_prior.at(2,2,0) = &specialized_gen_lepton_prior_2_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_0 = assign_gen_lepton_prior_2_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.266692,0.27614,-0.157983,-0.137212,-0.30838,-0.135319 };
  static const float weights1[][6] = { {-0.709537,0.348086,0.441176,-0.166632,0.0946208,0.407755}
,
{0.0704656,-0.225997,-0.379006,0.194159,-0.133464,-0.0300747}
,
{-0.184707,-0.183749,0.943693,0.100549,-0.722606,-0.208973}
,
{0.692997,0.771125,-0.674839,-0.281844,-0.991111,0.208442}
,
{0.340879,0.419828,-0.136505,-0.0226667,-0.131259,-0.351177}
,
{-0.00108537,0.0399948,-0.170057,-0.23541,-0.0495749,-0.143542}
,
{-0.0971903,-0.125945,-0.218185,-0.369319,-0.204115,-0.101622}
,
{0.103796,-0.225539,-0.0439121,-0.00981862,-0.00161974,-0.0107455}
,
{0.0406577,0.0294601,-0.169911,-0.143504,-0.150457,0.0528188}
,
{-0.00728276,-0.0793966,-0.158696,-0.0283715,0.155448,-0.0966827}
,
{0.0480044,0.015889,0.0128319,0.0632609,-0.161194,0.147668}
,
{0.0764908,-0.187168,-0.135776,-0.0701141,-0.0665413,0.135445}
,
{0.393024,0.0929874,-0.268245,-0.326755,-0.272503,-0.220318}
,
{0.220366,0.149705,-0.363205,-0.130224,-0.387275,-0.126611}
,
{0.0194027,0.0561711,0.0745982,0.0155692,-0.20429,-0.0511073}
,
{0.0469341,0.117131,-0.000359881,-0.109345,-0.00215269,-0.0523779}
,
{0.0319156,-0.016244,-0.23728,-0.328474,-0.094459,-0.0670571}
,
{0.00479223,0.0798721,0.0759896,-0.3018,0.305942,0.0534195}
,
{0.0124737,0.111459,-0.0282677,0.0195504,-0.0269258,0.250182}
,
{0.00211467,0.0472167,-0.0309981,-0.111971,-0.000204867,-0.0517466}
,
{-0.0262737,-0.0996382,-0.167393,-0.282712,0.0652041,-0.0700649}
,
{0.0387721,-0.047179,0.0825549,0.167783,0.0101351,0.0166753}
,
{-0.0361149,0.10857,-0.0437935,-0.103757,-0.0346967,0.174212}
,
{0.0556388,0.0946853,0.0331602,0.0719662,0.0284409,0.0879443}
,
{0.0510088,0.0208604,0.0213665,-0.130344,0.109319,0.0488762}
,
{0.0300639,0.0410548,0.142759,-0.153424,-0.0847183,-0.0736016}
,
{-0.0605241,0.0190599,-0.265817,0.0735528,-0.0233461,0.108456}
,
{-0.0371818,-0.105261,0.00198626,0.0339603,0.0939674,-0.404984}
,
{0.344622,0.55098,-0.131917,-0.123134,0.733232,0.180482}
,
{-0.144204,0.0300873,0.170456,0.0719707,-0.0840305,0.0146764}
,
{-0.000187682,-0.147425,-0.12986,-0.106084,-0.0767019,-0.0150344}
,
{0.0361033,-0.0818982,-0.204351,-0.0870158,0.0808428,-0.100949}
,
{-0.109684,0.175572,0.0729406,0.0613021,0.0422109,0.194335}
,
{-0.0380452,-0.0906196,0.0493436,0.136851,0.173099,-0.124522}
,
{-0.0420022,0.0607418,-0.0922519,-0.138117,-0.0113158,-0.0624971}
,
{0.114843,-0.158953,0.0117281,0.000331482,-0.109194,0.123332}
,
{-0.0544976,-0.256146,0.222446,0.368546,-0.310513,-0.0151149}
,
{-0.00725698,0.000814444,-0.103156,-0.120063,-0.105279,0.010025}
,
{-0.148003,-0.159557,-0.0153645,-0.00905937,-0.383994,-0.165137}
,
{-0.0367035,-0.162108,-0.12577,-0.0726094,-0.0614742,0.0143663}
,
{-0.0788577,0.00187074,-0.00723946,0.0215773,-0.00104952,-0.0698562}
,
{0.0613145,-0.107743,-0.0241249,-0.0151334,-0.0447681,0.000911247}
,
{0.182937,0.0324556,0.0463959,-0.00984048,0.0393021,0.144547}
,
{0.184316,0.266201,0.630782,0.297521,0.296303,0.0782884}
,
{-0.00513542,-0.0295991,0.0492257,-0.0350612,-0.075394,0.00395188}
,
{0.0189363,-0.0389626,0.0703795,0.116832,-0.021191,0.0121835}
,
{0.34151,-0.168496,-0.156711,0.227441,-0.11654,0.307627}
,
{-0.171279,0.0581702,-0.00382483,0.040536,0.0807702,-0.174421}
,
{0.0302907,0.11457,0.303604,0.0405433,-0.00716604,0.0428975}
,
{-0.154067,-0.131497,-0.0426201,0.0657196,-0.124594,-0.1755}
,
{-0.0233133,0.0516409,0.0804802,0.0181192,-0.0209694,-0.00942683}
,
{-0.238351,0.21845,0.0541973,0.266328,0.12532,-0.104189}
,
{0.00701437,0.00969726,-0.105415,-0.0751371,0.0371221,0.00249436}
,
{0.127667,0.0911345,0.135959,0.0670097,0.16805,0.172654}
,
{0.0697743,0.0579249,-0.0574153,-0.00923101,0.0121261,0.234325}
,
{0.0489057,-0.0369909,0.0588287,-0.152864,-0.0736824,-0.112539}
,
{-0.264168,0.0711891,-0.278875,0.283303,0.199744,-0.39653}
,
{-0.257247,0.218075,-0.406602,0.826599,0.140278,0.442583}
,
{-0.209637,-0.0655718,-0.0847203,-0.0520861,0.0194936,-0.491962}
,
{0.0790045,-0.0242303,0.27273,0.0824132,0.0306667,0.0135569}
,
{0.0687652,0.00817498,0.0769724,0.105435,0.0458422,0.144789}
,
{-0.161134,0.418818,0.218667,-0.403602,0.291135,-0.528306}
,
{0.241482,-0.133923,-0.0464789,0.16643,0.950423,-1.99483}
,
{-0.0274166,-0.219532,0.075966,0.104627,0.0258264,-0.232676}
,
{-0.121242,0.102399,-0.279132,-0.171392,-0.0861234,0.123449}
,
{-0.0602787,0.10593,-0.0172481,0.00448602,-0.0384278,-0.0204624}
,
{0.107592,-0.470707,0.106154,0.0642459,-0.129153,-0.307484}
,
{0.870604,-1.19543,0.131339,0.113705,0.678755,-0.0561396}
,
{-0.0266393,-0.0328044,-0.0902051,-0.00886565,0.265326,-0.264027}
,
{0.0193189,-0.163529,0.0427156,0.037599,-0.13505,-0.071567}
,
{-0.0404605,-0.0302253,-0.0203793,0.0420788,-0.00779326,-0.04515}
,
{-0.0555981,0.746874,-0.138114,-0.515056,0.535516,0.400514}
,
{0.0350713,0.0536748,-0.356021,1.39998,-0.0694283,1.22813}
,
{0.237074,-0.348182,-0.0880299,-0.217426,-0.205654,-0.0638916}
,
{-1.3842,-0.633854,0.215638,-0.618548,1.20665,-0.983587}
,
{-0.547141,0.11718,-0.418953,-0.460694,-0.0837498,-0.25731}
,
{0.207661,-0.182172,-0.0322413,-0.0754849,0.169067,-0.198581}
,
{-0.014443,0.249708,-0.0413682,0.0897191,0.0593017,-0.0120093}
,
{-0.206374,0.427136,2.03212,-0.637123,-0.115089,0.767979}
 };
  static const float bias2[1] = { 0.293072 };
  static const float weights2[][1] = { {0.134925}
,
{0.0826667}
,
{-0.188523}
,
{0.409635}
,
{-0.129898}
,
{-0.132864}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_1(v, index);
}
static int assign_gen_lepton_prior_2_2_1() {
  global_gen_lepton_prior.at(2,2,1) = &specialized_gen_lepton_prior_2_2_1;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_1 = assign_gen_lepton_prior_2_2_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.357423,-0.084375,0.0397636,0.308058,-0.0951762,0.348861 };
  static const float weights1[][6] = { {-0.394987,-0.441674,-0.188028,0.423437,0.0683719,0.021099}
,
{-0.157569,-0.0991225,-0.507593,-0.305508,0.00148707,0.0450334}
,
{0.517523,0.208496,0.430616,0.490635,-0.230929,0.03379}
,
{-0.486497,-0.108968,1.25129,-0.830348,-0.487827,-0.24752}
,
{-0.660675,-0.236398,0.049837,0.246028,0.00654586,0.608495}
,
{-0.183803,-0.146252,-0.226248,0.38539,-0.0298048,0.384824}
,
{-0.108785,0.0377589,-0.0148678,0.441202,-0.0270894,0.38941}
,
{-0.0715197,-0.0812878,-0.103215,-0.1147,0.0354512,-0.108233}
,
{-0.104259,0.0437526,0.0152161,0.107826,-0.0590841,0.0157206}
,
{0.164761,0.101696,0.127783,0.0119132,-0.184987,0.0161739}
,
{0.0328547,-0.0884792,0.128595,-0.0860475,-0.0178103,0.0586318}
,
{0.122628,0.0726504,-0.313797,-0.214111,0.195776,-0.0312244}
,
{0.0774042,0.170675,0.0749576,0.0727846,-0.168163,-0.0475622}
,
{-0.305324,-0.0991475,-0.137043,0.457958,0.0756591,0.187915}
,
{0.0708706,0.00918832,-0.18744,-0.0899955,0.0952992,0.0450317}
,
{0.0916813,-0.0776665,0.0283838,0.0248977,-0.139435,-0.11245}
,
{-0.10705,-0.106731,0.0434946,0.0586665,-0.0954939,-0.0216026}
,
{0.454043,-0.0295797,0.651035,0.124593,-0.0562274,0.0269669}
,
{0.248371,0.123693,0.0386763,-0.00410427,-0.0957422,0.103426}
,
{-0.00157383,-0.0479165,-0.0828425,-0.0381906,-0.160374,0.179867}
,
{0.124693,0.0217895,-0.225147,-0.0420499,0.0178389,0.110455}
,
{0.0364892,-0.143833,0.101109,0.101069,-0.0563775,0.0280942}
,
{-0.135964,-0.137322,-0.204679,-0.124114,0.145113,-0.00318072}
,
{-0.191882,-0.0506784,-0.0992046,-0.110221,-0.00590278,-0.104629}
,
{-0.144912,0.0877415,-0.0666634,-0.0997228,-0.27645,-0.0332725}
,
{-0.265582,-0.13984,0.319593,0.259697,-0.1231,0.0454887}
,
{-0.146423,-0.236974,0.238241,0.0221998,0.0137822,0.242093}
,
{-0.133673,-0.616722,-0.139572,-0.179596,-0.274225,-0.0521834}
,
{0.147359,-0.292792,0.0300156,0.245116,-0.0259903,-0.0685118}
,
{-0.130711,-0.137013,-0.0502108,-0.210852,-0.000659819,0.0305626}
,
{-0.0410821,0.221275,-0.162117,-0.110781,-0.0721974,0.102457}
,
{-0.0819706,0.0555343,0.0127645,0.0166158,0.0353888,-0.0939939}
,
{0.0268693,-0.00224384,-0.051234,-0.0216702,-0.0110652,0.00734587}
,
{-0.127121,-0.177212,-0.0659174,0.092392,-0.0267506,0.1446}
,
{-0.160776,0.0588763,0.12796,-0.0356197,0.0414114,-0.222831}
,
{0.200623,-0.0805952,-0.093008,-0.0111957,0.0210766,0.249035}
,
{-0.120851,-0.300013,-0.264211,0.0684768,0.365583,0.110773}
,
{-0.0330445,-0.0323786,0.0089078,0.0231746,-0.052336,-0.0492252}
,
{-0.185767,-0.0379927,0.0248514,-0.0706635,-0.0856088,-0.192869}
,
{-0.121356,0.132662,0.0231955,-0.0402711,0.0985398,-0.0627106}
,
{-0.0349268,-0.0491095,0.0192552,0.0410385,0.00876347,-0.000808109}
,
{-0.0876939,0.0974786,-0.107209,-0.083518,0.0713609,0.0335511}
,
{0.0913975,0.0252445,0.0173657,-0.0672791,0.0307752,0.0943594}
,
{0.2267,-0.238285,-0.0705087,-0.128351,0.0770735,0.22408}
,
{-0.0570896,-0.0639904,-0.0463668,0.0342235,-0.0426787,-0.055309}
,
{-0.0705058,0.0078021,0.0538894,0.0752956,-0.0442961,-0.12577}
,
{0.201184,-0.0641262,-0.100611,0.0493646,-0.192043,0.0911887}
,
{0.0633873,0.0809964,0.0542772,-0.0178675,-0.0326732,0.0337519}
,
{-0.0571693,-0.0121553,0.0250149,-0.00122816,0.155215,-0.0676909}
,
{0.101114,0.071317,-0.0896141,-0.174695,0.0881635,0.143494}
,
{0.0566653,0.0649807,-0.0526506,-0.075791,0.0364653,0.0720812}
,
{-0.182892,-0.0515908,-0.253848,0.00181138,-0.0337092,-0.187231}
,
{-0.0387976,0.0501203,0.0249738,0.0590748,0.0170148,-0.0594364}
,
{0.151154,-0.0283868,-0.175431,0.0216147,0.10329,0.0506373}
,
{-0.131106,-0.0716931,0.0954059,0.103204,-0.156917,0.0217655}
,
{-0.0398081,0.155336,0.0306022,-0.0107217,0.098275,0.0354811}
,
{-0.655664,-0.0918321,-0.146487,-0.208538,-0.167079,-0.16659}
,
{-0.0753285,-0.188623,-0.00821524,0.000771056,-0.0763644,0.0432898}
,
{0.428041,0.560119,0.252078,0.524262,-0.00116642,0.302669}
,
{-0.0251392,-0.212628,-0.00223554,0.0626182,-0.105923,-0.0308702}
,
{0.14589,0.0624442,-0.0230178,-0.0592736,0.0142234,0.032059}
,
{-0.240281,-0.277215,0.14106,-0.254368,0.43377,0.354597}
,
{0.158714,-0.00741419,0.100328,0.19337,0.150472,0.0527063}
,
{0.787905,-0.494886,0.0217351,-0.0343553,0.445667,0.312337}
,
{0.0964223,-0.0516089,0.137996,-0.0525461,-0.12875,0.201025}
,
{0.134368,0.204526,-0.104318,-0.0209233,-0.116082,-0.0847482}
,
{0.625755,0.925734,-0.00508814,0.312331,-0.0430134,-0.122278}
,
{0.130791,0.0548693,0.0537823,-0.0916142,0.0508547,0.10165}
,
{0.602957,0.916529,-0.169618,0.0878662,-0.208638,-0.228421}
,
{-0.133833,-0.0979741,0.0279875,0.00279521,-0.140576,0.035295}
,
{-0.130463,-0.213797,0.0482038,0.110149,-0.0532158,-0.0377645}
,
{-0.30874,-0.37489,-0.118377,0.276319,-0.0866613,-0.35789}
,
{0.0482396,-0.00365999,-0.0724705,-0.142961,0.164615,-0.0106377}
,
{-0.0687946,-0.487426,-0.248194,-0.45415,-0.620811,-0.105566}
,
{1.6961,-0.342857,1.2783,0.217467,0.445699,-0.115761}
,
{-0.649349,-0.353524,0.1157,-0.0107796,0.314242,0.185858}
,
{0.920727,0.333182,-0.581907,0.863574,1.1353,-0.135672}
,
{-0.435167,0.830525,-0.241662,-0.268776,1.08564,-0.489111}
,
{0.151667,-0.497765,0.150358,-1.44936,0.0560398,1.99668}
 };
  static const float bias2[1] = { 0.19152 };
  static const float weights2[][1] = { {-0.108649}
,
{0.0876102}
,
{-0.124924}
,
{0.087148}
,
{-0.191667}
,
{0.0978255}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_2(v, index);
}
static int assign_gen_lepton_prior_2_2_2() {
  global_gen_lepton_prior.at(2,2,2) = &specialized_gen_lepton_prior_2_2_2;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_2 = assign_gen_lepton_prior_2_2_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_19(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.115446,-0.0541417,-0.0670414,0.173535,0.246388,-0.156274 };
  static const float weights1[][6] = { {-0.0121821,-0.129751,-0.071727,-0.14637,0.198171,0.135683}
,
{0.0981805,0.0290064,0.457946,0.146323,-0.10604,0.0565528}
,
{-0.197338,0.0699272,0.0682434,-0.0365995,0.058143,-0.483847}
,
{-0.00304312,-0.115292,-0.150515,0.223392,-0.326791,-0.0492626}
,
{0.2246,-0.187565,-0.152668,0.100862,0.243333,-0.13068}
,
{0.150575,0.0236961,-0.0814414,0.102993,0.286665,-0.222724}
,
{-0.0892646,-0.126268,-0.0158984,0.162727,0.353384,-0.0924185}
,
{-0.751087,0.062065,-0.222648,0.373792,0.09016,-0.231315}
,
{-0.473762,-0.126803,-0.279436,0.678248,0.0809094,0.0500842}
,
{0.0648807,0.0713998,-0.0396329,0.0321255,-0.0473402,-0.0359039}
,
{0.177426,-0.0537393,0.0391646,-0.0262207,-0.0929485,0.031879}
,
{-0.0948624,0.149158,0.0186929,0.0218839,0.181044,-0.154997}
,
{-0.177964,-0.00763195,-0.272952,0.0341436,-0.170104,0.269709}
,
{0.131657,0.181251,-0.0850126,0.050265,0.0523461,0.0328796}
,
{0.00861659,-0.00376215,0.157604,0.0230462,-0.115826,-0.0749641}
,
{0.114856,0.0993947,0.0771913,-0.153317,0.130989,-0.122591}
,
{0.261629,-0.0283129,0.245266,0.0772894,0.480536,0.103781}
,
{-0.0533046,-0.194131,0.307973,0.00567714,-0.0345297,-0.140828}
,
{0.143331,0.0271484,-0.25612,0.269465,0.289834,-0.287435}
,
{0.0177863,-0.195036,-0.0489237,-0.00902049,-0.064061,-0.0316692}
,
{0.0561549,-0.0359785,0.0276987,-0.0347199,-0.0156146,-0.00123141}
,
{0.00157811,-0.0882114,-0.181585,-0.0603689,0.0118924,0.0672498}
,
{0.065983,-0.0880297,-0.0299337,0.0231819,0.113205,0.125022}
,
{-0.00707632,-0.338012,0.0456367,-0.0245187,-0.0177994,-0.120053}
,
{0.0958657,0.118358,-0.112634,-0.0887978,0.0195148,0.0705325}
,
{-0.0426983,0.103669,-0.0830362,-0.06558,0.0936319,0.189578}
,
{0.0257665,0.0827512,-0.0714466,-0.224634,-0.111351,-0.0954877}
,
{-0.0303402,-0.0625955,0.0381448,0.0323735,0.0130526,0.105643}
,
{-0.109332,-0.0986347,0.208911,-0.222439,-0.104452,-0.0045088}
,
{-0.0577834,0.0230298,-0.0399275,-0.0710847,0.0511338,-0.00334924}
,
{0.19879,-0.255869,0.116024,-0.150168,0.0162193,0.182844}
,
{-0.0632548,-0.143175,0.0606813,0.125994,-0.00782354,-0.0791537}
,
{-0.0257191,0.142437,-0.0560653,0.444656,-0.166672,0.00986848}
,
{0.119142,0.0706177,-0.0301255,0.120812,-0.0633158,-0.0717879}
,
{0.0942588,-0.194953,-0.191046,-0.155693,0.0289259,-0.145674}
,
{0.424786,0.252687,0.0362823,-0.473835,-0.0328149,-0.00850765}
,
{0.160235,-0.0417065,0.17799,-0.13885,0.0137387,0.111678}
,
{-0.191867,0.0253294,0.279811,0.0369988,0.0719641,0.152649}
,
{0.262063,-0.137551,-0.24488,0.210787,-0.134519,0.38977}
,
{-0.0440992,0.037226,-0.468374,0.117131,0.0211785,0.301336}
,
{0.0696444,0.150776,0.0163902,0.260992,-0.0474413,0.00594341}
,
{0.167709,-0.117987,0.438003,-0.257882,0.0251408,0.406426}
,
{-0.110327,-0.0538891,0.121281,0.14679,-0.0575133,-0.106408}
,
{-0.366927,-0.117248,-0.4509,0.553866,-0.0776052,-0.124698}
,
{0.0795913,0.0867344,0.415574,-0.337179,0.159576,0.275501}
,
{-0.253044,-0.0388832,0.238451,0.247947,0.0648674,0.063846}
,
{-0.4036,-0.195751,-0.269447,0.794343,-0.0352651,-0.0293352}
,
{-0.0978785,0.0142428,-0.164548,0.0853716,0.00322686,0.0803222}
,
{-0.027908,0.172765,0.217978,-0.347532,0.00115576,-0.354417}
,
{0.249523,0.0716417,0.0923181,-0.437985,0.0230996,-0.243422}
,
{-0.00565715,-0.013365,-0.291241,0.00908834,0.0111149,-0.0478344}
,
{-0.0644142,0.179819,0.333435,0.287495,-0.0678499,-0.32265}
,
{-0.322262,-0.0138976,-0.0689942,0.00330094,0.106802,0.278425}
,
{-0.0859908,0.00760335,0.188538,-0.163547,0.0126618,0.194033}
,
{-0.0707923,0.21684,-0.00446316,-0.00119879,0.0861735,-0.0592385}
,
{0.0429826,0.0560415,0.00985407,0.0261542,0.145732,-0.263161}
,
{-0.0617314,0.101317,-0.0164052,-0.185154,0.0409769,0.0309211}
,
{-0.165754,0.0662478,0.164755,-0.17939,0.0231087,-0.0670673}
,
{-0.0915138,-0.0361993,0.041472,-0.18595,-0.00642467,0.184477}
,
{0.0852688,0.121818,-0.105763,-0.03286,-0.0660721,-0.203248}
,
{0.229155,0.333214,-0.134078,-0.0838114,0.0872221,-0.167853}
,
{0.114252,0.0144473,-0.104433,-0.192918,0.0137302,-0.117335}
,
{0.00636646,0.00489675,-0.0221219,-0.0887349,-0.0846511,0.190262}
,
{0.101931,-0.0560078,-0.139476,0.173495,-0.0659849,-0.0318578}
,
{0.121602,0.270588,-0.00372028,-0.143877,0.0697711,-0.217367}
,
{-0.330415,0.0814545,0.0417757,-0.142867,-0.0795914,0.189781}
,
{0.287389,-0.0378169,0.172299,0.155418,0.133813,-0.294285}
,
{-0.142497,0.0660999,0.0119942,-0.114795,-0.289138,0.0177282}
,
{0.0898642,-0.0137672,0.0352674,0.0823217,0.0606251,0.297885}
,
{0.10379,-0.0456099,0.0364852,-0.0464813,-0.046396,-0.186406}
,
{0.133935,0.134261,-0.0430327,-0.121072,0.189974,-0.0482545}
,
{-0.040229,0.109485,0.00993249,0.0633616,0.030712,-0.00588855}
,
{0.0275327,-0.0589749,0.0480516,-0.0253905,-0.0326952,-0.0708235}
,
{0.293213,0.160719,-0.0900729,0.0481196,-0.0409806,-0.227657}
,
{0.0564456,0.0995741,-0.0680091,0.0978609,-0.0458352,0.0339784}
,
{-0.0128524,-0.167899,-0.00787021,0.00278289,-0.00504071,0.20356}
,
{0.0864405,0.0392392,0.0784654,0.133721,-0.000361608,0.009518}
,
{-0.203658,0.0157133,0.052606,0.099976,-0.142955,0.151879}
,
{0.126196,-0.142227,0.102843,0.0825526,0.0254471,-0.0154799}
 };
  static const float bias2[1] = { 0.0727215 };
  static const float weights2[][1] = { {0.0725831}
,
{0.145867}
,
{0.96264}
,
{0.0966392}
,
{0.155889}
,
{-0.348513}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_19(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_19(v, index);
}
static int assign_gen_lepton_prior_1_0_19() {
  global_gen_lepton_prior.at(1,0,19) = &specialized_gen_lepton_prior_1_0_19;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_19 = assign_gen_lepton_prior_1_0_19();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.031692,0.362468,-0.177727,0.313054,-0.0455476,-0.18732 };
  static const float weights1[][6] = { {-0.257447,0.232283,-0.0844829,0.253739,-0.0118188,-0.244826}
,
{-0.794367,-0.0922728,0.485218,0.481616,0.287752,-0.112218}
,
{-0.453361,0.329428,0.521462,-0.204069,0.432355,-0.191569}
,
{0.247777,-0.0559061,-0.630718,0.581622,-0.375508,-0.716239}
,
{-0.134826,0.392441,-0.103751,0.335048,-0.252198,0.0665765}
,
{-0.0604751,0.538768,-0.184382,0.221708,0.0690615,-0.119813}
,
{-0.053581,0.434092,0.0337983,0.387289,0.0159149,-0.315799}
,
{-0.0800825,-0.180338,-0.221331,-0.282542,0.14405,-0.167371}
,
{0.107927,0.0811744,0.00583963,0.247707,0.140166,0.0273687}
,
{-0.0501741,0.194539,0.162511,0.0103623,0.162833,0.000765316}
,
{0.0767081,0.244932,0.232835,-0.231434,-0.146864,-0.234277}
,
{-0.0742857,-0.105581,0.055785,-0.0821631,0.209796,-0.252886}
,
{0.183569,-0.105084,0.232334,-0.0834116,-0.0942762,0.00524068}
,
{-0.0401605,0.330884,-0.261262,0.373071,0.0839019,-0.0584834}
,
{0.116316,-0.122482,0.189854,0.0343386,-0.161713,-0.158991}
,
{0.0820034,-0.123533,-0.0888634,-0.0706802,0.0739812,-0.135558}
,
{-0.0239008,-0.107691,0.0819962,0.0126889,0.0498194,0.0635475}
,
{-0.0707949,0.122848,0.193265,-0.0243196,0.0386282,0.559443}
,
{-0.00129334,-0.00199836,0.0430869,-0.017897,-0.142936,0.128017}
,
{-0.191221,0.00932542,-0.273957,0.0697171,-0.0760809,0.135582}
,
{-0.152022,0.073866,0.0560505,-0.189477,-0.249067,-0.158285}
,
{-0.342252,0.0234303,0.124534,0.0457984,0.0298655,-0.075878}
,
{0.0827555,-0.089608,-0.070189,-0.0632098,0.123022,-0.0312716}
,
{-0.156426,0.0961229,0.193756,0.0663377,-0.335839,-0.0126729}
,
{-0.0172828,-0.0646063,-0.248561,-0.0511748,-0.154985,0.0619087}
,
{0.0197697,0.231646,0.165528,0.199697,-0.063961,-0.0237463}
,
{0.0838132,-0.0710164,-0.0747031,0.0669332,-0.129343,-0.0265028}
,
{0.0102629,0.0525822,-0.174788,-0.0387325,0.073986,0.107156}
,
{-0.080387,0.0110199,0.34382,-0.314087,-0.115021,-0.00739431}
,
{-0.0329632,-0.0262069,0.0196995,-0.0411989,-0.0606733,-0.103005}
,
{0.0575665,0.115491,0.168727,0.0782595,0.226117,-0.137133}
,
{-0.00806468,-0.0475847,0.213638,-0.238604,0.158029,-0.180554}
,
{-0.0929525,-0.0413629,-0.0590369,0.058969,0.0333216,0.0429283}
,
{-0.10042,-0.00602923,-0.193581,0.0697601,-0.140534,0.0915157}
,
{0.171633,0.0235032,0.125207,-0.328394,0.00742029,0.170508}
,
{0.0459067,-0.0826163,-0.126974,0.15527,-0.125365,-0.0404678}
,
{0.305538,0.0994102,0.174238,0.40293,-0.0742942,-0.208524}
,
{-0.142587,0.0239953,0.0220214,0.0104388,0.0381912,0.0280761}
,
{-0.324554,0.0983562,0.137901,-0.069095,0.0354134,-0.155458}
,
{-0.317921,0.0152954,0.120293,-0.0709571,0.117646,0.0279519}
,
{0.133841,-0.0619751,-0.065922,-0.0252095,-0.115373,-0.0360775}
,
{-0.105629,-0.00902287,0.00135024,0.0491845,0.0785684,0.0714691}
,
{0.0275552,0.0594916,0.0144667,-0.00519495,0.0210079,-0.00881875}
,
{-0.019528,-0.045402,0.150853,0.49671,-0.389127,0.125583}
,
{0.119111,0.169311,0.247631,-0.0513039,0.0353063,0.0114476}
,
{-0.225637,0.0670702,0.0412023,0.00024094,0.00665853,0.0346625}
,
{0.053453,-0.0238726,0.0158357,0.0893341,-0.111287,0.269614}
,
{0.124967,0.0633548,0.0590611,-0.00489744,-0.074942,0.00835881}
,
{0.129632,0.491846,0.457424,-0.0804488,-0.0804179,-0.0441901}
,
{0.132953,-0.0198506,0.080701,0.0657308,0.0394603,-0.0388706}
,
{-0.15973,0.0614682,0.0494566,-0.0273347,-0.0186731,0.0558633}
,
{0.299973,-0.2087,-0.378418,0.0686979,0.155789,0.106775}
,
{-0.0349178,-0.0533899,-0.0986353,-0.0133365,0.149329,-0.0179834}
,
{-0.107403,-0.0137996,0.0258592,0.0989679,0.155819,-0.00778876}
,
{-0.0696791,0.15506,-0.105236,0.0058514,0.0922094,0.142961}
,
{0.152947,0.215019,-0.185338,0.0124953,-0.0369995,0.0111537}
,
{0.0618134,-0.189669,0.0617737,0.164463,0.0302351,-0.0323758}
,
{0.299048,0.00829881,-0.163399,0.057271,-0.0193515,-0.260284}
,
{-0.043502,0.191587,0.00404777,-0.143495,0.0485675,-0.0804926}
,
{0.0681487,0.271843,0.203439,0.262613,0.0511005,-0.153428}
,
{0.0387414,0.391972,0.180565,-0.0541387,0.102556,-0.00437179}
,
{-0.0716146,0.121,-0.026635,0.119959,-0.116085,0.147812}
,
{0.0162265,-0.0210532,0.206917,-0.0594682,0.119545,-0.0350707}
,
{0.141546,0.0228686,0.322511,-0.396492,-0.151902,0.269969}
,
{-0.0274506,-0.0955291,0.368267,-0.0335882,-0.00915355,-0.121632}
,
{-0.00349753,-0.114024,-0.0538054,0.092515,-0.164028,-0.136558}
,
{-0.00780302,-0.0583617,-0.0847352,-0.204805,-0.0109537,-0.0253006}
,
{0.0912544,-0.0674864,0.0861831,-0.190485,-0.0985236,0.0271212}
,
{-0.02033,-0.0147057,0.0437481,-0.176959,0.070822,0.0743837}
,
{0.0108363,-0.0377651,-0.241124,-0.164143,-0.103576,-0.0565991}
,
{-0.153192,-0.0624235,0.337059,0.0631752,-0.0695783,-0.0851998}
,
{-0.0923576,0.167508,0.161161,0.186033,-0.0388975,-0.0110534}
,
{-0.0319554,0.0621457,0.105032,-0.25605,0.0742823,0.139075}
,
{-0.162975,-0.0486393,-0.115434,0.0597374,-0.136825,0.153582}
,
{-0.0842955,0.071907,0.436668,-0.0597068,0.0195729,-0.0296619}
,
{0.0424837,-0.0926922,0.632694,-0.229219,-0.077952,0.420981}
,
{0.0142693,-0.0610533,-0.108891,-0.0798628,0.0153364,-0.0331327}
,
{-0.0860357,-0.0424632,-0.0186285,0.0436483,-0.0531568,0.047391}
,
{-0.175477,0.248701,-0.0593149,-0.0585141,-0.19551,-0.0461157}
 };
  static const float bias2[1] = { 0.254699 };
  static const float weights2[][1] = { {-0.527072}
,
{0.109329}
,
{-0.0878379}
,
{0.0736201}
,
{-0.830099}
,
{-0.205317}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_3(v, index);
}
static int assign_gen_lepton_prior_2_2_3() {
  global_gen_lepton_prior.at(2,2,3) = &specialized_gen_lepton_prior_2_2_3;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_3 = assign_gen_lepton_prior_2_2_3();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.182721,0.0152778,0.174477,0.288953,0.0588416,-7.25688e-05 };
  static const float weights1[][6] = { {-0.10432,0.0921599,0.188369,0.136332,0.0518566,0.108841}
,
{-0.314637,0.220943,-0.0231735,0.0698364,-0.536483,-1.04507}
,
{0.044591,0.433826,0.167305,-0.0762705,0.00152094,0.0874241}
,
{-0.591857,-0.831436,0.0680068,0.000550264,0.846018,-0.19486}
,
{-0.403226,0.0512391,0.134778,0.278963,-0.213388,0.165717}
,
{-0.176623,0.0239051,0.098615,0.24129,0.0430821,-0.0718887}
,
{-0.222526,0.287401,0.278803,0.195341,0.0416299,-0.130791}
,
{0.0537163,-0.460019,-0.202249,-0.0817352,-0.0793725,-0.245618}
,
{-0.0652544,-0.512345,0.0684174,-0.0172345,0.260621,-0.129705}
,
{0.171693,-0.0533076,0.148696,-0.135051,-0.0789178,0.12519}
,
{0.0904661,-0.120411,0.0584387,-0.18038,0.179828,0.0643058}
,
{0.259298,-0.267955,0.171886,-0.122474,0.032742,-0.0353995}
,
{-0.396907,-0.0471315,0.268442,0.282331,0.227554,0.121601}
,
{-0.0869441,-0.0806039,0.126825,-0.102635,0.0431893,-0.171906}
,
{0.10519,0.137872,0.131111,-0.0367252,-0.0353835,0.164903}
,
{-0.105511,-0.0278843,0.0122565,-0.0355308,-0.163303,0.0339946}
,
{-0.0957382,-0.159804,-0.124959,-0.0563747,0.00355332,-0.00956604}
,
{-0.267714,-0.354365,-0.209788,0.121197,-0.114085,-0.207158}
,
{-0.0531604,-0.0298721,-0.032926,0.214273,-0.120186,-0.0877607}
,
{-0.0364456,0.0206221,0.0425764,0.0035748,-0.0345253,-0.154887}
,
{0.0980496,0.0254459,-0.0603218,0.0198258,0.174994,-0.24702}
,
{0.0676932,0.00597114,0.061393,-0.224911,0.12379,-0.103072}
,
{-0.0649499,0.159938,-0.0287123,0.0620474,4.69835e-05,-0.0875978}
,
{0.104051,-0.116666,0.101919,-0.143769,0.0305824,0.164754}
,
{-0.112473,0.0620296,0.011596,0.0426979,0.0427254,0.0558581}
,
{0.0228904,-0.100813,0.00550554,0.121603,-0.189786,0.0595334}
,
{-0.0569051,0.106512,0.208371,-0.0401111,0.186233,-0.00938069}
,
{-0.0756304,-0.0171094,-0.182785,-0.071206,0.00441073,0.0955398}
,
{-0.0348059,-0.0552026,0.157,0.00795245,0.0930922,-0.00922119}
,
{-0.0547361,0.0642567,0.195021,-0.00124251,0.0719404,-0.0296584}
,
{-0.123515,0.0594202,-0.222042,0.0617848,0.0637363,-0.00573473}
,
{0.0032063,0.0643511,-0.0216528,0.224305,0.0756213,0.0906246}
,
{-0.111946,-0.214248,-0.0787197,-0.112408,-0.0420898,-0.103056}
,
{0.058753,-0.173206,-0.099679,0.0748949,-0.0494279,-0.0177347}
,
{0.25627,0.00433638,0.273755,0.217576,0.0178143,0.146136}
,
{-0.0919206,0.024537,-0.148066,-0.0708535,0.0441775,0.0411827}
,
{-0.559435,-0.569152,-0.530176,-0.150555,-0.249092,-0.193114}
,
{-0.073656,-0.0379791,-0.0506189,0.0606612,-0.0459846,-0.069304}
,
{-0.0643105,-0.449645,-0.0907923,0.146697,0.0696112,-0.0915927}
,
{0.314467,-0.137317,0.36055,0.259661,0.07931,-0.40539}
,
{-0.0274178,-0.0279752,-0.0793328,0.000430202,0.03612,-0.0464296}
,
{-0.182925,-0.202026,-0.164243,-0.0660221,-0.214204,-0.103329}
,
{-0.181499,0.082843,-0.189272,-0.192558,-0.0217712,0.0475038}
,
{-0.510898,0.130877,-0.709827,-0.509515,0.00531537,0.196754}
,
{0.0629082,0.0403451,0.209075,0.109544,-0.187005,-0.0328535}
,
{0.010791,-0.0136054,0.00498932,0.0151948,-0.00709808,-0.0295615}
,
{-0.146783,0.466197,-0.173605,0.498735,-0.136106,-0.639973}
,
{0.000547625,0.0983786,-0.00445015,0.0206741,0.012907,0.149407}
,
{-0.167547,-0.0516877,-0.301612,-0.0492087,0.134058,0.70575}
,
{0.0376758,0.161774,-0.0729403,0.195007,0.0433963,-0.344214}
,
{-0.0630816,0.0586022,-0.104274,0.0340518,0.0254166,-0.00372947}
,
{-0.193719,0.498184,0.123944,-0.00251855,-0.429192,-0.12649}
,
{-0.0176781,0.0123007,-0.0297154,0.0170164,-0.00454479,-0.198019}
,
{-0.194082,0.124009,0.111615,-0.139784,-0.371662,-0.140376}
,
{-0.0132732,-0.0917397,0.0337331,0.186952,-0.132277,0.0987305}
,
{0.148725,0.0864764,-0.0167291,0.123466,-0.140914,-0.00302085}
,
{0.0686491,-0.141231,-0.139162,-0.103609,0.064906,0.15464}
,
{-0.162096,0.11457,-0.0955982,0.0734165,0.0561179,-0.0137173}
,
{-0.107708,-0.231521,0.210987,0.239141,0.0709921,0.0920634}
,
{0.0254785,-0.101295,-0.21611,-0.0288466,-0.00467137,0.0844517}
,
{0.18624,0.177901,-0.0591125,0.185167,-0.0477377,0.19753}
,
{-0.0289683,0.103614,0.0518405,-0.0523223,-0.0209025,-0.127133}
,
{0.00167361,-0.0176528,0.199643,0.135431,-0.109904,0.10712}
,
{0.177682,-0.0979062,-0.15058,-0.0234394,0.10109,0.0661201}
,
{0.132758,0.172596,-0.0398002,0.0449918,0.286786,-0.20677}
,
{0.0847636,-0.0731235,0.151016,-0.0107831,-0.0182563,-0.141088}
,
{-0.143587,-0.0344637,0.88503,0.383464,0.406478,-0.0890252}
,
{0.0716616,-0.159097,0.0747562,-0.12763,-0.0394784,-0.19898}
,
{-0.127863,0.204893,0.531427,0.582444,0.190165,-0.111978}
,
{-0.0263839,-0.144156,-0.0455231,0.0989901,0.00692622,-0.153271}
,
{0.0809487,0.0901014,0.158254,-0.0611456,0.218805,-0.054066}
,
{0.0193932,-0.168843,0.162171,0.213438,-0.052195,0.132161}
,
{0.0191657,-0.0970844,-0.114001,-0.164481,0.177776,0.207554}
,
{0.0823996,0.143693,-0.0391776,0.138193,-0.315768,0.0970586}
,
{0.0510937,-0.072192,-0.184997,-0.115351,-0.221046,0.116307}
,
{0.0444685,-0.155579,0.0162814,0.0599296,0.246145,-0.148022}
,
{0.0945801,0.243908,0.0204095,0.0172363,0.0983621,0.0448987}
,
{0.0905243,-0.0502431,0.0289823,-0.0744081,-0.1596,0.191817}
,
{-0.0740711,0.0119087,-0.201402,0.0118329,-0.0237416,0.197622}
 };
  static const float bias2[1] = { 0.0653904 };
  static const float weights2[][1] = { {-0.147252}
,
{-1.04201}
,
{0.119094}
,
{0.0912383}
,
{0.0891115}
,
{-0.877272}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_4(v, index);
}
static int assign_gen_lepton_prior_2_2_4() {
  global_gen_lepton_prior.at(2,2,4) = &specialized_gen_lepton_prior_2_2_4;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_4 = assign_gen_lepton_prior_2_2_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_2_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.212672,-0.0120867,0.0216351,-0.0810703,-0.0242886,-0.0281235}
,
{0.0852892,0.151669,-0.0449469,-0.0377929,-0.0261673,-0.0462245}
,
{0.159265,-0.183114,0.17103,0.123876,0.112716,-0.0249175}
,
{0.0790709,-0.114987,0.108903,-0.00496557,0.0042038,-0.0249331}
,
{-0.0759421,0.141165,-0.0724063,-0.206715,-0.0723637,0.170796}
,
{0.183915,-0.0784562,0.0958423,-0.0656015,0.127606,-0.13703}
,
{-0.0438106,0.0973679,0.0749573,-0.123251,-0.149641,-0.0519953}
,
{0.247018,0.19272,0.152136,-0.0697514,0.100673,0.00926413}
,
{-0.13853,-0.0371646,-0.0821217,0.227672,0.0100578,-0.0133131}
,
{0.0938454,0.186298,-0.11583,0.0792838,-0.13064,-0.139519}
,
{0.103674,-0.0148696,0.0167974,-0.0652709,0.17853,-0.0640805}
,
{0.0493053,0.0670102,0.154288,0.151032,0.0545125,-0.190718}
,
{0.119582,0.0355264,0.0136376,0.0536489,-0.179599,-0.11242}
,
{-0.0895177,-0.0623247,-0.0268216,-0.214794,-0.0200944,-0.0270623}
,
{-0.13286,0.203459,0.172813,-0.225237,0.166302,0.0878636}
,
{0.0628351,-0.0549168,-0.0690752,-0.0120746,0.0846918,-0.040333}
,
{0.157054,-0.117804,-0.0549667,0.0123069,-0.0980019,0.0164423}
,
{0.0564021,0.19548,-0.103563,0.0312976,-0.0619892,-0.0128483}
,
{0.00743181,-0.0701579,-0.0718332,0.0426944,-0.0772184,0.0329871}
,
{-0.106434,-0.00201173,0.0422137,-0.0442496,0.0451589,0.093162}
,
{-0.0335779,0.0983105,0.128341,-0.00893837,-0.0866603,-0.0906176}
,
{0.109733,-0.083168,-0.21537,-0.228349,-0.0076285,-0.00111519}
,
{-0.233024,0.0931059,-0.229431,-0.023577,-0.0119122,-0.050191}
,
{0.192329,0.113755,-0.0144202,-0.0456853,0.112684,0.0859494}
,
{0.162831,-0.225422,-0.00333813,-0.00178016,0.0689382,0.0491229}
,
{-0.0354858,0.0148737,0.190366,0.138743,0.083713,-0.13683}
,
{0.18709,-0.0302524,-0.0040331,-0.10657,-0.205215,-0.0269672}
,
{0.236063,-0.0923386,-0.180432,0.035815,0.174725,0.191395}
,
{0.00850282,0.0767129,-0.017286,-0.18457,0.132008,-0.0265614}
,
{0.115308,-0.0441041,-0.0595578,-0.00893657,-0.124367,-0.016265}
,
{0.132812,0.0127974,0.0243157,0.101349,0.0737835,-0.16793}
,
{-0.134122,0.110179,0.0483525,0.0194812,0.0487269,0.115804}
,
{0.0245487,0.0332054,-0.0068117,0.133784,0.160555,0.0471502}
,
{-0.0172196,0.113458,0.0360609,0.0644358,-0.0521885,0.112228}
,
{0.0354171,0.0789127,0.0518082,-0.0372622,-0.0447128,0.0345383}
,
{-0.177465,-0.185544,0.0506345,-0.177435,0.095962,0.0908096}
,
{0.1167,-0.0772769,0.100212,0.00934335,-0.101389,-0.0834639}
,
{0.0873643,0.0222541,0.0278239,-0.0963896,0.0372141,-0.0183111}
,
{0.0310401,-0.0402894,0.167002,-0.0477571,-0.134927,-0.101115}
,
{0.128467,-0.165149,-0.065915,-0.0866532,-0.115949,0.186853}
,
{0.027356,-0.0807618,0.0494003,-0.0645171,0.203637,0.0262694}
,
{0.0279465,0.0436942,-0.0953424,-0.135132,-0.116885,0.0192043}
,
{-0.10458,-0.0239633,-0.158701,-0.0138293,0.168522,0.0374075}
,
{-0.157529,0.0433927,-0.0563963,-0.10542,0.0471387,0.0515475}
,
{0.00739525,-0.00608623,0.0287965,-0.0169983,0.138248,-0.110765}
,
{0.0150703,0.0492852,-0.143742,-0.000304461,-0.11849,0.0721379}
,
{0.184872,-0.0695586,0.0412873,-0.00205507,-0.116826,0.0352402}
,
{-0.214609,0.161743,0.061096,0.161301,0.217403,-0.170019}
,
{0.0133356,0.025309,-0.0221958,-0.0495918,-0.111867,0.0279574}
,
{0.0490078,0.0648254,-0.077342,-0.194502,-0.188504,0.0282809}
,
{0.0720631,0.0554988,0.157932,0.17775,-0.0124496,0.117626}
,
{-0.0221541,0.0216571,0.00660688,-0.202747,-0.188668,0.213371}
,
{0.153958,-0.00246891,-0.161202,0.184134,-0.0885872,0.0860149}
,
{-0.170489,0.0220427,0.175717,0.0990686,-0.0169873,0.100922}
,
{0.043526,0.0331708,0.092804,0.0789399,0.0404383,-0.223714}
,
{0.0389073,-0.159255,0.010233,0.0870457,-0.0168097,-0.200985}
,
{-0.111095,-0.158168,0.150415,0.127726,0.0126496,0.0175421}
,
{0.106634,0.0159873,0.0089825,-0.0106291,0.150103,0.0671661}
,
{-0.0999504,-0.040148,0.157212,-0.101879,0.178383,0.0431552}
,
{-0.122845,-0.181529,-0.0599217,0.0109249,0.0216767,-0.0620736}
,
{0.184794,-0.0133123,0.0119303,0.117626,0.134051,0.00884764}
,
{-0.0436268,0.143621,-0.0821245,0.0219219,-0.0247257,-0.0703596}
,
{0.0166238,0.151696,0.0564829,-0.000976319,0.194068,-0.0778369}
,
{0.0596847,-0.0583288,0.20704,0.170337,-0.181591,0.0973424}
,
{0.0267759,0.0564537,0.0149444,-0.0700933,0.120363,-0.127923}
,
{-0.103233,-0.0357444,0.0552872,0.0367868,0.146563,-0.129064}
,
{-0.048078,-0.0501615,-0.172014,0.083622,0.0342778,0.0513778}
,
{0.192249,-0.0691247,0.0155565,0.0687277,-0.125374,-0.00980355}
,
{0.191825,0.048321,-0.187626,-0.0786514,-0.0743973,0.0475397}
,
{0.0378236,0.116637,0.205292,-0.122014,0.0696793,-0.0457782}
,
{0.218402,-0.11612,0.00872931,0.0786384,-0.052351,-0.0201795}
,
{0.0490227,-0.202485,0.0236169,0.0485042,0.186978,0.00512848}
,
{0.100966,0.242408,-0.0190301,0.0459501,0.0255744,-0.026046}
,
{-0.054623,-0.00615744,-0.234283,0.0558267,-0.0336764,-0.0733944}
,
{-0.0301662,-0.127977,0.202472,-0.159106,-0.00228658,-0.0307469}
,
{-0.102062,0.0589536,-0.186025,-0.116765,-0.0792193,-0.223894}
,
{-0.176179,0.111871,-0.155846,0.173725,-0.192077,0.0634397}
,
{-0.130249,0.0274788,-0.197845,-0.0294282,0.0643839,0.229221}
,
{0.0826834,0.0635092,0.0629307,0.0857502,0.0479584,0.154483}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0224037}
,
{-0.117423}
,
{-0.00811402}
,
{-0.015501}
,
{-0.0469367}
,
{-0.124043}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_2_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_2_5(v, index);
}
static int assign_gen_lepton_prior_2_2_5() {
  global_gen_lepton_prior.at(2,2,5) = &specialized_gen_lepton_prior_2_2_5;
  return 0;
}
static int initialize_gen_lepton_prior_2_2_5 = assign_gen_lepton_prior_2_2_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_20(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.210343,0.110517,0.0452346,-0.0314442,0.239445,0.0307786}
,
{0.0285488,-0.0382427,-0.00875248,-0.0449517,0.11041,-0.143919}
,
{0.0906115,-0.101483,0.0918412,-0.112651,-0.0850786,-0.236996}
,
{0.169829,-0.232694,-0.00312608,0.0876103,0.108356,-0.175908}
,
{0.164435,0.225522,-0.0549428,-0.0519312,-0.0632633,-0.0176123}
,
{0.0948004,-0.0913194,-0.0205609,-0.0685718,0.0894991,0.120182}
,
{0.0413314,0.00816802,-0.194808,-0.0798095,0.101907,-0.208419}
,
{0.0601334,-0.0220414,-0.0542578,-0.191945,0.105712,0.0511613}
,
{-0.0489669,-0.0100638,0.108468,-0.223615,0.0218962,0.0384528}
,
{-0.136405,0.139071,-0.0724172,-0.234443,0.069838,0.132537}
,
{-0.111605,-0.082773,-0.0894137,-0.130465,-0.0834845,-0.0563399}
,
{-0.0737878,-0.177236,-0.0437381,-0.0538683,-0.135347,-0.14013}
,
{0.0521572,-0.0570831,0.0508692,-0.0393975,-0.223453,0.0523585}
,
{0.161036,-0.0500577,0.114228,0.196743,-0.0308141,0.0233937}
,
{0.158996,0.179829,-0.198978,-0.157475,0.0943675,-0.136072}
,
{-0.0538738,-0.121827,-0.115217,0.0393577,-0.105645,0.0930057}
,
{-0.018786,0.00228756,0.153317,-0.231196,0.159151,-0.0757422}
,
{-0.00873411,-0.00322637,-0.0251446,0.0201792,-0.131357,-0.0496213}
,
{0.0188713,0.00762621,0.0181315,0.0518926,-0.21309,0.0442198}
,
{-0.0382504,0.0796391,-0.205549,-0.125148,-0.175672,0.224118}
,
{0.0991141,0.0984806,-0.133822,-0.0427955,-0.17348,0.147271}
,
{0.101444,0.213403,-0.0183623,-0.00205479,-0.0311087,0.0789154}
,
{-0.0597043,0.125,-0.0651135,0.0238054,-0.0201448,0.0849049}
,
{0.0518302,0.0122055,-0.0121571,-0.165486,0.125012,-0.0948344}
,
{-0.0438597,0.208009,0.0966608,0.0372661,-0.131389,-0.0521026}
,
{-0.0707136,-0.0527514,-0.0370982,-0.168672,0.017563,0.0919144}
,
{0.153138,-0.122848,0.138033,-0.109897,-0.0485441,0.203962}
,
{-0.00662248,-0.174758,0.0986359,-0.0247788,0.00170548,0.0607476}
,
{-0.111032,-0.205381,-0.0986271,-0.0834988,-0.0686276,0.204432}
,
{-0.0235097,0.131306,-0.191013,-0.113622,0.0443114,0.0474155}
,
{-0.219849,-0.0609559,0.107928,-0.217926,-0.0484079,-0.18319}
,
{-0.0464613,0.180636,-0.0912529,0.100513,0.163036,0.11307}
,
{0.0262902,-0.0285175,0.0105348,0.0496791,0.0762009,0.0213265}
,
{0.163824,0.00300777,0.186829,-0.148938,0.176801,0.219314}
,
{0.194255,-0.110953,0.0774208,-0.120961,-0.104531,0.0601306}
,
{-0.06236,0.0667148,0.00836955,-0.0326203,0.0705022,0.210495}
,
{-0.0959753,0.0936707,-0.0433786,0.0761947,0.147319,-0.223591}
,
{-0.0931609,0.0599545,-0.171372,-0.0173972,0.160967,0.0570155}
,
{0.151131,0.123255,0.0867209,-0.240294,0.133026,0.0659163}
,
{-0.0127877,0.178228,0.0482256,-0.11823,0.164569,-0.0387978}
,
{0.0631582,-0.0652391,-0.175835,-0.0241342,0.161116,-0.118077}
,
{-0.0725827,0.13154,-0.077084,0.241462,-0.00357169,-0.121906}
,
{0.0204152,-0.0280007,0.0831169,-0.169216,0.193171,0.0943546}
,
{0.183944,-0.0984813,-0.0909401,0.0883346,-0.216689,0.0204631}
,
{0.169401,-0.151235,0.031475,0.206491,-0.0471031,-0.0297037}
,
{0.15031,0.148597,-0.104375,0.0642684,-0.186455,-0.138715}
,
{0.00188946,-0.0796653,-0.0264439,-0.0396878,-0.0749942,0.139626}
,
{-0.0686259,0.0386695,0.128475,-0.102494,-0.0824075,0.0851352}
,
{-0.0826572,-0.0605984,-0.0490648,-0.133397,-0.15068,0.242168}
,
{-0.0647362,-0.0264829,-0.0535725,0.141202,-0.164414,0.0956587}
,
{0.068436,0.0567985,-0.0722197,0.0372231,0.180986,0.0368512}
,
{-0.0175176,-0.00680452,0.102572,0.194915,-0.0171911,-0.0791507}
,
{0.00993022,-0.0394251,0.08185,0.199231,-0.0942798,0.103056}
,
{-0.0384332,-0.174063,0.0233835,-0.0659695,0.0422041,-0.0144835}
,
{0.124863,-0.0965132,0.0220094,0.0498794,0.107847,0.126501}
,
{-0.0427445,0.142349,-0.00812564,-0.149882,-0.0776085,0.0478361}
,
{0.0132873,-0.151687,-0.0645182,-0.0607628,-0.0199948,0.0971324}
,
{-0.237038,0.209576,0.0668896,-0.0896826,0.127664,0.0914599}
,
{0.0722153,0.104499,-0.0137197,0.163015,0.0456845,-0.0517482}
,
{0.0649338,-0.00744943,-0.0119686,0.089057,0.0562513,-0.031278}
,
{-0.148988,-0.0355861,-0.0638106,0.128274,-0.0503746,-0.0126756}
,
{0.0348622,-0.0164917,0.0673691,0.012889,-0.114696,0.0409886}
,
{-0.0207695,-0.109737,0.011768,-0.0953569,0.0115551,-0.209789}
,
{0.12839,0.00356532,-0.0375028,-0.166753,0.0716936,0.104258}
,
{0.069591,0.027864,-0.0413305,-0.0514927,0.0886771,0.14506}
,
{-0.0648581,0.148381,0.0564243,0.100393,-0.0214954,0.155405}
,
{0.104624,0.0527433,-0.0703367,0.0264096,0.00749876,0.0670042}
,
{0.00132853,0.0611802,0.0887771,0.0301216,0.24713,-0.129369}
,
{0.0227945,-0.0176521,-0.107444,-0.0874881,0.208731,0.101383}
,
{-0.202153,0.0992373,0.0876053,0.0405295,0.017336,-0.0682468}
,
{-0.134839,0.137783,-0.0559888,0.199141,-0.0536753,0.0111743}
,
{-0.0285429,0.122289,0.217977,0.111161,0.0900796,0.0184871}
,
{0.0496964,0.0918829,-0.0892164,0.0562371,-0.033246,-0.235017}
,
{0.010404,-0.145772,0.176063,0.138925,0.015867,-0.0691115}
,
{0.00167173,-0.0891875,-0.0120531,0.172051,0.174167,0.0319115}
,
{0.0900524,0.0509762,-0.0571516,0.0151931,-0.0740091,-0.059205}
,
{0.141812,-0.237256,-0.20404,0.112978,-0.0236363,-0.0658023}
,
{0.0363326,0.166931,0.155784,-0.00877251,-0.00906845,0.158317}
,
{-0.0853514,-0.072529,0.0461216,-0.198041,-0.114911,-0.000781806}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.00896047}
,
{-0.0300184}
,
{0.00827576}
,
{-0.159986}
,
{0.081133}
,
{-0.0822559}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_20(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_20(v, index);
}
static int assign_gen_lepton_prior_1_0_20() {
  global_gen_lepton_prior.at(1,0,20) = &specialized_gen_lepton_prior_1_0_20;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_20 = assign_gen_lepton_prior_1_0_20();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_21(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.103511,-0.00855197,0.0406686,-0.00354318,-0.00536648,-0.147669 };
  static const float weights1[][6] = { {0.131559,-0.0354846,0.0320745,0.103408,0.00647899,-0.0955104}
,
{-0.257769,-0.108377,-0.0478209,-0.234652,-0.24004,-0.0344281}
,
{0.0723676,0.0959483,0.0200197,0.237044,0.188694,-0.0510935}
,
{-0.586642,0.230289,0.133742,-0.0812523,-0.190133,-0.750349}
,
{0.0164815,-0.231793,-0.0584631,-0.248959,-0.125235,-0.397572}
,
{-0.0830282,0.120839,0.0280027,-0.0212962,0.185247,0.0647864}
,
{-0.180398,-0.251418,-0.025174,0.0385467,0.0949122,-0.184211}
,
{0.0349175,0.388235,0.0125088,-0.59953,-0.065612,0.0064112}
,
{0.0965338,0.392576,-0.240058,-0.445998,-0.020265,-0.0677871}
,
{-0.0587211,0.231206,0.0437456,-0.00087146,0.0894945,0.111923}
,
{-0.06001,-0.0146864,0.19766,0.0481509,-0.0308094,0.0378403}
,
{0.0250293,-0.14349,0.0360536,-0.110262,-0.120649,0.0737017}
,
{-0.14616,-0.177819,0.0568301,0.11669,0.16357,-0.231055}
,
{0.370183,-0.104276,0.228253,-0.324849,0.151615,0.179409}
,
{-0.0447504,-0.132022,0.061471,0.0647035,0.106753,-0.00623625}
,
{-0.0044257,0.234465,0.23983,0.0379509,-0.139628,0.121419}
,
{0.211213,0.0656218,0.12412,0.15522,-0.170307,0.288286}
,
{0.00691586,0.148494,-0.127007,-0.0180632,-0.106366,-0.00435059}
,
{-0.211324,0.0620527,-0.16523,-0.140319,-0.0592116,-0.118511}
,
{-0.0466318,-0.180744,-0.0927396,0.0513012,-0.065896,0.0515469}
,
{0.0566687,0.249745,-0.0538036,0.0476957,-0.175318,0.109063}
,
{-0.0706518,-0.0557233,0.00788094,0.123773,-0.111067,0.110754}
,
{-0.113207,-0.121409,0.0587192,0.0697644,-0.113758,0.162561}
,
{0.059072,0.0360441,-0.0132179,-0.109611,-0.111534,-0.159736}
,
{0.0429192,-0.123384,0.167031,0.155988,-0.00479974,0.0285226}
,
{-0.214826,-0.141414,0.0249773,0.272075,0.227017,0.0130427}
,
{-0.027247,0.163751,-0.0387075,0.0958702,-0.0605965,-0.0877214}
,
{-0.0446254,-0.0284154,-0.156879,0.156304,0.0285527,0.0357257}
,
{-0.00310537,-0.141458,-0.0158429,0.17572,0.206442,0.0141152}
,
{-0.0924331,-0.217184,-0.100357,-0.195475,0.101855,0.0901603}
,
{-0.0647998,-0.169859,0.153409,-0.0505735,-0.0654911,0.0210519}
,
{0.0556978,0.0145488,0.134277,0.0460829,0.167956,0.0696956}
,
{-0.384569,-0.00706983,0.771907,-0.0771898,0.0427876,0.140916}
,
{0.218347,-0.0773157,-0.00461579,-0.0929661,-0.10977,-0.11711}
,
{-0.166614,-0.164717,0.0733714,-0.046102,0.188268,0.0889445}
,
{-0.235818,0.0591122,0.214807,-0.1076,0.0218408,0.0694087}
,
{0.128413,0.345879,-0.457801,-0.0972622,0.127871,-0.0492186}
,
{0.0037372,0.224518,-0.0698508,-0.00123031,0.0407467,0.187701}
,
{-0.19277,-0.183478,-0.152655,-0.110205,0.0637212,0.214705}
,
{-0.147633,-0.0230061,0.0586805,-0.108369,0.135266,0.0647272}
,
{-0.143113,0.243762,-0.00911549,-0.156985,-0.168955,-0.035087}
,
{-0.156372,0.231588,0.111008,-0.204416,0.117218,0.145232}
,
{0.107661,0.420571,-0.231985,0.0129879,0.11892,0.057704}
,
{-0.093719,-0.15103,0.159473,0.0625575,-0.125382,0.076081}
,
{0.0529504,0.1847,-0.0696214,-0.111721,-0.0331299,-0.00225652}
,
{-0.143107,0.300634,0.0414413,0.198028,0.14004,0.251556}
,
{-0.244914,0.134539,-0.5637,-0.157327,0.0382112,0.156724}
,
{0.0118617,0.434119,-0.283158,-0.0898893,-0.148348,-0.0228975}
,
{-0.0912569,-0.140656,-0.0100772,-0.139771,-0.133533,-0.0418205}
,
{0.0702781,0.0939906,-0.0042488,-0.150736,-0.131944,-0.154674}
,
{-0.216011,-0.239079,-0.00475001,-0.143055,-0.203572,0.150039}
,
{0.175053,0.184922,-0.474061,0.0381584,0.078402,0.126455}
,
{-0.00250552,-0.14657,0.249667,0.0830064,0.0987099,0.0313399}
,
{-0.0666117,0.0916889,-0.0763458,-0.141787,0.0464953,0.0229315}
,
{0.000373428,0.0505372,0.00740507,0.0355153,-0.0591163,-0.0508523}
,
{-0.190059,-0.0954394,-0.0442723,-0.120643,0.119069,-0.0973332}
,
{-0.000823292,-0.0468082,0.119038,-0.00886592,-0.102168,0.0803484}
,
{-0.130431,0.0872708,0.104103,0.196052,0.116386,-0.0543969}
,
{0.0136979,0.0686126,-0.172854,0.125418,0.124151,-0.028046}
,
{-0.161472,-0.0310818,0.0609788,0.0467052,-0.0514156,0.0113573}
,
{0.162022,-0.0613927,0.0720679,-0.0426929,-0.0162442,-0.048013}
,
{0.00603233,-0.0963707,-0.0417805,0.00810956,0.180622,-0.142284}
,
{0.238966,0.116568,0.0251267,-0.168106,-0.0997544,-0.0533256}
,
{-0.140127,-0.069168,-0.172581,0.083081,0.101732,0.0584283}
,
{0.0956955,-0.158871,-0.154146,-0.0144731,-0.0637948,0.00919882}
,
{0.0391312,0.174004,0.0857509,-0.147709,0.0347704,-0.113876}
,
{-0.195064,0.0977104,-0.0857222,0.0679955,0.098163,-0.0199647}
,
{0.0851302,-0.0161158,-0.00402324,0.126544,0.1501,0.0306749}
,
{-0.0189962,-0.0881897,-0.00732343,-0.0791654,-0.0905181,-0.0227787}
,
{0.226772,-0.00712709,-0.0870191,0.128962,0.125107,0.192598}
,
{-0.00507359,-0.0217814,-0.171855,-0.100754,0.0200569,0.0591895}
,
{0.156132,-0.0375602,0.0422857,0.134624,0.0213096,-0.0166211}
,
{0.00946686,0.0586404,-0.0798053,-0.0521675,-0.0494665,-0.0374388}
,
{0.145288,-0.0716293,-0.249308,-0.0774701,0.0507343,0.02886}
,
{-0.0873501,0.203123,0.146731,-0.17843,0.0658211,-0.126433}
,
{-0.115625,0.00301114,-0.0806624,-0.0776003,-0.214862,-0.0376825}
,
{-0.185709,-0.217631,0.0318368,-0.0398467,-0.0406821,-0.018161}
,
{-0.109341,0.0121247,-0.166126,0.150868,0.0316175,-0.0809249}
,
{-0.141379,-0.0564057,-0.0249499,0.146011,0.159023,-0.123642}
 };
  static const float bias2[1] = { -0.0967584 };
  static const float weights2[][1] = { {0.160023}
,
{-0.108647}
,
{0.28213}
,
{-0.15315}
,
{-0.219876}
,
{0.126777}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_21(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_21(v, index);
}
static int assign_gen_lepton_prior_1_0_21() {
  global_gen_lepton_prior.at(1,0,21) = &specialized_gen_lepton_prior_1_0_21;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_21 = assign_gen_lepton_prior_1_0_21();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_22(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.314766,-0.103716,0.145759,0.0787314,-0.0880982,0.0136495 };
  static const float weights1[][6] = { {0.192102,-0.0911026,0.00352689,0.0810405,0.288439,-0.159508}
,
{-0.386385,-0.108668,0.0150788,0.0855898,-0.000608137,0.0539607}
,
{-0.308292,-0.119511,-0.300509,-0.180796,-0.147558,-0.23672}
,
{-0.667685,0.112748,-1.27326,-0.516732,-0.322019,0.303787}
,
{-0.238366,-0.195935,0.0542287,0.0271032,0.0309201,-0.0164825}
,
{-0.350685,0.00986096,0.127458,0.199624,0.0194346,-0.0808566}
,
{-0.32034,-0.282754,0.108413,0.17986,-0.0464655,-0.0944013}
,
{0.459128,0.0534137,-0.113437,0.234639,-0.0200029,-0.491668}
,
{0.550821,0.20179,0.0988405,0.223749,0.220559,-0.306985}
,
{0.02872,-0.123607,0.0836507,-0.102059,0.136665,-0.00830082}
,
{0.0937346,0.0141782,-0.0378011,-0.0663474,-0.00668464,0.069952}
,
{0.0895024,0.190778,-0.0332427,0.0658223,-0.167813,0.187301}
,
{-0.109863,-0.259664,0.184949,0.0680792,-0.0638274,0.0669561}
,
{-0.132499,0.284653,0.0890857,-0.0526534,0.117992,-0.183167}
,
{-0.0535759,0.18158,-0.0984136,0.143964,0.0212545,0.0507615}
,
{0.0193909,0.0653834,-0.120677,0.213778,-0.0481133,-0.0998266}
,
{-0.104942,0.388377,0.149352,-0.197594,0.341581,-0.109772}
,
{0.215792,0.0632467,0.0451327,-0.0846284,0.041314,-0.0306869}
,
{-0.0756369,0.0400649,0.00983827,0.176017,-0.249667,0.191359}
,
{0.0430682,-0.0113715,-0.0482974,0.0907137,0.0427522,0.0106139}
,
{0.189525,0.054432,-0.19016,-0.10647,0.0380656,-0.0255962}
,
{-0.00433059,-0.0634153,-0.0942085,-0.00174688,0.076014,0.0928168}
,
{-0.127672,0.0892912,-0.0152207,0.142844,0.215528,0.0363382}
,
{-0.0285715,0.0268275,0.157864,-0.106827,0.0867796,0.0597565}
,
{0.158101,0.0232793,-0.0513087,0.0204107,0.356032,0.0959819}
,
{0.0591093,-0.269523,-0.0570517,0.234642,0.289631,0.0574147}
,
{-0.102411,0.0179561,-0.0099302,-0.263742,0.084604,0.0193193}
,
{0.0880217,-0.154516,-0.0166632,0.0495311,0.202079,0.0564774}
,
{0.685014,-0.020038,0.0207744,-0.283045,0.00230207,0.584556}
,
{-0.0887126,-0.154978,0.081699,0.0172517,0.0402827,0.187501}
,
{-0.152026,0.0439931,-0.47948,-0.45068,-0.182611,-0.115932}
,
{0.0385584,-0.104368,0.0807968,0.225436,0.00786685,-0.0928151}
,
{-0.0245512,0.0984058,-0.258885,0.223503,-0.483925,0.0727426}
,
{-0.0208604,-0.0985177,-0.117982,-0.0264402,0.011592,0.0252829}
,
{0.00233893,-0.0516684,0.170627,-0.734719,0.48149,-0.133881}
,
{0.189373,0.110707,-0.0724068,0.260136,-0.238985,-0.103374}
,
{0.122015,0.00815653,-0.440834,0.567602,0.0614712,0.412284}
,
{-0.37258,-0.0455423,0.152272,-0.382195,-0.0850688,0.10383}
,
{-0.0168585,0.0573415,0.333803,-0.37853,0.122832,-0.042022}
,
{0.123871,-0.0107839,0.0957356,0.328162,0.0143831,-0.066433}
,
{-0.164233,-0.106088,-0.222949,0.152332,0.160239,-0.262814}
,
{0.33381,-0.00680912,0.581007,0.512986,0.291496,0.06345}
,
{0.239857,-0.257419,0.0130395,0.129837,0.375954,-0.756252}
,
{0.415691,0.285626,0.031238,-0.381348,-0.27191,0.0673863}
,
{0.0215727,-0.0168224,0.121932,-0.110769,-0.0132637,-0.382732}
,
{0.15757,0.285255,0.493032,-0.072285,-0.565392,-0.0523173}
,
{0.211769,0.0673314,-0.164983,-0.434335,0.38155,-0.215402}
,
{-0.157517,-0.0630523,0.125285,0.11167,0.0875051,-0.0571486}
,
{-0.642909,-0.26905,-0.215014,-0.559214,0.154166,0.11026}
,
{0.268616,-0.151216,-0.210281,-0.317766,0.361536,-0.198899}
,
{0.57537,0.250004,0.0888572,-0.334028,-0.176461,-0.119426}
,
{0.531277,-0.281512,0.268721,-0.241402,0.349443,-0.94519}
,
{0.106546,-0.273565,-0.195244,0.441204,0.375387,-0.28588}
,
{-0.32156,0.275209,-0.35882,-0.800019,-0.904548,0.416276}
,
{-0.347553,0.107321,-0.117844,-0.0745265,0.525758,-0.43662}
,
{-0.325543,0.044973,-0.159256,-0.354784,0.342467,-0.486016}
,
{-0.179287,-0.0157881,-0.101129,0.0937355,0.521231,-0.548711}
,
{0.75082,-0.0311692,-0.059469,-0.359297,-0.921786,0.944398}
,
{0.852662,-0.00754513,0.0329633,-0.363314,-0.891972,1.07867}
,
{-0.597046,0.131397,-0.0382823,0.0529309,0.55403,-0.509192}
,
{-0.547181,-0.0441976,-0.185278,-0.107295,0.596703,-0.398648}
,
{0.0946587,-0.242992,-0.0678635,0.118323,0.0612856,-0.0572462}
,
{0.0822656,-0.230472,-0.166065,-0.124661,-0.248517,0.142202}
,
{-0.185532,-0.0718077,-0.218689,0.265283,0.407779,-0.277098}
,
{0.221706,0.0606906,-0.0104542,-0.410563,0.297995,0.409769}
,
{0.137081,0.0785112,-0.0311892,-0.16878,-0.238809,0.116448}
,
{-0.0191164,-0.0547035,0.084974,0.218499,-0.338646,0.197732}
,
{0.0932047,-0.0483936,-0.0550991,0.293456,-0.511487,0.904962}
,
{-0.621184,-0.124228,-0.211727,-0.177158,0.515138,-0.501734}
,
{-0.176419,-0.00498678,-0.242463,-0.137153,0.351349,0.610663}
,
{-0.59091,-0.177246,-0.18399,0.171212,0.533991,-1.1195}
,
{-0.0201242,0.125989,-0.0616011,0.10813,-0.253192,0.0103608}
,
{-0.541981,0.0674988,0.164832,0.321786,0.705104,-0.888879}
,
{0.350365,0.0480498,-0.0232085,-0.358749,-0.141873,0.171853}
,
{0.078306,-0.0685025,0.127936,0.0860879,-0.000564597,-0.12217}
,
{-0.0901649,-0.0384301,-0.192914,0.147733,-0.18903,0.0240184}
,
{0.12996,0.19971,0.0445126,-0.0898186,-0.0150956,0.0608779}
,
{0.0678455,-0.0713539,-0.0944799,-0.0881644,-0.189799,-0.0673678}
,
{0.0149305,0.128922,0.111674,0.0676375,0.143227,0.1344}
 };
  static const float bias2[1] = { -0.0208974 };
  static const float weights2[][1] = { {-0.0633596}
,
{0.162619}
,
{-0.0738044}
,
{0.242184}
,
{0.0531857}
,
{-0.0460138}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_22(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_22(v, index);
}
static int assign_gen_lepton_prior_1_0_22() {
  global_gen_lepton_prior.at(1,0,22) = &specialized_gen_lepton_prior_1_0_22;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_22 = assign_gen_lepton_prior_1_0_22();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.163647,0.273465,0.670303,-0.317557,-0.00698506,0.112768 };
  static const float weights1[][6] = { {-0.128104,-0.782052,-0.413152,1.11288,-0.76548,0.496175}
,
{-0.612163,0.0689477,-0.503713,-1.07998,0.0518862,0.138961}
,
{-0.108559,-0.126315,-0.0949617,-0.838787,-0.764721,0.103903}
,
{0.400613,0.230425,-0.348968,-0.75862,-0.310286,0.822936}
,
{-0.048604,0.406913,0.683575,-0.545632,-0.172523,0.16844}
,
{-0.0280636,0.206453,0.575553,0.0397728,-0.155072,-0.0270961}
,
{-0.381287,0.136094,0.899682,-0.212453,0.126194,0.0313974}
,
{-0.223249,-0.0453022,-0.0852133,-0.129923,-0.407324,-0.256429}
,
{0.194004,-0.204876,0.172782,0.160552,-0.157018,-0.108211}
,
{-0.104288,-0.0893549,0.0221948,-0.110803,-0.151112,-0.0858315}
,
{-0.0443787,-0.192393,-0.0139908,0.0281125,-0.0205414,-0.0305314}
,
{-0.0282201,0.255794,-0.364734,0.140319,-0.159749,-0.196981}
,
{-0.224621,0.210235,0.814179,-0.252073,-0.0729158,0.170035}
,
{-0.0882936,0.52232,0.709648,-0.138189,0.0335545,0.216855}
,
{-0.0297463,0.0177202,-0.00729012,-0.00554311,-0.0934831,-0.195714}
,
{0.187354,0.227541,0.0302797,-0.177708,0.0887466,0.144846}
,
{0.0805337,0.18957,0.341478,-0.157848,0.143345,0.0958436}
,
{-0.334121,-0.375534,-0.169134,0.00383215,0.166302,1.12381}
,
{-0.114861,-0.1747,-0.0320508,-0.125922,-0.347316,0.189379}
,
{-0.0560322,0.106795,-0.0655085,0.237224,-0.0895782,-0.14658}
,
{-0.0671064,0.117827,-0.165142,0.0176963,-0.312472,-0.202666}
,
{0.0397832,0.0118818,-0.0399874,-0.00612255,-0.107447,-0.158987}
,
{-0.0206768,0.0307475,0.0640599,0.0323881,-0.0471081,0.000536572}
,
{0.0692398,0.000469826,-0.0312463,-0.00691384,0.30285,-0.112845}
,
{-0.340359,0.227531,-0.130842,0.185292,-0.013397,0.139966}
,
{-0.163023,0.0732548,0.117455,0.319127,-0.00611343,0.0505916}
,
{-0.172568,-0.0569154,0.225324,0.204815,0.20689,0.195484}
,
{-0.353703,0.205916,0.180798,0.0263779,-0.178646,0.352626}
,
{-1.22813,0.175452,0.56746,0.965372,0.26889,0.082743}
,
{0.0771916,-0.0821389,-0.0871941,0.117983,0.0531755,0.130521}
,
{0.052291,-0.0195848,0.0927573,0.0506846,0.218793,0.117553}
,
{0.229638,-0.0742038,0.106493,0.0125726,0.0157911,0.0886652}
,
{-0.0101331,-0.00661154,0.0907477,0.196489,0.151949,-0.00473452}
,
{0.0565533,-0.0275355,0.120972,-0.0623688,-0.0492437,0.0684172}
,
{-0.0671467,-0.106486,-0.119078,-0.15859,-0.053793,0.15905}
,
{0.0824975,0.0477988,0.066022,0.0813623,0.039561,-0.0126935}
,
{0.262806,0.0720318,0.205718,0.172648,-0.0326793,-0.263682}
,
{-0.0960563,-0.0422638,-0.0132636,-0.0521388,-0.0448055,-0.0532224}
,
{-0.219355,-0.0147486,-0.0715318,-0.0256231,-0.190538,0.045052}
,
{-0.326434,-0.0312921,-0.213918,0.00804958,-0.0987324,0.153696}
,
{0.00836458,0.0410366,-0.00686799,0.0103112,-0.0369367,0.00157355}
,
{-0.0731899,0.128413,-0.0668565,0.0942699,-0.159838,-0.0477801}
,
{0.0222675,0.014263,0.036492,0.0232141,0.00588356,-0.0191051}
,
{0.413347,0.0847216,0.17575,0.00733204,-0.155318,-0.160155}
,
{0.0544744,-0.009657,0.00165303,-0.0313401,0.0762478,0.0685422}
,
{0.0526374,-0.00615185,0.0265859,-0.0197253,-0.0149849,0.0215683}
,
{0.00175237,0.015135,-0.00620278,0.0286215,0.0920209,0.0856256}
,
{0.0357716,0.0229293,0.0118331,0.0438145,-0.0391535,0.0160978}
,
{0.227084,0.0499396,0.0343112,0.0170949,0.0209935,-0.0136318}
,
{0.0589801,0.010986,0.00346313,0.062524,0.0201228,0.0274682}
,
{0.0260879,-0.0331119,0.0174278,-0.0104596,-0.00866257,-0.0446331}
,
{-0.295617,-0.0520298,-0.0770466,-0.0338265,-0.292189,-0.116818}
,
{-0.00540861,-0.00856512,-0.00841099,-0.0169794,0.000542635,0.0194894}
,
{-0.159652,-0.0055412,-0.0800013,0.00632088,-0.0735009,0.0425991}
,
{-0.203627,-0.0659136,0.156489,0.518908,0.00607959,-0.142621}
,
{0.177947,0.0662558,0.00977813,-0.0124519,0.0631685,0.0330439}
,
{0.609315,0.114076,-0.000732587,0.216184,0.263379,0.0656699}
,
{0.393443,-0.572631,-0.103559,-0.29972,-1.57789,0.138354}
,
{-0.44703,-0.00897114,-0.0408827,0.0799835,0.353221,0.0499818}
,
{-0.125438,-0.0531601,0.120426,0.195644,-0.00333198,0.0758154}
,
{-0.295837,-0.214567,-0.0274794,-0.0233259,0.0244267,-0.0866397}
,
{-0.30629,-0.129172,0.100828,0.341281,0.327455,-0.217122}
,
{0.535952,0.0396063,0.177164,-0.00631025,0.860976,0.22044}
,
{-0.0590661,0.42472,-0.035912,0.33038,0.0330458,0.0996559}
,
{-0.169538,-0.257562,0.213544,-0.143083,0.246815,0.251284}
,
{0.047519,0.0735969,-0.0329183,-0.0822644,0.0552101,-0.181127}
,
{0.135359,0.0484172,0.163147,0.12646,-0.0197512,-0.260705}
,
{-0.368029,0.331614,-0.0531268,-0.973163,-0.0323973,0.382225}
,
{-0.346442,0.0896844,0.0907548,0.0446674,-0.114392,-0.0388593}
,
{-0.49537,0.00430527,0.109529,0.167071,-0.00101115,-0.0112719}
,
{0.211779,0.150066,-0.0135881,0.180188,0.0218598,0.110641}
,
{-0.124439,0.0670459,-0.0459829,0.257432,-0.322827,-0.0990236}
,
{-0.721689,0.322075,0.0472254,-0.341757,-0.0362342,0.878001}
,
{0.172636,0.188577,0.0012423,-0.257801,0.099565,0.0929418}
,
{0.226794,-0.433115,-2.99995,0.840464,-1.22772,-0.145191}
,
{0.0469214,0.169392,-0.00260509,0.005099,-0.557307,-0.148607}
,
{0.601098,-0.0591639,0.43233,-0.548205,-0.292567,-0.244546}
,
{-0.108539,0.173534,0.0203428,0.163956,-0.108871,0.179535}
,
{-0.205838,0.078621,-0.0469633,-0.235697,0.707752,-0.262037}
 };
  static const float bias2[1] = { 0.320909 };
  static const float weights2[][1] = { {-0.0532061}
,
{0.0623282}
,
{0.105625}
,
{-0.0612935}
,
{0.0652376}
,
{-0.050324}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_3_0(v, index);
}
static int assign_gen_lepton_prior_2_3_0() {
  global_gen_lepton_prior.at(2,3,0) = &specialized_gen_lepton_prior_2_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_2_3_0 = assign_gen_lepton_prior_2_3_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_3_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.213052,-0.0201031,-0.20382,-0.375704,0.109292,0.349644 };
  static const float weights1[][6] = { {-0.111512,0.02267,-0.0465813,0.142114,0.188922,0.504855}
,
{0.36311,-0.47942,0.520401,-0.111914,-0.136317,0.00361467}
,
{-0.526486,-1.13904,-0.280719,0.0999833,-0.038672,0.045512}
,
{-0.258302,-0.0349619,0.500459,-0.609365,0.450453,0.493286}
,
{-0.306891,-0.0516906,-0.109162,-0.310075,-0.10371,0.201925}
,
{-0.230429,-0.0555578,-0.214727,-0.502613,0.359268,0.645308}
,
{-0.0470844,0.0546873,-0.161534,-0.36595,0.248096,0.481164}
,
{0.0674406,-0.285717,-0.0947424,-0.0400708,0.247742,-0.19261}
,
{-0.209952,-0.215645,-0.335769,0.27919,0.0392388,0.153102}
,
{0.016226,0.0676593,0.0224693,0.126453,-0.171491,-0.00631257}
,
{-0.0221658,-0.0502717,-0.00588817,-0.126159,0.0614931,0.0134507}
,
{-0.129139,0.0348538,0.180586,0.225935,0.218224,0.0846184}
,
{-0.284524,-0.00612286,-0.167474,-0.572881,0.264765,0.500361}
,
{-0.178174,-0.0462814,-0.0485427,-0.239185,-0.00585519,0.340017}
,
{-0.156593,0.205416,-0.101111,-0.158314,0.219935,-0.0524283}
,
{-0.0445637,-0.0549142,0.12347,0.0578849,-0.153746,-0.0584643}
,
{-0.420484,-0.0379224,-0.204732,0.00194093,-0.104602,-0.061932}
,
{0.339977,0.133697,-0.327214,0.0265918,-0.152368,0.195666}
,
{-0.267596,-0.126362,-0.0720446,-0.0843933,-0.176258,-0.116141}
,
{-0.259184,0.0831497,-0.0295259,0.0713975,-0.0950741,0.147913}
,
{-0.083008,-0.383042,-0.239917,0.026307,0.166285,-0.0983768}
,
{-0.231119,-0.0344803,0.116789,0.110745,0.178743,-0.0112123}
,
{-0.117827,0.0930582,0.00810515,-0.107321,0.152326,0.211089}
,
{0.229857,-0.248704,-0.00872513,0.033107,0.0259301,0.00522174}
,
{0.104469,0.00501053,0.0683303,0.291226,0.10245,0.339567}
,
{0.228606,-0.15996,0.14927,-0.00604748,0.390961,0.0461022}
,
{-0.0335126,-0.0618636,-0.160656,-0.269121,0.100578,0.225542}
,
{-0.156652,-0.038498,-0.241253,0.301906,-0.308208,-0.196592}
,
{-0.0601685,0.0559343,0.20305,0.892299,-0.470787,-0.403773}
,
{-0.0897934,0.00419851,-0.213319,-0.184362,0.0377179,0.0817437}
,
{0.112786,-0.106125,-0.000271693,-0.0276506,0.0171281,-0.0617471}
,
{-0.101443,-0.189356,-0.119499,0.0773757,0.117903,0.00152195}
,
{0.140462,-0.0370426,-0.0232696,0.0953251,0.0872141,-0.102234}
,
{0.104144,0.0300544,0.114643,-0.0381609,0.0656025,0.0391977}
,
{0.180274,-0.0524558,-0.122795,0.0689558,-0.113376,0.186615}
,
{0.0816826,-0.00887036,0.14696,-0.0437053,0.0179528,-0.0825965}
,
{-0.0130496,-0.314117,0.809293,-0.339845,-0.219864,-0.339916}
,
{-0.0846646,-0.0502586,-0.0147675,0.0393808,-0.0295101,0.08791}
,
{0.0184783,-0.406648,0.367932,-0.0944517,0.0953507,-0.0939417}
,
{-0.0189738,-0.0444611,0.0702405,-0.289102,-0.302725,-0.192076}
,
{-0.148315,0.0975268,0.0243113,-0.00373454,0.00204365,-0.0347571}
,
{0.465591,-0.308115,0.310328,-0.0365758,-0.072792,-0.0403192}
,
{0.0482359,-0.186967,0.0432668,0.0410589,0.0380797,0.0736123}
,
{0.244914,0.0764104,0.335721,0.392349,0.251861,0.460172}
,
{0.125317,0.00182927,-0.0142051,0.0619523,-0.0624293,0.123513}
,
{-0.0790504,2.43953e-05,-0.014739,-0.0115182,0.0271526,-0.0422147}
,
{0.145359,-0.234482,0.135698,-0.147164,-0.137069,-0.0241901}
,
{-0.0156121,-0.0139899,0.0475148,-0.0568354,-0.0199445,-0.0628742}
,
{0.0961013,-0.305634,-0.148118,-0.0602329,0.0626875,-0.118483}
,
{-0.103188,-0.0528929,-0.132568,-0.0567749,0.0265749,-0.082577}
,
{0.0435275,-0.0245306,0.0532879,0.0152255,0.0197286,0.00279697}
,
{0.0244606,0.0392479,-0.171021,-0.0272693,0.0229153,-0.0535035}
,
{-0.00343302,-0.124363,0.0417069,-0.0393553,-0.0525379,-0.00211495}
,
{0.198783,0.0598167,0.164971,-0.201976,-0.226259,-0.13189}
,
{0.106567,-0.00850687,-0.1114,-0.0244558,-0.220101,0.622655}
,
{-0.254858,0.09639,0.152304,0.030406,-0.20555,0.145253}
,
{0.208421,0.0743983,0.102213,0.341997,-0.168387,0.416313}
,
{0.346305,-0.0151016,-0.53811,1.2117,-0.416791,-0.737864}
,
{0.095181,0.043211,-0.436658,-0.00128603,-0.135459,0.469951}
,
{-0.0670078,-0.186186,-0.253525,-0.0207783,-0.16882,-0.0567908}
,
{0.0796514,-0.027214,-0.0944356,0.0756702,-0.152373,0.121864}
,
{0.382543,-0.146018,-0.0406965,-0.0820679,0.190542,0.0847973}
,
{0.274983,-0.0218879,-0.127673,0.0463279,-0.215562,1.43445}
,
{0.0479018,-0.0650697,-0.483927,-0.0563243,0.411507,0.00984613}
,
{-0.218893,-0.0541543,0.298971,0.200771,-0.241965,-0.0433328}
,
{0.0980375,0.00121476,-0.0537191,-0.234184,-0.0669545,0.267737}
,
{-0.12936,0.0501696,-0.564161,0.494915,0.0411666,-0.408032}
,
{0.0216976,0.0506693,0.28867,0.422768,-0.297544,0.164056}
,
{0.0328566,0.142137,-0.066187,0.131469,0.354337,0.439281}
,
{0.121211,0.170211,0.0857015,0.0508512,0.257939,0.177986}
,
{-0.0373213,0.12196,0.0331074,0.198766,-0.232481,-0.0543725}
,
{0.465864,0.00305209,-0.0850577,-0.00595257,0.167464,1.07924}
,
{-0.323996,-0.0505125,-0.341166,0.81562,-0.611191,-1.15456}
,
{-0.0262451,-0.0971862,-0.214204,0.420486,-0.507442,-0.0843099}
,
{1.00681,-0.0412297,-0.075776,1.50247,-0.551439,-1.73643}
,
{0.282668,0.0167116,-0.145093,0.255887,-0.289668,-0.647568}
,
{0.0805873,0.0920456,0.180405,-0.0553762,0.218503,-0.225893}
,
{0.0543532,-0.0905976,0.148702,-0.0628326,-0.054285,-0.0641151}
,
{0.893667,0.231086,-0.0959142,-1.18284,0.199422,0.182941}
 };
  static const float bias2[1] = { 0.117306 };
  static const float weights2[][1] = { {-0.567214}
,
{0.699524}
,
{0.117114}
,
{-0.138309}
,
{0.0737706}
,
{0.116866}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_3_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_3_1(v, index);
}
static int assign_gen_lepton_prior_2_3_1() {
  global_gen_lepton_prior.at(2,3,1) = &specialized_gen_lepton_prior_2_3_1;
  return 0;
}
static int initialize_gen_lepton_prior_2_3_1 = assign_gen_lepton_prior_2_3_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_3_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.177091,0.428421,-0.0860276,0.556451,-0.0438431,-0.239813 };
  static const float weights1[][6] = { {-0.1506,0.31783,0.159376,0.408521,0.117094,0.26178}
,
{0.202558,-0.103952,0.366205,-0.390532,-0.229036,-0.714923}
,
{0.264583,-0.0391769,-0.643053,0.329899,0.102023,-0.144189}
,
{-0.244604,0.593422,1.84457,0.182772,0.885428,0.356487}
,
{-0.352361,0.709004,0.0445571,0.732444,-0.397735,-0.43511}
,
{0.107263,0.34825,-0.656084,0.256529,-0.00948368,-0.208474}
,
{-0.0523998,0.185611,-0.256347,0.363586,0.143236,0.0448355}
,
{-0.0196858,-0.0624835,-0.316199,-0.0698691,-0.199635,-0.131432}
,
{-0.0424025,-0.0257907,0.0254351,0.0716395,0.105427,0.0955247}
,
{0.0258002,0.00525546,-0.146372,0.051513,-0.0721174,0.168773}
,
{-0.0697247,-0.00950364,0.086026,-0.195569,-0.00185244,0.0240161}
,
{0.00752834,-0.0820618,-0.231924,-0.306334,-0.267549,-0.136134}
,
{-0.046538,0.00452624,0.0400213,0.0971224,0.176796,0.304616}
,
{-0.0589705,0.478752,-0.123032,0.758847,-0.145412,-0.272907}
,
{0.199403,-0.0863374,0.062895,-0.0286657,-0.120009,-0.000224605}
,
{-0.0763225,0.124534,0.126244,-0.0829734,0.123108,-0.150765}
,
{0.165077,0.185299,0.0277084,0.0499624,0.192296,-0.0890643}
,
{0.169814,-0.175001,0.129179,0.296503,0.520453,0.562732}
,
{0.31126,0.0814073,-0.0497825,0.165137,0.235064,0.147819}
,
{-0.0732007,0.0187588,-0.26499,-0.0384855,-0.164004,-0.110396}
,
{-0.0568408,0.0844178,0.0217239,-0.191142,-0.122949,0.0184561}
,
{0.0875009,0.133908,-0.0083457,0.0404955,0.0237248,0.0944972}
,
{-0.0103568,0.0426798,-0.158633,-0.0807575,0.0547039,0.0160855}
,
{-0.041844,-0.0280135,-0.221781,-0.0408986,-0.0539821,-0.0263702}
,
{-0.0935431,-0.0678703,0.070624,0.016637,0.092266,0.138445}
,
{-0.175564,0.305493,-0.0267548,0.198092,-0.29388,-0.155135}
,
{0.0294085,-0.26666,0.0601696,0.00155904,-0.0491979,0.147082}
,
{-0.118858,0.12775,-0.15255,0.146434,-0.153159,-0.124981}
,
{-0.306861,-0.207661,0.125262,-0.00553142,0.211281,0.901976}
,
{0.0763963,0.12308,-0.130117,0.173374,0.0126011,0.237074}
,
{-0.177932,0.0814631,-0.0345869,0.0123497,-0.125818,-0.173153}
,
{0.0205573,-0.0922383,-0.0834803,-0.116244,-0.197787,0.0736542}
,
{0.0371557,0.0428702,-0.272389,-0.0552759,-0.0215477,-0.0402839}
,
{0.124933,-0.13143,-0.0513181,-0.116665,0.0776651,0.0388017}
,
{0.239416,0.217833,0.321823,-0.170567,0.0644926,-0.0696451}
,
{-0.110695,-0.119488,-0.0542791,0.0723823,-0.0458802,0.0226551}
,
{-0.216643,-0.244248,-0.0342876,-0.0790789,-0.312179,-0.315873}
,
{0.094494,0.106132,-0.0385059,-0.030418,-0.0248395,-0.0153612}
,
{0.0848283,0.100424,-0.0662314,-0.034408,-0.0200409,-0.0929825}
,
{0.0340541,0.0820115,0.0640333,0.0537385,-0.100488,0.03234}
,
{0.0463627,0.0131045,-0.0867914,-0.0280067,-0.0364063,-0.0629696}
,
{-0.101109,-0.215689,0.130807,0.0877149,0.176424,-0.0502088}
,
{-0.0762284,-0.0806134,-0.0783293,-0.029228,0.0719621,-0.0189632}
,
{-0.0265682,-0.0168439,-0.224252,0.0867877,0.185413,0.14563}
,
{-0.0638825,-0.0660096,-0.096925,-0.00880103,-0.0127069,-0.0333}
,
{-0.0524513,-0.0560312,0.091394,0.0432947,0.0283364,0.0679206}
,
{-0.206598,-0.0760739,0.188041,-0.0362996,0.00210811,0.144691}
,
{0.0624652,0.0638147,-0.130277,-0.0334886,0.00167917,-0.0392198}
,
{-0.0274382,-0.121714,-0.402582,0.140179,-0.0748695,0.160973}
,
{0.00580447,0.041208,0.00143042,-0.0645699,-0.0192351,-0.0557134}
,
{-0.0232059,0.0175895,-0.0197419,-0.0303439,-0.0011945,-0.0139452}
,
{0.122645,0.20369,-0.119129,-0.00191554,-0.0268104,0.0925787}
,
{-0.148537,-0.155005,-0.0216886,0.0343684,-0.0065371,0.0336253}
,
{-0.190184,-0.115031,-0.0236907,-0.073571,0.188728,-0.132343}
,
{-0.00860629,0.154813,-0.127094,0.0964907,0.0387338,0.0161072}
,
{0.0823196,0.0143229,-0.152283,-0.275175,-0.0978135,0.118383}
,
{0.358633,-0.0835297,-0.407944,0.305864,-0.0907543,-0.0504847}
,
{-0.196266,0.233539,0.0186436,-0.0824802,0.138892,-0.0252755}
,
{0.237903,0.449088,-0.133464,-0.395225,-0.234092,-0.471152}
,
{0.221193,0.0439299,0.15971,0.200321,0.237362,-0.132366}
,
{0.0301671,0.152073,0.0467538,-0.177074,-0.0420239,-0.0534315}
,
{-0.273784,-0.259926,0.130867,-0.150175,0.209684,0.7466}
,
{0.037063,-0.089027,-0.31714,-0.142179,-0.128179,-0.284562}
,
{-0.265617,-0.118386,-0.330983,0.0821214,0.0374801,0.133411}
,
{0.237999,-0.0320291,0.0672436,0.376347,-0.0554499,-0.105463}
,
{-0.153112,0.173191,0.00394116,-0.0703188,-0.0504235,0.216326}
,
{-0.0703309,0.460975,0.198926,0.384373,-0.00548999,0.279759}
,
{-0.268699,-0.102869,0.0684048,0.0131971,0.00504765,0.0656639}
,
{0.390127,0.738303,0.0797282,-0.336521,-0.0360035,-1.35864}
,
{-0.00023954,-0.183683,-0.152906,0.374403,0.10054,0.250172}
,
{-0.156097,-0.0114808,0.00703417,-0.17424,0.0801676,-0.0464678}
,
{0.441374,-0.124742,-0.34272,-0.251646,-0.0109149,0.746753}
,
{0.0776518,0.00133262,-0.140163,-0.00742337,0.178439,0.582903}
,
{-0.11586,-0.490701,-0.422167,0.0673838,-0.0471125,-0.188824}
,
{0.301939,-1.69285,0.950551,-1.03495,0.153248,1.20253}
,
{0.390503,-0.147938,0.352131,-0.311656,0.0908283,-0.0279573}
,
{0.0363021,0.157619,0.0673056,-0.452555,-0.217233,-0.454639}
,
{-0.326374,-0.0347909,0.0132232,0.660464,0.167338,-0.265173}
,
{-0.00531938,-0.133773,-0.0100372,-0.217544,0.261086,0.839908}
 };
  static const float bias2[1] = { 0.320394 };
  static const float weights2[][1] = { {-0.103518}
,
{0.0942079}
,
{-0.622037}
,
{0.107064}
,
{-0.0962468}
,
{-0.105146}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_3_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_3_2(v, index);
}
static int assign_gen_lepton_prior_2_3_2() {
  global_gen_lepton_prior.at(2,3,2) = &specialized_gen_lepton_prior_2_3_2;
  return 0;
}
static int initialize_gen_lepton_prior_2_3_2 = assign_gen_lepton_prior_2_3_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_23(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.00590933,0.0313214,-0.207568,0.150217,0.0983174,-0.0435416}
,
{-0.14184,-0.107895,0.0142864,0.0214318,-0.069324,-0.0832422}
,
{0.224821,0.102109,-0.205143,0.0701678,0.0750935,0.161604}
,
{0.0885706,0.0805093,-0.00451507,-0.0317337,-0.0872534,0.0251876}
,
{-0.086601,0.143349,0.0451414,0.19895,-0.127448,0.249443}
,
{-0.082903,0.0313285,0.0102881,0.0635033,-0.0775028,-0.0958478}
,
{-0.084756,0.0823059,0.0532345,-0.0529951,-0.130033,-0.0546655}
,
{-0.072095,0.0548719,0.173805,-0.103066,-0.123894,0.00632326}
,
{0.17454,-0.192989,-0.0528388,0.184264,0.07097,0.0583642}
,
{0.161912,-0.125635,-0.0157199,-0.0115054,-0.150085,-0.0770797}
,
{0.0825234,0.107149,-0.0620166,-0.197096,0.0212522,0.102683}
,
{-0.0598454,0.0422853,0.153961,-0.0395008,-0.0322699,0.0353407}
,
{-0.115651,0.118605,-0.0611459,0.138963,0.14092,0.0287638}
,
{0.0574757,-0.021929,-0.024979,0.101306,-0.00534056,-0.0862089}
,
{-0.209502,-0.0566912,0.0322431,-0.0876952,0.0362071,-0.0676382}
,
{0.158916,0.113903,0.064268,0.0397329,0.145568,0.109636}
,
{0.118798,0.150908,-0.091253,0.129759,-0.0524211,-0.10336}
,
{-0.0047982,-0.0889096,0.137388,0.0417868,-0.100551,0.030503}
,
{0.024647,0.14403,0.0306102,-0.0225202,0.00310396,-0.137975}
,
{0.0652644,-0.0656614,-0.0988355,0.122041,-0.185481,0.102392}
,
{-0.0157624,-0.172258,-0.105172,0.127173,0.14554,-0.0257111}
,
{-0.126865,0.0173937,0.0566668,0.108647,-0.205525,0.0132024}
,
{0.0807891,-0.138014,-0.130935,-0.0646162,0.00429957,0.187638}
,
{0.0467857,-0.0997416,-0.229428,-0.124768,0.00865549,-0.0976292}
,
{-0.00557126,0.0857868,0.105614,0.141724,-0.0684149,0.110246}
,
{0.10146,-0.0949545,-0.0592037,0.204849,0.184736,-0.0321106}
,
{0.127333,0.139537,0.0188758,0.156628,0.0884361,0.148782}
,
{-0.073745,0.131427,-0.0803541,-0.0436911,-0.120746,-0.212438}
,
{-0.0634599,0.114691,0.143224,0.0989301,0.0215421,-0.104078}
,
{0.000415326,0.112794,-0.0390617,-0.0753078,-0.0827205,-0.0354123}
,
{0.144419,0.172068,0.0332532,-0.0423959,0.00964818,-0.118957}
,
{-0.000384782,-0.157049,0.108399,0.0560963,-0.0643438,0.00182309}
,
{-0.232527,0.134947,-0.0681963,0.0882814,-0.00790341,-0.051716}
,
{0.0014216,-0.0662946,-0.247618,0.0749041,-0.143842,0.215286}
,
{0.140179,0.0142037,0.104611,-0.149479,0.0367939,0.0786227}
,
{-0.115409,0.208889,0.100736,-0.037803,0.000873756,-0.0747844}
,
{0.0211608,-0.0619465,-0.076055,-0.0861413,0.0565698,-0.119581}
,
{0.150209,0.0968281,0.11025,0.0600226,0.0529413,-0.0634397}
,
{0.136989,-0.241403,-0.122817,0.15331,0.0571717,-0.0827194}
,
{-0.223755,-0.0124291,-0.0588976,0.114287,-0.0858556,-0.127842}
,
{0.0943282,0.230221,-0.213513,-0.0940802,-0.0303127,0.0315733}
,
{-0.177718,-0.151684,0.068553,-0.00554645,-0.225293,-0.186255}
,
{0.092553,0.102847,0.023945,0.0357995,-0.0768143,-0.0015868}
,
{0.0662683,-0.0189624,-0.221545,-0.202679,-0.158091,-0.0772854}
,
{0.17574,-0.104121,-0.017296,-0.0408201,-0.160933,0.0819053}
,
{0.0343366,0.0680663,0.0040201,0.050888,-0.0668898,0.126901}
,
{-0.157418,0.166725,0.0686516,0.11042,0.14643,-0.0424278}
,
{0.0739789,0.100784,0.0169882,-0.0243483,0.246509,0.00736948}
,
{-0.108013,-0.026806,0.0813107,-0.116363,0.225068,-0.062332}
,
{-0.237005,0.110419,0.133775,-0.0231056,0.00794125,-0.0370154}
,
{0.176499,0.242865,0.0780006,0.0985484,0.0343098,-0.0618609}
,
{0.109415,0.168422,0.0862551,-0.0294055,-0.0776434,-0.15728}
,
{-0.0977427,0.0740797,-0.126288,-0.0276852,0.121028,0.0147547}
,
{0.0644353,-0.147656,-0.0159143,-0.0587404,-0.0546534,-0.0628788}
,
{-0.118206,0.0147023,0.00586114,-0.0252192,0.0482087,-0.15425}
,
{-0.15229,0.15806,0.0965642,-0.107383,0.0433676,0.104277}
,
{0.0796925,-0.054205,0.173977,-0.11402,0.135998,0.124965}
,
{-0.00640392,-0.0184635,-0.17609,0.0415276,0.0909883,0.174916}
,
{0.0848236,-0.0361329,-0.0435772,-0.168021,0.155636,0.161253}
,
{-0.0873359,0.124474,-0.0910019,0.247887,0.0550524,0.130357}
,
{-0.0411044,-0.0476878,0.0715596,-0.124046,0.101766,0.0228186}
,
{0.126602,-0.0745183,0.0769965,-0.00453568,-0.11871,0.115742}
,
{-0.0415026,0.112684,-0.206733,-0.0247154,-0.0786888,-0.0809292}
,
{-0.147359,-0.0769621,-0.00879714,-0.177601,0.0575757,0.0165392}
,
{0.00792122,-0.0412869,-0.152501,-0.240886,0.150183,-0.0415658}
,
{-0.0878952,-0.0486071,0.130902,0.067612,-0.181161,0.0725384}
,
{0.0656863,-0.070444,0.0258993,0.217353,-0.0490691,-0.00570204}
,
{-0.0273599,0.018749,0.0516268,0.182089,0.0227878,0.130667}
,
{-0.179685,-0.241267,0.00316526,-0.105516,-0.126588,-0.141317}
,
{0.120018,-0.17247,-0.120833,0.0667766,0.131875,0.122109}
,
{-0.106724,-0.019794,-0.0759499,-0.0791405,0.0555129,0.165883}
,
{0.108902,-0.0965736,0.0532932,0.0219672,-0.0474113,0.0267489}
,
{-0.158484,-0.109325,-0.0179489,-0.0213019,0.0296874,0.1312}
,
{0.0590096,0.0996252,-0.0485267,-0.0221703,0.245764,-0.0829572}
,
{0.0358445,0.143219,-0.0806644,0.0311746,0.124521,0.0971496}
,
{0.0116271,0.121525,-0.0811914,0.121037,0.184632,0.11467}
,
{0.24365,0.179841,-0.0698613,0.0854558,-0.0312843,-0.00164149}
,
{0.11657,0.0189977,0.14534,-0.160314,-0.0656305,-0.071561}
,
{0.136472,0.173803,0.0354821,0.0520227,-0.1054,0.0491083}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0834185}
,
{-0.142454}
,
{0.0739872}
,
{-0.0595614}
,
{-0.114973}
,
{0.00279589}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_23(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_23(v, index);
}
static int assign_gen_lepton_prior_1_0_23() {
  global_gen_lepton_prior.at(1,0,23) = &specialized_gen_lepton_prior_1_0_23;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_23 = assign_gen_lepton_prior_1_0_23();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.393944,0.392878,0.724407,0.395966,0.526102,0.158031 };
  static const float weights1[][6] = { {1.49977,1.16181,-1.1613,-0.83486,1.16904,-0.349603}
,
{0.0787371,0.549497,0.508775,0.027107,0.245773,0.390936}
,
{0.189971,0.209387,0.343881,0.0155675,-0.106419,-0.0358131}
,
{-0.343532,0.773132,0.853303,1.13184,1.04877,-0.127496}
,
{-0.196147,0.310332,0.559735,0.232455,0.724967,0.253424}
,
{-0.203904,0.283747,0.558279,0.308362,0.317804,-0.0222179}
,
{-0.506702,0.345068,0.592611,0.29622,0.38468,0.224809}
,
{0.185517,0.136195,-0.102478,0.000244814,0.0661901,-0.155861}
,
{-0.192203,0.0149546,0.128299,0.219726,-0.133303,0.111667}
,
{-0.0315941,0.0507829,-0.000189464,0.102733,-0.128577,-0.00470122}
,
{0.0608228,-0.146934,0.239809,0.0295689,0.0695852,0.0395215}
,
{0.0478791,0.165144,0.0388868,0.00285382,0.121137,-0.106305}
,
{-0.00419567,-0.0174656,0.104623,-0.116622,0.0624828,0.0188961}
,
{0.039462,-0.00202117,-0.0938089,0.118081,0.115302,-0.0996308}
,
{-0.142451,0.0443982,0.0899836,-0.249381,-0.0996916,-0.00594565}
,
{-0.0194873,0.17079,0.0864566,-0.0181207,0.20012,0.0130229}
,
{0.193777,0.0722811,0.0643669,0.111573,0.0582256,-0.0994475}
,
{0.225277,0.0475047,0.0133598,0.133189,0.0187373,0.100378}
,
{2.09367,1.03709,-2.32718,-1.92871,-0.0378011,-0.115389}
,
{-0.148684,-0.222348,0.034779,-0.118905,-0.058409,-0.0832692}
,
{0.139561,-0.130878,0.0471394,0.238183,-0.311863,0.15239}
,
{0.169428,0.0978222,0.155342,0.127236,-0.197243,-0.115273}
,
{0.122172,-0.0455348,0.0530751,0.0824454,0.0824129,0.0832035}
,
{0.230615,0.0686709,-0.0225611,0.192906,-0.355211,-0.0824408}
,
{0.136886,0.0954106,0.0148412,-0.0874352,0.0814372,-0.0261397}
,
{-0.231041,0.13444,-0.253313,-0.135317,0.0844318,0.0464077}
,
{0.195027,-0.207874,-0.232461,0.0615356,0.171449,-0.129444}
,
{0.347522,0.00341931,0.0317147,0.0545156,0.0325812,0.0273224}
,
{-0.700857,-0.00654369,0.552876,0.207055,-1.76771,-0.0325859}
,
{-0.0933016,0.0274468,-0.133115,0.0555601,-0.0256463,0.179373}
,
{-0.151298,-0.107624,-0.0115003,-0.0351375,-0.0360486,-0.00756147}
,
{0.12198,0.00133206,-0.22687,0.0266929,0.0286304,-0.0837787}
,
{0.0834872,-0.202705,0.112296,-0.200566,-0.000753731,0.177912}
,
{0.224441,-0.0408716,0.0635634,0.21391,-0.104407,0.0823311}
,
{-0.0403083,-0.0643233,-0.0411614,-0.00797341,-0.086881,-0.252802}
,
{0.0636011,-0.132916,-0.141723,0.0460868,-0.0926373,-0.00817511}
,
{0.102587,-0.0887809,-0.138773,0.0452144,-0.0118036,0.330627}
,
{0.0413637,-0.0688708,-0.0499835,0.0179532,-0.0365235,0.0107702}
,
{0.0583736,-0.0577412,-0.0705315,0.0289809,0.0131591,0.194913}
,
{-0.045006,0.00443617,0.0141336,-0.0269655,-0.00580137,-0.139307}
,
{-0.112959,-0.0842417,-0.089094,-0.0618366,-0.0754103,-0.00707813}
,
{-0.0639151,-0.104253,-0.133987,-0.0156992,-0.134268,-0.152891}
,
{0.0693506,-0.0800275,-0.0858307,0.0357092,-0.0479108,0.178472}
,
{-0.0230292,0.0166164,-0.00611254,-0.017237,-0.0350077,0.13185}
,
{-0.0723797,0.0355701,0.00881494,-0.0372354,-0.049931,0.0167877}
,
{0.0672716,0.12045,0.111796,0.036377,0.0599983,0.0240163}
,
{0.0874667,0.100894,0.0657451,0.0536684,-0.122131,0.0467213}
,
{0.0275764,-0.0235177,-0.0173855,0.0188994,-0.023746,-0.0136527}
,
{0.0651381,-0.0502222,-0.03659,0.0455397,-0.190269,-0.00688132}
,
{0.147029,0.00282487,0.0107908,0.0782232,0.107304,0.0302757}
,
{0.128843,-0.0157742,-0.0173313,0.0768555,-0.0133394,-0.0267511}
,
{-0.0846326,0.027968,0.0321835,-0.0582692,-0.0842993,0.057962}
,
{-0.0178779,-0.0265381,-0.0110496,-0.0103474,-0.00502873,-0.0142179}
,
{-0.0641052,-0.0133411,0.0230138,-0.0500988,0.143672,-0.0327322}
,
{-0.0820118,0.0989201,0.0406911,-0.0611747,0.0382564,-0.170882}
,
{-0.124024,-0.0915151,-0.0422393,-0.0250705,-0.000178238,0.0276754}
,
{0.0908548,-0.178122,0.00044849,0.0810835,0.0648526,-0.100772}
,
{-0.701411,-0.612298,-0.0567414,0.470955,-0.0364095,-0.18835}
,
{0.165762,-0.253762,0.0932551,0.112452,0.0330422,-0.0386143}
,
{0.264445,-0.199809,-0.0738939,0.0888466,0.00876791,0.113776}
,
{-0.0634336,-0.137663,0.0396306,-0.131556,-0.0214097,-0.0574943}
,
{0.0803979,-0.120976,0.0569235,-0.0159858,0.0212351,0.35268}
,
{0.0249363,0.0424956,0.203751,-0.757091,-0.380261,0.373132}
,
{-0.178924,0.0324353,0.0452451,0.0566632,-0.00574797,-0.500992}
,
{0.0471453,-0.0887035,0.207701,-0.0859445,0.00286818,-0.00714289}
,
{0.113565,0.0327756,0.0540678,0.0770192,0.0145619,0.171296}
,
{-0.0455448,-0.146414,0.0731792,-0.162457,-0.0449251,-0.0937004}
,
{-0.0761679,0.481497,-0.243963,0.161812,0.167793,-0.15571}
,
{0.152953,0.0313705,-0.092624,-0.00936576,-0.0442407,-0.26582}
,
{0.0329415,0.0929924,0.193284,0.131498,0.00959845,-0.0138709}
,
{0.180677,0.209847,-0.0555272,0.159453,0.00407055,-0.065912}
,
{0.0912712,0.194649,-0.129395,0.208078,0.0703991,0.123358}
,
{0.238852,0.0620371,0.459585,-0.172303,0.400647,-0.129316}
,
{0.0596956,0.227343,0.0662634,-0.0750618,0.0525823,0.205118}
,
{0.356583,0.0327277,0.220014,-0.106475,0.397097,-0.321896}
,
{0.162092,-0.11331,0.18758,-0.14074,0.189865,0.351585}
,
{0.422713,-0.139734,-0.210049,0.249398,0.364262,-0.349411}
,
{0.0528249,0.220002,-0.11796,-0.122623,0.0891569,-0.0297816}
,
{0.050808,-0.0649846,-0.0642588,0.377624,0.28899,-0.420803}
 };
  static const float bias2[1] = { 0.253307 };
  static const float weights2[][1] = { {-0.0789463}
,
{-0.0481604}
,
{0.0644602}
,
{0.129939}
,
{-0.0344915}
,
{0.013954}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_2_0(v, index);
}
static int assign_gen_lepton_prior_0_2_0() {
  global_gen_lepton_prior.at(0,2,0) = &specialized_gen_lepton_prior_0_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_2_0 = assign_gen_lepton_prior_0_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_24(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0781839,-0.251987,-0.242956,0.05923,0.171637,0.0314039 };
  static const float weights1[][6] = { {-0.126384,-0.00106332,-0.0263309,0.0242469,-0.161848,0.0514939}
,
{-0.989874,-0.146553,0.143178,-0.192026,0.0661564,-0.05324}
,
{-0.0674324,-0.0153263,-0.282951,0.0792661,-0.134324,0.0133118}
,
{0.0270809,-0.0386966,-0.0161108,0.091984,0.238294,0.141772}
,
{-0.00136303,-0.195082,-0.306244,-0.136579,0.210231,0.0530919}
,
{0.0241125,-0.340163,-0.178832,-0.06847,-0.00279201,0.119833}
,
{-0.0608045,-0.0750142,-0.266953,-0.101552,-0.0357493,-0.154474}
,
{-0.000893185,0.0321195,0.237477,0.175793,-0.0438304,-0.589493}
,
{0.0382056,0.0271073,0.118737,0.0304248,0.19547,-0.39817}
,
{0.0688919,-0.117182,0.0973052,-0.0186703,0.174237,-0.0611077}
,
{0.0810515,0.0886195,0.0993946,0.0339048,0.0726189,-0.00499435}
,
{0.110015,0.0691537,-0.150149,0.0168852,0.127688,0.14423}
,
{0.167414,0.296132,0.0920879,-0.00239802,0.128109,0.184037}
,
{-0.360885,0.057509,0.080351,-0.058992,0.0137752,0.0410937}
,
{-0.0381692,0.0303757,-0.0559095,-0.035934,0.10222,0.0229675}
,
{-0.212681,0.148107,0.142322,-0.0541083,-0.0875417,0.181201}
,
{0.0685323,-0.248628,-0.0563863,-0.0102625,0.132897,0.0968796}
,
{-0.00411641,-0.0175269,0.112256,-0.0219085,0.0643782,0.158179}
,
{0.113892,-0.258026,-0.0405029,0.0393996,0.249248,0.128461}
,
{0.124869,-0.0320738,-0.0436843,0.0422718,-0.0899545,-0.231738}
,
{-0.150906,0.0507832,0.036753,-0.158451,0.0855159,0.0967349}
,
{-0.147015,0.0538361,0.0368634,-0.0827776,0.0761339,-0.15952}
,
{-0.0989683,-0.0705176,0.149221,0.229816,0.128043,-0.0935092}
,
{0.0151105,0.0475903,0.0464809,-0.0544992,0.0842112,-0.39762}
,
{0.153532,0.287234,0.158856,0.207786,-0.14311,-0.109891}
,
{-0.171321,0.157597,0.322566,0.314196,-0.22322,0.122821}
,
{-0.0185689,0.0386731,0.0238969,0.209614,0.0472679,-0.0301754}
,
{-0.301349,0.159884,0.13548,0.0807002,-0.0255539,-0.184644}
,
{-0.217473,-0.0120843,-0.0617462,-0.102254,-0.0886934,0.196011}
,
{0.169753,0.0307499,0.107144,-0.195191,0.160866,-0.100173}
,
{-0.0935835,-0.0252293,0.246174,-0.0522209,0.0849172,-0.134127}
,
{-0.0915269,-0.0257859,-0.0112313,-0.00707486,0.0261512,0.0844062}
,
{-0.112729,0.062806,-0.203301,0.170091,-0.0314986,0.285736}
,
{0.0711988,-0.133571,-0.163989,-0.00266884,-0.131128,0.0867883}
,
{-0.661649,-0.0486053,-0.0234143,-0.103934,-0.0348405,-0.343628}
,
{0.737219,-0.0935159,0.478391,-0.0787384,0.122775,-0.16103}
,
{0.000527881,-0.216135,0.740152,-0.10625,0.122807,0.497169}
,
{-0.234415,0.038532,0.271237,-0.0697691,0.175039,0.130518}
,
{0.289731,-0.0597171,0.0863124,-0.000619007,0.0075452,-0.760113}
,
{-0.55153,-0.000579267,-0.299772,-0.158082,-0.12185,0.0202081}
,
{-0.144112,-0.0189457,-0.0616635,-0.114635,-0.137563,0.0102994}
,
{0.645325,0.147058,-0.735721,-0.23283,-0.149147,0.100632}
,
{-0.22627,0.0892343,-0.255012,-0.125869,-0.00938277,-0.0943734}
,
{-0.0579034,-0.0612677,0.0564204,-0.0339027,0.0708762,0.107659}
,
{0.279702,0.222666,-0.259191,0.0618009,0.11034,-0.345132}
,
{-0.276642,-0.0157491,0.174092,0.0436828,0.121922,0.0899812}
,
{-0.916999,0.207199,-0.315368,-0.14813,-0.254752,-0.173423}
,
{0.279976,-0.0916714,0.15156,0.00953424,0.00130803,0.194341}
,
{-0.402943,-0.0667169,0.0868661,0.038886,0.018909,-0.0994152}
,
{-0.407814,0.170573,-0.214395,-0.0152972,-0.0366086,0.0307508}
,
{0.0819351,-0.00068956,0.0172762,-0.0618328,0.0455773,0.0375048}
,
{-0.417081,0.174979,-0.136745,0.186863,0.0450144,0.0266232}
,
{-0.1889,0.171684,-0.566901,0.0220894,-0.101957,0.149408}
,
{0.245619,-0.0266738,0.0129478,-0.201725,0.0554826,0.0202957}
,
{0.20175,-0.186879,-0.240854,-0.104885,0.0305553,0.119694}
,
{-0.0604919,0.092591,0.00954395,0.0520607,0.0328769,-0.0298248}
,
{-0.213385,0.0309057,0.132161,-0.0098281,0.112919,-0.140731}
,
{-0.216944,-0.0497476,0.189008,0.0319511,0.145026,-0.174215}
,
{0.0404368,0.00905174,0.147665,0.142785,0.0947084,0.0585825}
,
{0.0932875,-0.128937,-0.0383265,0.0248383,0.137678,-0.0494629}
,
{0.0837179,-0.0595213,0.0653274,0.0869178,-0.113199,0.000373259}
,
{0.0135767,0.0229123,-0.051446,-0.0637289,-0.181079,-0.113048}
,
{0.0783567,0.0168703,0.106442,-0.107996,0.0403741,0.138618}
,
{0.0798902,0.0600918,-0.0352818,-0.0147743,-0.111032,-0.15429}
,
{0.0340796,-0.199694,-0.26392,-0.263851,0.0595842,-0.0767712}
,
{0.0908188,-0.169888,-0.0739419,0.123053,-0.158249,0.0364342}
,
{0.0735954,0.122244,0.176388,-0.0804582,0.0738436,-0.0435786}
,
{0.035778,-0.0738505,0.139657,0.242025,0.0632032,0.0298621}
,
{0.13609,-0.165263,-0.00601252,0.0607425,-0.00126214,0.0175808}
,
{0.133359,-0.0745843,-0.174437,0.196379,-0.17785,-0.0313935}
,
{-0.186605,0.0448669,-0.00233489,0.0516886,-0.00606181,-0.132849}
,
{-0.112533,-0.0367798,-0.00816759,0.069359,-0.209655,-0.0839548}
,
{-0.0753568,-0.146207,0.0863078,0.0317172,0.0744114,0.0596976}
,
{0.202498,0.0781134,-0.0414368,-0.0974829,0.0878897,0.230168}
,
{0.22882,0.0307606,0.0902438,-0.0959161,0.0248512,-0.0190291}
,
{-0.0420644,0.109719,-0.0722274,0.217111,0.0318495,0.111856}
,
{0.0682864,-0.0389676,-0.161604,-0.030337,-0.0930983,0.000997633}
,
{-0.0839687,0.0196408,0.0141866,-0.0995753,0.0579814,-0.112696}
,
{-0.166345,0.125788,0.0922129,-0.148016,0.0240433,0.0954041}
 };
  static const float bias2[1] = { 0.194878 };
  static const float weights2[][1] = { {1.79655}
,
{-0.218174}
,
{-0.151859}
,
{-0.144383}
,
{0.183557}
,
{-1.50028}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_24(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_24(v, index);
}
static int assign_gen_lepton_prior_1_0_24() {
  global_gen_lepton_prior.at(1,0,24) = &specialized_gen_lepton_prior_1_0_24;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_24 = assign_gen_lepton_prior_1_0_24();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_25(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.0992378,0.11765,0.0361617,0.0994956,0.0312135,0.0143101}
,
{-0.135416,-0.189899,0.0238943,0.18643,-0.0258667,0.106726}
,
{0.206452,0.0651683,0.09083,-0.128581,-0.0568839,0.150947}
,
{-0.115668,-0.0441759,0.152958,0.121688,0.00926224,-0.12083}
,
{-0.137141,-0.117788,-0.0134573,0.0675388,0.0516387,0.0251256}
,
{-0.183241,-0.0360177,-0.114558,0.0610962,0.0426952,-0.0826383}
,
{0.15388,0.131971,-0.163481,-0.0119039,0.0480732,-0.0248579}
,
{-0.0680814,-0.0232476,0.130762,-0.221275,0.11945,-0.0403664}
,
{-0.0284017,-0.0218533,0.149649,-0.0958318,0.215027,-0.216787}
,
{-0.000720117,0.0333888,0.150256,-0.00145715,-0.00950267,-0.0496221}
,
{0.088226,0.178855,-0.126599,-0.144865,0.0828096,-0.184279}
,
{-0.02648,-0.0437935,-0.125684,0.0658676,-0.0560742,0.0779496}
,
{0.00157763,-0.185849,0.128899,-0.0138265,-0.0119312,0.194755}
,
{0.154409,-0.00972317,0.098844,0.0632777,-0.133242,-0.084623}
,
{-0.156013,0.0219272,0.0728993,0.0875675,-0.0415486,-0.125225}
,
{0.184073,-0.172441,-0.0339368,-0.162584,-0.104748,-0.0325722}
,
{0.0840002,0.125756,-0.108927,0.194132,0.0174947,-0.037356}
,
{0.149088,0.23452,-0.139254,0.0955626,-0.022149,-0.0378243}
,
{0.0140486,0.0216472,0.0789438,0.0255685,-0.0270502,0.00367519}
,
{-0.0236982,-0.0934663,0.0269767,0.040288,-0.162132,0.0280552}
,
{-0.0478912,-0.00815008,-0.147144,0.0418508,-0.15055,0.123167}
,
{-0.164106,0.0257766,-0.160851,0.0191532,0.111658,-0.0729243}
,
{0.138327,0.0571657,-0.240679,-0.0428229,0.0805556,-0.0986979}
,
{-0.133585,0.0133683,-0.143688,0.0185124,0.0450603,-0.129318}
,
{-0.192567,0.195058,-0.219038,-0.0258482,-0.0491103,-0.193267}
,
{-0.139391,0.0307465,1.69879e-05,0.174464,-0.145014,-0.0992911}
,
{0.093575,-0.240345,-0.0464758,0.203549,-0.0553149,0.060759}
,
{-0.00119739,0.0734635,-0.0127926,-0.0453743,-0.141757,0.0286724}
,
{-0.0466296,-0.0124176,0.0325425,-0.123732,-0.211019,0.135495}
,
{0.0613649,0.0759858,-0.106997,-0.1633,0.0292376,0.068035}
,
{0.0202706,0.0462355,0.176559,0.212773,-0.0371773,-0.023695}
,
{-0.0287079,-0.00187191,-0.010448,0.140872,0.0496742,-0.0386012}
,
{0.101561,-0.0931184,0.20475,0.0839177,-0.101474,-0.00117594}
,
{0.244864,0.153785,-0.185431,-0.132931,-0.0400248,-0.0284924}
,
{-0.000822807,0.0155404,-0.174969,0.0483098,0.221133,0.185206}
,
{0.0139771,0.0520447,-0.10533,0.00507303,-0.150307,0.134617}
,
{-0.124729,0.10898,-0.010863,-0.0665401,0.0269246,0.163373}
,
{0.056873,0.0486619,0.0673681,0.00732819,0.11601,0.152028}
,
{0.031237,-0.153132,0.0508213,-0.116485,-0.0632815,0.139445}
,
{0.0427285,0.150153,0.155692,-0.196955,0.151405,0.10866}
,
{0.170771,0.108205,-0.00899686,-0.178569,-0.0905285,0.00444731}
,
{0.0251607,0.169402,-0.00274187,-0.148133,0.165649,0.137548}
,
{-0.0565825,0.155339,-0.100144,-0.105047,0.0456818,0.0714969}
,
{-0.188163,0.0847008,0.138526,0.0456355,0.15451,-0.026645}
,
{-0.0669868,0.181249,-0.0603101,-0.107918,-0.0431853,-0.104154}
,
{-0.0840122,-0.0815791,0.00842247,-0.0114765,-0.0668877,-0.0536499}
,
{-0.0350835,0.235854,0.0886025,-0.102578,-0.0204373,-0.0493966}
,
{0.13207,0.0343819,0.0782173,0.00481026,0.199304,-0.0856745}
,
{0.227751,0.0439186,-0.0108535,-0.130302,0.0471074,-0.110722}
,
{-0.163716,-0.12396,-0.0147367,-0.0252434,0.0835239,-0.0600102}
,
{-0.0189519,0.0582621,-0.0877178,0.0416351,0.0942245,0.0782419}
,
{-0.175564,0.0822885,0.138889,0.0864826,-0.0857951,-0.100712}
,
{0.193582,0.0113192,0.124062,0.100795,-0.12162,0.0847983}
,
{-0.13053,-0.134,0.0555205,-0.00660986,0.0503399,0.155309}
,
{-0.164414,-0.098851,-0.0927149,-0.0562251,-0.0751758,-0.0756399}
,
{0.159752,0.094444,-0.0345632,0.0121711,-0.118229,0.0357158}
,
{0.0195991,0.0380809,-0.151843,-0.0391906,0.151732,0.0181964}
,
{0.0897157,-0.0330521,0.107397,0.188445,-0.114931,0.0582783}
,
{-0.0247685,0.187972,0.00221847,-0.058175,0.0445358,0.0411564}
,
{0.133264,0.101971,0.0488928,-0.0698159,0.0814141,0.0639663}
,
{-0.00551388,-0.049665,0.104679,0.138352,0.0492258,0.134151}
,
{0.109789,-0.0467336,0.0646768,-0.178922,-0.00703847,-0.00208347}
,
{0.00827079,-0.0737935,-0.0742002,-0.105536,0.182234,-0.0792052}
,
{0.00161448,-0.0991483,-0.118496,0.0597604,-0.169523,-0.0678222}
,
{-0.116189,-0.0667849,-0.125432,0.154741,0.104789,-0.187085}
,
{-0.0343484,-0.0318222,0.0470916,-0.0802661,0.117361,-0.0642041}
,
{-0.0772892,0.11942,-0.248889,0.0033992,0.041669,-0.130374}
,
{0.114435,-0.0361568,0.197836,-0.223076,0.0560796,0.0157046}
,
{-0.0600213,-0.00746505,-0.233804,0.188343,-0.178275,-0.0126079}
,
{-0.229657,-0.0308038,0.00771329,0.191761,-0.144483,0.0288981}
,
{0.207147,0.191694,-0.0472221,-0.0692928,-0.0406316,0.0628883}
,
{0.181103,-0.166813,0.093256,-0.0453456,0.0803498,0.182777}
,
{0.0772099,0.169032,-0.0290756,0.01713,-0.100506,0.0841984}
,
{-0.13028,-0.14004,0.0975488,-0.123395,-0.0260966,0.0559824}
,
{-0.107395,-0.234248,0.132167,-0.0152657,0.218165,0.0235268}
,
{-0.019449,-0.0883735,0.184872,-0.109299,-0.136224,-0.217837}
,
{-0.148774,0.065568,0.021542,-0.0874462,-0.184355,0.0200126}
,
{-0.0579838,-0.00717082,0.042284,0.190279,0.0703246,-0.0571826}
,
{0.117086,0.0416272,0.12259,-0.0387484,0.16815,-0.201819}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.142475}
,
{-0.00058467}
,
{0.114252}
,
{-0.0292469}
,
{0.0346924}
,
{-0.0811479}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_25(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_25(v, index);
}
static int assign_gen_lepton_prior_1_0_25() {
  global_gen_lepton_prior.at(1,0,25) = &specialized_gen_lepton_prior_1_0_25;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_25 = assign_gen_lepton_prior_1_0_25();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_2_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.100577,0.15846,-0.172665,-0.600639,-0.209138,0.464386 };
  static const float weights1[][6] = { {0.0946351,-0.0213623,-0.116598,-0.0736555,0.147361,-0.0623535}
,
{0.110488,0.162714,0.328095,0.487402,0.0936316,0.549878}
,
{0.246963,-0.492907,-1.15511,-0.34196,-0.293526,0.276909}
,
{-0.214416,-1.62887,-0.793992,-2.02586,3.29825,1.29984}
,
{-0.113388,0.209951,-0.381591,-0.681386,-0.151099,0.587955}
,
{-0.112771,0.051447,-0.286723,-0.33461,-0.378769,0.300275}
,
{-0.024921,0.0627077,-0.027156,-0.440802,-0.62003,0.380015}
,
{0.0434897,-0.0827488,-0.0983035,-0.0872685,-0.0580593,-0.195994}
,
{-0.0868337,0.112744,0.0327615,-0.314168,0.24337,0.25468}
,
{0.036493,0.017041,-0.124258,0.199584,-0.00691381,-0.0908235}
,
{-0.115153,0.0437417,-0.0188291,-0.008178,0.0280629,-0.0800196}
,
{0.0150903,0.212839,0.0013308,0.151853,0.122925,0.0494541}
,
{-0.27356,0.389617,-0.0946038,-0.706955,-0.300877,0.438928}
,
{-0.106859,0.304563,-0.200164,-0.537496,-0.0822211,0.447415}
,
{-0.0912309,0.121358,-0.0156407,-0.128215,0.165295,-0.219588}
,
{-0.187272,-0.0230064,0.019507,-0.081703,-0.0185024,0.204652}
,
{-0.079954,-0.0157544,-0.0549555,-0.0158214,-0.193222,-0.0475789}
,
{-0.306591,-1.05404,0.783626,-0.968211,0.256026,-0.156937}
,
{-0.24173,-0.0643687,-0.0779267,0.089651,-0.229769,-0.000887635}
,
{0.059783,0.400463,-0.150768,0.158828,0.0543172,-0.0183058}
,
{-0.261318,0.139562,0.156267,0.107356,0.167574,0.101486}
,
{0.0260846,-0.199638,-0.107821,0.124223,-0.0958413,0.0702082}
,
{-0.0701118,0.125449,-0.0532491,0.0434276,-0.166053,-0.0489537}
,
{0.0566267,0.149532,-0.0489224,-0.0498252,0.0948537,-0.0626754}
,
{0.0715581,0.00353325,0.195155,-0.0478519,0.0103326,-0.0502339}
,
{-0.192862,0.0255132,-0.0886032,-0.176569,-0.0967697,0.113337}
,
{0.11369,0.0901738,0.310425,-0.0602797,0.110036,0.0693782}
,
{-0.0521866,0.14297,0.112656,-0.200384,-0.0432508,0.16753}
,
{-0.00654949,-0.219469,0.16315,0.0679022,0.251496,-0.103692}
,
{0.0264211,0.103117,-0.0224341,0.0541748,-0.0133971,-0.0855085}
,
{-0.0305176,-0.108092,-0.127048,0.0193842,-0.0836015,0.0163511}
,
{0.0197237,0.156595,0.0688224,0.0652995,-0.120669,-0.127602}
,
{-0.0483001,-0.019926,0.0440352,0.0447122,-0.0792584,-0.0297454}
,
{0.0273647,-0.000728762,0.0481952,-0.0549273,0.130975,-0.0398376}
,
{0.391486,-0.113222,0.142605,-0.211574,-0.0784816,-0.304998}
,
{0.0545791,-0.0666667,0.0111978,0.136939,-0.0385014,0.182562}
,
{-0.096533,-0.137075,0.091111,0.351116,-0.0518496,0.479183}
,
{0.036753,0.0388729,-0.0302291,-0.0334237,0.0335985,-0.0385593}
,
{0.0042998,-0.00445167,-0.00184706,-0.072603,-0.0121461,-0.0800171}
,
{0.0340909,-0.0415117,0.0484727,-0.168517,-0.0937308,-0.254912}
,
{-0.0211847,0.133188,0.0185264,-0.0594541,0.093142,-0.0862704}
,
{-0.283602,0.0660631,-0.117411,0.00718873,0.0901134,-0.0223379}
,
{-0.0535636,-0.0534674,-0.026993,0.0529018,-0.0458658,0.0802921}
,
{-0.0290781,0.0436392,0.116066,0.308833,-0.0275591,0.408119}
,
{0.0653282,0.0428996,0.0679499,0.0118443,0.0137829,-0.0218401}
,
{0.0904383,-0.12894,0.0145497,0.0427325,-0.0662524,0.072617}
,
{-0.231367,-0.103245,-0.146169,0.00870681,-0.0995003,0.0157466}
,
{0.00856866,-0.00280118,-0.0174358,0.0171505,-0.00030367,0.0132618}
,
{-0.100081,0.00400273,0.119868,0.0822662,-0.0629586,0.106139}
,
{0.0104727,-0.120757,0.0200409,-0.0342065,-0.113452,-0.0254844}
,
{0.0596002,0.0403868,0.0706945,-0.00480936,-0.012327,-0.0107859}
,
{0.0108482,-0.0231449,-0.010113,0.199454,-0.014743,0.221185}
,
{-0.0581427,-0.0481758,-0.058583,-0.0357557,-0.0268322,-0.0431152}
,
{0.160516,0.0457222,0.219874,-0.0697708,-0.0553669,-0.0744429}
,
{0.00285475,0.175474,0.0687208,0.228767,0.0354146,0.0481581}
,
{-0.0454312,0.117166,0.232391,-0.0571366,-0.0643712,0.110486}
,
{-0.10095,-0.207726,0.20022,0.103395,-0.0798308,-0.0976918}
,
{0.0735682,-0.105758,0.0907955,-0.0816584,0.169082,-0.0633682}
,
{-0.205008,-0.195661,0.334114,-0.054181,-0.282142,-0.183392}
,
{-0.123144,0.0097226,-0.0665239,-0.197904,0.137466,-0.121651}
,
{-0.0201202,0.156549,0.00372183,0.0463466,-0.0849368,-0.151813}
,
{0.0360987,0.172172,0.212881,-0.0717524,-0.0851075,0.0559174}
,
{0.0774333,-0.0976797,0.0733009,0.238209,-0.00510233,-0.0965381}
,
{-0.0284399,0.220796,0.389445,-0.125251,0.336485,0.0253167}
,
{0.0946407,-0.15071,-0.125872,-0.106281,0.00840764,-0.0224969}
,
{0.0171676,0.134004,-0.287464,0.0741314,-0.0032515,-0.0637734}
,
{-0.00809238,-0.213722,-0.0456823,0.123995,0.31861,-0.162616}
,
{-0.201435,0.190987,0.0167604,-0.0773572,0.114999,0.225819}
,
{0.310381,0.0940049,-0.323568,0.0175172,0.286547,0.104678}
,
{-0.0136423,-0.0823843,0.234208,0.00475112,-0.0455642,-0.15016}
,
{-0.180555,0.103196,0.222971,0.0385749,0.162644,0.0154512}
,
{0.0682287,0.111428,0.140234,0.0448418,-0.232129,0.00333512}
,
{0.0402187,-0.23262,0.376186,-7.61627e-07,0.151653,-0.22635}
,
{-0.125471,0.0325606,0.0952331,-0.05872,0.250548,0.00123672}
,
{-0.107966,-0.450109,0.501387,0.210344,0.348269,-0.722394}
,
{0.035215,0.00945908,-0.33039,-0.0706544,-0.118852,-0.111577}
,
{-0.0179837,0.0717684,0.225289,-0.178351,0.158083,0.042122}
,
{0.0079867,-0.0650612,-0.0867009,-0.162856,0.0768632,-0.0962265}
,
{0.0467137,-0.137369,-0.10433,0.0872244,0.0405927,0.00927882}
 };
  static const float bias2[1] = { 0.0642955 };
  static const float weights2[][1] = { {0.0277652}
,
{0.0496861}
,
{-0.0431247}
,
{-0.119806}
,
{-0.0817524}
,
{0.101291}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_2_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_2_4_0(v, index);
}
static int assign_gen_lepton_prior_2_4_0() {
  global_gen_lepton_prior.at(2,4,0) = &specialized_gen_lepton_prior_2_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_2_4_0 = assign_gen_lepton_prior_2_4_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_26(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0165796,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {-0.0764173,0.0673021,-0.0942719,0.13896,0.0729221,-0.133959}
,
{0.048399,0.0370325,0.133715,-0.121121,-0.00244507,0.0379187}
,
{0.110732,0.00214138,0.0697936,-0.139896,0.00834973,0.19087}
,
{0.0424009,-0.00217434,-0.112202,0.0238218,-0.181682,0.0359278}
,
{0.0217109,-0.12948,-0.090914,0.0975154,0.00610119,-0.140704}
,
{0.0274637,0.131199,-0.153018,0.0637958,0.133559,-0.077342}
,
{0.0136848,-0.0589097,-0.0191196,-0.210915,-0.078127,-0.0683024}
,
{-0.0602052,-0.173414,0.0706817,-0.0493385,0.218986,-0.182457}
,
{0.0114385,0.0274517,-0.101681,0.192878,-0.0348828,0.207896}
,
{-0.205628,-0.164189,-0.0200829,-0.0255444,-0.073929,-0.0652292}
,
{-0.0307724,0.0540254,0.0489871,-0.0631519,-0.0749767,-0.0899256}
,
{0.0415284,0.0163655,0.0390609,0.117211,0.00917831,-0.0509186}
,
{0.00965234,0.0510035,0.14176,0.0315756,-0.086073,0.0440367}
,
{0.107048,-0.0556717,-0.112122,-0.202394,0.118576,-0.2004}
,
{-0.0297106,0.243553,0.124263,-0.110365,0.0206439,0.0990169}
,
{0.147862,-0.208572,0.0067094,-0.155608,0.109841,0.0174758}
,
{-0.0365926,0.121408,0.0131226,-0.236335,0.056484,-0.127134}
,
{-0.201769,-0.176882,-0.00446028,0.0787639,-0.0394901,0.134674}
,
{0.0182852,0.0126397,0.0539661,-0.0914395,0.119463,-0.0674677}
,
{0.00336845,0.0710519,0.0778911,0.125509,0.216599,-0.183057}
,
{-0.00924838,0.122425,-0.214879,-0.141793,0.123788,0.0496855}
,
{-0.00155037,0.055251,0.00943442,0.0721663,0.0471555,-0.00329319}
,
{0.218787,-0.03652,0.14578,0.143095,0.142417,-0.132514}
,
{-0.0721848,0.0398864,-0.130984,-0.113582,0.216422,0.0568988}
,
{-0.156456,-0.110009,-0.142963,-0.0292252,-0.148288,-0.194213}
,
{-0.0723325,0.0744692,0.213861,0.149984,0.0864981,0.00840238}
,
{0.00524359,-0.203832,-0.0600022,-0.204771,-0.106917,0.0912472}
,
{0.0689356,-0.135008,-0.118924,-0.0743039,-0.0866598,-0.166895}
,
{0.0370731,-0.0422646,0.103003,-0.174248,0.194135,-0.0146008}
,
{0.0100182,0.0830379,-0.0958549,-0.0772096,-0.235427,-0.119242}
,
{-0.0427221,-0.00984832,-0.0294767,0.0686477,0.0701525,-0.201732}
,
{-0.0276252,0.139303,0.0905341,0.138925,0.0154515,-0.00929379}
,
{0.065053,0.217528,-0.167703,0.0352419,0.00968443,-0.12134}
,
{0.122966,-0.104338,0.132116,-0.045483,-0.148685,-0.152772}
,
{0.0718237,0.0440665,-0.140307,0.0583805,-0.0516611,-0.0569992}
,
{-0.238814,0.0953854,-0.0339562,-0.133066,-0.0701211,-0.00958028}
,
{0.0527331,0.041585,-0.138361,-0.0109073,0.090883,-0.166144}
,
{0.0691558,0.0661872,-0.124832,0.00150027,0.0489718,0.165901}
,
{-0.204038,-0.0149876,0.0896313,-0.0288856,0.215664,0.0333858}
,
{0.0723798,0.0646181,0.0323447,-0.215241,-0.101724,0.0631157}
,
{-0.128483,0.0025966,0.214154,-0.0805528,0.00327184,-0.197557}
,
{-0.0132898,0.0673511,-0.190916,-0.0897355,-0.00360762,-0.149612}
,
{-0.0190859,-0.0284855,0.126865,-0.0438087,-0.0680882,-0.168071}
,
{-0.131872,-0.000743011,0.193442,0.0167782,-0.0551595,0.0465651}
,
{0.0815534,0.0345646,-0.192778,0.133988,0.0848075,0.0177586}
,
{-0.0852174,0.0246157,0.0616129,0.150206,0.0752251,0.160622}
,
{0.194113,0.0710886,0.00507706,-0.183906,-0.0971793,0.0156027}
,
{-0.0331971,0.037178,0.0518204,0.183396,0.0513538,-0.0703306}
,
{-0.157711,0.193728,0.143104,0.0468865,-0.124342,0.0221041}
,
{-0.134158,-0.0558082,0.100507,-0.0657807,0.021154,-0.028065}
,
{0.0123129,0.0661028,0.110562,-0.0326904,0.0203259,0.156891}
,
{-0.00275924,-0.0190823,-0.12369,0.0451824,0.0423227,-0.24417}
,
{0.00531481,0.0106247,0.0658207,0.0152555,-0.0770492,0.23656}
,
{0.0598747,-0.0161398,-0.0375203,0.104606,-0.0424489,-0.0195398}
,
{0.0912671,-0.180233,-0.162124,-0.0996291,-0.0251217,0.0192651}
,
{0.0450219,-0.0975623,-0.0443899,-0.133846,-0.00146313,0.160652}
,
{-0.0254389,0.073637,0.065516,0.0343036,-0.172414,-0.00311895}
,
{0.0227308,0.0775647,0.0793523,0.0885415,-0.141176,0.0208862}
,
{0.145916,-0.0123575,-0.229234,0.0510008,-0.0119345,-0.0389182}
,
{-0.0780605,-0.146141,0.104902,0.0526065,-0.00324382,0.0146256}
,
{0.120373,-0.0210188,-0.112511,0.0851794,-0.207152,0.189856}
,
{0.00733675,-0.0347391,-0.112875,0.0107662,0.109788,0.004408}
,
{-0.144845,0.208512,0.0957321,0.0773065,0.0307239,0.0887914}
,
{-0.0672565,-0.00674267,0.1519,0.020977,0.0931244,0.208681}
,
{-0.00542676,-0.142596,-0.0493664,-0.13363,0.0416364,0.0561787}
,
{0.064981,0.197455,0.136259,0.221132,-0.118407,-0.0755863}
,
{-0.203171,0.0409037,-0.154299,0.0919754,-0.131766,-0.0999087}
,
{-0.213503,-0.0504848,0.141258,0.0168487,-0.0783921,-0.0772706}
,
{-0.0332333,0.0685748,-0.0162746,0.0102667,-0.207677,0.0486961}
,
{-0.166508,-0.149503,-0.158167,-0.0308221,0.0157167,-0.00224327}
,
{-0.023915,0.107962,0.124201,-0.00675186,-0.0271256,-0.144482}
,
{-0.0870233,0.0635105,-0.0401817,0.0408415,-0.083299,0.235077}
,
{-0.114334,0.144243,0.192586,0.0338218,-0.0122273,0.179374}
,
{0.061157,0.00259414,-0.0526904,0.0802641,0.148011,-0.0229048}
,
{0.0948269,-0.10703,-0.0685734,-0.1526,-0.00333284,0.0436261}
,
{0.142451,0.135435,-0.157473,-0.140951,-0.130607,-0.0964731}
,
{0.147694,0.0959693,-0.111123,-0.0221141,0.226747,0.152378}
,
{-0.0850466,0.0302856,-0.144284,0.0840562,0.120592,-0.0506374}
,
{-0.118427,0.156236,0.198982,-0.079998,0.102122,0.005268}
 };
  static const float bias2[1] = { -0.0167706 };
  static const float weights2[][1] = { {0.183919}
,
{-0.0102072}
,
{0.00774461}
,
{-0.00648242}
,
{-0.188966}
,
{-0.0393476}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_26(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_26(v, index);
}
static int assign_gen_lepton_prior_1_0_26() {
  global_gen_lepton_prior.at(1,0,26) = &specialized_gen_lepton_prior_1_0_26;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_26 = assign_gen_lepton_prior_1_0_26();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_27(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.000737158,0.0907051,-0.00987622,0.0455949,-0.027858,-0.0229318 };
  static const float weights1[][6] = { {0.13288,-0.0391211,-0.120098,0.113108,0.00294694,0.129456}
,
{-0.0734952,0.159819,-0.0398248,-0.185532,-0.0620755,0.0287294}
,
{-0.0488327,-0.127377,0.0704287,0.180613,0.0741834,-0.0319924}
,
{0.0180379,0.254082,-0.151389,0.44725,0.0136489,-0.0223527}
,
{0.0590521,0.179016,-0.174117,0.170697,-0.0177572,-0.0944437}
,
{-0.091645,0.0114503,0.104839,0.0103121,0.0748901,-0.165498}
,
{-0.113229,0.0411514,-0.0583471,0.0806828,0.113596,0.0979086}
,
{0.0611802,0.265384,-0.0649559,-0.164659,-0.0786219,-0.113909}
,
{0.185027,0.134074,-0.0475596,0.150701,-0.0777988,-0.0510526}
,
{-0.00158156,-0.0471419,0.131803,-0.0667296,0.000798065,0.00689508}
,
{-0.0523515,0.0441167,-0.01019,-0.233262,0.0983433,-0.120718}
,
{-0.0081119,0.207699,0.0414642,0.0589594,-0.102229,-0.0500513}
,
{0.136315,0.358766,-0.0742773,0.2618,-0.0648281,0.0783999}
,
{-0.0275579,-0.0594962,-0.116647,-0.0561136,0.298168,0.166245}
,
{-0.241642,-0.0432867,-0.00664223,-0.147586,0.0707119,-0.122813}
,
{-0.0559159,0.086515,0.0456008,-0.156331,-0.00360708,0.00044069}
,
{0.111654,-0.0321409,-0.0183794,0.0664051,-0.0473426,-0.0872898}
,
{0.0532974,0.0652908,0.0794574,-0.109529,-0.0334403,0.113809}
,
{-0.113423,0.0299122,-0.126278,-0.150656,0.172469,-0.0377024}
,
{0.0660386,-0.0336745,-0.171958,-0.0634781,0.067794,-0.0274229}
,
{0.137026,-0.0592864,-0.0738389,-0.028946,-0.000983666,0.0647603}
,
{0.00811622,0.0502686,-0.0945787,-0.0077259,0.00966266,0.0103833}
,
{-0.0888521,0.128442,-0.0346104,0.0435379,0.0664008,0.0457002}
,
{0.019838,0.0350854,0.129798,0.0398118,0.0358625,0.0943347}
,
{0.0396407,0.0612167,0.0344204,-0.0120998,0.125101,0.0821796}
,
{-0.0790004,0.179696,-0.0164048,-0.134035,0.0633893,-0.024299}
,
{-0.17607,-0.0361363,-0.147837,-0.00419994,0.015549,0.0918935}
,
{0.0735758,-0.0814584,0.209357,-0.0703454,0.0526264,-0.0780751}
,
{-0.126608,0.199089,0.195507,0.149985,0.0647698,-0.0698221}
,
{0.055432,0.00683862,-0.0181161,0.0314267,0.0859634,0.0159982}
,
{0.115132,0.0387741,0.211392,-0.0501198,-0.0474386,0.0153656}
,
{-0.17238,-0.185442,-0.02516,0.142669,-0.174839,-0.11171}
,
{0.0700724,-0.146557,0.187552,-0.102628,-0.207141,-0.122411}
,
{0.0129215,-0.0417843,-0.115495,0.0118365,0.0833282,0.109943}
,
{-0.0122258,0.0140038,-0.0913508,-0.336561,-0.269397,-0.168293}
,
{0.0467291,0.078274,0.0289838,-0.482394,-0.10415,-0.110892}
,
{0.189102,0.0135623,0.132764,-0.425186,-0.158236,-0.133811}
,
{0.279221,0.0745101,0.150542,-0.554442,-0.147967,-0.0201178}
,
{-0.134092,0.204394,-0.0462644,0.0471813,-0.128972,-0.0555412}
,
{-0.174764,-0.0548137,0.0377229,0.153248,-0.0672439,0.0817457}
,
{-0.089478,-0.0105945,-0.0910286,-0.0411868,0.0359379,-0.0631021}
,
{-0.0803197,0.17387,0.0378221,0.249348,0.186303,-0.00106932}
,
{0.349416,0.215715,0.124696,-0.568867,-0.138101,-0.116742}
,
{-0.191552,-0.0169686,-0.00633661,0.350727,0.147373,0.101588}
,
{-0.0597033,0.125736,0.0642666,-0.17588,0.0666507,0.0209251}
,
{-0.049567,0.0901941,0.133817,-0.219158,0.101286,-0.0382271}
,
{0.103945,0.0305433,-0.0658611,-0.0136741,0.0767422,-0.00619093}
,
{0.181722,-0.0652726,-0.0430095,0.136884,0.00903181,0.248167}
,
{-0.121344,-0.2676,-0.0213636,0.148159,0.101591,-0.0550134}
,
{0.110742,0.0473489,0.063077,0.405105,0.208738,0.231746}
,
{-0.0119889,-0.249493,-0.0563343,0.0206294,-0.0610791,0.0220225}
,
{-0.0325367,-0.184975,0.136664,0.154479,-0.0268374,0.00608548}
,
{0.199997,-0.132175,0.031098,0.420459,0.109688,0.184549}
,
{-0.104857,0.0136005,-0.176198,0.467179,-0.0498499,0.165617}
,
{-0.0106062,0.0594829,0.101331,-0.105004,0.191134,-0.176663}
,
{-0.173582,-0.202151,0.17782,-0.0827733,0.206639,0.238615}
,
{-0.158358,-0.0260289,-0.00267208,-0.22794,-0.0406851,0.115672}
,
{0.0958648,-0.182447,0.0797719,0.110344,0.110159,0.0403546}
,
{0.125675,-0.13053,0.0993938,0.0223823,-0.0633297,0.0172375}
,
{-0.0950623,-0.0102067,-0.027823,0.141395,-0.0771215,-0.257438}
,
{0.0572379,0.268711,-0.156085,-0.0263369,-0.290938,-0.187446}
,
{0.0335175,0.262337,-0.114456,0.0212884,-0.174515,-0.0853834}
,
{0.0440666,0.0835735,0.183193,-0.123758,-0.119192,-0.0841523}
,
{-0.151381,-0.0625354,-0.0489977,0.00821411,0.108566,0.245034}
,
{0.0912566,0.1085,0.147245,0.109088,-0.122715,0.0886358}
,
{-0.173944,-0.0705059,0.043452,0.18069,-0.0598338,0.0119325}
,
{0.153542,0.00622371,0.124423,-0.138123,-0.0147866,0.162376}
,
{-0.115102,0.0301371,-0.0610139,-0.137348,0.146425,-0.100726}
,
{-0.185027,0.121092,0.081939,-0.125417,0.107803,-0.0403722}
,
{0.022327,-0.0443832,-0.0265146,0.0174473,0.0676645,0.159892}
,
{-0.0946383,-0.0497364,-0.0119244,-0.0145094,-0.181884,0.10572}
,
{-0.149087,-0.205947,-0.023011,-0.11952,0.0800608,-0.043064}
,
{-0.0735911,-0.0331957,0.133573,0.0167874,-0.055945,0.125022}
,
{0.117329,-0.218145,0.000842978,0.117045,-0.0315139,0.015887}
,
{0.0297796,-0.139607,-0.0103534,-0.0879184,0.136414,-0.162039}
,
{-0.198306,-0.0134807,0.145406,0.0216635,-0.0663851,0.203598}
,
{0.0770965,-0.0895033,-0.135344,-0.0802246,0.0264478,0.1116}
,
{-0.0312538,-0.110461,0.0378182,-0.00177714,0.0805161,0.0616178}
,
{0.187194,-0.0325202,0.0603863,-0.187178,-0.235752,0.0487896}
 };
  static const float bias2[1] = { 0.0129215 };
  static const float weights2[][1] = { {0.101021}
,
{0.162514}
,
{-0.0850069}
,
{0.253145}
,
{-0.0873113}
,
{-0.128189}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_27(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_27(v, index);
}
static int assign_gen_lepton_prior_1_0_27() {
  global_gen_lepton_prior.at(1,0,27) = &specialized_gen_lepton_prior_1_0_27;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_27 = assign_gen_lepton_prior_1_0_27();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_28(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0489851,0.00195242,-0.0177057,0.00902331,-0.0850035,-0.0289576 };
  static const float weights1[][6] = { {-0.229665,0.0732713,0.0178098,0.090194,-0.146929,-0.0909271}
,
{0.20018,0.353632,0.159078,0.211857,-0.140709,-0.181777}
,
{0.143063,0.338813,0.116767,-0.756948,-0.108723,-0.224403}
,
{-0.0394545,0.0957057,-0.0497848,0.00537293,-0.187976,0.0390563}
,
{0.0319597,-0.01643,0.15003,0.124493,-0.0494324,-0.0882611}
,
{-0.0348094,-0.196754,0.111811,0.18722,-0.115536,0.0908956}
,
{0.0467157,-0.0768101,0.122465,0.0998077,0.0994775,-0.134783}
,
{-0.395003,-0.337868,0.0267619,0.380918,0.478171,0.328493}
,
{-0.41561,-0.201437,-0.231161,0.179534,0.393561,0.411951}
,
{0.0177022,0.168467,0.0125455,-0.0588639,-0.0929395,-0.00455642}
,
{-0.071204,-0.243578,0.0658571,-0.184739,-0.0003474,-0.0719289}
,
{0.0234716,0.158287,-0.0587334,-0.173999,0.0894072,0.115699}
,
{-0.228897,0.101581,-0.0334097,0.0152158,0.246646,0.27453}
,
{0.270468,-0.150686,0.0662319,-0.302144,-0.120325,-0.020001}
,
{-0.177464,0.1039,-0.0125144,-0.126627,-0.184569,0.144645}
,
{0.0723186,0.0705613,0.150544,0.0372636,-0.0651441,0.0130694}
,
{0.0305526,0.170473,-0.108342,-0.0420118,0.19829,0.036375}
,
{0.13356,0.263201,0.0810978,0.0940233,-0.204245,-0.0851183}
,
{0.0695466,0.0535294,-0.114277,-0.0836268,-0.265989,-0.0689259}
,
{-0.0675191,-0.083598,-0.150444,0.0576451,0.025053,0.00324755}
,
{0.218371,0.176417,0.0546041,-0.277675,0.109651,-0.0386871}
,
{0.115542,0.0305208,-0.0253664,0.148584,0.160052,0.0913052}
,
{0.125189,-0.121208,-0.144394,0.229139,-0.109462,-0.0195922}
,
{-0.0921222,-0.0688776,-0.0876985,-0.116247,0.0370146,-0.0474305}
,
{0.0253699,-0.0200259,0.0371913,0.0361564,0.0969063,-0.151297}
,
{0.216207,0.00421038,-0.0611769,0.0279565,-0.0883026,0.0354104}
,
{-0.20824,-0.129339,-0.104951,0.117468,-0.0360532,0.143433}
,
{-0.225262,-0.127272,0.194173,0.0506997,-0.13773,-0.00102329}
,
{0.214857,-0.11766,-0.138456,0.104676,-0.0521683,0.0360771}
,
{-0.183538,0.0983542,0.205401,-0.191317,0.0947933,-0.0247073}
,
{0.120443,0.0155391,-0.0269073,-0.195772,-0.121477,0.104985}
,
{-0.14444,-0.17786,-0.197156,0.106695,-0.0227482,-0.0899906}
,
{-0.0667123,0.0243563,-0.150818,0.0153228,0.203807,0.0642724}
,
{-0.0613405,-0.0378621,-0.181499,0.0339156,-0.141306,0.0755314}
,
{0.213409,0.0759176,0.025308,0.151952,-0.0992685,0.0128318}
,
{0.0959167,0.116449,0.144602,0.0422251,-0.0588549,0.0366762}
,
{0.108072,-0.125525,-0.00593795,0.0363724,-0.0436786,0.199079}
,
{-0.00762574,0.126113,0.000762793,0.0864262,0.273955,-0.0647624}
,
{0.0237032,-0.137285,-0.0882636,-0.124279,0.139162,0.0284341}
,
{-0.0472162,0.301744,0.115553,0.325261,-0.0936783,-0.00941727}
,
{-0.0732953,-0.164204,0.0522451,-0.421102,-0.0454473,0.0233999}
,
{-0.0121358,0.112145,0.0434657,0.0776631,-0.0263989,-0.199021}
,
{0.0765829,0.335386,0.0853387,-0.43519,-0.128588,-0.148194}
,
{-0.25252,-0.510009,-0.134941,0.443498,-0.143836,0.152281}
,
{0.2189,0.431438,-0.0454745,0.0181946,-0.330173,-0.201727}
,
{0.0163549,0.221005,-0.0764451,-0.549359,0.0183092,-0.0972322}
,
{0.231489,0.366039,-0.143307,-0.0113477,-0.192993,-0.0431153}
,
{0.00779701,-0.105118,-0.0297587,0.172252,0.148932,-0.0405087}
,
{0.0406894,0.00641681,0.087094,-0.519529,0.0305042,0.0644163}
,
{0.0158566,-0.282382,0.0646759,0.400624,-0.0755948,0.171983}
,
{-0.181304,0.211532,-0.0167164,-0.19816,-0.12336,-0.366973}
,
{-0.0734142,-0.0101415,0.0682416,0.330325,-0.0230717,0.0512331}
,
{0.227201,0.373758,-0.240401,-0.415748,-0.075632,-0.0381305}
,
{-0.399998,-0.925246,0.0414172,-0.75704,0.345733,0.201887}
,
{0.0658813,0.0448195,0.180802,-0.21369,0.120322,-0.178599}
,
{0.0158112,-0.13463,0.24026,0.0559793,0.0293869,0.0614909}
,
{-0.0125158,-0.0221595,0.0374549,0.0141378,-0.119777,-0.0497317}
,
{0.078861,0.147865,0.0629459,-0.00253639,-0.0728549,0.124523}
,
{-0.0273859,0.151053,0.0220653,-0.0204928,0.0179965,0.0799369}
,
{0.017919,-0.180676,-0.0232808,-0.173724,0.174229,0.18749}
,
{0.0548648,-0.0995161,-0.0729326,0.0383795,0.149438,0.115829}
,
{0.0952825,-0.200853,0.0601812,0.177205,0.140031,-0.0500341}
,
{-0.108617,-0.0753997,-0.0206531,0.0176963,0.0935968,-0.0122417}
,
{0.158665,0.0122179,0.0688047,0.00511451,0.0752902,0.14873}
,
{0.0632388,0.0716598,0.0842594,0.113624,-0.0909054,-0.0167737}
,
{-0.0883259,0.183539,0.0993064,0.00599285,-0.0869564,0.0386643}
,
{0.137456,-0.0980729,0.0615188,-0.0714789,0.0326447,0.185536}
,
{-0.0746782,-0.10691,0.140217,0.162845,-0.243054,-0.0856423}
,
{0.0437032,-0.0476763,0.139427,-0.0360852,0.0718196,-0.0552895}
,
{0.0599724,-0.150405,0.114516,0.0465091,-0.0856697,-0.0450086}
,
{0.0321499,-0.237894,-0.174691,-0.0819034,-0.112751,-0.185018}
,
{-0.00132443,0.00252641,-0.0211105,-0.0160144,0.0787775,0.0773246}
,
{-0.127821,0.155081,0.125803,0.172546,0.129794,0.0910727}
,
{-0.0322323,-0.0917315,0.207137,-0.119568,-0.0672018,0.224636}
,
{-0.0580483,-0.116785,-0.125262,0.100659,-0.0180388,-0.141618}
,
{0.173774,-0.245233,-0.122036,0.199531,-0.133153,0.0721719}
,
{0.0934235,-0.10509,-0.0770225,0.104587,0.178406,-0.206473}
,
{0.124812,0.0302486,-0.127918,-0.0545841,0.099108,-0.0882217}
,
{0.0329221,-0.0757624,-0.0141291,0.0126443,-0.198067,0.0202538}
 };
  static const float bias2[1] = { -0.0363399 };
  static const float weights2[][1] = { {-0.160572}
,
{0.167887}
,
{0.0809366}
,
{-1.74006}
,
{0.0366612}
,
{0.176554}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_28(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_28(v, index);
}
static int assign_gen_lepton_prior_1_0_28() {
  global_gen_lepton_prior.at(1,0,28) = &specialized_gen_lepton_prior_1_0_28;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_28 = assign_gen_lepton_prior_1_0_28();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_29(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.104791,-0.189419,0.0678374,-0.0383437,0.0,0.136443 };
  static const float weights1[][6] = { {-0.167148,0.242085,-0.0178666,-0.193287,0.0677999,-0.0119297}
,
{-0.104377,-0.772549,0.109233,-0.224198,0.0245546,-0.21628}
,
{-0.414593,0.197442,0.298079,-0.455056,0.115345,-0.174693}
,
{-0.151455,0.145326,-0.0977587,0.594117,-0.102512,0.121894}
,
{-0.233108,-0.0667654,0.052465,-0.0566236,0.00211651,0.170892}
,
{-0.0605812,-0.205874,0.155457,-0.0254873,0.0566212,0.0160985}
,
{0.0475027,-0.107647,0.116184,0.0967151,-0.0710854,0.119472}
,
{0.392549,-0.575933,0.0456717,0.336811,0.0106649,0.439521}
,
{0.29768,-0.546699,0.0709189,0.62219,0.157051,0.111594}
,
{0.147837,0.103004,-0.019347,0.125608,0.0520227,0.165744}
,
{0.00849066,0.0311874,0.189916,-0.0333782,-0.0768209,-0.0874647}
,
{0.363696,0.0239376,0.243018,0.00556366,-0.162375,-0.0793005}
,
{0.422787,-0.299622,-0.0101046,0.219516,-0.182937,0.0503248}
,
{-0.0893088,0.171019,0.0122596,-0.0253583,0.165678,-0.210128}
,
{-0.0852649,-0.0271627,-0.0891621,0.162995,-0.0392326,0.181426}
,
{-0.162046,0.178984,0.0128886,0.076315,0.052279,-0.034796}
,
{0.171037,0.0808495,-0.142074,0.16912,0.103826,0.100751}
,
{-0.18066,0.0126553,0.1746,-0.0328918,0.0193514,-0.0177255}
,
{-0.061871,-0.275203,0.144799,0.10688,0.188936,0.0408462}
,
{0.00815361,-0.120944,-0.0041414,0.0153049,-0.18702,-0.0258461}
,
{-0.0611287,-0.0140335,-0.0293431,0.0270098,-0.166127,0.0649779}
,
{-0.0424011,0.061542,0.112124,0.0278929,-0.203352,-0.00971851}
,
{-0.205012,0.147618,0.107463,0.00992937,0.170727,0.0885764}
,
{0.0303984,0.0862752,-0.0458053,0.0303191,0.089596,0.0225624}
,
{0.0581832,0.170173,-0.0798125,0.0809789,0.0519595,0.0511217}
,
{0.113891,-0.0711911,-0.11934,0.200217,-0.113055,0.0582574}
,
{-0.114795,-0.217847,0.0855948,-0.100673,-0.205017,-0.0851748}
,
{0.090739,0.0501484,-0.173209,-0.137182,0.144334,-0.064496}
,
{0.177151,-0.087524,0.219501,0.00663228,0.00983129,-0.0536955}
,
{-0.109236,-0.193458,0.150591,-0.0256149,0.134576,-0.0206503}
,
{-0.314059,0.214216,-0.0729014,-0.00592039,0.0737613,0.429495}
,
{0.161768,-0.0946881,-0.0179403,0.100574,0.127451,0.161631}
,
{0.495571,-0.420113,0.0780013,0.0746567,-0.136812,-0.385601}
,
{-0.0224888,-0.066163,-0.0729192,0.23914,0.117097,-0.00478324}
,
{-0.163599,0.290113,-0.0496534,0.220399,-0.110516,0.0633586}
,
{-0.0286734,0.415933,0.15404,-0.214544,-0.0819672,-0.0734929}
,
{-0.923021,0.675377,-0.114555,0.0267075,-0.105508,0.614011}
,
{0.188455,-0.107981,-0.455369,0.212838,-0.125602,0.230675}
,
{0.556226,0.428109,-0.0701132,0.058881,-0.0158845,-0.470511}
,
{-0.0899098,0.537278,0.0622145,-0.0602969,0.00336654,0.232497}
,
{-0.0342337,0.0757233,-0.128451,-0.0336932,-0.145028,0.148596}
,
{0.693663,-0.195949,0.0989883,-0.185271,-0.0783664,-1.30611}
,
{-0.0846929,0.139483,0.0244326,-0.135264,-0.165034,0.0431654}
,
{-0.167534,-0.05849,-0.087612,0.116474,-0.0723865,-0.0519442}
,
{0.326712,-0.269388,-0.303617,0.258212,-0.0320066,0.145941}
,
{-0.128763,0.200867,0.0454228,0.0752248,-0.0395808,0.191875}
,
{-0.178839,0.255425,0.00396376,-0.0902841,-7.26445e-05,-0.602583}
,
{-0.24285,-0.646132,-0.00299124,0.0682847,-0.0896012,-0.0176187}
,
{0.0525115,-0.534062,-0.180797,0.0393928,-0.0048384,-0.0956061}
,
{0.0916795,-0.183457,-0.172305,0.246881,-0.148247,0.462319}
,
{0.403701,0.552041,-0.174741,0.0797001,-0.0783117,-0.163971}
,
{-0.138447,-0.182432,0.189184,-0.638643,0.078507,-0.488186}
,
{-0.0230995,0.0359455,0.366279,0.182063,0.000959769,-0.0181609}
,
{0.170957,0.135881,-0.625403,0.435911,-0.146474,0.418692}
,
{0.0135518,0.0585083,0.124913,0.173245,0.0627291,0.0422739}
,
{-0.0466903,0.0808337,-0.214524,-0.151658,-0.0194462,-0.0829511}
,
{0.0389838,-0.165616,0.0902993,0.205673,-0.072373,-0.0459672}
,
{-0.130262,-0.0696214,-0.0711257,0.125843,-0.0907464,0.119058}
,
{0.115108,-0.129036,0.114108,-0.065411,-0.138786,-0.0911723}
,
{0.103205,-0.0580685,-0.0798026,-0.137599,0.120261,-0.0894198}
,
{-0.308831,0.018655,-0.10848,-0.12636,0.0209471,0.0557456}
,
{-0.0843407,-0.235387,0.0782609,-0.169471,0.0766272,0.138799}
,
{-0.300903,-0.177533,0.0241178,-0.174703,-0.0288848,0.113709}
,
{-0.012133,-0.0384906,0.0537844,-0.0360326,-0.0106711,0.0408299}
,
{-0.0873415,-0.0615824,0.00332437,-0.147241,-0.0425431,0.0647118}
,
{-0.142436,0.145915,0.048869,0.0951664,0.0994377,-0.0244929}
,
{0.163907,-0.135541,0.0458645,-0.107105,-0.0266458,-0.0222151}
,
{0.169538,0.0340644,0.0103134,0.00469737,0.0692073,0.105835}
,
{-0.0518397,0.0856027,0.0552236,-0.0196249,0.182421,0.0257809}
,
{-0.102721,-0.0514055,-0.113686,-0.00476124,0.0146755,-0.0509232}
,
{-0.117734,-0.123536,0.0166009,-0.089448,-0.0552635,-0.185694}
,
{-0.0163771,0.0203197,0.0605543,-0.0420456,-0.061949,0.108188}
,
{0.00233222,0.00337514,0.079947,0.085997,0.0106441,-0.114482}
,
{-0.0742216,-0.0694697,-0.0468032,0.0876093,-0.0366294,-0.0495622}
,
{0.183488,0.0952694,0.146307,0.0847148,0.0374111,0.142684}
,
{-0.0944959,-0.0537902,0.0253177,-0.0745486,-0.208532,0.03857}
,
{0.0234374,0.0378012,-0.0890639,-0.00688425,0.111808,0.0167914}
,
{-0.137037,0.0423809,0.104307,-0.00701892,-0.218992,-0.0394314}
,
{0.0751887,0.135636,-0.0983268,-0.0274296,0.105663,-0.206765}
 };
  static const float bias2[1] = { -0.02433 };
  static const float weights2[][1] = { {0.168003}
,
{-1.5172}
,
{0.121129}
,
{-0.0884521}
,
{-0.0738354}
,
{0.231201}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_29(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_29(v, index);
}
static int assign_gen_lepton_prior_1_0_29() {
  global_gen_lepton_prior.at(1,0,29) = &specialized_gen_lepton_prior_1_0_29;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_29 = assign_gen_lepton_prior_1_0_29();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0210894,-0.115827,-0.100044,0.169253,-0.0476813,0.068649 };
  static const float weights1[][6] = { {0.0203075,-0.315186,-0.670644,-0.744297,-0.455114,0.457828}
,
{0.301992,-0.149031,0.33957,0.208761,-0.153059,-0.948333}
,
{0.267577,-0.282676,0.320108,-0.0706007,0.123344,-0.378847}
,
{-0.37837,0.0831651,-0.572575,0.928788,0.00369816,0.213562}
,
{0.01231,-0.171944,-0.182637,0.12498,0.0726501,0.210664}
,
{-0.0463765,0.00256826,-0.0935349,0.146752,0.0971041,-0.0467465}
,
{-0.0450722,0.0242836,0.0084698,0.247762,-0.001533,0.0255875}
,
{0.0950385,-0.187896,0.0592041,0.0735127,-0.131608,0.0473325}
,
{-0.0361477,-0.283518,0.309102,0.267636,-0.317667,-0.0520261}
,
{0.029154,-0.0726134,0.0234097,-0.0374554,-0.217924,0.172956}
,
{0.0734127,-0.223479,0.155899,-0.138392,0.0180628,-0.0805031}
,
{-0.139845,0.0663959,-0.265642,-0.178461,-0.03136,0.133397}
,
{-0.00926248,-0.0417537,0.0184953,0.177042,-0.00771608,-0.00533252}
,
{0.125035,-0.0105394,-0.162004,0.355729,0.104048,-0.0182181}
,
{0.0747073,-0.144391,0.117058,-0.104214,0.0030783,-0.00867174}
,
{-0.0690813,0.172495,0.172225,0.197275,-0.0120964,-0.054041}
,
{-0.124098,-0.0761425,0.0351155,0.671769,0.065602,0.0891563}
,
{-0.254672,-0.0638347,-0.0515038,0.120646,-0.0968713,-0.0553883}
,
{0.165326,-0.143937,-0.0579038,0.00401392,0.00865199,-0.108379}
,
{0.110163,-0.171778,-0.183937,0.20123,-0.0673736,-0.0235557}
,
{0.122083,-0.062107,-0.255859,-0.00236187,0.0482518,-0.0842094}
,
{0.02183,-0.0935844,-0.169611,-0.0486242,0.158988,-0.0382965}
,
{-0.157958,0.0614842,-0.181359,0.172242,0.0516685,0.0798216}
,
{-0.0215068,-0.115277,-0.193292,0.0384495,-0.119171,-0.019449}
,
{-0.349564,-0.0206632,0.00658753,-0.218241,-0.0798011,-0.240837}
,
{0.207438,0.0656169,-0.290985,-0.00668373,-0.215205,0.0502702}
,
{0.0981246,-0.233418,0.0430206,0.0938161,0.0572243,0.186455}
,
{0.188672,-0.329305,-0.361971,0.0572244,0.0177882,-0.396881}
,
{-0.656918,-0.251796,-0.00104231,1.48677,-0.135563,0.258592}
,
{3.54921e-05,-0.139827,0.0710159,-0.247372,-0.124241,0.060814}
,
{0.217208,-0.0476181,0.075006,0.0726174,-0.0166187,-0.0200579}
,
{0.101411,-0.0804943,0.00736305,0.0420007,0.0360867,0.153663}
,
{0.0709089,-0.0995447,-0.0642025,0.13773,-0.185359,-0.141728}
,
{-0.141449,-0.149819,0.168707,-0.0356576,0.0678541,0.0956355}
,
{-0.160795,-0.0123663,-0.0686108,-0.0365117,-0.0353399,-0.0566927}
,
{-0.00866616,-0.00647241,-0.0252853,0.00473883,-0.010078,0.0428002}
,
{-0.106868,0.028765,0.107533,-0.0912502,0.306064,-0.000994634}
,
{-0.0566949,-0.134694,-0.0588024,-0.00294717,-0.151293,-0.0649869}
,
{-0.0162935,-0.303029,0.097426,-0.0135516,-0.230385,-0.0560417}
,
{-0.128533,-0.121821,-0.205827,0.0130781,-0.0385926,0.0139053}
,
{0.0214509,0.0060667,0.0349584,0.0211329,-0.0608734,0.0922598}
,
{0.0984145,0.19064,0.0152683,0.000575857,0.039755,-0.0986572}
,
{-0.0510309,-0.0614643,-0.06703,0.0107942,-0.0606604,0.0315342}
,
{0.0786516,-0.0105774,-0.0619803,0.0217918,0.138882,0.10248}
,
{0.0887666,0.0628376,-0.0489597,0.017271,0.0777532,-0.0129131}
,
{0.0328853,-0.0074526,-0.00489215,-0.000402565,-0.00691086,-0.0523774}
,
{0.0121562,0.0159638,0.0280414,-0.0122765,-0.093928,-0.16718}
,
{0.0156342,0.0920314,0.0905971,-0.0122863,0.112251,0.00857151}
,
{0.0605028,-0.225243,-0.113154,0.00575433,0.0254736,0.0495685}
,
{-0.121631,-0.147043,-0.133994,-0.0094796,-0.0727914,-0.00390994}
,
{-0.0955532,-0.00932276,-0.00290117,-0.0359482,0.0219333,-0.0741949}
,
{-0.283684,-0.0765898,0.217293,-0.0532846,-0.0381618,-0.014224}
,
{-0.0278524,0.0161007,-0.0273498,-0.0137416,0.036596,-0.0121705}
,
{-0.022659,0.177271,-0.164861,-0.00240191,0.142468,0.0541434}
,
{-0.00074619,0.116634,-0.0126879,0.079594,-0.164116,-0.162491}
,
{-0.00254086,0.0951746,-0.0206775,0.007629,0.0318085,-0.12946}
,
{-0.272353,0.149907,0.0753057,0.112566,0.0231689,0.415795}
,
{0.110949,-0.163225,0.828336,0.853855,0.110981,-0.243363}
,
{-0.0212275,0.217201,-0.0891055,0.000707692,0.102637,-0.0292217}
,
{0.0771861,-0.0231916,0.256545,0.105397,-0.0823497,0.275357}
,
{0.0431236,-0.0832975,-0.105588,-0.0178755,-0.0721295,-0.108403}
,
{0.103812,0.18417,-0.352161,0.0357585,-0.397251,-0.207828}
,
{-0.136859,0.0929122,-0.019554,-0.0323457,0.0186424,0.0593195}
,
{-0.0564972,0.00735055,0.136357,0.122366,-0.182745,0.26325}
,
{-0.145277,0.0200272,-0.0411501,-0.0829469,0.0945925,0.110852}
,
{0.134584,0.112803,-0.0523559,0.000260132,0.0172399,-0.00736963}
,
{0.491211,-0.226772,0.0999403,-0.0787654,-0.0283962,-0.0209953}
,
{0.152322,0.499222,0.291374,-0.0255558,-0.876618,-0.50877}
,
{-0.0185661,0.0909438,0.0253997,-0.055248,-0.197194,-0.148071}
,
{0.173636,-0.0114923,-0.0499603,0.0290676,-0.147355,-0.146896}
,
{-0.129825,-0.0968239,0.0153086,0.00105565,-0.0391065,0.00187444}
,
{-0.0370453,0.235076,0.0241711,0.168718,-0.215839,0.0656571}
,
{0.00923084,-0.0712727,-0.484665,0.909527,-0.250121,0.143909}
,
{-0.0993823,0.0565742,-0.00375736,-0.0555963,0.298588,0.0135556}
,
{0.340701,0.0116762,-0.0563137,0.124376,0.37452,0.228938}
,
{-0.451286,0.0209769,-0.0351339,-0.0685061,-0.0471944,0.577863}
,
{-0.988533,0.669883,0.0108189,0.217649,-0.725653,0.150006}
,
{0.0361239,0.0309648,-0.100057,0.0115432,-0.090927,0.119548}
,
{-0.418817,0.7168,0.151759,0.120238,-0.121449,0.561403}
 };
  static const float bias2[1] = { 0.263636 };
  static const float weights2[][1] = { {-0.0109638}
,
{-0.0280647}
,
{0.0449299}
,
{0.0273571}
,
{0.0177033}
,
{-0.01186}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_0(v, index);
}
static int assign_gen_lepton_prior_3_0_0() {
  global_gen_lepton_prior.at(3,0,0) = &specialized_gen_lepton_prior_3_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_0 = assign_gen_lepton_prior_3_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.211431,0.0165114,0.322911,0.0956301,-0.380242,-0.0537138 };
  static const float weights1[][6] = { {-0.211119,0.233677,-0.0022941,-0.233712,-0.128829,0.114548}
,
{0.149477,0.222281,-0.00444338,0.150102,-1.06948,0.00751261}
,
{0.178715,0.0396233,0.0122449,0.0137007,-0.351607,0.236416}
,
{0.502929,0.615401,0.446054,0.54969,-0.974861,0.29963}
,
{0.0780821,0.127115,0.340029,0.106454,-0.404783,0.122962}
,
{0.252071,0.154252,0.209361,0.131934,-0.425859,0.154218}
,
{0.243728,0.107263,0.460008,-0.10726,-0.251471,-0.0973969}
,
{0.0700718,-0.122114,-0.048764,-0.114313,-0.182695,-0.132614}
,
{0.144438,-0.135361,0.192468,0.0927782,-0.0623309,-0.310983}
,
{-0.068912,0.120238,0.0328423,-0.092037,-0.0901625,-0.00514951}
,
{-0.0635673,-0.122187,-0.0575683,-0.151533,0.0155546,0.0936322}
,
{-0.191593,-0.0789645,0.0179422,-0.185805,0.171356,-0.0336528}
,
{0.0968435,-0.0482746,0.344952,0.0904691,-0.281805,-0.0884094}
,
{0.17778,0.0840679,0.249938,-0.0790998,-0.186283,-0.0800855}
,
{-0.140938,0.0752771,0.16386,0.0792448,-0.0196503,0.121989}
,
{-0.0111377,0.0655284,0.0454756,0.163768,0.038091,-0.0196708}
,
{0.206527,-0.0858538,0.352011,0.164399,0.20606,-0.270492}
,
{0.056511,0.0442312,0.1023,0.0871768,0.150323,0.141544}
,
{-0.0178606,-0.198299,-0.0363499,-0.231734,-0.0597107,0.0559085}
,
{0.103418,0.167579,-0.0250049,0.249635,-0.0365278,-0.0124173}
,
{0.021422,-0.0402374,0.103613,-0.0913453,-0.217571,-0.052416}
,
{-0.0612586,0.0484271,0.0685277,0.0306388,0.066953,-0.0470029}
,
{-0.00270889,-0.0966214,0.137599,-0.0116321,-0.0243728,-0.0582267}
,
{0.159665,0.0618843,-0.128285,0.0144758,0.0786361,-0.108526}
,
{-0.0816622,-0.0425822,-0.13302,-0.0862668,0.183956,0.0303178}
,
{0.062356,0.166784,0.0151513,0.0364203,-0.0632262,-0.0187686}
,
{-0.0828474,-0.069747,-0.0273064,-0.0215496,0.0972255,0.140255}
,
{-0.0087808,0.159426,0.0506469,-0.053705,0.0228439,-0.278373}
,
{0.28414,-0.361416,0.340467,0.339217,0.459888,0.114419}
,
{0.0162845,-0.172511,-0.00304113,0.0454423,0.183782,-0.130605}
,
{0.00472853,-0.128361,0.0505541,-0.131982,-0.050728,0.0691779}
,
{0.0150261,-0.00264008,-0.187435,0.025362,-0.182302,-0.0872895}
,
{-0.134723,-0.0795826,0.0337428,-0.190011,0.142994,0.185159}
,
{0.147286,0.0435256,0.0489332,0.0871801,0.0636546,-0.0388664}
,
{0.10471,-0.0869007,-0.00339481,-0.0834274,-0.162904,0.178733}
,
{-0.0638581,0.045029,0.0441249,0.0343763,0.0412919,-0.0265748}
,
{-0.029028,-0.077085,-0.0920665,0.0631626,-0.0737029,0.117966}
,
{-0.00412658,0.0709284,-0.00543783,0.0586778,0.033681,-0.00631745}
,
{-0.156906,-0.126931,0.0597246,-0.117213,0.234285,-0.130849}
,
{-0.0709069,0.0830844,0.0224046,0.0896472,0.020115,-0.0372473}
,
{-0.0200582,0.108386,0.0157381,0.0642365,0.057446,0.0617643}
,
{0.073073,0.0466423,-0.049112,0.0912426,-0.0461252,0.505472}
,
{0.0128525,-0.0877472,0.00325661,-0.0669012,-0.00405615,-0.00079693}
,
{0.00407773,-0.000225723,0.00583573,-0.036735,0.212306,-0.308097}
,
{0.0333393,-0.193161,-0.0237165,-0.149978,0.017604,0.037576}
,
{-0.0695815,-0.0782831,0.0484844,-0.0494078,-0.031558,-0.026755}
,
{0.0327394,-0.258727,-3.31298e-05,-0.179949,-0.225402,-0.172129}
,
{-0.0601127,-0.0203648,0.0749879,-0.0469629,-0.0178987,0.00607038}
,
{-0.153426,-0.281981,0.0440945,-0.00235805,-0.302276,-0.321855}
,
{-0.0942671,0.0930671,0.0472343,0.0655706,0.11059,0.00992339}
,
{0.0471875,0.0490148,-0.0266708,0.0234118,0.0205611,-0.026364}
,
{0.0742111,0.0290637,0.0080997,0.0415636,0.100236,0.0788567}
,
{-0.00746339,0.117581,0.0139907,0.113714,-0.0232593,0.0586913}
,
{-0.033506,0.102249,0.0214197,0.0751971,-0.181041,-0.00756971}
,
{0.11877,0.199802,0.080765,-0.0443162,-0.040227,-0.212046}
,
{-0.0930867,0.114049,0.136984,0.141858,0.14105,0.115155}
,
{-0.101296,-0.0847343,-0.720855,0.229998,0.267021,0.275213}
,
{0.392487,-0.0100886,0.0507525,-0.51834,-0.792971,0.905569}
,
{-0.373614,-0.269757,0.13928,0.141469,0.252893,0.317708}
,
{-0.0498324,-0.0380608,-0.019826,-0.0653289,-0.0761656,-0.135578}
,
{-0.0298246,0.0271398,-0.018637,0.0600086,0.0355683,0.0501252}
,
{0.36072,0.652505,0.278254,0.134336,0.110107,-0.00577849}
,
{-0.73985,0.0684127,0.418781,0.790932,0.812299,-0.226097}
,
{0.0258347,-0.519374,-0.381002,-0.0292839,0.0334102,0.288338}
,
{0.0198421,0.132345,0.366611,0.0433813,-0.114921,0.0907552}
,
{-0.135561,-0.11106,-0.232562,-0.0207792,-0.0136451,-0.0894033}
,
{-0.438485,-0.125458,-0.162048,-0.0315042,0.0361374,-0.485841}
,
{-1.15228,-0.0582285,0.289693,0.932284,0.264098,0.223817}
,
{-0.44598,0.372801,0.212089,0.298474,-0.162104,-0.0763598}
,
{0.0147468,0.111494,0.0888557,-0.00766095,0.0867286,0.263899}
,
{0.150365,-0.0317542,-0.138634,-0.00402369,-0.067592,-0.0763805}
,
{0.837955,-0.336438,-0.237003,-0.330014,-0.0969935,0.189191}
,
{-0.531483,-0.0161325,0.024913,0.184521,-0.158887,-0.239822}
,
{-0.304598,-0.141356,0.20263,-0.116694,0.113286,0.246461}
,
{0.238146,0.365135,0.105205,-0.315939,0.221245,-0.525147}
,
{-0.319337,0.415685,-0.424671,0.50169,0.603662,0.118802}
,
{1.55517,-0.101935,1.25528,-0.0532111,2.01647,-0.0946164}
,
{-0.121402,-0.143075,-0.109526,0.104787,-0.10471,-0.0272551}
,
{-0.224306,0.282638,-0.712337,-0.342516,0.498613,-0.526228}
 };
  static const float bias2[1] = { 0.11189 };
  static const float weights2[][1] = { {0.0271376}
,
{-0.058634}
,
{0.0362816}
,
{0.0680393}
,
{0.0490489}
,
{-0.087366}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_1(v, index);
}
static int assign_gen_lepton_prior_3_0_1() {
  global_gen_lepton_prior.at(3,0,1) = &specialized_gen_lepton_prior_3_0_1;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_1 = assign_gen_lepton_prior_3_0_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.436357,0.118878,0.0245153,-0.0871143,-0.156597,-0.112396 };
  static const float weights1[][6] = { {0.376564,0.400478,-0.0824258,-0.392766,0.0921524,-0.0739461}
,
{0.0192974,-1.12843,0.134771,-0.179093,-0.555498,-0.234638}
,
{-0.213406,-0.0144987,0.470971,-0.247591,0.381795,-0.119124}
,
{-0.267066,-0.0213068,0.125234,0.639968,-0.748721,-1.1691}
,
{0.438623,-0.0444417,0.120403,8.66997e-05,-0.185733,0.0163412}
,
{0.603055,0.127332,-0.189443,-0.0794356,0.0247322,0.0355891}
,
{0.531518,0.0253283,0.113247,-0.209374,-0.224033,-0.00521102}
,
{-0.0782824,-0.0772206,-0.128441,0.0971131,-0.0881725,-0.0158838}
,
{-0.25753,-0.184497,0.13875,0.0692553,-0.000984427,-0.205119}
,
{0.0608489,0.133885,-0.142641,-0.0950631,0.00541353,-0.10465}
,
{-0.0731186,0.0600353,0.110325,0.0457634,-0.0167434,0.0854199}
,
{-0.299526,-0.0664616,-0.0391111,0.156163,0.0829169,-0.0441988}
,
{-0.0547169,-0.19205,0.164156,0.0927034,-0.121734,0.0334984}
,
{0.409784,0.145838,0.0208524,-0.133063,-0.210975,-0.221356}
,
{0.117847,0.196255,-0.116265,0.170062,-0.0234849,-0.0761093}
,
{0.249957,0.0854264,-0.0455353,0.0397891,-0.144207,0.120101}
,
{-0.474485,-0.374046,0.131057,0.239269,0.0740374,-0.127802}
,
{0.126999,0.144701,-0.182494,0.212566,-0.115982,0.22145}
,
{-0.142476,-0.157893,-0.355821,0.0464721,-0.219268,0.0619776}
,
{-0.268958,-0.166133,0.108498,-0.107898,-0.208463,-0.0136412}
,
{-0.131262,-0.208257,0.00994436,-0.0191291,0.0100247,-0.175164}
,
{-0.268763,-0.0564463,-0.0621478,-0.00257337,-0.0365545,-0.203597}
,
{-0.0659471,0.00227624,-0.212473,0.245992,-0.0919639,0.131069}
,
{0.00247265,0.0100411,0.0676437,0.0272583,0.0686974,0.00233623}
,
{0.104992,-0.0156604,-0.0564109,-0.041715,-0.0856601,-0.23913}
,
{0.137356,-0.0333719,-0.0454492,0.0537231,0.133713,-0.0678938}
,
{0.0311336,-0.221142,0.156049,-0.0874191,-0.257326,0.169246}
,
{0.0258167,0.0304222,-0.0638743,0.121074,-0.108843,-0.0801828}
,
{-0.668324,0.44799,-0.226743,0.107224,0.51186,0.323359}
,
{-0.00895712,0.12191,0.0423861,0.128357,0.106494,0.0423972}
,
{-0.0929507,-0.0585127,0.0911146,0.224416,0.127099,0.081413}
,
{-0.0845861,0.0742431,-0.173776,0.0246295,-0.0319695,0.153958}
,
{-0.100147,0.0369626,-0.00735205,-0.0118453,-0.0841348,-0.0477534}
,
{0.0742807,-0.132789,-0.137566,0.148926,-0.142356,-0.193772}
,
{-0.029629,-0.347206,-0.081976,-0.0415509,-0.039016,-0.0613283}
,
{0.0156773,0.00523769,0.0196681,-0.0118268,-0.0614071,-0.0141154}
,
{0.424971,0.0993953,-0.0460639,0.139721,0.0940454,-0.0345721}
,
{-0.124868,-0.037728,-0.0161709,0.0276859,0.0571476,0.119658}
,
{0.0550492,0.215081,0.0404719,-0.00574027,0.327404,-0.0909915}
,
{-0.245105,0.168126,-0.087899,0.049145,-0.0259502,0.119779}
,
{0.0913946,0.0429129,0.0351308,-5.44497e-05,-0.00373208,-0.018635}
,
{-0.0462789,0.311549,0.152179,-0.00701148,0.0883588,0.183095}
,
{0.0237937,-0.0094544,-0.0344491,0.0278293,0.0402373,-0.0825077}
,
{0.0834506,0.0778293,0.144158,-0.0600282,-0.285313,0.050652}
,
{0.161335,0.0258682,0.0572733,-0.0176696,-0.141135,-0.131673}
,
{-0.0593111,-0.0692453,-0.00206235,-0.0183616,0.00555303,-0.00592536}
,
{-0.237631,-0.426289,-0.121884,-0.027965,0.198551,-0.244841}
,
{-0.128353,-0.0317022,-0.126387,0.0593601,0.100394,-0.0457233}
,
{-0.345359,-0.151219,0.0146813,-0.089013,-0.0760353,0.294542}
,
{-0.111077,-0.080168,0.0310905,-0.0115453,0.0293504,0.00158095}
,
{-0.0638705,0.0853657,-0.0305479,0.00314433,-0.0750069,0.0170209}
,
{-0.268688,-0.201855,-0.113352,0.0468106,-0.0913206,0.108607}
,
{0.124928,-0.0425368,0.0304222,0.00641426,0.0123568,0.064778}
,
{-0.17077,-0.0107169,0.0554131,0.0234065,-0.0666078,0.1567}
,
{-0.0765367,0.0166926,0.0927984,-0.0521402,0.174982,0.108957}
,
{-0.0586112,0.109559,0.0409947,0.0338619,-0.0089171,0.0652638}
,
{-0.0433794,-0.0645169,-0.211067,0.228703,0.135829,-0.323317}
,
{0.0173026,0.0194021,0.113157,-0.10885,-0.0128999,-0.098056}
,
{-0.0773319,0.306919,0.0640544,-0.0354683,0.330898,0.700864}
,
{-0.192635,0.0658148,-0.188925,-0.406544,-0.134319,-0.138329}
,
{0.106783,0.0570069,0.227602,0.087336,0.0589767,-0.101495}
,
{0.231535,-0.0691044,0.177069,-0.00503235,-0.270078,-0.00230206}
,
{-0.0746768,-0.120131,-0.20653,-0.149585,-0.221262,0.0862478}
,
{-0.122232,-0.384188,-0.379041,-0.0181173,0.153089,-0.389983}
,
{-0.0665099,-0.0448194,-0.105252,-0.177439,-0.045665,-0.0273777}
,
{-0.0194378,-0.030053,-0.0932748,0.0535441,0.0742931,0.0225512}
,
{0.300861,-0.32948,-0.0499509,0.574556,0.214024,-0.421126}
,
{-0.0191183,0.0833366,0.0662622,0.11694,0.0740374,-0.0180532}
,
{0.0729297,-0.0875262,-0.14404,-0.0889582,0.227262,0.158469}
,
{-0.0483722,0.164971,0.109139,-0.300571,0.0122829,-0.145954}
,
{0.0108714,0.030246,0.0765553,0.00790545,-0.0234234,0.0547286}
,
{-0.136633,0.0410364,-0.32302,0.0446437,0.416284,0.114708}
,
{0.0398221,-0.0629153,-0.1124,0.331374,-0.044135,0.0545696}
,
{0.121883,-0.215254,0.268692,-0.241348,0.307347,0.0111153}
,
{-0.16521,-0.10642,0.323125,0.369226,-0.976289,0.246903}
,
{0.0750982,0.0765424,0.224646,-0.0044924,0.495755,-0.900956}
,
{0.407592,-1.04781,0.551622,0.872884,-0.518121,0.342325}
,
{-0.674299,0.247549,-0.0957358,0.220821,0.440271,-0.183972}
,
{1.20591,0.112369,-1.48463,-0.998752,-0.0319005,0.834091}
 };
  static const float bias2[1] = { 0.349283 };
  static const float weights2[][1] = { {-0.066632}
,
{-0.066409}
,
{0.0381208}
,
{0.0285404}
,
{-0.0224758}
,
{-0.0396991}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_2(v, index);
}
static int assign_gen_lepton_prior_3_0_2() {
  global_gen_lepton_prior.at(3,0,2) = &specialized_gen_lepton_prior_3_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_2 = assign_gen_lepton_prior_3_0_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0876875,0.146032,0.0241959,-0.128739,-0.169545,0.354825 };
  static const float weights1[][6] = { {-0.109304,-0.197259,0.158895,0.00904696,0.0640383,0.0732195}
,
{-0.176064,0.179317,0.231148,-0.0609277,0.00892143,-0.181912}
,
{0.493626,0.475223,0.175411,0.0849669,-0.120916,-0.150722}
,
{0.141296,-0.0900427,0.595585,0.354575,1.19081,1.06318}
,
{-0.0239842,-0.0425628,0.206823,-0.0561882,-0.107207,0.358876}
,
{0.203351,0.115545,-0.0576593,-0.246716,-0.156137,0.282061}
,
{-0.236572,0.333389,-0.00791231,-0.214237,-0.343577,0.383493}
,
{-0.0651775,-0.00499562,-0.039522,-0.0596697,-0.261213,0.00893495}
,
{-0.17658,-0.261054,0.0708493,0.0615168,0.319837,-0.237528}
,
{-0.18538,-0.114781,-0.0467164,-0.0557019,-0.124147,0.0483798}
,
{-0.0385349,0.0526249,-0.0207303,0.0307046,-0.0503957,0.0226001}
,
{-0.0619283,-0.0609287,-0.137984,0.0312028,0.0810796,-0.150082}
,
{0.288451,-0.0249041,0.247606,-0.0623163,-0.11223,0.305105}
,
{0.22794,0.200936,0.0154219,-0.161664,-0.134798,0.353782}
,
{-0.0559984,-0.0266475,0.102558,0.0704653,0.118592,0.0355667}
,
{-0.0547953,0.00574358,0.154813,-0.0184024,-0.00282446,-0.0475023}
,
{-0.166398,-0.14335,0.243007,0.383214,-0.388616,0.0304629}
,
{0.117309,0.0781649,0.131608,-0.00723658,0.219025,-0.432806}
,
{-0.259004,0.181491,0.112284,-0.0359775,-0.191366,0.0222363}
,
{0.070598,-0.0367497,0.0139898,0.097061,0.0694352,0.0273608}
,
{-0.0131787,0.156471,0.0855007,0.0373768,0.0135088,-0.0811243}
,
{0.0287337,-0.0141757,0.140119,-0.179701,0.0036631,0.0302882}
,
{0.00136175,0.0370185,-0.246109,0.0258296,0.118654,0.0669374}
,
{-0.0730183,0.010605,0.0435055,0.0656891,0.0953146,0.0343661}
,
{0.0812309,0.139858,-0.0383519,0.0524837,-0.0183567,-0.0266462}
,
{-0.00581427,0.0148829,-0.0624647,-0.0698927,-0.0743133,0.110126}
,
{0.0097908,0.0698395,-0.0389176,-0.126691,0.0245274,-0.159855}
,
{-0.164753,-0.0389127,0.0741425,-0.0111644,-0.234913,0.240057}
,
{-0.0311506,-0.789852,0.537392,0.573238,-0.0872765,-0.37453}
,
{0.0409197,-0.136922,-0.010509,0.112081,0.0255991,0.0844264}
,
{0.0325824,0.0641043,-0.00475326,-0.0502939,-0.0049648,-0.0649434}
,
{-0.0901136,-0.044276,-0.165409,-0.0231064,0.224333,-0.144518}
,
{0.0263486,0.0128342,-0.0597499,0.101268,0.0378192,-0.0236365}
,
{0.0329142,0.128635,0.0654342,0.0852293,0.219037,0.143356}
,
{-0.137021,0.0400883,0.0530368,0.00574094,0.0265112,0.0323668}
,
{-0.106047,0.123273,0.0522649,0.0567043,0.0070751,-0.0368178}
,
{-0.160249,-0.0201782,0.0227086,-0.00405846,-0.0669432,-0.00148889}
,
{-0.0324104,0.0242999,-0.00910204,0.0418527,0.0326156,-0.0153488}
,
{-0.08732,0.050196,0.182041,-0.0339484,0.0984178,0.153409}
,
{0.207943,-0.0328328,-0.0607268,-0.0631582,0.0204424,-0.193737}
,
{-0.0212378,0.00832402,0.0517251,-0.0511065,0.00377208,0.0568445}
,
{0.0182374,-0.146917,-0.0112577,-0.0574757,0.204465,-0.0477011}
,
{-0.118824,0.0603114,0.0551269,0.0612365,0.0740498,-0.00855687}
,
{-0.0588602,-0.115695,0.0903937,-0.0547845,0.15833,0.116283}
,
{-0.018138,0.30246,0.100527,0.079435,-0.0598304,-0.10336}
,
{-0.115933,0.0994613,0.113429,0.00701002,0.00236593,0.111666}
,
{-0.0401787,0.061727,0.298058,-0.129688,0.101749,0.46428}
,
{0.130927,-0.0699914,-0.0904656,0.00684161,-0.0101393,-0.0359104}
,
{0.0450631,-0.169516,0.00579556,-0.192057,-0.108232,0.255123}
,
{-0.0244392,0.0503173,-0.0789181,0.122961,-0.0590839,-0.119701}
,
{-0.0486279,-0.0313767,-0.0724067,0.0328976,-0.0453034,-0.108716}
,
{0.11918,-0.0386428,-0.145664,-0.0128607,-0.068215,-0.357507}
,
{-0.0349053,0.0429534,-0.033467,0.061066,-0.000437377,-0.0952086}
,
{-0.137635,0.035277,0.0688306,0.0124933,-0.0358653,0.188081}
,
{0.0427824,-0.103914,0.0239899,0.0639084,0.141605,0.191849}
,
{-0.117892,-0.150548,-0.191921,0.079069,-0.0921887,-0.0463711}
,
{-0.0140212,-0.188399,0.105314,-0.200435,0.186662,-0.181429}
,
{-0.126938,-0.128505,-0.0396524,-0.246751,-0.021958,0.0250683}
,
{0.0703415,-0.295549,0.0919073,0.0774343,0.0512046,-0.0366394}
,
{-0.178069,-0.0964178,-0.254895,0.148442,0.0551767,-0.162491}
,
{0.211741,-0.182377,0.0673035,-0.0557429,-0.0152549,-0.108124}
,
{0.175091,0.0286781,0.223328,0.145089,0.219852,0.218672}
,
{-0.0658047,-0.0645693,0.015594,-0.0239812,-0.0615378,-0.257863}
,
{0.228921,-0.0964873,0.0651849,-0.153155,0.123079,-0.0875642}
,
{0.15587,-0.280992,0.154675,0.0949524,0.157226,-0.137445}
,
{-0.105778,0.0728146,0.0624269,0.0602787,-0.151168,-0.0258477}
,
{0.236579,-0.0284418,0.122485,-0.0286439,-0.114846,-0.0217597}
,
{-0.199398,0.0827343,-0.0555706,-0.0753541,-0.0742241,0.106558}
,
{-0.190745,-0.0706229,-0.296506,0.124981,0.0495611,0.126454}
,
{0.200877,-0.183105,-0.0166721,-0.222698,-0.0044598,0.0385527}
,
{0.175803,-0.184644,-0.00952101,0.203815,-0.120158,-0.100308}
,
{-0.268105,0.0154426,-0.020021,-0.0307287,-0.00240075,-0.0801051}
,
{-0.268249,0.00295401,-0.0256811,0.052965,0.00579084,-0.265028}
,
{0.0319213,0.0858886,-0.0478954,0.296196,0.179455,-0.143355}
,
{-0.114582,-0.207479,0.235338,-0.522296,0.00870038,-0.365999}
,
{0.131128,0.233088,-0.0190144,-0.586569,-0.0479058,0.0857573}
,
{-0.0753576,0.196603,-0.394613,-0.596119,0.00882827,0.297589}
,
{-0.138057,-0.123522,0.0909269,0.0431255,-0.0338252,0.00032596}
,
{-0.219015,-0.139545,-0.0594959,0.040792,0.14437,-0.0144418}
 };
  static const float bias2[1] = { -0.0185073 };
  static const float weights2[][1] = { {0.0502395}
,
{-0.0671525}
,
{0.0829816}
,
{0.0743438}
,
{-0.0954184}
,
{-0.0500273}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_3(v, index);
}
static int assign_gen_lepton_prior_3_0_3() {
  global_gen_lepton_prior.at(3,0,3) = &specialized_gen_lepton_prior_3_0_3;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_3 = assign_gen_lepton_prior_3_0_3();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00511931,-0.210065,-0.173093,-0.0281337,-0.203037,0.134901 };
  static const float weights1[][6] = { {-0.0607138,-0.0374536,-0.0158113,0.128889,-0.0692348,-0.0168065}
,
{0.213507,0.206029,-0.737827,-0.149795,-0.149407,-0.704215}
,
{0.251358,-0.274552,0.438898,-0.00588349,0.363535,0.526897}
,
{0.25049,-0.146931,-1.53277,-0.074448,-0.63958,1.05346}
,
{-0.0824633,-0.114044,0.0202238,-0.0661839,-0.186744,0.222168}
,
{0.0932376,-0.101075,-0.0699729,-0.0980148,0.0114951,-0.0263511}
,
{-0.125239,-0.157737,-0.150815,-0.0222877,-0.119481,0.0872448}
,
{-0.174293,-0.224339,-0.289517,0.0112444,-0.0707104,-0.443225}
,
{0.206682,0.447807,0.0591551,-0.0330081,0.131061,0.0490507}
,
{-0.0945049,0.109205,-0.0211824,0.249119,-0.0999266,-0.16897}
,
{0.138828,0.0111267,-0.019104,-0.0497456,0.0083833,-0.00589225}
,
{-0.163343,-0.0870598,-0.129386,-0.144261,-0.0120935,-0.121332}
,
{-0.0298345,-0.223828,-0.196465,0.068771,-0.395089,0.095149}
,
{0.16087,0.0769157,0.0652049,-0.282016,-0.00403942,-0.268531}
,
{0.0295673,-0.117006,0.221393,-0.202881,-0.16158,-0.0599021}
,
{0.0569212,-0.137908,0.121016,0.188096,-0.092578,-0.00557894}
,
{0.400941,0.497835,-0.00236537,-0.0515912,0.464914,-0.231223}
,
{-0.0623572,0.0223129,-0.134956,0.0655828,0.0804223,0.331289}
,
{-0.0920963,-0.164587,-0.128747,0.156026,-0.0271479,0.160221}
,
{0.103179,0.136061,-0.291504,-0.259597,0.0276092,-0.0592596}
,
{-0.00562878,0.0971048,-0.108396,-0.0115085,0.000530793,-0.133296}
,
{0.00746044,0.0322234,-0.187248,-0.0238209,-0.0593801,0.0465041}
,
{-0.158462,-0.0957568,-0.0377395,0.0711838,-0.107534,0.0839599}
,
{0.116956,-0.103728,0.119589,-0.0400254,0.000358674,-0.066421}
,
{0.0113432,0.0203876,0.11358,0.0910982,0.0322038,0.0578454}
,
{-0.223143,-0.0157447,-0.239728,-0.0550141,-0.0469141,-0.109736}
,
{-0.169217,-0.109617,0.0958425,0.204626,0.0374213,-0.129353}
,
{-0.0723711,-0.165985,-0.0639181,0.154992,-0.0837778,0.129052}
,
{-0.127601,0.0379815,-0.162453,-0.00678993,-0.0854971,-0.248439}
,
{0.0657838,-0.0305426,-0.0649373,-0.0504467,0.0451258,-0.163117}
,
{-0.00491417,-0.0284151,-0.0885484,0.0620965,0.0535969,0.0530736}
,
{0.202814,0.0824766,-0.0157065,-0.117965,-0.135319,-0.00837495}
,
{-0.031537,0.0189002,0.0742348,0.223637,-0.0196553,0.145764}
,
{0.134299,0.175734,0.12541,-0.0537052,-0.0711437,-0.00143939}
,
{0.0336605,-0.0922764,-0.22178,-0.0381803,0.0658512,0.406805}
,
{0.053433,0.0116801,-0.188504,0.116649,-0.0876787,0.0503985}
,
{-0.0429646,0.198983,-0.365003,-0.967835,-0.29127,-0.153348}
,
{0.034743,-0.0142128,0.0447908,0.0909313,-0.0350107,0.103413}
,
{0.214513,-0.0176927,-0.47235,0.0545573,-0.295614,-0.185605}
,
{-0.077494,-0.0320811,0.188838,-0.0414633,0.152379,-0.0537985}
,
{0.00638441,-0.0800183,0.056421,0.0299152,0.0731377,-0.0183677}
,
{-0.0979077,0.0769836,0.227101,0.0518091,0.186834,0.136919}
,
{-0.0190102,0.0493019,0.113003,0.0823315,-0.0573885,0.0712221}
,
{0.00538597,-0.0188452,-0.440648,0.195412,-0.144045,0.0375006}
,
{-0.102111,0.0919624,-0.217205,-0.0946537,-0.0381177,0.00922953}
,
{0.00301317,-0.0157167,0.114612,0.14337,0.0106328,0.0299926}
,
{0.0269179,-0.137569,-0.0263952,-0.0593719,0.159969,0.174656}
,
{0.0170495,-0.0738498,-0.0958916,-0.0665046,0.0177012,0.0962022}
,
{0.0480162,0.054819,0.0493073,0.567277,-0.261643,0.317755}
,
{-0.025911,-0.0377701,-0.0833177,-0.300476,0.0334794,0.0229899}
,
{0.0915802,-0.0252274,0.139421,0.119006,-0.0691075,-0.0281237}
,
{0.0566242,-0.106563,-0.243555,0.194635,0.111618,0.27145}
,
{-0.0286827,0.0175213,-0.100762,-0.107376,0.0213955,-0.00769716}
,
{-0.0381042,0.186543,-0.0474847,-0.0229259,0.0148952,-0.0566678}
,
{-0.137606,-0.00797228,-0.134191,-0.0665656,0.139105,0.0808584}
,
{-0.0324957,0.0325054,-0.00423166,-0.301208,-0.0338661,0.0638225}
,
{-0.00697053,0.139159,-0.0180221,0.466402,0.00336546,-0.051229}
,
{-0.185532,0.0175169,0.026822,-0.0308391,0.0757132,-0.0228396}
,
{-0.114199,-0.192745,0.142979,-0.544971,0.165973,0.464644}
,
{-0.166375,-0.0926462,-0.172771,0.142004,-0.0986298,-0.0616752}
,
{-0.0330272,0.0356636,0.0105427,0.130179,0.0173163,0.0535181}
,
{-0.00689933,-0.252445,0.153025,0.11759,0.255492,-0.141262}
,
{-0.174094,0.0149988,0.107732,0.116089,0.145494,0.0122012}
,
{-0.151085,0.0215932,-0.132933,-0.0387743,0.165929,-0.00763839}
,
{-0.150644,0.108416,-0.12973,0.0712857,-0.00217721,0.0945873}
,
{-0.00301067,0.197081,0.0262049,-0.0983437,0.101027,-0.0142158}
,
{0.13536,0.147827,0.210463,-0.0817083,-0.0630765,0.193923}
,
{-0.170541,0.0026554,-0.00637793,-0.222497,0.00510042,-0.0498356}
,
{-0.00870629,0.0358854,-0.0192538,-0.00605563,0.2183,0.00583665}
,
{-0.054246,-0.000563684,-0.039819,0.132737,-0.0228811,-0.170074}
,
{-0.0471046,-0.0190009,0.0966821,0.0312856,-0.0718451,0.0145837}
,
{0.0880932,-0.138499,-0.0726781,0.317589,-0.108318,-0.216331}
,
{-0.212914,-0.16494,-0.0239805,0.169685,0.205918,0.201613}
,
{-0.17372,0.0637992,0.0947509,-0.20237,0.00153996,0.0418854}
,
{0.0684813,-0.139371,0.0647202,-0.137828,0.0184017,0.204491}
,
{0.0352383,0.00761884,0.0154849,0.147187,-0.231874,0.283303}
,
{0.120007,0.0224279,-0.184906,0.0176987,0.192683,0.131151}
,
{0.0259583,0.232512,0.107344,-0.0435862,0.0855573,-0.182409}
,
{-0.0841183,-0.130926,0.0196677,-0.149389,-0.189323,-0.0835543}
 };
  static const float bias2[1] = { -0.0204948 };
  static const float weights2[][1] = { {0.0365804}
,
{0.0418902}
,
{0.764831}
,
{-0.183015}
,
{0.0443582}
,
{0.333683}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_4(v, index);
}
static int assign_gen_lepton_prior_3_0_4() {
  global_gen_lepton_prior.at(3,0,4) = &specialized_gen_lepton_prior_3_0_4;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_4 = assign_gen_lepton_prior_3_0_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.142252,0.136273,0.0246084,-0.189235,0.0243339,-0.0370103 };
  static const float weights1[][6] = { {0.0277192,0.215936,-0.0782025,-0.174363,0.0961115,-0.165169}
,
{0.317028,-0.200925,-0.379332,-0.429724,0.214169,-0.135517}
,
{0.0316471,0.41705,0.126261,-0.255448,0.254023,0.336432}
,
{0.0363964,-0.0460662,0.0736906,0.656328,0.0815487,0.793918}
,
{0.0770941,0.0667825,0.0815879,-0.147709,0.233581,0.163891}
,
{0.101842,0.184115,-0.212414,-0.307875,-0.000438793,-0.0785692}
,
{0.159644,0.261256,0.0547691,-0.346391,0.10939,-0.145475}
,
{-0.201058,-0.0315111,0.0507817,-0.360353,-0.113513,0.205195}
,
{-0.0628433,-0.160273,-0.144735,-0.115448,0.106005,0.0638772}
,
{0.0908114,-0.0900116,-0.0121299,-0.11355,-0.0464426,0.0968639}
,
{-0.12158,0.00503145,0.0756229,-0.109666,-0.0701343,-0.10414}
,
{-0.0398667,-0.103727,-0.138084,-0.111829,-0.150244,-0.00277233}
,
{0.302971,-0.012578,-0.0323039,-0.206486,0.208309,0.0958754}
,
{-0.227309,0.245491,0.0299711,-0.23713,-0.160606,-0.0397443}
,
{-0.0367624,0.196796,0.0175067,0.109759,-0.00483825,0.0569395}
,
{0.0445893,0.0640126,-0.159621,0.00152947,-0.049912,0.0398198}
,
{-0.590118,-0.213563,0.202705,-0.142747,0.15392,0.26447}
,
{0.215045,-0.0558421,0.0650446,-0.422115,0.0963639,0.148058}
,
{0.12877,-0.0756784,0.151794,-0.154766,-0.0706034,-0.225304}
,
{-0.0626097,0.141939,0.164453,-0.275798,0.201608,0.0270455}
,
{-0.183552,-0.116572,0.0703639,0.128311,0.00020663,-0.173575}
,
{-0.0447997,0.026529,-0.0892528,-0.0123801,0.108061,-0.00587454}
,
{0.0272969,-0.100003,0.161021,0.180092,-0.0675953,0.00460535}
,
{-0.0868895,-0.011007,-0.0608099,0.172046,0.0312743,0.060462}
,
{0.113593,0.0578471,-0.170363,0.0967084,0.0373758,-0.104786}
,
{0.106166,0.169279,-0.0218169,-0.0290034,-0.22112,-0.18573}
,
{0.16063,-0.00903882,-0.0473277,-0.111438,-0.207065,0.109033}
,
{-0.015895,0.0126446,-0.249026,-0.0473423,-0.115257,-0.177125}
,
{-0.203655,-0.0717274,-0.0408295,-0.055965,0.0264175,-0.0816125}
,
{0.0297585,0.189925,0.0240004,0.0795138,0.138242,-0.155336}
,
{0.0883694,0.0511151,0.118916,0.194296,-0.0932888,0.0777691}
,
{-0.0918722,-0.135932,-0.0787291,-0.00218999,0.0729743,-0.155748}
,
{0.0198355,0.178954,-0.222031,0.120101,-0.0291155,0.102156}
,
{-0.0101496,0.132428,0.223073,-0.039946,0.0705462,0.0315568}
,
{-0.504046,0.152925,0.0963682,0.0507842,-0.141309,0.0563926}
,
{-0.0261135,-0.0669548,-0.0143923,0.0270458,0.121749,-0.158867}
,
{0.104214,0.553072,0.433736,0.0261525,-0.09679,-0.101332}
,
{-0.0360403,0.0025097,-0.0349471,0.0428161,0.0105231,0.0256982}
,
{0.119982,-0.107983,-0.0762165,-0.469401,0.107277,-0.205}
,
{-0.0899907,-0.109317,-0.374252,0.260348,0.187454,0.0395737}
,
{-0.120327,0.0422708,0.0566891,-0.0718723,-0.0815127,0.0356528}
,
{0.198425,0.0694411,-0.442754,0.371953,0.383902,0.0310331}
,
{0.0551534,0.00883362,0.0511453,0.103164,-0.0192676,0.0213138}
,
{0.0593902,-0.172739,-0.196718,-0.156404,-0.067695,0.0440757}
,
{0.0209984,-0.0776649,-0.157845,-0.12156,-0.222229,0.3699}
,
{-0.15978,0.0990389,0.0761914,0.0824472,0.00141645,0.00302923}
,
{0.45236,-0.0227946,0.106816,-0.211771,0.0136329,-0.154165}
,
{-0.124975,-0.0845681,0.0070883,-0.0613446,-0.149369,0.037709}
,
{-0.316608,0.216822,0.220729,0.0964516,0.105497,-0.0056165}
,
{0.132248,0.0104308,-0.124386,0.137696,0.273567,-0.0985516}
,
{-0.207323,0.00804785,0.135525,0.00270348,-0.0913212,-0.00566081}
,
{-0.170185,-0.344523,-0.107082,-0.360155,-0.271455,0.0656845}
,
{-0.0162644,-0.0305292,0.0911688,-0.165422,-0.117525,-0.0403315}
,
{0.132594,0.0196966,0.361199,0.126729,-0.272613,-0.0447602}
,
{-0.142632,0.0784519,0.00378737,-0.0115332,-0.14031,-0.237919}
,
{-0.222579,0.00934689,0.139101,-0.159395,0.184634,0.0969473}
,
{0.0171092,-0.106234,-0.0910683,0.0972047,0.121566,-0.0441265}
,
{0.0337092,-0.254791,-0.0572171,0.0972673,-0.114991,0.0193959}
,
{-0.0665374,-0.17301,-0.0491974,-0.0522067,0.159457,-0.0294836}
,
{-0.123602,0.113747,-0.125715,0.116987,0.192475,0.0518629}
,
{-0.101158,-0.288402,-0.0725044,-0.0104782,-0.173487,0.149615}
,
{-0.211363,0.0341504,0.23203,0.125059,0.0755522,-0.221595}
,
{0.0549645,-0.0125843,0.00433175,0.0470156,-0.151872,0.169196}
,
{0.154065,0.11436,-0.116667,-0.046792,-0.115519,0.000951162}
,
{0.1217,-0.042265,0.0239729,0.108393,0.0458844,0.122261}
,
{-0.0668178,-0.117077,-0.181732,-0.0961666,0.203795,-0.0828715}
,
{-0.0988199,0.138997,0.0923076,-0.133179,-0.0371583,0.241253}
,
{0.0418716,-0.127606,-0.0925686,-0.0570918,-0.0838798,0.210512}
,
{-0.0226213,0.130453,-0.240434,-0.0458567,-0.0204568,0.0242658}
,
{0.0740643,0.154307,-0.0108969,0.0270761,0.180748,0.214201}
,
{0.0168952,0.0128262,0.0959194,-0.0358651,-0.20213,0.0258129}
,
{0.0407471,-0.0609747,-0.0484877,0.0510231,-0.0796681,-0.117827}
,
{0.114816,-0.0806777,0.0548971,0.0398601,0.184346,-0.072768}
,
{-0.0181316,-0.105297,0.0374649,-0.182423,0.231795,0.0742469}
,
{0.0103718,0.156319,-0.0912124,-0.0361337,-0.0656505,-0.0884793}
,
{-0.0948897,-0.101107,0.169028,-0.0186315,0.0767338,0.0326257}
,
{0.0153981,0.15925,-0.0193046,-0.0548026,0.0289195,0.0699769}
,
{0.0451464,0.069507,0.196168,-0.110587,-0.211736,-0.0597682}
,
{0.120693,-0.015624,0.0248965,-0.0376627,-0.0511647,0.0747649}
 };
  static const float bias2[1] = { -0.034134 };
  static const float weights2[][1] = { {-1.07168}
,
{-0.0895511}
,
{0.0581177}
,
{-0.786948}
,
{0.0463724}
,
{0.0634315}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_5(v, index);
}
static int assign_gen_lepton_prior_3_0_5() {
  global_gen_lepton_prior.at(3,0,5) = &specialized_gen_lepton_prior_3_0_5;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_5 = assign_gen_lepton_prior_3_0_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_30(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0596082,-0.0488557,-0.006408,-0.0167191,-0.135969,0.0325017 };
  static const float weights1[][6] = { {0.049263,-0.149155,-0.184777,-0.0432185,-0.0678052,0.00521114}
,
{0.0866381,0.0991404,-0.0326948,0.0872336,0.269981,0.101106}
,
{0.102636,0.189972,-0.1016,-0.610889,0.383714,-0.013383}
,
{-0.0957625,0.0508082,0.248517,0.217719,-0.192723,-0.168803}
,
{0.0242602,-0.0203967,0.167348,0.00179572,-0.279616,-0.0750439}
,
{0.000795008,0.184917,0.0102126,0.078055,0.0460749,-0.00833982}
,
{0.0197709,0.0390723,0.131792,0.121362,-0.178037,-0.0916686}
,
{-0.0703433,-0.364202,-0.146848,0.179869,0.132214,0.214695}
,
{0.0409828,-0.126952,0.076853,0.130467,0.0350742,0.148623}
,
{0.060509,0.0655128,0.0350905,0.0460559,-0.0184167,0.0193573}
,
{-0.108046,-0.165357,0.0717792,-0.0385218,0.0205567,0.199551}
,
{0.447494,-0.00241367,-0.077924,-0.087718,-0.106035,0.0994878}
,
{0.118165,-0.103389,-0.175608,-0.139008,-0.0307776,-0.175961}
,
{-0.166193,0.00757841,-0.171775,-0.0400534,-0.0316857,0.179984}
,
{-0.134468,-0.0238727,0.0933381,-0.205076,-0.114078,0.0846671}
,
{0.0500875,-0.12244,-0.0792046,-0.00117549,-0.00669883,-0.0546476}
,
{0.280738,-0.0260997,0.0581249,-0.174948,-0.26596,-0.340541}
,
{0.0543649,-0.0208926,-0.0115203,0.109181,0.184352,0.0420236}
,
{0.228634,-0.0906795,0.026149,-0.0107255,-0.0413755,0.0180527}
,
{-0.0220297,-0.0959794,-0.134162,0.0659479,-0.0305702,0.0466338}
,
{-0.0261293,0.0169276,-0.012125,-0.00297083,0.094244,-0.01187}
,
{0.237422,0.0344539,-0.00616602,-0.321275,0.0296859,0.229119}
,
{0.0233566,-0.103827,-0.02893,0.0541638,-0.0852474,0.0396599}
,
{0.0474675,0.0351376,0.0960522,0.0511063,-0.235034,0.0472614}
,
{0.168454,-0.115781,0.155259,0.0293997,0.143761,-0.0837115}
,
{-0.153866,-0.20732,0.124986,0.179873,-0.0162825,0.0930734}
,
{0.0811831,0.119074,-0.0986301,-0.127581,-0.0128931,0.230103}
,
{0.00627946,-0.0946252,-0.00254908,-0.0134241,-0.108759,0.118644}
,
{-0.0414748,-0.0684192,-0.0311705,-0.0847573,-0.0327635,-0.0438657}
,
{0.248197,-0.0625834,0.101426,-0.047356,-0.0093979,-0.0659155}
,
{-0.12892,-0.274481,0.0400075,0.169817,-0.195525,0.0276609}
,
{0.052135,0.140388,-0.0535052,-0.125603,0.116633,-0.00738417}
,
{0.0835527,0.00965834,-0.0520439,0.36031,-0.471005,0.005873}
,
{0.0798538,0.103217,0.111768,0.16244,-0.0838017,0.117932}
,
{-0.0082126,0.451588,-0.0817051,-0.509924,-0.104989,-0.148368}
,
{0.278906,0.445985,0.0659016,0.562298,-0.126435,0.0673547}
,
{-0.257607,-0.899461,0.0730858,-0.0915192,-0.285159,0.243935}
,
{-0.0456066,-0.23055,0.047415,0.46368,0.415697,0.0309275}
,
{-0.0104639,-0.177932,-0.0380915,0.39636,-0.858716,0.306074}
,
{-0.0907416,0.00488375,-0.0781715,0.0890313,0.0074004,-0.141251}
,
{-0.172352,-0.285394,-0.0427513,0.369989,0.293314,-0.0943816}
,
{0.24721,1.40598,-0.0826419,-0.0838276,0.614429,-0.188487}
,
{0.0456209,0.396437,-0.128036,-0.156792,0.101089,-0.178597}
,
{0.0694477,0.288695,-0.0717913,0.14415,0.608347,-0.00444991}
,
{0.227061,0.528835,-0.0860382,0.113874,0.313497,-0.0765573}
,
{-0.10304,-0.430913,-0.122043,0.594713,-0.299289,0.0296046}
,
{0.0970635,0.0119983,-0.154514,-0.0618822,0.651743,-0.216271}
,
{-0.0129373,0.27151,0.0416802,0.833715,-0.10545,-0.0485721}
,
{-0.160387,0.196326,-0.0976726,-0.081016,-0.563753,0.0110068}
,
{-0.0808058,-0.26743,0.135221,-0.181975,-0.602472,0.0234001}
,
{-0.00315719,0.0631156,-0.16684,0.89478,-1.01419,-0.0678038}
,
{0.0854046,0.364023,-0.0329303,0.11918,-0.0890414,0.112596}
,
{-0.182401,-0.00272645,-0.0575273,0.0251927,-0.201103,0.00281573}
,
{0.0691979,0.626074,0.0361712,-0.132801,0.0843682,-0.00601766}
,
{0.110098,0.0778657,0.0279661,0.0501231,0.135154,0.00459013}
,
{-0.0746638,0.223079,-0.0273657,0.0336013,-0.00327436,0.00909496}
,
{-0.141022,-0.0283363,0.0905834,0.179176,0.103248,-0.113778}
,
{0.0482186,0.210236,0.0209785,0.0158808,0.0731628,0.078839}
,
{0.0213292,-0.0285049,-0.142223,-0.0912348,0.0264631,0.119875}
,
{0.0881602,-0.106336,-0.0161363,-0.0271116,-0.0266497,-0.0505926}
,
{0.0455383,0.236981,0.0425861,0.148473,-0.117059,-0.00278483}
,
{0.0992912,-0.0235383,-0.02941,-0.106197,0.0206124,0.00723399}
,
{-0.0218002,-0.072862,-0.0170858,0.0586142,0.134283,0.164527}
,
{-0.013353,0.0555478,0.164641,0.117277,-0.0533942,0.0534342}
,
{-0.100503,-0.0415312,-0.06082,-0.0410181,-0.1179,-0.0899851}
,
{-0.00511432,0.0253534,-0.0189374,0.212115,0.0189399,0.195091}
,
{-0.109893,0.109403,0.0699062,0.020087,0.167473,0.00440317}
,
{0.103998,-0.0710898,-0.00730803,0.18711,-0.0593108,-0.0970614}
,
{0.0829866,-0.0223261,0.139559,0.133559,-0.0560826,-0.000474119}
,
{0.0561302,-0.138725,-0.116496,0.0990391,0.0347898,-0.0530413}
,
{0.203578,0.13373,-0.0550145,-0.150144,-0.0543098,0.175177}
,
{0.17128,-0.0545399,0.0560491,0.0513024,-0.243574,-0.192266}
,
{0.0266772,-0.100954,-0.122528,-0.132879,-0.0102202,-0.158459}
,
{-0.0858889,-0.114519,-0.0950045,0.146101,-0.00794979,0.165664}
,
{-0.094104,-0.0241131,-0.000231575,-0.060092,-0.0129807,-0.108115}
,
{0.136833,-0.042958,-0.00395185,0.0515178,-0.147189,-0.0552254}
,
{-0.150781,0.0547226,-0.0554533,-0.0875472,0.145756,-0.140058}
,
{0.0742926,0.0519808,-0.0934658,-0.172585,0.117943,0.118732}
,
{0.152362,0.177884,0.00146119,-0.0711827,0.206884,-0.134576}
 };
  static const float bias2[1] = { 0.181863 };
  static const float weights2[][1] = { {0.132427}
,
{-0.353986}
,
{0.0205648}
,
{-1.97175}
,
{-1.67798}
,
{-0.12875}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_30(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_30(v, index);
}
static int assign_gen_lepton_prior_1_0_30() {
  global_gen_lepton_prior.at(1,0,30) = &specialized_gen_lepton_prior_1_0_30;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_30 = assign_gen_lepton_prior_1_0_30();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_0_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.00518379,-0.216315,0.0631786,-0.138789,-0.0248623,-0.0143138 };
  static const float weights1[][6] = { {-0.058815,0.16791,0.0365711,-0.172486,-0.0427915,0.189061}
,
{0.564736,0.471923,-0.147343,-0.255502,0.263831,0.268822}
,
{-0.0929095,0.368094,-0.0287496,-0.380457,0.276181,0.164565}
,
{-0.136068,-0.251005,0.19552,0.0372908,0.09687,0.552475}
,
{-0.0190474,-0.140571,0.0439079,-0.108106,0.0887827,0.0490768}
,
{0.0214911,-0.176959,0.0810086,-0.206849,-0.117471,-0.132386}
,
{0.0178701,-0.214106,0.181423,0.0557469,0.02871,0.0647253}
,
{-0.0661733,-0.030682,0.319723,0.232011,-0.0609647,-0.0763947}
,
{-0.490241,0.0331194,0.00259808,-0.229671,-0.0505757,0.280997}
,
{0.19241,-0.092813,0.186658,0.247453,-0.0332029,-0.0147303}
,
{-0.195352,0.0353297,0.0798294,-0.231725,-0.0362013,-0.0466266}
,
{-0.117979,0.0262874,-0.00571804,-0.23911,0.0169911,-0.241129}
,
{-0.0838262,-0.144583,-0.233996,-0.201554,0.0704244,-0.0106037}
,
{-0.0180369,-0.234511,0.0282751,-0.117662,0.0611376,0.0550048}
,
{0.02004,0.0475379,0.0546296,0.0298827,0.0756506,0.031995}
,
{0.103547,-0.240031,-0.155351,0.102136,-0.00223284,-0.0728489}
,
{0.185365,-0.116088,0.37021,-0.0871686,0.184699,-0.0380951}
,
{0.0359246,0.0239931,0.0621824,0.118648,0.117212,0.0615662}
,
{0.0630755,-0.109522,-0.0198075,0.0518321,-0.142619,0.071533}
,
{-0.0670021,-0.142268,0.0717889,-0.107446,-0.0630714,-0.012833}
,
{0.0412876,0.0849164,-0.0118207,0.00751323,0.102166,-0.00853716}
,
{-0.0430344,-0.030987,0.015355,0.0396631,-0.0299091,0.0325394}
,
{-0.0179773,0.124343,-0.235408,0.0826097,-0.0338556,0.106388}
,
{0.0747617,0.0498457,-0.0491697,0.0488591,-0.0122829,-0.350693}
,
{-0.0264516,0.0635155,0.0518006,-0.00501939,-0.147788,0.104149}
,
{0.0737112,-0.0736776,-0.204039,-0.0309105,-0.00771351,0.154403}
,
{0.0204796,-0.130854,0.180323,0.142081,-0.00306286,-0.0892234}
,
{-0.0862426,-0.163673,-0.103261,-0.085852,-0.0303271,-0.177392}
,
{0.100459,-0.118348,-0.177372,-0.190007,0.00408719,-0.100236}
,
{-0.201799,0.00243164,0.0862566,0.0527847,-0.0732915,-0.0646568}
,
{-0.231949,-0.0628126,-0.033469,0.122234,-0.0791163,-0.00284679}
,
{0.161736,0.0761379,-0.129492,-0.0116753,0.19871,-0.092562}
,
{-0.0722492,-0.141162,-0.149777,0.0851813,0.253536,-0.0613748}
,
{-0.140111,-0.0504525,-0.155046,-0.0118949,-0.0569627,0.0279825}
,
{0.050203,0.0647134,0.0122493,0.0246152,-0.167322,0.0634334}
,
{-0.170614,-0.20495,-0.0487725,0.0563072,0.138949,0.0316862}
,
{-0.0385166,-0.0889941,0.231579,-0.0926543,-0.344941,0.14881}
,
{0.0699225,-0.052393,-0.0763152,0.0616091,0.128891,0.232354}
,
{0.30593,0.00892111,-0.317331,-0.207183,0.409916,0.0440231}
,
{0.1272,0.240271,-0.0198617,-0.0245438,-0.193541,-0.379182}
,
{0.0441491,-0.197799,-0.0557214,-0.0110466,0.0309015,-0.123601}
,
{-0.337438,-0.242384,-0.123415,-0.123033,0.211625,0.205264}
,
{0.0122412,-0.0495593,-0.126185,-0.194444,0.228117,-0.190332}
,
{-0.192302,0.0696909,0.092572,0.088251,-0.196874,-0.298612}
,
{-0.111297,-0.216593,0.117406,0.168535,-0.211,0.486307}
,
{-0.119731,-0.0364163,0.0487283,-0.0657557,0.08553,0.120865}
,
{-0.164372,-0.17455,0.00732729,-0.62935,0.246994,0.0519891}
,
{0.0752217,0.0252685,-0.02866,0.00460487,0.0532761,0.145057}
,
{-0.0246756,0.456309,0.103643,-0.255216,-0.09052,0.137641}
,
{-0.0352175,0.118477,0.0882722,0.0636785,-0.181449,-0.0118419}
,
{-0.090602,-0.0366753,0.0159984,-0.177286,0.0026705,-0.138179}
,
{-0.129867,0.177556,0.0478189,-0.013531,0.260349,0.156091}
,
{0.0181344,0.0862048,-0.0532022,-0.118176,0.117881,0.0440051}
,
{-0.225868,-0.0885966,-0.0544661,0.0725006,0.0387572,-0.126415}
,
{0.0576238,0.0570851,-0.167824,0.181999,-0.247947,-0.117962}
,
{-0.0144894,-0.0719773,-0.172243,-0.0671696,-0.151261,0.200255}
,
{0.150207,0.0382947,0.0240831,0.0943522,-0.0314148,0.001989}
,
{0.129737,0.0426591,-0.198775,-0.0499543,-0.133173,-0.216189}
,
{-0.00350609,-0.240489,-0.0756553,-0.0855322,0.249519,-0.158013}
,
{0.0991354,0.0356476,0.0384133,-0.0640209,-0.0978221,0.0107498}
,
{-0.0939569,0.172962,-0.0773878,-0.0271784,-0.0504233,-0.00459471}
,
{-0.0684989,0.0947882,0.0445994,-0.0445069,-0.187277,-0.144997}
,
{-0.0573337,0.0592805,-0.158996,0.0293321,-0.186237,-0.0715726}
,
{0.0183284,0.148273,0.163727,0.0136224,-0.0525343,-0.0253236}
,
{-0.057225,-0.0558673,0.135937,0.0753369,0.0377269,-0.0589851}
,
{-0.152602,-0.160329,-0.0953901,-0.191418,-0.0751032,0.160465}
,
{0.0547834,-0.0569413,-0.0411248,-0.246356,-0.0415866,0.0545362}
,
{0.223645,-0.168149,-0.139678,0.00116939,0.0186612,-0.19138}
,
{-0.0592864,0.233224,-0.0108252,-0.0212278,-0.0259846,0.0193777}
,
{0.0436753,0.18498,0.114318,0.0471228,-0.0680821,0.08852}
,
{0.0844821,-0.0940851,0.0608029,-0.144833,-0.152242,-0.144046}
,
{0.0221444,-0.208854,0.0163568,-0.0245312,0.00553417,0.246467}
,
{-0.0748121,-0.191048,-0.0622654,-0.0509741,0.00266182,0.0346305}
,
{-0.116885,0.119972,-0.240791,0.243823,-0.074541,-0.11209}
,
{0.197703,-0.113013,-0.0534587,0.00350452,0.071924,0.0621709}
,
{0.128447,-0.196454,-0.0904386,-0.0169101,0.0398618,0.0220755}
,
{-0.0103583,0.0924114,0.0112894,-0.106185,0.226134,-0.101953}
,
{-0.029211,-0.0245562,0.0242858,0.0252141,-0.206748,-0.0707169}
,
{-0.218313,0.0439468,-0.0345658,0.207284,-0.20659,-0.0198716}
 };
  static const float bias2[1] = { -0.149661 };
  static const float weights2[][1] = { {0.111328}
,
{-0.252232}
,
{0.104558}
,
{0.283632}
,
{0.0681365}
,
{-1.25884}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_0_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_0_9(v, index);
}
static int assign_gen_lepton_prior_3_0_9() {
  global_gen_lepton_prior.at(3,0,9) = &specialized_gen_lepton_prior_3_0_9;
  return 0;
}
static int initialize_gen_lepton_prior_3_0_9 = assign_gen_lepton_prior_3_0_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_31(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00599948,0.0,0.0,-0.00504448,0.0,-0.00600202 };
  static const float weights1[][6] = { {-0.094751,-0.0527138,0.0670637,-0.0417665,0.131364,0.0953913}
,
{0.119182,0.0936136,0.107109,-0.239225,-0.0141361,0.111382}
,
{-0.055237,0.105477,0.136597,-0.153249,-0.00550202,0.0122457}
,
{-0.0360513,0.067141,-0.0599193,-0.0662519,-0.0400736,0.146204}
,
{-0.0715985,-0.129991,0.0991392,-0.149091,-0.0474975,-0.0610177}
,
{0.167977,-0.206158,0.0373797,-0.00379343,-0.0827224,-0.0381907}
,
{0.18892,-0.0851308,-0.113146,-0.105024,0.0361156,-0.041042}
,
{-0.091975,0.10162,-0.0948584,0.108874,0.0449432,0.180882}
,
{0.0332245,-0.00630813,0.196912,0.159329,-0.0763045,-0.14578}
,
{0.193236,0.1044,0.0656674,-0.102693,0.00196003,-0.0765003}
,
{-0.0893768,-0.118764,-0.206825,0.0425829,0.186214,-0.0625282}
,
{0.0184265,0.131491,0.0476696,-0.119888,-0.0541393,0.0695005}
,
{-0.0573502,0.118481,0.115022,0.0590631,0.0198123,0.204314}
,
{-0.0222604,-0.0199725,-0.198805,-0.0173691,0.0209314,-0.188026}
,
{0.0577274,-0.0874276,-0.0151421,0.0699939,-0.0563359,-0.123713}
,
{-0.121376,0.0633637,-0.0372578,-0.00624147,4.95867e-05,-0.15252}
,
{0.0322664,-0.0333358,-0.0345392,-0.0368833,-0.082944,-0.0645003}
,
{-0.216602,-0.210056,-0.00159582,-0.10262,-0.247887,0.105062}
,
{-0.143726,-0.00628086,0.0192452,-0.159838,-0.0045535,-0.217014}
,
{-0.15353,-0.13551,0.00909152,-0.0734025,-0.0165605,-0.136351}
,
{0.127385,-0.0659596,-0.13248,0.00993098,-0.0513064,-0.0803796}
,
{-0.0364437,-0.111717,-0.111941,-0.148657,-0.0793487,0.0616444}
,
{-0.163576,0.0426711,-0.237871,0.119619,-0.0274266,0.138713}
,
{0.197352,0.0464895,-0.0619773,-0.0177969,0.0708926,0.0148265}
,
{0.0348582,-0.0141965,0.0412522,0.0388249,-0.0972518,-0.0741848}
,
{-0.162453,0.0928076,-0.152626,-0.119616,0.207899,0.0523211}
,
{-0.0159015,0.0958934,-0.129638,0.0606483,-0.177877,-0.209342}
,
{-0.213114,-0.120095,-0.173963,-0.0588024,-0.0901301,-0.0839178}
,
{0.0333487,0.0646969,0.114181,0.0240591,-0.177005,-0.132054}
,
{-0.0318275,0.0482551,-0.0917037,0.0704717,0.0635918,-0.130571}
,
{-0.140305,-0.149603,-0.114845,-0.215637,-0.016642,-0.0356058}
,
{-0.0104592,0.00857389,-0.00843546,0.0373969,-0.00710958,-0.0859299}
,
{0.0269863,-0.176707,-0.152935,0.203889,-0.157706,-0.154302}
,
{-0.0827045,0.03249,0.0848576,-0.0524328,0.128994,0.0336706}
,
{-0.0647118,-0.120966,0.0599783,0.122444,0.0786917,-0.0592518}
,
{0.180242,0.0696702,0.102546,0.149166,0.0738314,0.117278}
,
{-0.203016,0.100955,-0.042496,0.242859,-0.0689138,-0.0175363}
,
{0.0122238,-0.120527,-0.114813,-0.0369869,-0.0608171,-0.00302776}
,
{-0.0654802,-0.0108082,-0.0988292,-0.122692,0.058191,-0.0136848}
,
{0.0992221,-0.137976,-0.147992,-0.0317971,0.0471461,0.112539}
,
{0.159807,0.116977,0.022657,-0.0612481,-0.0866798,0.0643804}
,
{0.0473476,0.0249504,0.11761,0.052472,-0.0410481,-0.0585388}
,
{0.0846865,-0.0405118,0.0847598,0.115095,-0.043053,-0.0552526}
,
{0.108611,0.026486,-0.0328784,0.00537855,-0.033363,-0.147232}
,
{-0.145891,0.04374,-0.0462915,0.00604374,0.0113074,-0.187153}
,
{0.0655167,-0.231055,-0.0344034,-0.147282,0.00606437,-0.0224424}
,
{-0.0652033,-0.103925,0.111509,0.0905987,-0.0453383,-0.0524275}
,
{0.143736,0.0474169,0.0880698,0.03508,-0.0687901,-0.0892165}
,
{-0.0159361,0.144846,-0.0279591,0.190241,0.0866274,0.0758928}
,
{-0.185982,-0.0190903,0.0492881,-0.0261019,0.0230107,0.222003}
,
{-0.119103,-0.162572,0.0128946,0.0354033,-0.0508055,0.0514073}
,
{-0.0258831,-0.0399749,0.029244,-0.0365348,0.0612074,0.0297836}
,
{-0.064129,0.0719351,-0.137399,-0.138458,0.0280492,0.158494}
,
{-0.23843,0.0659124,-0.0688019,-0.143989,-0.0379496,-0.0711668}
,
{-0.184269,0.0786863,-0.119277,-0.0368959,0.0197266,0.19412}
,
{-0.16422,-0.000839606,0.0817437,0.0242256,0.0534917,0.176085}
,
{0.121306,-0.0956555,-0.15182,-0.0382601,-0.126985,0.0747553}
,
{-0.0782301,-0.021236,0.137316,0.117797,0.12292,-0.0121689}
,
{-0.00747812,-0.0856396,-0.0953563,-0.0946246,-0.0973826,0.147212}
,
{0.0985113,0.0377561,0.130496,-0.0936332,0.0413928,-0.0159725}
,
{-0.215498,0.113096,-0.0494765,-0.0379686,0.0641827,-0.00504159}
,
{0.0999753,-0.0581938,0.104251,0.114718,0.0255285,0.0506782}
,
{0.0527656,0.063471,0.190683,-0.0430321,-0.0554056,-0.0931628}
,
{-0.102138,0.113324,0.0580792,-0.122986,-0.147327,-0.0220279}
,
{-0.113681,-0.0688866,-0.107878,0.0220304,0.0523469,-0.0657775}
,
{-0.0261817,0.129058,-0.0247177,-0.135397,0.101988,-0.183521}
,
{-0.160732,-0.220493,-0.131733,0.021638,-0.0118613,0.0735051}
,
{-0.176587,0.0656145,-0.0246468,-0.109706,0.0202366,0.0197664}
,
{0.043901,0.0832057,0.184056,0.07437,0.0978789,-0.074701}
,
{-0.129001,0.10516,-0.0743548,0.0764187,-0.163142,0.0361606}
,
{-0.0626204,-0.142328,-0.013366,0.0576678,-0.0779648,-0.0374499}
,
{-0.0402567,0.0995342,-0.00940782,-0.149064,0.0415528,-0.211494}
,
{0.121299,0.0338161,-0.181099,-0.123992,-0.0392577,-0.0641152}
,
{0.0486868,0.167939,-0.0573928,-0.0763765,0.130751,0.147323}
,
{-0.0574856,-0.102295,-0.119709,-0.0196911,0.192018,-0.0996749}
,
{0.0741499,0.0757923,0.0812921,0.0445915,-0.188254,0.124361}
,
{0.0508948,0.0892866,-0.0480183,0.0370752,-0.156233,-0.0043693}
,
{-0.0930856,-0.108082,0.0292995,-0.139718,-0.178366,0.193977}
,
{0.116265,0.130161,-0.172289,0.102349,0.0344735,-0.160307}
 };
  static const float bias2[1] = { -0.00860542 };
  static const float weights2[][1] = { {-0.108203}
,
{-0.0593516}
,
{-0.163882}
,
{-0.000353491}
,
{-0.0704046}
,
{0.171351}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_31(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_31(v, index);
}
static int assign_gen_lepton_prior_1_0_31() {
  global_gen_lepton_prior.at(1,0,31) = &specialized_gen_lepton_prior_1_0_31;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_31 = assign_gen_lepton_prior_1_0_31();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_3_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.537228,0.109893,-0.720693,-0.1454,0.0584715,0.247449 };
  static const float weights1[][6] = { {0.276808,-0.925925,0.195754,-0.154994,-0.170016,0.0416912}
,
{0.437863,0.0967663,-0.441132,0.20289,0.38241,0.362637}
,
{0.27357,0.0767095,-0.782799,-0.13435,-0.230412,0.0973501}
,
{-0.158406,0.509502,-0.707017,0.00854348,0.918512,0.216743}
,
{0.682179,-0.00586906,-0.650226,-0.0612024,0.124354,0.195139}
,
{0.585759,0.0729059,-0.681996,-0.276906,-0.0942498,0.108156}
,
{0.589928,0.0289492,-0.593587,-0.070887,0.00150956,0.0176373}
,
{-0.1319,0.022883,0.0737449,-0.112853,-0.16711,-0.225503}
,
{0.176848,-0.0053291,0.243724,0.0865516,0.045321,0.173707}
,
{0.242508,-0.124346,-0.15686,0.0120629,-0.0654649,-0.0955198}
,
{0.152746,-0.0699063,0.0309165,0.0140515,-0.0985162,-0.051566}
,
{0.14557,0.0434325,0.0694279,0.0166218,0.082337,0.0472018}
,
{0.0564811,-0.0918781,-0.00216866,-0.0216069,0.0196507,0.0928211}
,
{-0.185936,0.15564,-0.0517666,-0.141827,-0.060457,-0.117009}
,
{-0.0439866,-0.108189,0.145766,-0.0677082,-0.0989145,0.185821}
,
{-0.0417953,0.0106038,0.00369355,-0.0808737,-0.0730227,0.00597543}
,
{-0.143439,-0.129757,0.0876098,0.17775,-0.0727299,0.142656}
,
{-0.064616,-0.111654,0.0414309,-0.23186,0.214095,-0.0888565}
,
{2.20246,-4.40947,1.64652,-1.80389,-2.79203,-1.43074}
,
{0.0732473,0.0652701,-0.171123,0.0353085,0.0692883,0.00469948}
,
{-0.0110071,0.138224,-0.162053,0.224717,0.0552267,-0.048208}
,
{-0.0198708,0.0503612,-0.0065842,0.0810598,-0.0728669,-0.000549862}
,
{-0.174351,-0.0219013,-0.0594962,0.000376513,-0.138502,0.228782}
,
{-0.0281068,0.04195,-0.00235512,0.143286,-0.042861,-0.142835}
,
{0.264422,-0.219663,0.146214,-0.152423,-0.310066,-0.0447388}
,
{0.349884,-0.286821,0.169064,0.13925,-0.157635,0.014041}
,
{0.261497,-0.172992,-0.0154977,-0.140684,-0.068371,-0.160761}
,
{0.326792,-0.10537,0.00172672,-0.0408586,0.0574534,0.0824831}
,
{0.112692,-0.0328259,-0.012087,0.0864947,0.0679081,0.0586032}
,
{-0.0401047,-0.111649,0.00332261,-0.140456,0.0350696,0.124496}
,
{-0.000112171,-0.0759408,0.00189053,-0.0278064,-0.121782,-0.0431396}
,
{-0.0375442,0.186015,0.0586507,-0.0891149,-0.0861917,-0.095833}
,
{-0.0548819,-0.130361,-0.0346372,-0.0857855,0.00740437,0.0983255}
,
{-0.201906,-0.100024,0.0229734,0.212986,-0.0211944,-0.0946334}
,
{0.0650354,-0.00207837,0.104717,0.0999686,-0.0338654,0.162615}
,
{-0.0590814,0.000990813,-0.0905757,-0.103748,0.0376042,-0.159473}
,
{-0.0280471,0.00487954,-0.0491434,-0.0780278,0.0420656,-0.176381}
,
{0.0583593,-0.0011675,-0.0185486,0.0936897,-0.0250001,-0.0197413}
,
{0.0445909,0.00841002,-0.0580499,0.0635747,0.1098,-0.0884875}
,
{0.0349898,-0.00347767,-0.0246667,0.0366681,0.12511,-0.098632}
,
{-0.0378445,0.00129155,-0.0178813,-0.0740333,0.0160804,-0.00245859}
,
{-0.0569181,0.0167075,-0.0220584,-0.107392,-0.218647,-0.0507437}
,
{0.0491961,-0.00397394,-0.00215344,0.0860667,-0.0776075,0.0561453}
,
{0.00923248,-0.00415769,0.119073,-0.0285731,-0.0989609,0.129529}
,
{0.0057742,0.0067982,0.0495334,-0.00806187,-0.0235484,-0.0475094}
,
{-0.0719223,-0.000550989,0.0117035,-0.100811,0.0139946,0.00135468}
,
{-0.0096506,-0.00277491,0.0169188,0.0296443,0.0653655,0.0979525}
,
{-0.0072242,-0.000328172,-0.0405112,-0.0223391,0.0176112,0.00894894}
,
{-0.027877,0.00258661,-0.0150479,-0.0964016,-0.0494411,-0.00778063}
,
{-0.0592405,-0.00100736,0.00912568,-0.111498,-0.0925759,-0.0330614}
,
{-0.0461796,-0.00332521,-0.0258938,-0.0752059,-0.0160689,-0.0162174}
,
{0.00475602,-0.0108051,0.011818,0.0017977,0.0954099,0.0124595}
,
{0.092829,0.00367314,0.00565104,0.188208,-0.00891203,0.00301434}
,
{0.0218006,-0.00332757,0.0828138,0.0742967,0.0146778,0.0665128}
,
{0.212592,-0.194468,-0.290445,0.13254,0.333842,-0.203386}
,
{-0.0651822,-0.0786896,0.108142,-0.100809,0.0621307,-0.0194394}
,
{0.101417,-0.120296,0.0127697,0.00810656,-0.213791,0.0148014}
,
{-0.0188061,0.167768,0.218416,0.112041,-0.0847973,-0.0545163}
,
{0.140806,-0.0253955,0.103143,-0.0203796,-0.114274,-0.186229}
,
{0.0555933,0.0158568,0.103062,-0.000606589,0.0933468,0.189951}
,
{-0.104955,0.0533279,0.0267226,-0.0624396,-0.146147,-0.0852545}
,
{-0.264192,-0.0253791,-0.187542,-0.170694,0.216735,-0.0315448}
,
{0.257096,-0.137164,0.0295058,0.0833422,-0.455133,-0.00409152}
,
{0.0388981,-0.0347447,0.146462,0.0148202,-0.190057,0.0121305}
,
{-0.0614925,-0.0955507,-0.123353,-0.040653,0.108913,0.0470594}
,
{-0.0274923,-0.110695,-0.193176,-0.0785507,-0.0374124,0.0466222}
,
{-0.161631,-0.0423774,0.0232101,0.118693,0.224684,0.392689}
,
{0.103858,0.169979,0.133471,0.171153,-0.234025,-0.129127}
,
{0.145017,-0.022424,-0.128,-0.0334187,-0.176121,0.0905156}
,
{-0.00239402,0.0492432,0.0760121,0.0153122,0.15424,0.0755039}
,
{0.145521,0.120083,-0.161286,-0.0208422,-0.0516394,0.0463652}
,
{-0.285923,-0.0471817,0.182485,-0.055071,0.00861848,0.147495}
,
{0.241763,-0.0680009,0.219998,0.115567,-0.604638,0.204723}
,
{-0.064137,0.0134087,0.120362,0.0600246,0.144464,-0.248779}
,
{0.422163,0.0181747,0.169489,0.150535,-0.172651,-0.27858}
,
{-0.124617,-0.003537,0.158173,0.0816789,-0.173383,-0.0498521}
,
{0.266609,0.0271508,-0.0145899,0.0792803,-0.515726,0.416242}
,
{-0.122142,-0.00396911,-0.196337,-0.039502,-0.090925,-0.0326799}
,
{0.452251,0.116086,-0.222942,0.172851,-0.144275,-0.224577}
 };
  static const float bias2[1] = { 0.0435068 };
  static const float weights2[][1] = { {-0.0738589}
,
{0.211064}
,
{-0.0448257}
,
{0.0411338}
,
{0.0231161}
,
{0.0302824}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_3_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_3_0(v, index);
}
static int assign_gen_lepton_prior_0_3_0() {
  global_gen_lepton_prior.at(0,3,0) = &specialized_gen_lepton_prior_0_3_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_3_0 = assign_gen_lepton_prior_0_3_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0307279,-0.04277,0.292241,-0.0174868,-0.362116,0.0617268 };
  static const float weights1[][6] = { {-0.348883,0.309261,-0.00996795,0.0788304,-0.204715,-0.181203}
,
{-0.0457219,0.378442,0.026589,-0.138582,-0.401144,-0.365021}
,
{-0.799701,0.274319,-0.158818,0.0580578,-0.421446,-0.14664}
,
{0.412438,-1.11194,0.848568,0.249804,-1.00093,0.0519465}
,
{0.124456,-0.147202,0.328678,0.0362039,-0.245151,0.111653}
,
{-0.035122,0.18723,0.18612,-0.219568,-0.335355,0.0158666}
,
{-0.0742048,0.305996,0.124617,-0.167477,-0.391234,-0.132795}
,
{-0.19378,0.128005,0.102093,-0.205698,-0.0937133,-0.316538}
,
{0.40772,-0.356998,0.569828,0.413841,-0.486974,-0.103303}
,
{-0.158256,-0.0147834,0.117897,0.0647404,-0.138848,0.121502}
,
{-0.0738148,0.0884014,0.149336,0.128708,-0.0862904,-0.169901}
,
{-0.105186,0.0245556,0.0849807,0.0247752,0.118087,0.011473}
,
{0.123701,-0.175914,0.283254,-0.216017,-0.436603,0.107459}
,
{0.0250094,0.0817111,0.31012,-0.216182,-0.395154,0.111613}
,
{-0.0725997,0.0371567,0.0399832,0.0234139,-0.0524134,-0.201651}
,
{-0.0622386,-0.160673,-0.0521549,-0.102383,0.0775698,0.0765171}
,
{0.428548,-0.242283,0.295996,0.165416,-0.164113,0.164145}
,
{-0.0856645,-0.0834202,0.312223,0.301981,0.00577689,-0.653396}
,
{0.081184,-0.0958804,-0.0859809,-0.0174021,-0.129136,-0.0397872}
,
{0.0643099,0.0741682,0.115866,-0.0925537,0.0235095,-0.0668369}
,
{-0.0854964,0.0138529,0.15553,-0.00575147,0.0729847,-0.00529605}
,
{-0.0721316,0.15543,0.0746438,0.125807,0.0532985,-0.0997781}
,
{-0.00607649,0.0055643,-0.196937,-0.0110968,0.00610266,-0.0946445}
,
{-0.130212,-0.129148,0.0375539,0.129502,0.181118,0.0294199}
,
{-0.0710865,-0.204942,-0.319715,-0.00840224,-0.097285,-0.0407615}
,
{0.389814,0.00299513,0.105275,0.0449752,0.447274,0.135611}
,
{-0.198807,0.0829557,-0.0812885,-0.298082,-0.363823,-0.201457}
,
{-0.306271,0.105492,0.195204,0.253674,-0.0568831,-0.126435}
,
{-0.145649,0.184115,0.23517,0.833419,-0.914964,0.526191}
,
{0.00606809,-0.0463476,0.138643,0.216795,-0.130446,0.0862886}
,
{0.1165,0.0192425,-0.177289,0.109854,0.181032,0.027506}
,
{-0.172042,0.0157262,-0.158991,-0.149043,0.132888,-0.0408595}
,
{-0.0660935,0.0425197,-0.160485,0.00806848,0.0744434,-0.0791311}
,
{-0.166564,0.159787,0.112092,-0.0332366,0.0461843,-0.0446566}
,
{0.0992858,-0.0193106,-0.0679307,0.0485469,-0.0736676,0.0112273}
,
{-0.0517855,-0.0304165,0.00950148,0.0228667,0.0556365,0.0317264}
,
{-0.154186,-0.150525,-0.0396835,0.0368857,0.0397224,-0.025313}
,
{0.0229885,0.0278394,0.0121605,-0.0111133,0.0367255,0.0572414}
,
{-0.0606369,0.0555497,0.0908646,-0.131477,0.128802,0.0283194}
,
{-0.109312,0.128942,0.0768953,0.069474,-0.00892893,0.123966}
,
{0.0238906,0.0149091,0.00285421,-0.0470452,0.0108635,0.0841804}
,
{-0.102993,-0.0253608,-0.0285494,0.00381676,0.0841083,0.273034}
,
{0.00582542,0.0185962,-0.0152989,0.0550725,-0.0287719,-0.0137951}
,
{0.0428893,-0.0953929,-0.0858558,0.0496602,-0.059496,-0.053624}
,
{0.0691883,0.0250469,-0.0120763,0.0520712,-0.0101875,0.0304496}
,
{-0.0467364,-0.119227,-0.0584377,0.0911581,0.0200549,-0.064073}
,
{0.232246,-0.131862,-0.186037,0.0270538,-0.21119,0.016722}
,
{-0.048361,0.0222944,0.012156,0.0234748,9.23816e-05,-0.0110209}
,
{0.115567,0.107566,-0.00592897,0.0190997,-0.0717287,0.00517176}
,
{-0.0862868,0.0986923,0.0754248,0.0559957,0.0288766,-0.0662799}
,
{-0.0454075,0.101246,0.0942051,-0.0312698,0.0243521,0.00327385}
,
{0.100289,-0.0103362,-0.00864849,0.0786325,-0.0353915,-0.0872614}
,
{0.0626339,-0.00291457,-0.019329,0.0201993,0.00319559,-0.00151667}
,
{-0.0522624,-0.0882315,0.0336052,-0.0514039,0.109012,-0.0884321}
,
{-0.114535,-0.0741822,-0.176162,-0.106537,-0.221429,0.0198316}
,
{0.0688076,0.0858949,-0.0404748,-0.0306535,0.0455659,0.0689764}
,
{-0.355667,0.148895,-0.258637,0.0312476,0.0108045,0.40776}
,
{-0.1138,0.998533,0.358672,-0.601927,0.333262,-0.570463}
,
{-0.19385,0.190951,-0.086738,0.0415238,0.0600021,0.334603}
,
{-0.321774,-0.611802,-0.0230795,0.11842,0.30509,-0.0607674}
,
{-0.00956272,-0.0710511,-0.00433726,0.0873111,-0.0686774,-0.0584953}
,
{0.121663,-0.307919,-0.339341,-0.0366386,-0.743378,-0.329924}
,
{-1.73399,1.90026,-1.5098,-0.65808,0.837879,-1.09274}
,
{0.436402,0.146789,0.0928546,-0.293139,0.135285,-0.0635777}
,
{-0.386621,-0.330099,0.0174434,-0.312106,0.0859609,0.0653677}
,
{0.0191088,-0.0507775,-0.0193867,-0.135479,-0.122959,-0.0473558}
,
{0.212585,0.364777,0.0294313,0.250659,0.579019,0.104678}
,
{0.73344,-0.202644,0.0981162,0.534614,0.03957,0.863685}
,
{-0.301087,-0.11361,-0.0975651,-0.454961,-0.16254,0.135631}
,
{-0.0368421,0.151317,0.458834,-0.158557,-0.0903986,-0.275105}
,
{0.0759837,-0.0382477,-0.180662,0.121844,-0.0676495,0.0378456}
,
{0.296127,0.750416,0.0489792,0.678187,-0.129711,-0.01705}
,
{0.810179,-0.0302813,-1.01599,0.515084,1.47262,1.41377}
,
{-0.350403,-0.187482,-0.24206,-0.0232791,-0.292906,-0.0821833}
,
{0.427844,0.376801,-0.0792209,-0.629918,0.209144,-0.0747067}
,
{0.329613,-0.431449,-0.107046,-0.538194,0.65363,-0.0205452}
,
{0.183746,0.25522,0.171271,0.225521,0.0971502,-0.807002}
,
{-0.172704,-0.0530899,0.0988835,-0.134327,0.0353726,0.0545323}
,
{2.07203,-0.564853,0.515151,0.108168,-0.747147,0.141106}
 };
  static const float bias2[1] = { 0.0583688 };
  static const float weights2[][1] = { {0.0141915}
,
{-0.0269888}
,
{0.0274433}
,
{0.0129093}
,
{-0.0244463}
,
{0.0511224}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_1_0(v, index);
}
static int assign_gen_lepton_prior_3_1_0() {
  global_gen_lepton_prior.at(3,1,0) = &specialized_gen_lepton_prior_3_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_3_1_0 = assign_gen_lepton_prior_3_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_1_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.120411,-0.0598649,-0.170883,-0.0424505,-0.268917,-0.0189404 };
  static const float weights1[][6] = { {-0.377407,0.510756,0.0110312,-0.138067,0.0711698,-0.338072}
,
{0.414477,-0.407469,0.060457,-0.0928652,-0.00297184,0.421925}
,
{-0.255762,0.577406,-0.153004,0.20427,-0.607394,-0.039267}
,
{-0.0991674,0.15247,-0.0578332,0.356277,-0.0170396,0.990328}
,
{0.233834,-0.155561,-0.255672,-0.0174718,-0.265839,0.00840661}
,
{0.0320212,-0.148786,-0.295307,0.0115002,-0.306195,0.114672}
,
{0.181503,-0.225993,0.030318,-0.0889516,-0.268633,-0.0243889}
,
{-0.266848,0.00182664,-0.132038,-0.131172,-0.22101,0.0385826}
,
{-0.0122671,-0.0329418,-0.0823277,-0.104647,-0.0647577,0.445257}
,
{-0.0699806,-0.0517147,0.0534467,-0.145721,-0.108159,-0.110985}
,
{-0.118537,0.117559,0.187873,0.0112517,0.0119569,-0.0817173}
,
{-0.0436977,-0.20277,-0.0347034,-0.0390868,-0.319263,-0.0927822}
,
{0.0989777,0.014489,-0.147757,-0.0421088,-0.0542005,-0.0948494}
,
{0.251267,-0.158749,-0.212468,0.0462515,-0.214785,-0.133814}
,
{-0.0315049,-0.122428,0.0921172,0.127749,-0.141943,-0.0926704}
,
{-0.157934,0.146519,-0.0987424,-0.177026,0.0280295,0.0802132}
,
{0.151779,0.0970891,-0.348857,0.167825,-0.197154,0.438536}
,
{-0.0493931,0.112846,-0.345801,-0.173808,-0.268552,0.259407}
,
{-0.0428822,0.0113835,-0.48181,-0.207823,-0.0983475,-0.0817253}
,
{0.05398,0.125443,-0.190506,0.0539468,-0.249663,0.214707}
,
{0.0213832,0.03259,-0.14566,-0.0868202,-0.262497,0.140719}
,
{-0.15705,-0.227022,-0.0547117,0.0382656,-0.0994063,0.0072363}
,
{0.0919705,0.185114,0.144675,0.0457003,0.212915,-0.00893143}
,
{-0.244681,-0.145317,0.20082,0.0940229,-0.0439621,-0.0200298}
,
{0.100476,0.00874225,0.0171117,-0.0870035,0.0796452,0.164566}
,
{-0.203975,0.409466,0.0105771,-0.0171904,-0.10692,-0.189947}
,
{0.220133,0.133177,0.154801,-0.0985335,0.217763,0.0364511}
,
{0.325095,0.00127832,0.0245102,0.229981,0.0460849,-0.0030028}
,
{-0.151042,0.0557125,-0.0426744,0.0602039,-0.0139281,-0.204472}
,
{0.104316,0.0511783,-0.210949,-0.0100376,-0.0448382,0.046837}
,
{-0.0603141,0.00526546,-0.0285627,-0.0780129,-0.108561,0.0539257}
,
{0.11975,0.120888,0.196126,-0.153473,0.0279165,-0.126895}
,
{-0.111423,0.0915577,0.140506,0.0748621,-0.182996,-0.0273258}
,
{0.0765781,0.136055,-0.0984165,0.0271951,-0.0481305,0.107612}
,
{-0.157433,-0.0655648,0.196889,-0.0334719,0.140256,0.0340929}
,
{0.0179738,0.0949846,-0.00890575,0.0956557,-0.171903,-0.0136871}
,
{0.0604273,0.258144,-0.330511,0.0412721,-0.0545974,0.0284739}
,
{0.0883798,0.128392,0.0767093,-0.0357325,0.13221,0.0443401}
,
{0.124749,0.0482516,0.0349669,0.147102,-0.0348263,-0.0588822}
,
{0.15296,0.0578485,0.0526771,0.0491446,-0.0809477,-0.0218297}
,
{0.0372338,0.0281203,0.0551279,-0.023563,0.0537914,0.00836934}
,
{-0.0478858,0.177515,-0.058306,-0.0949216,-0.160093,0.135051}
,
{-0.10517,-0.109033,-0.0312999,0.0771564,0.0916399,-0.0307609}
,
{-0.103038,-0.0517543,0.0637561,0.558987,0.214402,-0.148683}
,
{0.092793,0.0554705,0.137221,0.0322169,-0.0725351,-0.0293268}
,
{0.105559,0.0876389,0.154027,0.0731661,-0.143715,-0.0263559}
,
{0.0272716,0.0792479,-0.00208273,0.0420139,0.0155293,0.100045}
,
{0.035438,-0.0295857,-0.104455,0.0364867,0.0247704,-0.0376153}
,
{-0.0847011,-0.0731308,0.0980182,0.233036,-0.256112,-0.0438462}
,
{-0.0405107,0.000907996,0.107278,0.0742182,-0.0527714,0.0153095}
,
{-0.0509332,-0.050659,0.0170617,-0.0018173,-0.0547634,-0.0190117}
,
{0.0355342,0.0203535,0.0539387,-0.111406,-0.0684732,0.00353382}
,
{-0.0258772,-0.0494693,-0.0109933,-0.0553181,-0.0946066,0.0168761}
,
{0.0782529,0.107074,-0.169846,-0.124084,-0.0498814,0.0499187}
,
{-0.213386,0.207392,-0.208467,-0.0623333,-0.181758,-0.0133326}
,
{-0.559347,0.451773,-0.218245,-0.146865,-0.155051,-0.410536}
,
{-0.37047,0.340046,0.381168,-0.592528,0.133872,-0.3821}
,
{1.03058,-0.250836,-0.165553,-0.135608,0.285517,0.492118}
,
{-0.0862095,-0.0908629,0.103793,0.315228,0.0704318,0.142253}
,
{-0.145443,0.14436,-0.101917,0.270918,0.0156653,-0.474148}
,
{-0.0954527,0.0857571,-0.114306,-0.215395,-0.338088,-0.207144}
,
{-0.255596,0.134874,0.0693815,-0.101117,0.0986623,0.161014}
,
{-0.609011,0.493353,0.0227957,0.107529,0.0518866,-0.766673}
,
{0.288862,-0.119393,0.0718844,0.0389326,-0.025036,0.293451}
,
{0.257136,-0.205212,0.24824,0.229364,-0.214926,0.236751}
,
{-0.162998,-0.148828,-0.137296,-0.0124526,-0.113434,-0.1105}
,
{0.661511,-0.672574,0.59611,0.490733,-0.0564884,0.622086}
,
{-0.393544,-0.00362946,-0.0417599,-0.0609154,0.239768,-0.193124}
,
{-0.124533,-0.190845,-0.0228533,0.244845,-0.0982756,0.340562}
,
{0.177682,0.0343617,-0.103121,-0.00575374,-0.178891,0.113247}
,
{-0.101041,-0.157036,0.0722631,-0.318281,-0.160663,-0.220247}
,
{0.818091,-0.429949,-0.412317,0.372879,-0.16728,0.744147}
,
{0.773374,-0.563388,0.24781,0.139857,-0.178225,0.877811}
,
{-0.0388317,0.0801846,0.35517,0.0735871,-0.0446655,0.15042}
,
{-0.186227,0.513884,-0.239761,-0.26027,0.0975579,-0.121515}
,
{-0.219811,0.265641,-0.17557,-0.19615,-0.197073,-0.304871}
,
{0.0959701,-0.162791,0.0880674,0.0441437,-0.0200664,0.240397}
,
{-0.114302,0.105945,-0.127413,-0.126176,0.0559858,-0.169128}
,
{0.842431,-0.174524,0.116698,0.0568016,0.217398,0.374872}
 };
  static const float bias2[1] = { 0.114904 };
  static const float weights2[][1] = { {0.0674847}
,
{-0.0720508}
,
{-0.639023}
,
{0.0312672}
,
{-0.403745}
,
{0.0309644}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_1_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_1_1(v, index);
}
static int assign_gen_lepton_prior_3_1_1() {
  global_gen_lepton_prior.at(3,1,1) = &specialized_gen_lepton_prior_3_1_1;
  return 0;
}
static int initialize_gen_lepton_prior_3_1_1 = assign_gen_lepton_prior_3_1_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_1_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.366921,-0.454809,-0.185431,-0.094224,0.0163949,-0.097661 };
  static const float weights1[][6] = { {-0.149895,0.138576,0.264459,0.297326,0.269573,0.206243}
,
{0.00467803,-0.598896,-0.20189,-0.404986,0.269033,-0.390954}
,
{-0.307096,-0.854516,-0.611034,0.129606,-0.129415,0.0342264}
,
{-1.19292,-0.56404,-0.0737058,-0.0616162,0.975319,0.45715}
,
{-0.295131,-0.701418,-0.282205,-0.154937,0.0263195,-0.18651}
,
{-0.297301,-0.345555,-0.0769385,-0.241101,0.212109,0.0354647}
,
{-0.35486,-0.29652,-0.0426861,-0.156916,0.0926937,-0.100206}
,
{-0.0956335,-0.0419746,-0.0838413,-0.0517165,-0.0361303,0.0398478}
,
{-0.0391534,-0.18457,0.0767594,-0.252114,0.402715,0.114371}
,
{0.02687,-0.0687185,0.152319,-0.107699,-0.0288647,-0.0439522}
,
{0.0527336,-0.0179927,0.130634,0.0265452,0.0551071,0.127117}
,
{0.0538246,0.0852353,0.109131,-0.0371555,-0.0222564,-0.068826}
,
{-0.414001,-0.177853,-0.305516,-0.104527,0.235838,0.056092}
,
{-0.287886,-0.429606,-0.205519,-0.159171,0.0929166,-0.312669}
,
{0.0591274,0.0564813,-0.0514533,0.042869,0.0685957,0.0674467}
,
{0.146191,-0.0346986,0.133997,-0.167167,-0.0463781,-0.000360245}
,
{-0.395474,-0.2353,0.310218,-0.0976965,0.251643,0.370256}
,
{0.558129,0.117705,0.113104,0.0560932,0.248242,0.132443}
,
{-0.179761,0.0414523,0.0484991,-0.124695,-0.198953,-0.0410035}
,
{0.137607,0.21219,-0.0311058,-0.279837,0.0816934,0.226355}
,
{-0.115923,0.0416419,0.0862947,-0.222845,0.108552,-0.067671}
,
{0.0662057,-0.0913347,0.0116892,-0.304168,-0.0691196,-0.0490051}
,
{-0.010688,0.00774638,-0.226978,-0.136583,-0.0762278,0.170975}
,
{-0.0219026,-0.00236848,0.0447832,-0.0980606,-0.00599343,0.0229663}
,
{-0.0886588,-0.0772249,0.139265,0.024896,-0.271191,0.196876}
,
{0.255739,0.0876522,-0.0544851,0.203132,0.0107828,0.11414}
,
{0.104839,-0.0402191,-0.0650204,0.222388,0.0531764,0.130658}
,
{0.0572092,0.224181,-0.195606,0.163235,0.0672257,0.0734925}
,
{-0.438516,0.112832,0.666957,0.486992,0.823561,0.677045}
,
{0.0587832,-0.059035,-0.0560423,0.0679409,0.12463,0.182248}
,
{-0.187918,-0.224547,0.046376,0.17306,0.0901061,-0.0610777}
,
{0.0460168,-0.0518296,-0.0404475,-0.0633029,0.19311,-0.0764153}
,
{0.05626,0.0124809,0.0172419,-0.0300482,-0.0926588,0.0461075}
,
{0.119364,0.105893,-0.0679007,0.107755,-0.0805471,-0.104836}
,
{0.0629275,-0.0743494,-0.0470461,-0.125312,0.0161114,0.00919822}
,
{0.0686499,0.0651141,0.0898975,-0.0444044,-0.0541995,0.0014991}
,
{0.52065,0.00332858,0.240514,0.227647,-0.00287669,-0.0575871}
,
{-0.0135925,-0.104337,-0.0581051,-0.0514448,-0.0114346,0.00636146}
,
{0.106036,-0.109115,0.0670264,0.246632,-0.167678,0.051217}
,
{-0.176408,0.0243564,0.0201911,-0.0115006,0.0374988,-0.0930762}
,
{-0.00909944,0.0794332,0.031925,0.0490012,-0.0324642,0.0545565}
,
{-0.0239826,0.00827267,0.0702377,-0.238898,-0.0197253,-0.17191}
,
{0.0211245,0.031732,-0.0583779,-0.141355,0.0659283,0.0547391}
,
{0.196421,-0.124626,0.0558325,0.238417,0.137666,-0.188863}
,
{-0.204836,0.146063,-0.0509967,0.0141038,-0.0972983,0.161874}
,
{0.0702085,-0.0278831,-0.00755679,-0.0561761,0.0396828,-0.0110007}
,
{0.133505,0.167832,0.196442,0.295323,0.0327743,-0.23754}
,
{0.0409634,-0.0473017,-0.022011,0.0791377,-0.0232451,0.0608898}
,
{0.0669307,-0.260135,0.0902823,0.0140922,0.0471896,-0.254744}
,
{-0.104517,0.0372461,-0.00487526,0.025546,-0.148374,0.0774853}
,
{-0.0523232,-0.0863756,-0.0329025,-0.0777968,0.00460791,-0.047108}
,
{-0.179288,0.0899709,-0.231634,-0.0320431,-0.197313,0.234256}
,
{0.0516904,-0.0360679,0.0147345,-0.0715443,0.0266386,-0.0363493}
,
{0.168617,-0.137266,0.00631004,0.131471,0.15387,-0.0820243}
,
{-0.0313467,0.153721,-0.02383,0.218493,-0.08145,0.0695648}
,
{-0.0742579,0.07824,0.0529932,-0.0861949,-0.138972,-0.137907}
,
{-0.121519,-0.386883,-0.0820679,0.0456659,-0.179206,-0.221175}
,
{-0.104187,-0.280586,0.0458195,-0.114345,0.346707,0.163285}
,
{0.60233,0.221224,-0.461709,0.215063,-0.532672,-0.747911}
,
{-0.0327016,-0.510074,0.0504552,-0.0876042,0.0306588,-0.145168}
,
{-0.248452,-0.13162,-0.103737,0.308676,0.362706,0.184042}
,
{-0.237016,-0.0551424,-0.290168,0.162158,-0.399685,-0.173713}
,
{-0.0254026,0.380929,0.164479,0.0777299,0.149484,0.122838}
,
{-0.657227,-0.0603539,0.382007,-0.158729,0.302653,0.289646}
,
{0.181745,-0.341456,-0.165247,0.122272,0.0167871,0.0919078}
,
{0.0365705,0.0159972,0.0647993,0.0321576,0.0411274,0.151827}
,
{-0.332819,-0.122767,0.184989,0.0876886,0.766035,0.492465}
,
{-0.151112,0.226742,0.197995,0.0037199,-0.313195,-0.0415162}
,
{0.135816,0.0555919,-0.116071,0.0485757,0.328815,0.254241}
,
{0.432365,0.361638,-0.30286,-0.0255564,-0.241072,-0.155562}
,
{-0.218299,-0.0039766,-0.0635346,0.0406872,0.0593689,-0.183875}
,
{0.206445,-0.0136903,0.0516201,-0.274503,-0.0702639,-0.129781}
,
{0.275051,-0.449495,0.124628,0.121058,0.131977,0.247569}
,
{-0.0463321,0.0558552,0.288293,0.228432,-0.559775,0.103614}
,
{0.0501555,0.0698334,-0.979781,-0.372439,-1.00259,-0.996832}
,
{0.854503,0.158176,-0.474077,-0.155273,0.133277,-0.349273}
,
{-0.403163,-0.399119,0.249221,0.386578,-0.0909815,-0.116662}
,
{0.980279,0.186942,-0.398984,0.343176,-0.472333,-0.467104}
,
{-0.113969,0.325763,-0.198805,-0.08894,-0.197285,-0.227382}
 };
  static const float bias2[1] = { 0.112149 };
  static const float weights2[][1] = { {-0.0577756}
,
{-0.0293779}
,
{0.0376335}
,
{-0.346388}
,
{0.0237947}
,
{0.0298231}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_1_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_1_2(v, index);
}
static int assign_gen_lepton_prior_3_1_2() {
  global_gen_lepton_prior.at(3,1,2) = &specialized_gen_lepton_prior_3_1_2;
  return 0;
}
static int initialize_gen_lepton_prior_3_1_2 = assign_gen_lepton_prior_3_1_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.214356,-0.49066,-0.295658,-0.196755,-0.155037,-0.500022 };
  static const float weights1[][6] = { {-0.463685,0.235649,0.184251,-0.032317,-0.305261,-0.221282}
,
{-0.599938,0.142195,0.711614,-0.389362,-0.660013,-0.47728}
,
{0.221451,-1.03067,0.361987,0.155049,-0.115662,-0.0206274}
,
{0.120055,0.645487,-1.13627,0.691854,0.692328,-2.10222}
,
{-0.0144075,-0.356268,-0.128229,-0.137448,0.129985,-0.596758}
,
{-0.105841,-0.509647,-0.105313,-0.435652,-0.381957,-0.246803}
,
{-0.123495,-0.597903,-0.342413,-0.221353,-0.42043,0.0150964}
,
{0.152385,-0.0665792,0.0589906,-0.048937,-0.151391,0.00655683}
,
{0.156514,-0.0935644,-0.272724,0.424667,0.147004,-0.458648}
,
{-0.00733333,-0.119533,-0.213355,-0.0952191,-0.0783017,-0.155079}
,
{0.0514372,-0.0887683,-0.170987,0.203783,-0.0709786,-0.110813}
,
{-0.0538546,-0.184611,0.102389,0.0783727,-0.095875,0.136203}
,
{-0.00529055,-0.471578,-0.413249,-0.142108,-0.302512,-0.445267}
,
{-0.117123,-0.480174,-0.414275,-0.235804,-0.250363,-0.691205}
,
{0.187848,-0.0342482,-0.0576796,-0.00250885,0.00705032,0.0597736}
,
{0.0391507,0.0949146,0.189538,-0.0321978,-0.101001,-0.0982204}
,
{0.0644391,-0.273368,-0.126777,-0.0156693,0.034519,-0.445645}
,
{0.513053,0.0291385,-0.110367,0.580793,0.254828,0.0425369}
,
{-0.198593,-0.0411787,-0.362147,-0.0592979,0.332016,0.110402}
,
{0.153767,0.0277389,0.0282032,0.171767,0.0453911,0.0740285}
,
{0.0673097,-0.0166713,0.128771,0.207986,-0.121476,0.0465489}
,
{-0.0566729,-0.0135468,-0.00964758,0.0788655,-0.00233004,-0.0704179}
,
{-0.147391,0.100829,0.114773,0.0442365,0.0737834,-0.0330039}
,
{-0.110067,-0.320744,0.0763942,0.030465,-0.0481802,-0.105355}
,
{-0.155283,0.202234,0.090171,-0.0602357,-0.320972,0.015114}
,
{-0.259407,0.0518986,0.299852,0.0863536,-0.115587,-0.227369}
,
{-0.566041,-0.0432422,0.267251,-0.163682,-0.0196003,-0.0807874}
,
{-0.342888,0.382807,0.105716,0.0258662,-0.319055,-0.0290017}
,
{-0.431783,0.382374,0.647358,-0.145999,-0.385408,-0.065305}
,
{-0.0775174,-0.020656,0.120259,0.153128,0.154288,0.0765575}
,
{-0.0831747,-0.0272573,0.0105296,-0.0297279,0.163768,-0.0890514}
,
{-0.119719,-0.2043,0.0141882,-0.00990182,-0.0264592,0.0229843}
,
{-0.039221,-0.156446,0.101213,0.00417372,0.214401,-0.037805}
,
{-0.0801084,0.0256654,0.189903,0.0354974,0.118681,0.00472355}
,
{0.0014678,0.0666085,0.0770506,0.012674,0.0700714,0.0545866}
,
{0.0656222,0.0391885,-0.0384778,-0.0328527,-0.0193849,-0.0609735}
,
{0.0580976,0.0842309,0.0573068,-0.0407997,0.172539,0.153303}
,
{-0.0427805,0.0577713,0.0821367,0.0203952,-0.0207801,-0.0177436}
,
{0.186395,0.200925,0.110761,-0.0654442,0.0625822,-0.0220885}
,
{0.0169668,0.0112393,-0.02001,-0.0443986,0.0159091,-0.0753712}
,
{0.0503013,-0.0282279,-0.0192899,-0.000818765,-0.0684337,-0.0330268}
,
{0.0416149,0.102953,-0.194364,-0.0397181,0.0316341,-0.00997429}
,
{0.00149513,-0.0145181,0.041389,0.0184076,-0.0231193,0.0107997}
,
{0.045514,-0.129326,-0.159946,-0.0523113,0.0508382,0.0702857}
,
{-0.0978208,-3.64726e-05,-0.0650438,0.0385397,0.0908356,0.116043}
,
{0.024131,-0.0225365,0.0618267,0.00811616,-0.0417903,-0.0302648}
,
{0.05322,0.177142,0.190795,0.0169049,-0.0640375,-0.142572}
,
{0.0081249,-0.0921198,-0.0295025,-0.0108374,-0.0371425,-0.0453257}
,
{0.111565,0.0105909,-0.210274,-0.0748554,0.0863107,-0.0208119}
,
{-0.0331825,-0.0658247,0.0300567,0.00299968,0.0225256,-0.0012994}
,
{-0.0217614,-0.0213047,0.103947,0.0160844,-0.0509304,-0.0172002}
,
{-0.136007,-0.0716538,0.0830354,-0.0193076,-0.134555,-0.317376}
,
{0.0510597,0.0788405,-0.0865465,-0.0506758,0.0513008,-0.0186988}
,
{-0.143528,-0.119028,-0.0549996,0.0324283,0.044112,0.091307}
,
{-0.2609,0.151686,-0.144454,0.185641,-0.274126,-0.148036}
,
{-0.0844942,0.309914,-0.038438,0.029354,0.0478619,0.347727}
,
{0.0810141,-0.145017,-0.218482,0.145988,0.198417,-0.245373}
,
{0.117578,0.125409,-0.0628769,0.256277,-0.221668,-0.214171}
,
{-0.0584881,0.686454,0.182053,-0.33522,-0.219733,0.221125}
,
{0.332168,-0.172339,0.405217,-0.106495,-0.0948894,0.815887}
,
{-0.0521929,0.0238418,-0.191945,-0.10272,0.138967,0.0508706}
,
{-0.0161574,-0.0228094,0.12408,0.519972,-0.416122,0.684449}
,
{0.495686,-0.130404,-0.619958,0.860108,0.509768,-0.285517}
,
{0.716663,0.246748,-0.131063,0.374214,-0.0386452,0.455493}
,
{0.066033,-0.0401534,-0.0375178,0.0815259,0.256561,-0.330759}
,
{0.0879711,-0.12038,-0.098619,-0.0578527,0.0645891,-0.112028}
,
{0.234087,0.0192223,-0.137831,0.125177,-0.00281408,-0.11407}
,
{-0.142473,-0.447213,0.0805505,0.0756637,0.210823,-0.327383}
,
{-0.193869,0.474705,0.0218551,-0.359576,-0.164095,0.256038}
,
{0.0322256,0.275585,-0.294716,0.0971242,0.0842975,0.287409}
,
{0.0519166,0.20845,0.0344861,-0.188794,0.140493,-0.155958}
,
{0.439027,-0.448186,0.359805,-0.271192,0.258532,1.04308}
,
{-1.07215,0.186353,0.533943,-1.03338,-0.639152,-0.314519}
,
{0.554003,-0.258678,-0.506906,0.21639,0.244817,-0.376969}
,
{0.67405,0.434706,-0.092563,0.304907,-0.46288,0.26764}
,
{-0.49612,0.151842,0.460541,-0.265444,0.15058,0.0437557}
,
{-0.33031,0.196006,0.139616,-0.357301,-0.551135,-0.285466}
,
{0.111405,-0.0483514,-0.0752155,0.0920526,-0.156859,-0.0934819}
,
{-0.23458,0.468592,0.12476,-0.215283,-0.103328,0.557415}
 };
  static const float bias2[1] = { 0.00231837 };
  static const float weights2[][1] = { {0.0203588}
,
{-0.025555}
,
{-0.0143477}
,
{0.0369557}
,
{0.0175548}
,
{-0.0261813}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_2_0(v, index);
}
static int assign_gen_lepton_prior_3_2_0() {
  global_gen_lepton_prior.at(3,2,0) = &specialized_gen_lepton_prior_3_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_3_2_0 = assign_gen_lepton_prior_3_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_3_2_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.273772,-0.279746,0.0829061,0.120687,0.363385,-0.222373 };
  static const float weights1[][6] = { {-0.029383,-0.0764139,-0.236657,-0.214698,-0.153427,0.121548}
,
{-1.14681,-1.09807,-0.127047,-0.0416291,0.200429,-1.83044}
,
{0.592654,1.30349,0.191385,-1.09742,-0.405815,-0.174518}
,
{-0.912047,-0.348799,0.664745,0.315748,0.650693,-1.49159}
,
{0.200487,-0.325122,0.231725,0.0130205,0.368468,-0.146983}
,
{0.390109,-0.205744,0.0163744,0.189069,0.129752,-0.245703}
,
{0.460996,-0.176535,-0.0171426,0.28753,0.274073,0.0550627}
,
{0.00709533,0.0377031,-0.101217,0.0687871,0.00295368,-0.0626209}
,
{0.513998,0.137288,0.36515,0.430501,-0.0229219,-0.0371028}
,
{0.0557812,-0.223581,-0.0926812,-0.218753,0.134332,0.172036}
,
{-0.0829377,-0.0837157,-0.0151447,-0.13938,0.205318,-0.148951}
,
{-0.115532,-0.184098,0.0538998,0.0056679,-0.100383,-0.0547425}
,
{-0.208082,-0.00654297,-0.601194,-0.306487,0.490091,0.0213685}
,
{0.220233,-0.375652,0.0860789,0.189362,0.526372,-0.316576}
,
{-0.24368,0.0304185,-0.161536,-0.0144597,0.0477272,-0.0581314}
,
{0.00917549,0.00565901,-0.0612275,0.00763911,0.037935,-0.157004}
,
{0.387812,-0.183811,0.262311,0.192867,0.00573318,-0.257223}
,
{-0.482841,0.161924,0.197933,0.588109,0.35798,0.106683}
,
{-0.134642,-0.13689,0.0513432,-0.0502004,0.038069,0.0322295}
,
{-0.163247,-0.221976,0.113557,-0.0539061,-0.177472,0.0212071}
,
{-0.199698,0.0693781,0.0656005,0.146894,-0.100589,0.216271}
,
{0.0378398,-0.0274719,0.171885,-0.324087,0.0196784,0.0964211}
,
{-0.048986,-0.060808,-0.126834,-0.0550426,0.132489,-0.0729162}
,
{0.0844315,-0.0880602,-0.091779,0.0240258,-0.00572067,-0.285266}
,
{-0.0608641,0.185679,-0.13184,0.0183026,0.00476852,0.313959}
,
{-0.186649,0.184681,-0.0992683,-0.089082,-0.00986544,0.384125}
,
{-0.178274,0.155198,-0.0130254,-0.0137212,-0.0160044,0.112663}
,
{0.0123608,0.119181,0.012848,0.014454,-0.038845,0.194243}
,
{-0.119582,0.189981,-0.218487,-0.141151,0.236558,0.163275}
,
{0.0158155,0.0361266,0.133663,0.137707,0.115264,-0.0527236}
,
{0.0210219,0.200313,-0.026809,0.173413,0.137098,0.113518}
,
{-0.0275278,-0.11925,0.0840185,-0.0203331,0.0753343,-0.0703912}
,
{0.138662,0.0953386,0.0450072,-0.0587016,0.0700495,0.016882}
,
{-0.0517671,0.0431178,0.212704,-0.0873697,0.00299779,-0.227973}
,
{-0.0404503,0.104758,0.056176,-0.0307125,-0.066481,0.0653991}
,
{-0.131852,-0.110855,0.0232101,-0.0121454,-0.0741891,0.0284071}
,
{0.438986,0.179257,-0.0920912,0.076871,0.155437,0.155414}
,
{0.127821,0.086324,-0.0395712,0.00284266,0.0767989,0.0312693}
,
{-0.131831,-0.0282177,-0.175166,0.217743,-0.0226521,0.189861}
,
{-0.00333262,0.107866,-0.0270603,0.145427,-0.019855,0.197445}
,
{0.0472975,-0.0210078,0.0447581,-0.0501849,0.0279549,0.0533}
,
{-0.188118,-0.0069335,0.0803347,-0.0385339,0.0698097,0.0836231}
,
{-0.117298,-0.0489467,-0.0258401,0.0307964,-0.13812,0.0404513}
,
{0.0414087,0.168986,-0.225075,0.195385,-0.110117,-0.0571911}
,
{0.158311,-0.132399,-0.0461258,0.0382881,0.0568251,0.0989314}
,
{-0.0732657,-0.0304088,-0.0163545,0.00535801,-0.0295147,-0.0716947}
,
{-0.129677,-0.562277,-0.12896,0.29158,0.13875,0.16421}
,
{-0.0822783,-0.0417761,0.0266506,0.0424661,-0.0192833,0.0720294}
,
{-0.334487,0.354683,-0.119299,0.16562,-0.364598,-0.0195404}
,
{0.01608,-0.0624284,-0.0320414,0.121864,0.0302009,0.0593372}
,
{0.0128628,0.0331183,0.00363,0.0347233,0.0111643,0.0150872}
,
{-0.086006,-0.155546,-0.222186,0.530136,0.20674,0.21561}
,
{-0.065504,0.0248963,-0.00921198,0.00672583,-0.0635119,0.00609245}
,
{0.121431,0.279816,0.167693,-0.0354387,0.0940603,0.185645}
,
{-0.0419506,-0.0446696,0.187064,-0.164593,0.0285327,-0.0807339}
,
{-0.0395217,0.0695919,-0.0868166,0.179256,-0.0665155,0.282592}
,
{0.224463,0.0808811,-0.0557911,-0.00669667,-0.047219,0.0268867}
,
{0.169279,-0.170324,-0.0837285,0.0906992,0.226329,0.0789628}
,
{-0.0846684,-0.0897863,0.120825,0.160683,-0.10673,0.0994919}
,
{-0.0891966,-0.20909,0.0916993,0.0621687,-0.247141,-0.0959371}
,
{-0.0439272,0.0281148,0.0989808,-0.10459,-0.0498466,0.136258}
,
{0.0994736,0.128816,0.0636558,0.0382428,0.100515,0.0621601}
,
{-0.109881,-0.00989216,-0.00932998,0.174229,-0.0795796,-0.00592962}
,
{0.00809854,-0.0703148,-0.0945267,-0.0483389,-0.0128735,-0.0244057}
,
{0.008104,0.0329789,-0.0812834,-0.0542205,-0.147433,0.281834}
,
{0.123472,0.0833567,-0.0545225,-0.0735383,-0.0469044,-0.19176}
,
{-0.0157327,-0.190425,0.106262,-0.0139884,-0.121907,0.221116}
,
{-0.066037,0.0829409,0.0231345,0.104731,0.126078,-0.180509}
,
{0.020995,0.0502588,-0.104474,-0.0179851,0.158988,-0.0921429}
,
{0.150505,-0.138408,0.0440021,-0.0247459,0.11795,0.16785}
,
{-0.0791953,-0.0732508,0.0225986,-0.0919621,-0.107175,0.0341494}
,
{-0.0857166,-0.0816316,-0.126484,-0.0140675,0.0663371,0.170507}
,
{0.0423856,-0.0381963,0.202332,-0.0898162,0.00215032,-0.157511}
,
{0.162918,0.0903468,-0.0996567,-0.0524083,-0.0526411,-0.0677583}
,
{-0.149006,0.00153748,-0.0381217,0.117941,0.0114522,-0.302141}
,
{0.161929,0.0305503,0.136613,-0.0161241,0.0676244,-0.00662897}
,
{0.120388,0.185413,-0.0595198,0.162461,0.0179194,0.171721}
,
{-0.00340857,-0.170929,-0.0645141,-0.0608064,0.130166,-0.0429173}
,
{-0.0673333,-0.0273409,-0.0313412,0.0598145,-0.108166,0.0290698}
 };
  static const float bias2[1] = { 0.0130926 };
  static const float weights2[][1] = { {0.0564182}
,
{-0.0469454}
,
{0.0348103}
,
{0.0518159}
,
{-0.0614127}
,
{-0.0726712}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_3_2_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_3_2_2(v, index);
}
static int assign_gen_lepton_prior_3_2_2() {
  global_gen_lepton_prior.at(3,2,2) = &specialized_gen_lepton_prior_3_2_2;
  return 0;
}
static int initialize_gen_lepton_prior_3_2_2 = assign_gen_lepton_prior_3_2_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_4_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.502957,0.149175,0.172907,-0.0448159,0.700662,-0.0683346 };
  static const float weights1[][6] = { {0.32378,-0.0213962,-0.141132,0.169526,-0.10173,0.867914}
,
{0.191085,0.197464,-0.361645,-0.0440032,0.116676,0.176727}
,
{0.675373,0.137751,0.0586082,-0.474773,0.0141541,0.278711}
,
{0.145513,-0.0183217,0.354789,-0.501703,0.762461,-0.703541}
,
{0.577606,0.0302396,0.200791,-0.107983,0.554149,-0.0248507}
,
{0.698564,0.360034,0.117853,0.183726,0.586144,-0.036033}
,
{0.467708,0.10494,0.137199,0.20433,0.615649,-0.0942205}
,
{0.0343544,-0.173286,0.224964,0.158288,-0.0287469,0.084313}
,
{-0.14514,-0.267613,-0.0278435,-0.177134,0.127255,0.0289833}
,
{0.0485007,0.134327,0.179263,-0.144734,0.128081,0.243443}
,
{-0.177203,0.0464977,-0.00961984,0.134148,0.141296,-0.0709398}
,
{0.141462,0.195968,-0.039362,0.081549,-0.00318303,-0.173463}
,
{-0.0098289,0.149976,0.196096,-0.155939,0.329622,-0.231426}
,
{-0.0918606,0.0943545,-0.0494305,0.00223494,0.129277,0.201672}
,
{-0.0743875,-0.170267,-0.123447,-0.148225,0.070983,0.0355866}
,
{-0.0132978,0.130039,-0.167174,-0.0586732,0.0592981,-0.00462457}
,
{0.357804,0.480041,0.186449,0.417145,0.585001,-0.0122937}
,
{-0.0507721,0.0924976,0.0957393,0.310203,0.0343552,0.347574}
,
{0.970704,-1.49481,-1.50825,1.42323,-2.57633,1.91058}
,
{-0.202624,-0.0956854,-0.000384688,-0.181913,0.0628682,-0.00833373}
,
{-0.306652,0.0137448,0.0956599,-0.0461148,-0.00849719,-0.00368188}
,
{0.0763005,0.0137609,0.186414,0.0492645,0.00569515,0.0301838}
,
{0.150323,0.00969696,0.0108079,0.108532,0.165204,-0.0396798}
,
{-0.184288,0.0748374,-0.0118301,-0.218047,-0.0111963,0.0212582}
,
{0.036246,-0.0900401,0.245103,0.152335,0.00672158,-0.0121395}
,
{-0.0999812,0.180444,-0.0545997,0.0583031,-0.0118978,0.133815}
,
{-0.00115221,0.0686236,-0.0673827,-0.0796184,0.012805,0.0797274}
,
{0.0561832,0.191114,0.0186586,-0.170242,0.00509381,0.0324008}
,
{-0.476386,0.192662,0.147186,-0.705455,-0.011702,-0.193784}
,
{-0.0615721,-0.144688,0.0018305,-0.0484457,0.00953314,0.00347818}
,
{0.000502033,-0.0448469,0.0347748,-0.0361892,-0.0669675,-0.0523818}
,
{-0.0189481,0.122857,-0.0472383,0.0232676,0.00446249,0.0163846}
,
{-0.0680856,-0.154055,-0.071655,0.213815,-0.0800108,-0.00216547}
,
{0.0630537,-0.0341955,-0.0290683,-0.0374232,-0.000798955,-0.0178169}
,
{0.023744,0.00528888,0.149434,-0.03468,0.0065615,0.131627}
,
{-0.00848712,1.5816e-05,-0.0176179,0.0559832,0.000457762,-0.00510409}
,
{-0.021101,-0.0047318,0.133401,-0.0778658,-0.00523997,0.0651759}
,
{0.00076244,0.0271026,-0.0511474,-0.00616442,0.00253426,0.0264382}
,
{-0.0717982,-0.029151,-0.0303339,0.193222,0.0101739,-0.0184315}
,
{0.00162216,-0.0101588,-0.115244,0.0476346,0.00354398,-0.0399662}
,
{0.0236302,0.0196729,0.041594,0.0547997,0.0103835,0.050532}
,
{-0.0061611,-0.00659453,0.174046,0.1565,0.0214464,0.112862}
,
{0.0396372,0.0556611,0.256028,-0.0294635,-0.00815803,0.0965782}
,
{-0.125634,-0.0812243,0.105288,-0.0655006,-0.0158096,-0.0354764}
,
{-0.00455843,0.0212973,-0.0321386,0.0613466,0.00781995,-0.00457865}
,
{-0.0408843,-0.0520432,-0.0562514,-0.028589,0.00212468,-0.042247}
,
{0.0339557,-0.196444,0.0154994,-0.0896561,-0.00556183,-0.123868}
,
{-0.00428102,0.0187495,0.0641911,0.0390089,-0.00285175,-0.000323849}
,
{0.0118933,0.00450369,0.0178993,0.047127,-0.0160975,-0.0384593}
,
{0.0451025,0.0868688,0.00553257,0.123386,-0.00498747,0.0131827}
,
{-0.0117589,0.0474948,-0.00242632,0.0106548,-0.00783165,-0.00716082}
,
{0.0663511,-0.0544157,0.0518661,0.0462148,-0.0258108,-0.109249}
,
{0.00173845,0.0259991,-0.00893675,-0.011619,0.00156024,0.0106858}
,
{0.0782623,-0.0721236,0.0773121,-0.0239075,0.00469635,-0.0202246}
,
{0.039989,-0.0998146,-0.00139633,0.0291666,0.0122884,-0.0555241}
,
{0.00831267,-0.056708,0.0214285,0.0336169,-0.0110226,-0.100731}
,
{0.0031065,0.100874,0.000944048,0.0676118,-0.0526034,-0.161863}
,
{-0.0772393,0.329692,0.314407,0.0710576,-0.0385346,0.147516}
,
{0.190402,-0.0103518,0.0521174,-0.10098,0.00949135,-0.0417088}
,
{0.00640974,-0.0668493,-0.0378168,0.10789,0.00739186,-0.0825452}
,
{-0.0347447,0.0778685,-0.03531,-0.0731675,0.00657724,0.113213}
,
{-0.0475298,-0.0514119,-0.146227,-0.114257,0.0294816,0.0946787}
,
{-0.0792458,0.366633,0.0687187,0.0840037,-0.0800918,0.277836}
,
{0.0330449,0.000787015,0.0794709,-0.00673297,-0.00911234,0.00650501}
,
{-0.0449616,-0.0410497,-0.0647744,0.0178938,0.0118683,0.0376433}
,
{-0.046493,-0.0469141,-0.00119304,-0.00641871,0.00129926,0.00557357}
,
{-0.143248,-0.00984226,-0.0908348,0.00333158,0.0233418,0.123794}
,
{0.0457141,0.0811907,-0.298452,-0.233807,0.0485079,0.251386}
,
{-0.0641776,-0.033982,0.00241422,-0.151886,-0.0126775,-0.0297292}
,
{-0.0630974,-0.00606569,0.0108536,-0.0284422,-0.0337749,-0.0836201}
,
{0.015767,0.0650699,-0.00988202,0.0919562,0.00157639,0.0116734}
,
{0.0975678,0.0735253,-0.0286369,0.161896,0.00767317,-0.0828612}
,
{-0.0557887,0.118171,-0.582818,-0.0532632,0.163457,0.183043}
,
{-0.0538752,0.0410555,-0.023898,-0.228022,-0.0246157,-0.0312541}
,
{0.102042,-0.175447,0.102139,0.0408865,0.044899,-0.255208}
,
{0.498041,0.0213968,-0.0745894,0.16588,0.0290077,-0.114951}
,
{0.152405,0.0622037,0.0140839,0.208915,0.0276518,0.0411853}
,
{0.17365,-0.380842,-0.136361,0.231099,-0.0783307,0.783568}
,
{0.0426654,-0.163195,0.397557,-0.383058,0.0214172,-0.0679282}
 };
  static const float bias2[1] = { 0.272272 };
  static const float weights2[][1] = { {-0.0248627}
,
{0.023798}
,
{0.0187372}
,
{-0.011735}
,
{0.147249}
,
{-0.0324716}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_0_0(v, index);
}
static int assign_gen_lepton_prior_4_0_0() {
  global_gen_lepton_prior.at(4,0,0) = &specialized_gen_lepton_prior_4_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_0_0 = assign_gen_lepton_prior_4_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_4_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.211182,0.172925,-0.101013,-0.0782538,0.102474,-0.024834 };
  static const float weights1[][6] = { {-0.329801,-0.284623,0.00470603,-0.31187,-0.538523,0.378657}
,
{-0.0872838,-0.0470373,0.515069,-0.289213,0.221702,0.195892}
,
{-0.506473,-0.0397134,0.146724,-0.379528,0.127475,0.145385}
,
{1.2908,0.0925455,-0.0258846,0.103917,0.387656,-0.365454}
,
{-0.30421,0.201504,-0.0860369,-0.0380676,0.100715,-0.101081}
,
{-0.365027,0.0193352,-0.208883,-0.183529,0.0826762,0.316601}
,
{-0.388623,0.221485,-0.226242,-0.314666,0.0949564,-0.0229253}
,
{0.334675,0.047423,-0.474368,-0.116475,-0.0222888,-0.0733748}
,
{0.480095,0.148754,-0.561015,-0.495168,-0.0763228,0.0530908}
,
{-0.0181119,-0.031835,0.117629,-0.0333738,-0.101714,-0.175983}
,
{0.215194,0.0135229,-0.000101032,-0.0992561,0.0530592,0.0903101}
,
{0.0373781,0.0683472,-0.0866141,-0.0423628,0.021112,-0.0551176}
,
{-0.285526,0.124032,0.0449903,0.506422,0.25506,-0.0184589}
,
{-0.0929158,0.281077,-0.0791721,0.00655898,0.00352763,0.25686}
,
{-0.0705351,0.1121,0.200883,0.0102471,0.173988,-0.00232346}
,
{0.0400352,0.0222828,0.116089,0.0702383,-0.0122637,-0.0986232}
,
{-0.344099,0.338924,-0.0380059,-0.0248052,0.026627,-0.0388786}
,
{0.191083,0.096123,-0.192042,-0.0273053,0.100232,0.218881}
,
{1.22092,-2.97077,-0.793764,-0.841799,-2.56144,2.22383}
,
{-0.176753,-0.0609356,-0.079463,-0.00748672,0.113823,-0.00541084}
,
{-0.263432,0.00981949,0.0205693,-0.227496,0.123871,0.164939}
,
{0.19114,0.00989131,-0.0698764,-0.110881,0.195724,0.200674}
,
{0.147303,-0.22535,0.131928,-0.00192183,0.0345091,0.00208714}
,
{0.0982802,-0.00283431,-0.179354,0.0661305,0.0274282,0.0134287}
,
{0.00340497,0.0598907,0.142634,0.0129824,-0.0442371,0.0284877}
,
{-0.029719,0.0241911,-0.12404,-0.115062,0.108824,0.130573}
,
{-0.121806,0.0526014,0.174079,0.0365117,0.0806236,0.202818}
,
{-0.00267746,-0.00615776,-0.0372237,0.0882284,0.125125,0.189744}
,
{-0.755484,0.106165,0.119825,0.315291,0.0942329,-0.193676}
,
{-0.0224612,0.00726264,-0.199292,0.15052,-0.0190648,-0.0137294}
,
{0.0880464,-0.060815,-0.0434083,-0.145134,-0.135477,-0.0531652}
,
{-0.160144,0.0196279,-0.364126,-0.080496,-0.035326,-0.0484764}
,
{-0.0027436,0.0226683,0.191786,-0.144417,-0.127082,-0.0558815}
,
{0.192413,-0.00232671,-0.0434501,0.133124,-0.0394653,-0.0432918}
,
{0.130767,-0.00450634,0.00978656,-0.00438456,-0.0196398,-0.0367501}
,
{0.0969822,0.0038861,0.00969136,-0.00506537,0.0145286,0.0184954}
,
{0.289689,0.0268574,0.0297826,-0.0649078,-0.0116726,-0.0108656}
,
{0.04969,0.00351531,0.0709052,0.0368762,-0.0205937,-0.0169711}
,
{0.053787,0.0038473,-0.131978,-0.0807512,-0.0527668,-0.0907731}
,
{0.0125946,-0.00531838,0.122828,-0.0407584,-0.0266001,-0.0369531}
,
{0.0664812,0.010013,0.101731,0.0303677,-0.0235876,-0.0250765}
,
{0.103144,0.0073425,8.68345e-05,0.170676,0.0397221,0.0669599}
,
{0.0464886,0.00165023,0.245749,-0.145685,0.0426851,0.0545359}
,
{-0.0739861,0.000678939,0.317097,-0.0874701,0.0786116,0.117474}
,
{-0.0977351,0.00327077,0.103512,-0.0465127,-0.0656951,-0.0709445}
,
{-0.0439038,-0.000811804,-0.136255,0.0245839,0.004085,0.00183477}
,
{-0.0578365,-0.00285946,-0.0951989,0.135749,0.0641111,0.0945388}
,
{0.0191683,-0.00376622,0.100569,-0.0242372,0.047417,0.0602582}
,
{-0.177579,0.00109926,-0.0761446,-0.0272117,0.0723512,0.0998345}
,
{0.041077,-0.00263815,0.0906257,-0.0689185,0.031943,0.0478669}
,
{0.0471406,-0.000107522,0.0149439,-0.0560743,0.00767735,0.00434466}
,
{-0.157479,-0.00785042,-0.0465276,0.0428586,-0.0165577,-0.028735}
,
{-0.0200597,-0.0046426,-0.0940388,-0.0125075,-0.00234424,-0.00394248}
,
{-0.0783638,-0.0128384,-0.13133,-0.0401427,-0.0082004,-0.0309872}
,
{0.0221182,-0.0385834,-0.0354861,0.187031,-0.0220921,-0.0819447}
,
{0.080702,0.023827,-0.00155818,0.017116,0.0645085,0.130726}
,
{-0.105969,0.0225926,-0.0136092,0.246466,0.0129511,0.0874694}
,
{0.534285,-0.140967,0.0282598,0.434339,0.3103,0.16431}
,
{-0.0343271,0.00244412,-0.0769373,0.111368,0.00854694,0.0156962}
,
{-0.141904,0.013347,0.0815105,0.016846,-0.0278566,0.00366366}
,
{0.0674484,-0.00739521,0.0228837,-0.0470562,-0.0500675,-0.0821744}
,
{-0.064994,0.0756887,-0.170378,-0.0352214,-0.0315647,0.0983687}
,
{0.149664,-0.00229008,-0.13321,0.798804,-0.0680667,-0.0167747}
,
{0.0797133,-0.0212528,0.191481,0.0747118,-0.0855521,-0.141192}
,
{-0.0819978,0.0189462,-0.0762249,0.0698229,-0.134738,-0.167436}
,
{0.0564618,0.0156959,-0.0414355,-0.0161679,-0.0259484,-0.0194103}
,
{-0.152167,-0.0119251,-0.2089,-0.0802061,0.0322352,-0.00884458}
,
{-0.392247,-0.132733,0.552849,-0.0788633,0.163813,0.0298513}
,
{0.102149,0.0556263,0.20913,-0.0547847,0.0461591,0.163211}
,
{0.160595,0.0948704,-0.0549635,-0.0911043,0.0067511,0.152687}
,
{-0.0438626,-0.0176426,0.0494261,0.021361,0.0399656,0.032761}
,
{0.0439975,0.0686929,0.198021,-0.222099,0.0809221,0.22894}
,
{-0.0794567,0.11456,0.153961,-0.379622,-0.0621776,0.0524487}
,
{0.0114349,0.000480704,-0.156387,0.0410312,0.0137161,0.00707616}
,
{0.0791787,0.16126,0.140906,0.445731,-0.214962,0.0473085}
,
{-0.1332,-0.0124248,-0.043453,-0.0348332,0.11202,0.13903}
,
{-0.58862,0.143199,0.0869052,-1.31133,-0.0986465,-0.0749323}
,
{0.0408368,-0.110068,-0.167353,-0.0468692,-0.188018,-0.0332726}
,
{0.233742,-0.156211,-0.250053,-0.349882,0.0084713,-0.281934}
 };
  static const float bias2[1] = { 0.26846 };
  static const float weights2[][1] = { {-0.0144936}
,
{0.193343}
,
{0.0101346}
,
{0.0232269}
,
{0.141566}
,
{-0.102847}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_1_0(v, index);
}
static int assign_gen_lepton_prior_4_1_0() {
  global_gen_lepton_prior.at(4,1,0) = &specialized_gen_lepton_prior_4_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_1_0 = assign_gen_lepton_prior_4_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_4_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.198062,-0.0183854,-0.112813,-0.224386,-0.164749,-0.41204 };
  static const float weights1[][6] = { {-0.0190865,0.376468,0.19183,0.0341147,-0.00556987,0.0931339}
,
{-0.0597166,0.00713198,-0.289583,-0.101126,0.394601,-0.362041}
,
{0.363503,-0.200455,-0.373849,-0.0467696,-0.383763,-0.227237}
,
{0.0339673,0.72429,1.06403,-0.265189,-0.0398997,0.0603309}
,
{-0.162901,-0.0717258,-0.149276,-0.0435675,-0.135431,-0.377584}
,
{-0.271452,-0.130856,-0.0684913,-0.148482,0.00762303,-0.520793}
,
{-0.270538,0.0111599,0.0034902,-0.281018,-0.197315,-0.599211}
,
{-0.132102,0.0330191,0.0175903,0.128458,0.331613,-0.0425896}
,
{-0.433967,-0.0116628,-0.199165,0.0250333,-0.0415008,0.143302}
,
{-0.161182,0.0391118,-0.201566,-0.174372,-0.115281,-0.110421}
,
{-0.0739774,-0.155786,0.0101858,-0.0783456,0.150833,-0.158624}
,
{0.208979,0.142548,0.0459944,0.0466156,-0.0154787,0.133291}
,
{0.198005,-0.467217,-0.645063,0.853701,-0.578875,0.861466}
,
{0.0183362,-0.257587,-0.115936,0.00283306,-0.169174,-0.0281356}
,
{0.110837,-0.125778,0.201801,0.087649,0.234651,-0.156973}
,
{0.029984,-0.23521,-0.164081,0.051792,0.0128695,-0.149364}
,
{-0.250654,-0.105412,-0.211104,-0.150563,-0.320376,-0.181828}
,
{-0.32074,-0.379676,-0.0383301,-0.0765414,-0.18298,-0.0260633}
,
{-0.0269347,-0.10203,0.0849528,0.06041,-0.0784811,0.225266}
,
{0.161889,-0.117856,-0.268231,0.486652,0.192128,0.245395}
,
{0.0705829,-0.158967,0.140522,0.127885,0.0833742,-0.0161168}
,
{-0.131837,0.0609814,-0.0553649,0.0968576,-0.036508,0.119523}
,
{-0.187235,0.147696,-0.0289138,0.176582,0.0301296,0.139258}
,
{-0.0138583,-0.0728906,0.171377,0.186559,-0.161172,-0.144253}
,
{-0.108822,-0.0529446,0.394275,-0.478144,0.00957029,0.0841333}
,
{-0.0778188,0.0934834,-0.0956889,-0.0896521,0.217384,-0.0152901}
,
{0.189215,0.137756,0.0423616,-0.0762814,0.0761092,0.105226}
,
{0.152668,-0.0293219,0.251991,-0.159971,-0.340126,0.164779}
,
{0.283194,0.0527854,0.0377762,0.0809442,-0.0211441,-0.0938873}
,
{0.165063,0.076315,0.0308193,0.0109198,0.0303546,-0.0731923}
,
{0.0994169,0.113125,-0.0872569,-0.0950025,-0.218337,0.0466018}
,
{0.0821617,0.061853,-0.023384,-0.0506523,-0.0363586,0.0303921}
,
{-0.170853,0.029611,0.0781242,-0.0130315,0.127841,-0.0708037}
,
{0.0809543,0.0134553,0.115299,0.111447,-0.0052805,-0.226922}
,
{0.00965059,0.115774,0.125624,0.139379,-0.144422,-0.19951}
,
{0.0455262,-0.0332053,-0.016913,-0.0615532,-0.0504609,0.0256393}
,
{0.0967604,-0.0144072,0.0439727,-0.0483951,-0.170893,-0.00810416}
,
{0.0515816,0.00961036,0.00680508,-0.0347572,-0.0387816,0.00540503}
,
{0.0818899,0.108785,0.0438167,-0.0737278,-0.21358,0.0369013}
,
{0.0965224,-0.066723,0.0345755,0.0121469,0.10517,-0.0516407}
,
{0.0294581,-0.0294976,-0.0123442,-0.0305911,-0.0327689,0.0050418}
,
{0.0689531,-0.106625,0.0489358,-0.00718602,-0.163115,-0.0540275}
,
{-0.23888,0.0674262,-0.0866402,-0.0547246,-0.0376206,0.215542}
,
{-0.238849,-0.015519,0.00873928,0.0383119,-0.0517362,0.0636983}
,
{-0.0717012,0.0262274,0.0447562,0.0816897,-0.10346,-0.0884803}
,
{0.0750648,-0.0439137,0.0683109,0.0439376,0.0291402,-0.0914973}
,
{0.0399296,0.0532974,-0.085187,-0.111659,-0.00295377,0.100863}
,
{-0.0508709,-0.000492064,-0.0277973,-0.00891481,0.0368051,0.0647142}
,
{-0.0520374,0.0515421,-0.112041,-0.0475685,0.0569248,0.102843}
,
{-0.0384557,0.000933518,0.0106261,0.00851568,0.0261544,0.00961598}
,
{-0.0733752,0.0306716,-0.0436161,-0.00543518,0.0566584,0.0533635}
,
{-0.189482,0.198844,-0.0809127,0.080943,0.143707,0.0162123}
,
{-0.0310768,0.0350128,-0.00610999,0.00926404,0.00467301,-0.000911442}
,
{0.0440177,-0.164567,0.0637374,0.0013997,0.0098259,-0.0401406}
,
{0.288589,0.112919,-0.263398,-0.150764,-0.00741219,-0.089479}
,
{0.119705,-0.0511835,0.361732,0.0333801,-0.0762961,-0.0493087}
,
{0.12202,0.0378736,-0.0178546,-0.307176,0.379865,0.127982}
,
{0.0882207,0.445474,0.175326,-0.383124,0.223695,-0.505585}
,
{-0.19449,0.0945988,-0.169816,0.256157,0.200817,0.0194011}
,
{-0.0162074,0.133219,-0.201703,-0.0132233,0.0984072,0.00170865}
,
{-0.0571471,-0.012467,0.145553,0.145326,0.233818,0.0566391}
,
{-0.188889,-0.0996317,-0.452229,0.289717,0.387752,0.135409}
,
{0.0903454,-0.765681,-0.099173,0.0975892,-0.481032,0.465755}
,
{-0.097859,0.0841461,-0.25267,-0.224118,-0.334915,0.0230908}
,
{0.117795,0.0324414,-0.151295,0.0326542,0.480905,0.150172}
,
{0.0446265,0.191257,0.233796,0.0361871,-0.225394,0.0816361}
,
{-0.146367,0.340099,-0.394766,0.262236,-0.328107,0.0412471}
,
{0.205333,0.40275,0.176857,-0.154094,0.119652,-0.477019}
,
{0.0360065,-0.193883,0.208477,-0.0527916,-0.228656,-0.0495842}
,
{-0.015354,0.0611911,0.0624404,0.21212,-0.00523222,0.055447}
,
{-0.00551663,0.297503,0.0288492,-0.0220895,0.00372315,0.0249899}
,
{0.25632,0.0689136,0.174404,0.0544783,0.0242999,-0.197242}
,
{0.287312,-0.469907,-0.0834596,0.0556222,-0.591584,0.228109}
,
{-0.0959224,-0.355173,-0.276016,-0.0955816,0.180697,-0.0625268}
,
{0.220946,0.258332,0.139415,0.258614,-0.814102,-0.280396}
,
{0.0538501,0.449531,-0.196267,-0.154623,-0.764892,0.0573076}
,
{-0.0124484,0.0199197,0.0589454,-0.450819,-0.00240252,-0.276178}
,
{-0.0954692,-0.0509096,0.104026,0.119146,-0.131042,-0.105269}
,
{-0.129842,-0.126304,-0.102761,-0.371729,-0.543842,0.693118}
 };
  static const float bias2[1] = { -0.120059 };
  static const float weights2[][1] = { {0.0247425}
,
{-0.0231107}
,
{-0.0412762}
,
{0.035977}
,
{-0.0186982}
,
{0.0281897}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_4_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_4_2_0(v, index);
}
static int assign_gen_lepton_prior_4_2_0() {
  global_gen_lepton_prior.at(4,2,0) = &specialized_gen_lepton_prior_4_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_4_2_0 = assign_gen_lepton_prior_4_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_0_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.079613,-0.0717073,0.0373869,0.0740375,-0.13486,0.20361 };
  static const float weights1[][6] = { {0.226004,-0.157299,-0.241396,0.0375898,-0.0390541,-0.109047}
,
{-0.0546371,-0.0140167,-0.14611,0.0845847,-0.033838,0.0399509}
,
{0.107471,0.000461688,0.425897,-0.0948305,-0.073338,0.246877}
,
{0.0731319,0.100077,0.104919,0.191677,-0.147974,0.425535}
,
{0.222818,-0.147707,0.175703,0.057261,-0.101419,0.112774}
,
{-0.0734194,-0.281728,0.0171047,0.0677773,0.106772,0.219864}
,
{0.0391479,-0.208272,0.0699197,0.0942047,-0.18458,0.239056}
,
{0.0992729,-0.153653,0.185308,-0.0114355,0.0383819,-0.157044}
,
{0.119396,-0.0157821,0.070871,0.0483627,-0.375763,0.0438522}
,
{-0.0163501,0.0833525,-0.0423817,-0.0807415,-0.0189411,0.130623}
,
{-0.0362806,0.188396,-0.046607,-0.00451775,0.0179176,-0.0165192}
,
{0.0480467,0.0950363,-0.0787405,0.105751,-0.0672326,-0.125801}
,
{-0.0290066,-0.123209,0.18168,0.257105,-0.233838,0.0295023}
,
{-0.0378394,-0.22647,0.336971,0.0709566,-0.0474228,-0.045974}
,
{-0.0867288,-0.0463323,0.201048,0.0454175,-0.324893,-0.0142151}
,
{0.0143904,-0.0839555,0.102258,0.0350362,-0.0645923,0.139}
,
{-0.0159504,-0.0457324,0.149562,0.198709,-0.137266,0.351372}
,
{-0.110337,-0.133247,0.421232,0.013245,0.00196494,-0.00156517}
,
{-0.0774316,-0.0465655,0.0563059,0.00762633,-0.16639,0.0846226}
,
{0.0684519,-0.162252,-0.0586965,0.0876051,-0.146952,0.276262}
,
{-0.089654,-0.273052,-0.0594932,0.0694541,-0.0942125,-0.015698}
,
{0.153698,-0.205465,0.271098,0.0835957,-0.113106,0.224494}
,
{-0.00232179,0.102914,-0.0562965,-0.0164847,0.187403,0.237295}
,
{0.164799,0.0188869,0.0928585,0.0193308,-0.0660384,0.158015}
,
{0.202828,0.0394125,-0.111668,-0.069536,-0.162268,-0.0960786}
,
{0.278781,-0.207118,0.0210483,0.181533,-0.0623899,0.0926637}
,
{0.071119,-0.246947,-0.0241948,0.172148,-0.0503309,-0.0810907}
,
{0.0813183,-0.0272331,-0.125062,0.277686,-0.0547073,0.077958}
,
{0.0617735,-0.208634,0.437222,0.315746,-0.0618108,0.240179}
,
{-0.0740222,-0.071194,0.0138846,0.121913,0.108941,0.102738}
,
{-0.16303,-0.00688964,0.233334,-0.187745,0.0614507,0.0201964}
,
{-0.0223852,0.0698875,0.239419,-0.0867502,0.189864,-0.0450152}
,
{-0.0167201,0.0998318,0.102019,0.0549306,-0.0223278,-0.013293}
,
{-0.126758,0.045817,0.0758953,-0.0748886,0.0381024,-0.00400405}
,
{-0.0667034,-0.0421431,-0.181269,0.0277816,-0.130213,0.0343728}
,
{0.0652304,-0.00425962,0.0945862,-0.0382645,0.0279541,-0.0244462}
,
{-0.186067,-0.132835,-0.0576193,0.043979,0.0436434,-0.113975}
,
{0.0425331,0.00197568,0.114963,-0.173047,0.107149,0.0542537}
,
{0.188377,0.0887507,-0.159668,-0.0314161,-0.0679166,0.0715855}
,
{-0.186855,-0.127263,-0.179416,0.0335125,0.11351,-0.147045}
,
{0.258556,0.0617014,0.0202885,-0.207255,0.11541,-0.0368576}
,
{-0.0103028,0.174191,-0.103338,-0.0392625,0.116466,-0.12699}
,
{-0.0606293,-0.0836846,-0.0729654,0.303339,-0.142005,-0.0877806}
,
{0.00449956,0.0848473,0.0123257,-0.061129,0.0155176,0.125998}
,
{-0.00594843,0.00255476,-0.250417,-0.0680872,0.047335,-0.0955245}
,
{0.00867428,-0.0145605,-0.111006,0.109967,-0.0252882,-0.0573816}
,
{0.133953,0.0566521,0.0547127,0.166535,-0.210358,-0.035057}
,
{-0.114641,0.0825261,-0.224306,0.174747,0.0629782,0.269264}
,
{0.0362375,-0.115331,-0.0052585,0.0223234,0.0793995,0.00237963}
,
{-0.179627,0.0652886,-0.176159,0.00498279,0.0287005,0.269432}
,
{-0.130283,-0.0802004,-0.0542345,-0.0707525,-0.042402,0.071934}
,
{-0.026679,0.135807,0.0789663,0.00505767,-0.245407,-0.0827841}
,
{-0.0297597,0.0179626,-0.129832,-0.206174,-0.0882591,0.0194112}
,
{-0.0287019,-0.120051,0.0823623,0.128035,0.0233677,-0.0820087}
,
{0.143087,-0.20025,-0.0605001,-0.00375974,0.0465475,-0.00739907}
,
{0.0378793,-0.00361269,0.131849,0.126472,-0.073996,-0.272998}
,
{-0.25951,-0.126898,0.0313239,-0.114901,-0.098851,0.098425}
,
{-0.049399,-0.0322812,0.144205,-0.0317967,0.104053,-0.021948}
,
{0.00255728,-0.190204,-0.109877,0.0520343,0.0490481,-0.111142}
,
{-0.180449,0.213456,-0.197442,-0.0107624,0.119776,0.0607148}
,
{0.0223261,-0.128512,0.263167,-0.141672,-0.0401898,-0.046928}
,
{0.0520136,0.176961,0.305907,0.0479839,0.0118226,-0.00189649}
,
{0.12428,0.00454729,0.00301275,-0.110011,-0.0241992,-0.0811254}
,
{-0.282663,-0.0360145,-0.0787826,-0.16523,-0.0329217,0.089991}
,
{0.0938938,-0.0123573,-0.0439553,-0.240765,-0.0626843,0.0234196}
,
{0.019421,0.0650759,0.0466608,0.0583183,-0.0333724,-0.00348111}
,
{-0.0626492,0.186473,-0.0293673,0.0500563,-0.113221,0.168475}
,
{-0.107864,0.0648949,0.046092,-0.256963,0.0170124,0.162014}
,
{-0.0128867,0.0373884,-0.180861,-0.0451016,-0.0947396,0.0471084}
,
{0.0828584,0.116757,-0.0992134,-0.244263,0.0992521,-0.108563}
,
{-0.0775992,-0.0414629,0.0232505,-0.042157,-0.166575,-0.0129696}
,
{-0.128227,-0.0635803,-0.240357,0.0146471,-0.113125,0.018977}
,
{-0.0827823,-0.000482726,0.123055,-0.179375,0.130273,0.0500319}
,
{0.175022,0.0335789,0.00928327,0.122933,-0.0985479,0.0997621}
,
{-0.177821,-0.0713428,-0.230948,-0.297721,-0.234442,-0.0743869}
,
{0.00811797,-0.171143,-0.180626,0.0402518,0.0552593,-0.0498652}
,
{0.163712,-0.0774269,-0.0292377,-0.205989,-0.0939342,-0.146615}
,
{-0.200563,0.236763,-0.157889,-0.138779,0.0107741,0.214461}
,
{-0.10929,-0.0976049,-0.295987,-0.210159,0.0651536,0.0486854}
 };
  static const float bias2[1] = { 0.116487 };
  static const float weights2[][1] = { {0.0808051}
,
{-0.0364127}
,
{0.0546007}
,
{0.0392247}
,
{-0.0253412}
,
{0.211629}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_50(v, index);
}
static int assign_gen_lepton_prior_5_0_50() {
  global_gen_lepton_prior.at(5,0,50) = &specialized_gen_lepton_prior_5_0_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_50 = assign_gen_lepton_prior_5_0_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_0_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0335778,-0.232675,-0.147687,0.297945,-0.247275,-0.0764567 };
  static const float weights1[][6] = { {0.114419,0.193984,0.327941,-0.128836,0.0159676,-0.024784}
,
{-0.171535,-0.0913795,0.175715,-0.00773293,-0.46502,0.120347}
,
{0.0807661,-0.241393,-0.279673,0.0393647,-0.116011,0.210929}
,
{-0.132097,0.0137065,0.426663,0.820803,-0.404085,-0.445316}
,
{-0.062568,-0.185746,-0.175668,0.396323,-0.281719,-0.236448}
,
{0.0877663,-0.296186,-0.205473,0.398067,-0.414846,0.0101698}
,
{-0.0439453,-0.115384,-0.411795,0.0348001,-0.271874,0.251081}
,
{-0.276208,-0.00212533,-0.0766685,-0.00720265,-0.19687,-0.0292798}
,
{-0.204544,-0.0527217,-0.12113,0.0782931,-0.026239,0.189392}
,
{-0.0139067,-0.0298367,-0.147977,-0.0721331,-0.0361631,0.196639}
,
{0.0427295,0.123489,0.0785337,-0.0352752,-0.0869075,-0.0118315}
,
{-0.12964,-0.0841544,0.010574,0.145951,-0.144921,0.0393042}
,
{0.0357519,-0.0311475,-0.0851752,0.607179,-0.139597,-0.288544}
,
{-0.232335,0.119828,-0.0530282,0.0301187,0.0387007,-0.138922}
,
{-0.232756,-0.254025,0.0157278,0.835108,-0.237035,0.101315}
,
{0.0159408,0.210723,-0.119627,0.118731,-0.00554416,-0.0726358}
,
{0.111279,-0.130276,0.227337,0.950702,-0.26113,-0.00301465}
,
{-0.0929934,-0.1566,-0.497301,-0.0293428,-0.243608,-0.266264}
,
{-0.0944526,-0.0703877,-0.0472145,-0.006552,0.0315551,-0.0036458}
,
{-0.00220813,0.117193,-0.0347597,-0.054925,-0.0265975,-0.255531}
,
{-0.122093,-0.0861672,-0.223807,-0.0273165,0.0456538,-0.179893}
,
{0.0750524,0.0303777,-0.244928,0.00286625,-0.104725,-0.166865}
,
{0.215908,0.0721355,-0.149279,0.099414,-0.0474002,0.0766509}
,
{-0.0794082,0.00359002,0.00770779,0.00599361,-0.134879,0.0916592}
,
{-0.0886217,-0.0417821,-0.182599,0.15805,-0.0044992,0.155908}
,
{0.136138,0.0581792,0.268942,-0.124924,-0.112973,-0.0145596}
,
{-0.186832,-0.222146,0.0518149,0.396103,0.0310189,0.220872}
,
{-0.0132982,-0.0518895,-0.0669754,0.251475,-0.161039,0.0747671}
,
{0.00382966,-0.207486,0.276896,0.0127141,-0.0891359,-0.196632}
,
{-0.00904068,0.034027,-0.142711,-0.0967563,-0.0855852,0.0852802}
,
{0.0612687,0.00439538,0.123606,6.89755e-06,-0.0134916,0.00118227}
,
{0.0535455,-0.0605439,0.028375,0.191343,-0.101206,-0.0699597}
,
{-0.0568467,-0.0607149,-0.195288,0.248353,-0.143216,0.00870197}
,
{0.0252591,0.0709418,-0.11556,0.00493327,-0.208923,0.245968}
,
{0.0914671,0.216117,-0.0315971,0.0161979,-0.106978,0.0342809}
,
{0.044996,0.0266994,0.100306,0.0133668,-0.0361922,-0.0890634}
,
{0.201246,0.228803,-0.0430685,0.0201732,-0.202307,0.427055}
,
{-0.0467667,-0.0720068,0.235339,-0.01463,0.0932263,-0.00520815}
,
{-0.271441,-0.0113886,-0.145122,-0.0212612,-0.143012,-0.14271}
,
{-0.0374301,-0.126379,0.00493698,0.00272981,-0.092557,-0.028756}
,
{-0.0219536,-0.00101008,-0.0252615,-0.00350354,0.0771644,-0.0689423}
,
{0.0491878,-0.0988977,0.0723267,-0.00639139,0.151121,0.0408427}
,
{0.0357206,-0.0950193,-0.082503,0.00836593,-0.0742852,-0.0784249}
,
{0.120784,-0.0345623,0.0117401,0.00746271,-0.0177933,-0.0763699}
,
{-0.0163596,0.0502507,0.103113,0.03435,0.102398,0.145104}
,
{-0.0302341,-0.192359,-0.188854,-0.0104794,-0.00276815,-0.037311}
,
{-0.219615,0.240777,0.185155,0.0102498,-0.412428,0.38463}
,
{-0.0732982,0.0828542,-0.00867913,-0.0411198,-0.132644,-0.00608}
,
{0.0189515,-0.0845617,0.336246,-0.0119898,-0.194167,0.043915}
,
{-0.0251357,0.0159001,-0.0970451,0.155947,-0.0667807,0.124224}
,
{-0.0638042,-0.0887672,-0.0980366,-0.0121054,0.0844395,0.0663223}
,
{-0.0564308,-0.25338,0.258227,-0.0647845,-0.0364562,0.22654}
,
{-0.0535618,-0.158128,0.0402834,-0.170515,-0.056814,0.0889202}
,
{-0.128258,0.0765767,-0.00224177,-0.00934711,0.171272,0.157157}
,
{0.059043,0.0635278,0.0417747,0.176425,0.0577806,-0.0288707}
,
{0.130578,0.153901,-0.125341,0.0537694,0.15711,0.210974}
,
{0.164203,-0.0788904,0.107737,0.372825,0.322958,0.164978}
,
{0.0236455,0.0295567,-0.038777,-0.138129,-0.0496177,0.00716238}
,
{-0.146042,-0.0258078,-0.128286,0.0788456,0.124614,-0.0883458}
,
{-0.142461,-0.0336842,0.0383091,-0.00523419,0.14077,0.0596004}
,
{-0.112065,0.00145392,0.347918,-0.0755279,-0.120616,-0.0341559}
,
{0.202532,0.0184446,-0.127478,-0.292411,-0.0155039,-0.172134}
,
{-0.236458,0.0251054,-0.114997,-0.0937948,0.0336346,0.15843}
,
{0.0840593,0.163988,-0.135397,-0.0142995,0.231821,0.155463}
,
{0.0416109,0.0535879,-0.0794209,-0.0279411,-0.0384492,0.114568}
,
{0.0263179,-0.0509914,0.0794665,-0.0364306,0.0704915,0.0635207}
,
{0.225238,0.0301987,0.0789083,0.0498298,-0.0312138,0.0114186}
,
{0.115223,0.0683389,0.0933916,0.0888614,0.0777128,0.015878}
,
{-0.122203,-0.0823615,0.0409961,-0.0392926,-0.150025,0.0634637}
,
{0.0895735,0.104953,-0.00766508,-0.011679,-0.0182803,0.141551}
,
{-0.00417399,-0.111838,0.162541,-0.0256343,-0.0765078,0.0744993}
,
{-0.042386,-0.140741,0.0986718,-0.00967605,-0.170237,0.234398}
,
{0.128104,-0.0656725,0.0160689,0.00534737,0.102295,-0.102481}
,
{-0.136541,-0.166195,0.121407,0.0567908,0.104622,-0.19174}
,
{0.0484828,-0.0831219,0.607202,-0.0720832,0.124899,0.174092}
,
{-0.212178,-0.0632264,0.177034,0.0108812,-0.281476,0.110353}
,
{0.0869678,-0.162129,0.172187,-0.00858438,0.160416,-0.0701683}
,
{0.250433,-0.164658,0.352232,-0.200719,0.0116266,0.280533}
,
{-0.132836,0.133899,0.386328,-0.277335,0.3312,0.283167}
 };
  static const float bias2[1] = { 0.308525 };
  static const float weights2[][1] = { {-0.0196235}
,
{-0.0245996}
,
{0.0428477}
,
{0.102536}
,
{0.0309198}
,
{0.0981581}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_51(v, index);
}
static int assign_gen_lepton_prior_5_0_51() {
  global_gen_lepton_prior.at(5,0,51) = &specialized_gen_lepton_prior_5_0_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_51 = assign_gen_lepton_prior_5_0_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_0_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.339348,0.263111,-0.0647947,-0.289867,0.381521,0.495398 };
  static const float weights1[][6] = { {0.242791,0.0479276,0.100906,-0.0315073,0.106678,0.198019}
,
{-0.266924,-0.470369,-0.58456,-0.0323518,0.0725715,-0.128641}
,
{0.139443,0.413107,0.280299,0.0541969,0.0280422,-0.0581241}
,
{0.21188,-0.45694,0.0313148,-0.187825,0.469612,1.10187}
,
{0.409129,0.285333,0.111883,-0.452967,0.557535,0.360809}
,
{0.408583,0.0855431,-0.190328,-0.336525,0.162562,0.492045}
,
{0.118139,0.141223,-0.203177,-0.151788,0.184718,0.574965}
,
{-0.23496,-0.0335754,-0.0310925,0.069759,0.0696972,0.0593555}
,
{0.0457567,-0.165572,-0.26333,-0.032257,0.194441,-0.155883}
,
{0.0319734,-0.133699,0.0979306,-0.0315106,-0.00756148,0.0461938}
,
{0.059691,0.0558425,0.122288,-0.139852,-0.114172,0.0906704}
,
{-0.134576,0.175139,0.0218364,0.211112,0.0357531,-0.171368}
,
{-0.00498173,-0.152167,-0.0980831,-0.0630204,0.0129064,-0.0575826}
,
{0.0353737,0.336546,-0.111838,-0.0178239,-0.0834335,-0.0180886}
,
{-0.0147228,-0.0988848,0.0727754,-0.14872,0.454395,0.109719}
,
{-0.121608,-0.190653,0.0285943,-0.246656,0.0477236,0.0286355}
,
{0.0826588,-0.0903035,-0.158683,-0.119946,0.251379,0.129639}
,
{0.00649692,-0.00391416,-0.0163855,0.142565,0.0778559,0.0243843}
,
{0.0837728,-0.206485,-0.254163,0.0297683,0.0207551,-0.045548}
,
{0.0754626,-0.273725,-0.0596029,0.152324,0.117589,-0.0834162}
,
{-0.0824085,-0.0448383,-0.0216022,0.118436,0.105486,-0.0303385}
,
{0.0220065,-0.112699,0.085324,0.211291,-0.0185646,0.128399}
,
{-0.10406,-0.010728,0.026457,0.0217015,-0.18616,0.144004}
,
{0.0445141,0.0445366,-0.268806,0.00108361,-0.0463347,0.037574}
,
{0.178482,0.138702,0.1318,-0.00775953,0.178602,0.128531}
,
{0.146994,0.141277,0.173014,-0.187262,-0.130169,0.115012}
,
{0.00423078,-0.0899799,-0.137647,-0.037165,0.130862,0.184515}
,
{-0.0213688,-0.0350051,0.0638823,-0.0350271,0.14861,-0.134978}
,
{0.0350053,-0.151862,0.220006,-0.0780565,0.202538,0.0328793}
,
{0.135558,0.0545199,0.196984,0.0113778,-0.0171671,-0.0101535}
,
{-0.0689691,0.152514,-0.216161,-0.0196058,0.0160448,-0.00461277}
,
{0.0348458,0.0921445,-0.167706,-0.0526927,-0.113823,0.214483}
,
{0.082802,-0.0510819,-0.064277,-0.0156646,0.230859,-0.0513692}
,
{-0.138425,-0.126008,-0.0865713,-0.0634794,-0.00913607,0.023843}
,
{-0.0612809,0.0981277,0.0611103,0.0548896,-0.0123369,-0.0613668}
,
{-0.0040856,0.0564881,0.00243448,0.0272782,0.0589889,-0.0346754}
,
{-0.000390275,0.262652,0.634577,0.00347943,0.137991,-0.16353}
,
{0.112782,0.0204356,0.0776312,0.0465674,0.0795903,0.056489}
,
{0.0387897,-0.0253916,-0.13086,0.00366666,-0.0829068,0.072656}
,
{0.0149957,0.00261014,-0.231721,0.102494,-0.0650428,-0.0577116}
,
{-5.03608e-05,0.0948682,0.201252,0.0082131,0.0220829,-0.0103589}
,
{0.0575991,0.211161,-0.229763,0.0576644,0.0346229,0.0119169}
,
{0.00442138,-0.269211,-0.327371,0.0122363,0.151371,0.0603256}
,
{0.078198,-0.0256693,-0.24783,-0.0943276,-0.0131274,-0.0415606}
,
{-0.21599,0.104848,-0.0902345,-0.0332886,0.127022,0.0472969}
,
{0.107979,-0.0938103,-0.0600539,0.0756548,0.00982062,0.0135024}
,
{-0.113003,-0.420387,0.530822,-0.0682426,0.0121772,-0.078779}
,
{-0.268297,0.202041,-0.033966,-0.0153114,-0.017206,-0.0382661}
,
{-0.0355394,-0.158878,-0.00510087,0.0472147,-0.0579634,0.0720023}
,
{-0.194647,-0.123197,-0.07701,0.0481718,0.0714545,-0.162615}
,
{0.0757172,0.0634531,-0.0572677,-0.045991,-0.0847253,0.0316002}
,
{-0.389945,-0.190702,-0.06125,-0.197365,-0.118955,0.111846}
,
{0.000314371,-0.174661,-0.202533,-0.040016,0.106543,0.0469268}
,
{-0.145461,0.161411,-0.260668,0.00164608,0.0487569,0.0074049}
,
{0.0234333,-0.0272808,0.141652,0.173622,0.136979,0.203931}
,
{0.197011,0.047878,-0.0833258,-0.115686,0.181126,-0.252591}
,
{-0.0539608,-0.0516001,0.196235,0.00548722,-0.147524,-0.0367406}
,
{-0.121298,-0.163686,-0.0173419,-0.0278566,0.0661598,-0.244649}
,
{0.0485023,-0.0534103,-0.0665409,-0.180019,-0.26247,0.139798}
,
{-0.100479,0.170369,-0.0776535,0.0165592,0.14705,0.0486307}
,
{-0.199948,0.00591714,0.140933,0.00498729,0.149794,-0.0972059}
,
{-0.0405026,0.14074,0.234173,0.0280984,0.0682909,-0.0102585}
,
{-0.0387372,0.00784402,-0.10723,-0.0411099,-0.126312,-0.0909339}
,
{0.0649485,0.0647531,-0.0563829,-0.0109208,-0.152229,0.120665}
,
{-0.0552546,-0.0554933,-0.011968,0.022442,-0.144605,0.210343}
,
{0.0430213,0.0439895,-0.100081,-0.0508458,0.122905,0.0237693}
,
{-0.0957438,0.0323158,0.0804781,-0.149282,0.251876,0.105181}
,
{0.0805749,-0.063951,-0.11969,-0.0798417,-0.0630989,0.0657361}
,
{-0.0311366,-0.152937,0.00373317,0.0321009,0.0458343,-0.145152}
,
{0.0792344,-0.0569498,-0.0477529,-0.133383,0.114667,-0.00684601}
,
{-0.112818,-0.0202149,-0.0676524,0.143873,-0.0132862,0.193905}
,
{-0.0143273,-0.134267,-0.127418,0.121146,0.122755,0.0102451}
,
{-0.108237,0.12175,-0.0917172,0.00418215,0.0202058,-0.0412115}
,
{-0.167114,0.0615739,0.0663819,-0.0379744,-0.181019,0.185366}
,
{0.0710361,-0.0769962,-0.0123868,-0.116159,0.0685768,-0.102666}
,
{0.115993,0.0131009,0.0226821,0.146636,-0.088755,-0.0337892}
,
{-0.16051,-0.154752,-0.0332837,-0.0519528,0.0132013,-0.246781}
,
{-0.0305005,0.0917499,-0.0623712,-0.0539984,0.145404,0.0308549}
,
{-0.184389,-0.0144061,0.0295691,-0.00980169,-0.0992549,-0.200209}
 };
  static const float bias2[1] = { 0.41045 };
  static const float weights2[][1] = { {0.0313498}
,
{-0.0396478}
,
{0.364464}
,
{-0.0710399}
,
{0.0936634}
,
{0.103981}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_52(v, index);
}
static int assign_gen_lepton_prior_5_0_52() {
  global_gen_lepton_prior.at(5,0,52) = &specialized_gen_lepton_prior_5_0_52;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_52 = assign_gen_lepton_prior_5_0_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_0_53(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.138754,0.384311,-0.0794402,0.476297,0.0993813,0.495096 };
  static const float weights1[][6] = { {0.0499004,0.178465,0.251191,0.244837,-0.110825,-0.102695}
,
{0.0591961,-0.0100429,-0.180325,-0.0147477,-0.26979,0.00695403}
,
{-0.2122,-0.0998261,-0.379537,-0.125505,-0.0738448,0.218932}
,
{0.530992,-0.145088,-2.15766,0.450337,-0.513392,0.0550028}
,
{-0.313462,0.421378,0.0299173,0.542253,0.166563,0.347752}
,
{-0.191101,0.397581,-0.0871153,0.0997347,0.105909,0.497806}
,
{-0.44818,0.305384,-0.191318,0.474342,0.0161252,0.58322}
,
{-0.211105,-0.177146,-0.0941733,0.0775535,-0.106254,0.00706362}
,
{-0.17021,-0.0420089,-0.137828,0.0676198,0.161561,-0.270372}
,
{0.00820187,0.0513731,0.0710133,-0.0637877,-0.132609,-0.0612245}
,
{0.0669467,0.0510277,0.10121,0.0256816,-0.00155935,-0.0318377}
,
{-0.185612,0.0344299,-0.0459579,-0.00136269,-0.119185,-0.00813063}
,
{-0.256253,-0.00903303,0.147555,-0.00134836,-0.172439,-0.095579}
,
{0.129108,0.0154298,-0.0654705,-0.0825926,-0.0647431,0.153678}
,
{0.338484,0.344719,0.193898,0.382954,0.363689,0.41755}
,
{0.00171226,-0.00629923,-0.018406,0.0352889,0.0433658,-0.0559249}
,
{0.0464976,0.134647,0.211703,0.610396,0.258613,0.0428109}
,
{-0.114489,0.102821,0.0722895,-0.0384221,0.102389,0.00394054}
,
{0.0816368,-0.036418,-0.0611966,-0.0368856,0.0375423,0.0561418}
,
{-0.0343053,-0.0506294,0.0743463,-0.0508,0.201235,-0.126652}
,
{-0.0280345,0.0142531,-0.121012,-0.0308911,-0.0391971,0.00927991}
,
{-0.0906909,-0.0757092,0.0133901,0.0324401,-0.00312249,-0.0194969}
,
{-0.102717,-0.0685865,-0.00999024,0.131787,0.106933,0.234162}
,
{-0.114228,0.0578336,0.0417969,0.0269227,-0.0779256,-0.0402324}
,
{0.214074,-0.195127,0.222266,-0.131246,-0.0278781,-0.0326148}
,
{-0.0352715,0.106496,0.0197204,0.147798,-0.197733,0.0777733}
,
{0.0792468,0.169506,-0.209757,-0.22502,0.0722712,-0.0557182}
,
{0.222922,0.13765,-0.109828,-0.0112308,0.0493311,0.0202239}
,
{0.0848901,-0.062208,0.138127,0.0344724,-0.137711,-0.0479512}
,
{0.0730681,0.241848,-0.107507,0.129026,0.228604,0.0908508}
,
{0.237225,-0.0184429,-0.00543752,-0.064495,0.0961053,0.0934348}
,
{-0.17382,-0.139911,0.0708487,0.0288984,-0.0809616,-0.195421}
,
{-0.175917,0.0222237,0.19791,0.154028,0.0620014,0.190612}
,
{0.64644,0.163992,-0.0609514,0.0558874,-0.278022,-0.133687}
,
{0.0853978,0.0767034,0.202757,0.0613735,0.0252277,-0.117577}
,
{-0.11873,0.0777126,-0.103329,-0.00645915,-0.0813971,-0.0290294}
,
{0.235464,-0.265488,0.137235,-0.000231278,0.240179,0.160559}
,
{0.0639311,-0.0140105,-0.0164305,-0.0350206,0.0902107,-0.098908}
,
{0.102247,0.0168188,-0.123397,0.0173098,-0.157962,-0.0965224}
,
{0.0127812,-0.0889485,0.304673,0.204257,0.00994336,-0.0403135}
,
{-0.225504,-0.0396224,-0.251205,-0.108092,-0.000245782,0.0854098}
,
{0.213807,-0.111216,-0.237465,-0.0484508,0.108366,-0.00664919}
,
{-0.116467,-0.094215,0.0771009,0.0652839,-0.176166,0.0984302}
,
{0.256916,0.181614,0.126798,0.0670888,-0.159963,-0.0551134}
,
{0.28317,0.171313,0.0467434,0.019517,0.02251,0.193592}
,
{-0.0174782,-0.157849,0.0179466,0.0556296,-0.0757243,0.0282499}
,
{0.0580178,-0.0524257,-0.213783,-0.105372,0.251561,0.0809029}
,
{0.235123,0.0523766,0.215005,-0.110376,0.0113863,-0.074825}
,
{0.158475,-0.0427279,0.142466,0.111298,-0.280288,0.0260236}
,
{0.110057,0.0209374,-0.0032336,-0.0607315,0.0520253,-0.062514}
,
{0.20958,-0.0169927,-0.035594,-0.0217341,0.100922,-0.0392284}
,
{-0.0505542,-0.266266,-0.380964,-0.0763359,0.152492,-0.0857637}
,
{-0.110303,0.144214,-0.00121245,-0.012323,-0.186463,0.104816}
,
{-0.220621,0.0867415,0.0252335,-0.00715067,0.103229,-0.124657}
,
{0.353307,0.141536,-0.111196,0.2333,0.19468,-0.0809735}
,
{0.0588075,0.0269237,0.0118694,-0.0297686,0.0509885,0.238467}
,
{-0.283563,-0.155924,0.375473,-0.386222,0.0134742,-0.268884}
,
{0.0675258,0.211312,-0.0993223,0.0310366,0.273997,0.160507}
,
{0.425394,-0.00694162,-0.0426629,0.135505,0.0270833,0.284555}
,
{-0.291548,0.162126,0.0925047,0.112602,0.395295,0.0946053}
,
{0.0883244,0.125619,0.104342,0.122397,0.232235,-0.0980567}
,
{0.273573,-0.193972,0.0736145,-0.263852,-0.255053,-0.398986}
,
{-0.134671,0.0855059,0.0813943,0.165878,0.23635,0.0452881}
,
{-0.329402,0.10139,-0.00766873,-0.0252762,0.29375,0.216805}
,
{-0.105933,-0.100577,-0.0191527,-0.405358,-0.00303879,-0.238855}
,
{-0.0587544,0.041287,-0.206033,0.0133814,0.124068,-0.315876}
,
{0.191509,0.0572449,-0.304006,0.195382,-0.357589,-0.153915}
,
{-0.152393,0.03544,0.233058,-0.188149,-0.0221168,-0.263202}
,
{-0.0865159,0.0834334,-0.0387089,-0.202321,0.092892,-0.170447}
,
{0.0828056,-0.245764,-0.399674,0.191064,-0.0691226,-0.393754}
,
{-0.258296,-0.0908137,0.0266362,-0.107511,0.0599237,0.105675}
,
{-0.0763361,-0.306856,0.727228,-0.290716,-0.17935,-0.514897}
,
{-0.223907,-0.287987,-0.219586,0.273759,0.0314707,-0.160195}
,
{0.103937,-0.210204,-0.334119,0.0383183,0.0387977,-0.152955}
,
{0.023081,0.588533,-0.63011,0.431616,0.315071,0.446261}
,
{-0.353377,-0.0874671,-0.0310775,0.142235,0.291385,-0.24154}
,
{0.110833,-0.10452,-0.084188,-0.0567875,0.136106,-0.0465238}
,
{-0.0671938,0.489558,-0.591813,0.533366,0.56691,0.318538}
,
{-0.0936045,0.490684,-0.637139,0.447294,0.120857,0.326112}
 };
  static const float bias2[1] = { 0.257214 };
  static const float weights2[][1] = { {0.529704}
,
{0.0668382}
,
{-0.0982186}
,
{0.163688}
,
{0.0459718}
,
{0.088197}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_53(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_53(v, index);
}
static int assign_gen_lepton_prior_5_0_53() {
  global_gen_lepton_prior.at(5,0,53) = &specialized_gen_lepton_prior_5_0_53;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_53 = assign_gen_lepton_prior_5_0_53();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_0_54(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.555891,0.398396,-0.0916499,0.368036,-0.0521168,-0.0668262 };
  static const float weights1[][6] = { {0.120197,-0.00417503,0.191629,0.261233,-0.00781758,0.114629}
,
{-0.126789,0.561956,-0.128873,0.0239004,-0.0767691,-0.0133586}
,
{0.0136724,-0.412672,-0.092381,-0.0325153,-0.0382713,-0.0840674}
,
{0.973886,0.131726,0.0243551,0.840497,-0.0791547,-0.0508854}
,
{0.435134,0.510608,-0.224287,0.425252,-0.181734,-0.223003}
,
{0.539519,0.188281,-0.0932327,0.311943,-0.0224685,-0.098017}
,
{0.700744,0.318861,-0.0967452,0.367506,-0.0452882,-0.168563}
,
{0.122433,-0.2291,0.106489,-0.138637,0.313029,0.0222714}
,
{0.0570293,0.0252251,0.143155,-0.0685649,-0.192486,-0.0553184}
,
{0.0593015,-0.0759296,0.0621254,-0.110488,-0.0737602,-0.0282858}
,
{-0.065063,-0.23663,0.0575382,-0.0877671,-0.182985,0.22099}
,
{-0.0826153,0.229876,-0.0848906,0.0509403,0.111775,0.123744}
,
{-0.0987684,0.0317934,-0.28386,-0.0926725,-0.31754,-0.0554004}
,
{-0.0690543,0.163985,-0.288992,0.0571901,0.104282,0.0467691}
,
{0.19724,-0.0697874,-0.186101,0.277896,-0.0186538,-0.0994718}
,
{0.0696579,-0.044692,0.0236299,-0.108948,0.128573,0.0198177}
,
{0.152966,-0.00990946,-0.233631,0.507295,0.0366374,0.00578821}
,
{-0.027787,0.0491631,0.29712,-0.00301032,0.211325,0.117715}
,
{-0.0662857,0.0529241,-0.10433,0.0881311,-0.0773529,0.041198}
,
{-0.0597903,-0.104058,-0.0285395,0.0331623,0.135257,-0.125686}
,
{0.0412188,-0.0690953,0.0075563,-0.0380445,-0.181319,-0.028958}
,
{-0.0609083,-0.0582811,0.0435623,0.060954,0.114773,0.0469298}
,
{-0.128117,-0.145879,0.164347,0.122137,-0.119159,0.0494327}
,
{0.0924145,-0.019829,0.0557802,-0.104714,-0.299921,-0.0915829}
,
{-0.152151,-0.0652567,0.0308158,-0.0414942,0.0500627,-0.11098}
,
{0.102136,0.0802594,0.0389935,0.0988,0.0422832,-0.0569224}
,
{-0.124003,0.0607138,0.0211837,0.034629,-0.271038,0.159047}
,
{-0.0151311,0.0591337,-0.0355854,-0.00754499,-0.115319,-0.0169912}
,
{-0.130575,0.248352,-0.127142,-0.115537,-0.0635004,-0.13414}
,
{0.0447724,-0.0808377,-0.0162368,0.0545596,0.184193,0.106814}
,
{0.0979726,0.0265952,0.0522888,-0.118502,0.201805,0.115531}
,
{-0.0497038,0.158704,0.147826,0.0421926,0.069692,-0.0453405}
,
{-0.0892393,0.190429,0.0028449,0.0748905,0.111513,0.0171362}
,
{0.174483,0.05292,-0.0854238,-0.216801,0.201661,0.00406643}
,
{-0.0277671,-0.0638154,-0.0526283,-0.000881851,0.026687,0.0281667}
,
{-0.0923686,-0.25004,-0.202184,0.133432,0.0205915,-0.0151069}
,
{-0.0862949,0.218946,0.117568,0.0707094,0.0236824,-0.0702352}
,
{0.0476269,-0.00477725,0.00352767,0.0217695,-0.202175,-0.134787}
,
{-0.0951352,0.246161,0.128551,0.106569,-0.619717,0.0800231}
,
{0.0437729,-0.128983,0.0778448,-0.0429755,0.0583089,-0.0874765}
,
{-0.0199981,-0.151213,0.16241,0.0780583,0.202229,0.0504733}
,
{-0.0437962,0.132871,-0.0139224,0.0809933,0.188666,-0.106805}
,
{0.0936373,0.0833317,0.0040164,-0.118696,-0.0270981,0.077763}
,
{-0.11916,-0.263252,-0.131152,0.158712,-0.165737,0.123746}
,
{0.139958,0.0123044,-0.25401,0.00372995,-0.263406,-0.13004}
,
{0.143895,0.0604451,0.145993,-0.204848,-0.0805216,0.042741}
,
{0.188835,-0.05255,-0.0915436,-0.30275,-0.241896,-0.0754157}
,
{-0.0684312,-0.17003,-0.108351,-0.151656,-0.146594,-0.00248157}
,
{-0.0588859,0.0215543,0.054613,0.0453393,0.17346,-0.0790498}
,
{-0.0719872,-0.0271368,0.319037,-0.097868,0.188478,-0.0439817}
,
{0.111962,0.144214,0.0700885,-0.173555,0.132177,-0.0589838}
,
{-0.0783973,0.270269,0.642827,0.125202,0.00194315,-0.0294735}
,
{0.225335,0.0441215,0.296073,-0.0359514,0.0815192,0.039337}
,
{0.267526,-0.200246,-0.391338,-0.371154,-0.213787,-0.0416245}
,
{0.153818,0.154071,-0.0537956,0.213524,0.217351,0.222777}
,
{-0.12428,-0.107605,-0.0835384,-0.00665613,0.0324942,0.256406}
,
{0.197049,0.267014,-0.187879,0.281156,0.0625273,0.272224}
,
{-0.117376,0.136795,-0.172331,-0.10801,0.143515,0.229194}
,
{0.166553,0.188206,-0.0187734,0.054253,0.156869,0.0151035}
,
{0.231553,0.157087,0.0165885,0.29968,0.145944,-0.160603}
,
{-0.1465,0.0747509,0.170089,0.140175,-0.0350885,-0.0762242}
,
{-0.32476,-0.303536,0.0624703,-0.276894,0.0853419,-0.30777}
,
{0.163179,0.00131508,0.0249071,0.159488,-0.0182191,0.136686}
,
{0.0221936,0.0121617,-0.0404281,0.0216369,0.0142961,-0.165838}
,
{0.0696682,0.101515,-0.0187582,-0.000199043,0.148782,0.0949899}
,
{0.0265428,0.0194853,-0.0041484,0.0415988,-0.0780474,0.21624}
,
{0.592193,0.223995,-0.131892,-0.000836569,0.0731045,0.104438}
,
{0.0196605,0.131008,-0.0882072,0.0820787,0.00249076,0.127335}
,
{-0.0257944,0.132701,0.0354556,0.0127365,-0.20014,0.13414}
,
{0.0541385,0.00855412,-0.216119,0.152207,-0.252883,-0.084005}
,
{0.0697553,-0.0278965,-0.0725576,0.156207,0.011277,-0.128189}
,
{-0.0157456,-0.0400144,0.0373733,0.0241089,0.0772766,-0.148721}
,
{-0.0563647,0.000235971,0.0169089,-0.0820447,0.0667695,0.208186}
,
{0.0261975,-0.00323304,0.0109237,-0.0168651,0.119368,0.154536}
,
{0.00298474,0.0333752,-0.238279,0.060234,0.0744424,0.182761}
,
{0.388122,-0.194493,0.149234,-0.283943,0.0373928,-0.0110213}
,
{-0.0159185,-0.235575,-0.083849,-0.0139703,0.0539028,-0.202566}
,
{-0.0720505,0.0762334,0.155733,0.153454,-0.0258929,-0.0430614}
,
{0.244605,-0.0426003,-0.075257,0.0960131,-0.0224452,0.0429295}
 };
  static const float bias2[1] = { 0.240052 };
  static const float weights2[][1] = { {0.185407}
,
{0.118795}
,
{-0.214905}
,
{0.134003}
,
{1.31398}
,
{-0.0830968}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_0_54(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_0_54(v, index);
}
static int assign_gen_lepton_prior_5_0_54() {
  global_gen_lepton_prior.at(5,0,54) = &specialized_gen_lepton_prior_5_0_54;
  return 0;
}
static int initialize_gen_lepton_prior_5_0_54 = assign_gen_lepton_prior_5_0_54();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_1_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.107969,0.108536,-0.0550503,0.0484224,-0.0611448,-0.197173 };
  static const float weights1[][6] = { {-0.18472,-0.0586653,-0.013437,0.0931174,0.0256237,-0.081641}
,
{-0.0752769,0.0388151,-0.121269,0.146599,-0.0297179,0.03419}
,
{-0.27148,-0.00842801,0.0051898,0.0805922,-0.215728,-0.0453783}
,
{0.161594,0.0460849,0.107349,-0.239729,-0.00399253,-0.349909}
,
{0.0459441,0.0975342,-0.194781,0.16712,-0.0589791,-0.192962}
,
{0.296631,0.0170139,0.0696676,0.188585,-0.115771,0.0238348}
,
{0.0372491,0.14116,-0.0351762,0.166689,-0.0532617,0.0348926}
,
{-0.107205,-0.143835,0.0097356,0.00657886,0.0725452,-0.104396}
,
{0.0444554,0.170758,-0.239294,0.367839,0.112557,-0.0965868}
,
{-0.0951634,-0.0721523,0.0747552,0.0709548,0.05901,-0.0712739}
,
{-0.135634,-0.0869853,0.1927,0.174557,0.124426,-0.067559}
,
{-0.181417,0.0819737,0.145359,-0.18021,0.0128584,-0.00188921}
,
{0.33258,0.0549154,-0.220303,0.26694,-0.03589,-0.081828}
,
{0.239925,0.122056,0.0983489,0.222889,0.116333,-0.00949628}
,
{0.298642,0.187594,-0.0344666,0.27345,-0.104277,-0.0427085}
,
{0.034597,0.106379,-0.0780403,-0.0119059,0.0446607,0.0481615}
,
{0.206422,0.276007,-0.151197,0.130717,-0.0286433,-0.101795}
,
{0.432917,0.0656922,-0.0359772,-0.0815047,-0.0367291,-0.169824}
,
{0.594821,0.235468,0.0177919,0.343285,-0.0201406,0.0575852}
,
{0.39658,0.0755297,-0.002086,0.220643,-0.0474603,-0.0713121}
,
{-0.012526,0.0637682,-0.0755002,0.10159,0.0481084,0.074377}
,
{0.0371898,0.247273,-0.0345324,0.0896888,-0.0280284,-0.291099}
,
{0.0431128,0.153147,0.199974,-0.151195,-0.00151478,0.048416}
,
{0.0354213,-0.00555971,-0.018299,-0.0615292,-0.0223439,-0.0494024}
,
{0.0564734,0.0450703,-0.0763527,0.0302352,-0.134005,-0.00769335}
,
{-0.0288475,0.0421706,0.0283596,-0.115518,0.0468353,-0.313479}
,
{-0.0494915,0.142311,-0.142311,-0.114588,-0.0420302,-0.0733159}
,
{0.0383196,0.0306715,-0.0750867,0.191546,0.139108,-0.112488}
,
{0.0113203,0.0859599,-0.00249616,0.108986,0.103389,-0.338194}
,
{0.120825,-0.0716273,0.0966308,0.223348,-0.0173274,-0.129875}
,
{0.0120597,0.183137,-0.173459,-0.0886203,-0.0755186,0.0111889}
,
{-0.0266965,0.138452,0.156277,-0.0684946,-0.0880562,-0.0921273}
,
{-0.0837544,-0.161057,-0.0825791,0.0252773,0.01927,0.0510281}
,
{-0.200025,0.0272013,-0.0346574,-0.0690001,-0.0352738,-0.140774}
,
{-0.184784,-0.115495,-0.0140895,0.214775,0.209568,0.0259459}
,
{0.129387,0.0283261,-0.0517909,-0.198913,0.0371689,-0.0073055}
,
{-0.145784,-0.0396448,-0.123358,0.107625,-0.0586886,-0.0604685}
,
{-0.323677,0.143159,-0.0149827,-0.0980867,0.0252721,0.0013364}
,
{-0.208823,-0.165749,-0.00738169,0.0706464,0.0420103,0.00261857}
,
{-0.0881854,0.0918106,0.0456695,0.0638265,0.0116821,-0.197571}
,
{0.169976,-0.191337,-0.100217,-0.082801,-0.0354824,-0.0388387}
,
{-0.0511377,0.0440223,-0.0649123,0.0884339,0.046953,-0.137839}
,
{0.120759,-0.172863,-0.098984,0.014544,0.0330546,-0.11745}
,
{-0.0643747,-0.00286278,0.00421246,-0.0525616,-0.0607792,-0.0736335}
,
{-0.0809779,0.141089,-0.0118907,0.0518431,-0.0216282,-0.0281544}
,
{0.0596909,-0.0572665,-0.0223925,-0.032432,-0.0415485,0.0794317}
,
{0.0837902,-0.00428219,-0.0319672,-0.235691,-0.0801683,-0.0304176}
,
{0.00493976,-0.0794081,0.0887396,-0.168988,-0.00502517,0.101289}
,
{0.0428574,0.0313094,-0.0095103,-0.0151907,0.264933,-0.095007}
,
{0.203414,-0.315658,-0.0363502,0.0252364,-0.0890255,0.075582}
,
{-0.0121512,0.00668577,-0.0580517,-0.0980981,0.00168369,-0.171333}
,
{0.0463195,-0.0649246,-0.0822803,-0.150224,0.0411576,0.0917426}
,
{0.119591,-0.170924,-0.121182,0.276543,-0.00386563,0.0126092}
,
{-0.0103888,-0.0155244,-0.0866125,0.0692476,0.0475679,0.174931}
,
{-0.0488264,0.101468,0.223965,0.00566118,-0.130974,0.0873515}
,
{0.153736,0.029328,0.0929212,-0.0749861,0.0154218,-0.0873348}
,
{-0.150284,0.0415527,0.145861,0.0975818,-0.0540815,0.373034}
,
{-0.142469,-0.173919,-0.0123441,-0.0772077,-0.187923,0.283017}
,
{0.00579081,0.235793,0.0287013,-0.00977346,-0.346477,0.167414}
,
{-0.0577057,-0.115308,0.173996,0.0351935,0.136918,-0.0232743}
,
{0.260126,0.166047,0.117642,-0.0372028,-0.0503855,-0.0235123}
,
{-0.142619,-0.0801453,0.158851,-0.0760704,0.204399,-0.18864}
,
{-0.17723,-0.0378743,-0.0762356,-0.0497987,0.00151273,-0.0207444}
,
{-0.0931468,0.0138644,-0.071742,0.0290351,0.0285843,0.0987041}
,
{0.0641676,-0.0139487,0.060364,-0.0670988,-0.00427033,0.00657498}
,
{-0.0300498,0.0467284,-0.0485869,-0.158915,-0.11492,0.178076}
,
{0.102574,-0.0209954,-0.169478,-0.0863689,0.100706,-0.252166}
,
{0.224559,0.207054,0.0966924,0.0193843,-0.0649197,-0.172914}
,
{0.0235572,0.0226054,-0.097515,-0.0679044,-0.0426041,-0.0933054}
,
{0.111256,0.201991,0.197028,0.0752289,0.120178,-0.150754}
,
{0.11173,0.0568691,-0.050456,-0.275127,0.11835,0.0335559}
,
{0.00343608,-0.133026,-0.115508,0.0208523,0.0541005,-0.154041}
,
{0.0146444,0.17914,0.103685,-0.163853,0.0434755,-0.00598426}
,
{0.0241838,0.0115373,-0.0674957,0.0763254,0.044655,-0.086749}
,
{-0.148752,-0.105379,0.0947205,0.00221931,-0.0578142,0.0270927}
,
{-0.0504116,0.0173852,0.0821541,-0.0639102,-0.0398503,0.204279}
,
{0.0733734,0.030707,0.168269,-0.00372522,0.293608,0.14727}
,
{-0.00646094,0.165447,0.0864666,-0.0821862,-0.255787,0.189881}
,
{-0.230731,0.262194,0.135024,0.0891526,-0.109504,0.00229995}
 };
  static const float bias2[1] = { 0.216969 };
  static const float weights2[][1] = { {0.0873914}
,
{0.0942887}
,
{-0.122292}
,
{0.11859}
,
{0.0156987}
,
{0.0639218}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_50(v, index);
}
static int assign_gen_lepton_prior_5_1_50() {
  global_gen_lepton_prior.at(5,1,50) = &specialized_gen_lepton_prior_5_1_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_50 = assign_gen_lepton_prior_5_1_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_1_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 1.07824,0.362317,-0.0827306,0.0176107,0.836579,0.700667 };
  static const float weights1[][6] = { {0.617821,-0.433155,-0.418112,-0.407603,-0.566371,-0.643893}
,
{0.00766966,-0.113852,0.0239996,0.269332,-0.155945,0.183086}
,
{0.105182,0.0657491,-0.161607,0.224876,-0.0600191,-0.0424846}
,
{1.46154,1.2472,-0.0954061,0.0555954,1.94156,1.51114}
,
{0.99036,0.469464,-0.175858,0.088894,0.585243,0.632929}
,
{0.981512,0.234273,-0.025768,0.242805,0.890012,0.406167}
,
{0.879767,0.344159,-0.111452,-0.142365,0.540893,0.356683}
,
{0.124046,-0.045977,0.0717046,0.0127658,0.139229,-0.0712306}
,
{-0.420263,-0.0428023,-0.0268159,-0.130481,0.27909,0.404883}
,
{-0.0464508,0.183205,0.161117,0.0440148,0.152523,-0.175074}
,
{-0.10809,0.155929,0.0359047,0.0130796,0.0188952,-0.0682296}
,
{0.0115341,0.20951,-0.150799,0.0211918,-0.117709,0.0698705}
,
{0.0499654,0.250532,0.00655495,0.158633,0.431941,-0.0420942}
,
{0.0457272,-0.0956551,-0.287174,0.168487,0.0878071,-0.104316}
,
{-0.33842,-0.101007,-0.255949,-0.121637,0.241168,0.0732642}
,
{0.0920638,0.183099,0.162098,0.163315,-0.145425,-0.103161}
,
{-0.492948,0.148137,0.0603999,-0.0361768,-0.0641937,-0.163899}
,
{0.0122367,-0.116557,-0.0991717,0.0929516,0.0458379,-0.0141348}
,
{-0.0667101,0.126522,-0.234761,-0.036297,-0.0186004,-0.0173792}
,
{-0.396831,0.0796161,-0.185265,-0.167424,0.0494229,-0.0208609}
,
{-0.0495398,0.00612091,-0.114594,-0.246683,-0.01668,-0.0607994}
,
{-0.115597,0.118208,-0.10394,0.105274,-0.0462303,-0.0416887}
,
{-0.00533323,-0.0910687,-0.125526,0.0694167,-0.220653,-0.0640336}
,
{-0.109408,0.0889684,-0.198418,-0.0192855,-0.150085,0.103312}
,
{-0.0112397,-0.0128978,-0.2349,-0.0327844,-0.172562,-0.175977}
,
{0.00295155,-0.0469816,-0.301021,-0.567421,-0.0587087,0.0804666}
,
{0.0145959,-0.0409707,-0.126854,-0.304778,-0.0234557,0.0835097}
,
{0.0162502,0.0564596,-0.291424,-0.359051,0.178349,-0.172921}
,
{-0.0798694,-0.00431162,-0.228883,-0.128564,0.917527,0.346802}
,
{0.0118478,-0.0487072,-0.0706293,0.00679871,0.0167801,0.10407}
,
{-0.0149172,0.0929666,-0.0201468,-0.0137972,-0.101115,0.0126625}
,
{-0.00936218,0.1292,-0.0285584,0.153362,-0.133511,0.0696851}
,
{0.0336682,0.0130737,-0.246858,0.038047,0.0077992,0.0991254}
,
{-0.0367923,-0.142424,0.0423893,0.0760217,-0.157354,0.282504}
,
{0.0826185,-0.0630325,-0.0144967,0.124309,-0.09058,0.109498}
,
{-0.0130021,-0.00959816,-0.00165019,0.0571525,-0.0355264,0.0413581}
,
{0.0113161,-0.148562,0.00165735,-0.387565,0.0887818,0.0620787}
,
{-0.115251,0.116684,-0.101495,-0.116552,-0.0066692,-0.0777403}
,
{-0.0835131,-0.0811199,-0.020859,-0.00658052,-0.0396368,0.06631}
,
{0.113123,-0.179605,0.0465574,0.0635649,0.0253659,0.134682}
,
{0.00980194,0.0369025,-0.0483991,-0.00446587,-0.0579011,0.0303891}
,
{0.0991334,-0.0412171,-0.0932408,-0.247181,-0.0804584,-0.0441919}
,
{-0.176208,-0.221405,-0.072838,0.179303,0.0543975,0.175834}
,
{0.0717198,-0.00766707,0.026458,0.130174,0.204633,-0.124891}
,
{0.0834402,0.0724969,0.206486,0.0464166,0.0324842,-0.0149268}
,
{0.00721643,0.00555745,-0.014746,-0.0749621,0.00786959,-0.0125619}
,
{-0.0130435,-0.00778401,0.0121208,-0.0441174,0.11098,-0.0559664}
,
{-0.0301711,-0.0606761,-0.148166,-0.0654737,0.0740269,-0.092848}
,
{-0.108866,-0.0679895,-0.0559554,-0.177636,0.0710773,-0.0744793}
,
{-0.0432076,-0.142934,-0.0646686,0.0277074,0.134103,-0.132911}
,
{-0.000218658,-0.019684,-0.00440491,0.00551672,0.0229028,-0.0214912}
,
{0.0147104,0.0177641,0.0492413,0.132687,-0.00773146,0.0192646}
,
{0.0130609,0.0702848,0.0697415,0.0671404,-0.047064,0.134712}
,
{0.0022318,-0.0786505,-0.104868,0.0338445,0.0702343,0.0238546}
,
{0.0040886,-0.114933,-0.0960714,0.0293253,0.0202548,-0.0682428}
,
{-0.00644626,-0.115917,-0.0524659,0.0604791,0.0278576,0.0405635}
,
{-0.0845223,-0.0654819,-0.180031,0.507934,-0.243635,-0.0251764}
,
{0.0784738,0.22667,-0.0134363,0.0555407,0.0322212,0.22022}
,
{-0.0629187,-0.0261826,0.0321783,-0.0152451,-0.0303075,-0.0563315}
,
{0.0062503,0.0846565,0.031979,0.000248543,0.0720166,-0.0614996}
,
{0.00721384,0.0830125,-0.0398313,-0.0378963,-0.00947493,-0.00944223}
,
{-0.0912328,-0.146569,-0.0951922,0.320345,-0.276387,-0.0167275}
,
{-0.0142592,0.0773832,0.144861,0.215669,-0.0612293,0.0394312}
,
{0.0318455,0.0919748,-0.133723,0.00872316,0.0451007,0.00438862}
,
{-0.00490734,-0.091,0.11831,0.104385,-0.146618,-0.132173}
,
{-0.00715837,-0.0582703,0.075126,-0.132028,0.0508784,-0.0696397}
,
{0.0376722,-0.0547074,0.143385,0.609348,0.449452,-0.192618}
,
{-1.51827e-05,0.0248929,-0.131696,-0.0559152,0.171761,0.226919}
,
{0.0073713,0.0471041,0.0997876,0.0877123,-0.0369347,-0.0195013}
,
{0.0417136,0.113402,-0.0747905,0.0518625,0.0691554,-0.121416}
,
{-0.00195728,0.0648272,0.0567253,0.0149396,-0.0274543,0.0211439}
,
{-0.0174873,-0.0382249,0.0316136,-0.03067,0.0537975,0.302833}
,
{0.184806,0.0506443,-0.0368118,-0.0412481,0.170074,0.203824}
,
{-0.214399,0.0478056,0.0032129,0.156464,-0.127969,-0.178275}
,
{0.0543805,-0.10503,0.152545,-0.193989,0.247677,-1.20544}
,
{-0.0467946,-0.258519,0.131331,0.0625991,-0.0571182,0.0278588}
,
{-0.267778,0.728217,0.0264479,-0.0761426,0.0954416,-0.775685}
,
{-0.111649,0.176621,0.200531,-0.307339,0.197391,-0.982143}
,
{-0.147732,0.0805477,0.188696,-0.213707,0.128431,-1.08923}
 };
  static const float bias2[1] = { 0.541062 };
  static const float weights2[][1] = { {-0.173255}
,
{0.0216817}
,
{-0.101596}
,
{-0.0236164}
,
{0.0245179}
,
{0.0292968}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_51(v, index);
}
static int assign_gen_lepton_prior_5_1_51() {
  global_gen_lepton_prior.at(5,1,51) = &specialized_gen_lepton_prior_5_1_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_51 = assign_gen_lepton_prior_5_1_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_1_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.182725,0.216393,0.0640983,0.574482,0.0940422,0.0416714 };
  static const float weights1[][6] = { {-0.409204,-0.382214,-0.182736,0.263736,-0.14113,-0.501034}
,
{0.00554369,-0.174395,-0.0926313,0.790719,0.107121,-0.0107607}
,
{-0.0254915,0.360373,0.139303,0.676681,0.0752994,-0.306318}
,
{0.386511,1.33657,0.091871,1.33227,1.11028,0.906099}
,
{0.0963645,0.0577566,0.276241,0.581409,0.192083,0.143061}
,
{0.110405,0.33027,0.0212835,0.295795,0.160356,-0.0455027}
,
{-0.0253561,0.263635,-0.16755,0.268325,0.0550985,-0.251203}
,
{0.142333,0.0505659,-0.0433816,-0.0708995,-0.222681,-0.00120336}
,
{0.265916,0.256683,0.256962,-1.30194,-1.18558,0.127366}
,
{-0.0712842,0.00588217,-0.162014,0.171097,0.00955113,0.0490356}
,
{0.0171871,0.204071,0.0425388,-0.167234,-0.0258903,-0.0202272}
,
{-0.113525,0.128479,-0.218012,-0.0134801,0.0239438,-0.0521843}
,
{0.161051,-0.139706,0.187259,-0.319957,-0.246595,0.211288}
,
{0.0609466,-0.0814852,-0.0378551,-0.141992,-0.120162,0.187141}
,
{0.279496,-0.195845,-0.0112882,-0.290776,-0.331037,0.148145}
,
{0.103187,0.142843,-0.195066,0.00432784,-0.0199779,-0.0786295}
,
{0.407874,0.00925385,0.0756095,-0.272015,-0.461193,0.0236115}
,
{0.0601336,0.1487,-0.129289,-0.200834,-0.284928,0.109421}
,
{0.0667489,-0.153253,-0.0157013,0.0373995,-0.152375,-0.0295374}
,
{0.109466,-0.211217,0.0291766,-0.0598793,-0.333042,0.0971316}
,
{0.232477,0.0205076,-0.0743833,-0.16581,0.0180973,-0.107344}
,
{0.160404,-0.0110958,-0.0196076,-0.470701,-0.0579124,-0.1722}
,
{-0.0110114,-0.0377756,-0.113586,0.0917441,-0.129299,-0.104264}
,
{-0.108423,0.141035,0.0983912,-0.27885,0.00630498,0.0411522}
,
{-0.114133,-0.199511,-0.0159811,0.10002,0.142861,0.12323}
,
{0.0641554,-0.134743,-0.104601,0.0740895,-0.0315155,-0.105816}
,
{-0.0743842,-0.299134,-0.19662,0.0040379,-0.0381097,0.0835717}
,
{-0.0331268,-0.00464875,0.0267285,0.0157106,0.0117319,-0.183942}
,
{-0.179631,-0.867552,0.0551966,-0.124586,-0.305482,-0.0596753}
,
{-0.0183242,0.0111644,0.048536,-0.0199282,-0.0131709,0.015921}
,
{0.210451,-0.0519757,-0.0908203,0.0860551,-0.109912,-0.0972098}
,
{0.092315,0.16635,0.114848,-0.138473,0.129292,-0.107892}
,
{-0.0630957,0.0649183,-0.0764037,0.0191859,-0.0637597,-0.112014}
,
{0.0177427,-0.120788,-0.0865897,-0.0741455,-0.0203046,0.239956}
,
{0.0327039,-0.0600581,-0.0966037,-0.114938,0.110284,0.0861749}
,
{0.043133,0.0552007,0.0175846,0.0332244,-0.184183,-0.132935}
,
{-0.106523,-0.149552,0.0944942,0.0989609,0.0900404,-0.217727}
,
{-0.117805,-0.0109143,0.0288124,0.0379666,-0.0975666,0.03862}
,
{-0.168682,0.136078,0.165906,-0.395671,-0.150743,0.123974}
,
{0.0577878,-0.0895712,-0.151194,-0.148421,0.0369398,0.323734}
,
{-0.0531687,0.0904253,0.0366614,0.0767536,0.0418226,0.0327669}
,
{-0.0745329,0.38135,0.205541,-0.174777,-0.213455,-0.211555}
,
{-0.0595961,-0.127423,-0.149915,-0.0257152,0.132337,0.266498}
,
{-0.0371539,-0.131356,0.0308542,0.142559,-0.0440281,-0.0137384}
,
{0.153462,0.0185882,0.0560263,0.170625,-0.0114825,-0.165427}
,
{0.016671,-0.00959476,-0.0172743,-0.0323735,0.0458817,0.00428842}
,
{-0.0239995,0.0858828,0.0996467,0.318586,0.307316,-0.0402939}
,
{0.182002,0.10908,-0.299234,0.15762,-0.232194,0.0236716}
,
{0.142615,0.210536,-0.0213233,-0.117293,-0.0378253,0.0436243}
,
{-0.0972821,0.0021762,0.0976717,-0.0700145,0.0689397,0.0741727}
,
{0.00406487,-0.00117026,-0.0249668,0.110318,0.0419639,0.0706905}
,
{-0.279295,-0.135738,0.0866694,-0.061121,-0.134586,0.167283}
,
{0.0436038,-0.0694832,-0.172142,-0.0171619,0.193782,0.101087}
,
{-0.0975461,-0.119362,0.014026,-0.0215451,-0.0605622,0.080931}
,
{0.110903,0.0640136,0.0818801,0.00742374,-0.140993,-0.0185571}
,
{-0.0973548,-0.021545,0.17892,-0.0870904,0.144511,-0.172365}
,
{0.780436,-1.24494,0.158449,-0.10364,-0.122488,-0.778368}
,
{0.128412,-0.0230738,-0.0846808,0.119266,-0.104909,0.0694269}
,
{0.0303981,-0.0609264,-0.0145303,-0.0553328,0.161209,-0.0637325}
,
{0.125712,-0.0259328,0.125365,0.0773576,0.196102,0.0712647}
,
{0.0421744,0.057391,-0.0105358,-0.00476766,-0.00718095,-0.0398137}
,
{0.870618,0.0238682,0.265061,-0.453995,-0.353886,0.0936366}
,
{0.164426,-0.210238,-0.0974635,0.0262755,-0.00703871,0.0406083}
,
{0.226365,-0.00746835,-0.0426169,0.0753242,0.0104231,0.001214}
,
{-0.106588,0.117957,-0.0367604,-0.0148095,-0.0531237,-0.0463047}
,
{-0.00500548,-0.0798295,-0.00265453,0.0446147,-0.0134105,0.0372204}
,
{0.387349,-0.358561,-0.162813,0.116275,0.143859,0.1108}
,
{-0.0787892,-0.011653,-0.05527,-0.0396585,0.0314772,0.0176569}
,
{-0.104128,0.0781288,0.285271,-0.0433346,0.0193866,0.250817}
,
{0.224766,0.0745303,0.0877263,-0.00166106,-0.0830608,-0.0308372}
,
{0.056364,-0.00248963,-0.158718,0.0273327,-0.128746,0.045647}
,
{-0.623117,0.212589,-0.303187,0.15176,-0.243774,0.781079}
,
{0.124574,0.0336804,-0.0333794,0.0458341,-0.0362474,-0.201351}
,
{0.248125,0.0121487,-0.101742,0.153244,0.0096814,-0.208917}
,
{-0.0585982,0.191494,0.111875,0.0238229,0.00977703,0.492126}
,
{0.301355,0.155093,-0.0859898,0.0606496,0.0511692,-0.0819719}
,
{0.00696759,-0.126022,-0.106462,-0.0894997,0.0378199,0.0411631}
,
{0.106588,-0.0309736,0.168068,-0.0670688,-0.123436,0.260688}
,
{-0.0065461,0.176477,0.049444,0.141727,0.00883446,0.18777}
 };
  static const float bias2[1] = { 0.0296675 };
  static const float weights2[][1] = { {0.0391966}
,
{-0.0452241}
,
{0.0686397}
,
{-0.100764}
,
{-0.0877451}
,
{0.0369994}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_52(v, index);
}
static int assign_gen_lepton_prior_5_1_52() {
  global_gen_lepton_prior.at(5,1,52) = &specialized_gen_lepton_prior_5_1_52;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_52 = assign_gen_lepton_prior_5_1_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_1_53(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.369077,-0.175179,-0.0762124,-0.216421,-0.0507311,-0.0218378 };
  static const float weights1[][6] = { {0.128339,0.0733701,-0.0597118,0.0528336,-0.0896433,-0.0654115}
,
{0.128621,-0.219517,0.121308,-0.117269,0.341386,-0.142572}
,
{0.0453254,0.24172,0.068469,0.322763,-0.0628909,0.0435359}
,
{0.474924,-0.707198,-0.330537,-0.684285,0.114247,0.748755}
,
{0.25398,-0.242237,-0.0657434,-0.313217,0.196004,-0.00931631}
,
{0.321269,-0.17329,-0.0765164,-0.310519,-0.0168195,0.166227}
,
{0.451997,-0.17941,0.0677928,-0.127729,-0.014826,-0.0200989}
,
{-0.0884524,0.112631,0.0602815,-0.34373,0.0144239,-0.103921}
,
{0.0175768,0.293269,0.15657,0.0359414,-0.10634,0.0075602}
,
{0.0888377,0.139424,0.150877,0.0461869,-0.189089,0.0240602}
,
{-0.0464665,0.0782157,-0.111799,0.121488,-0.00172551,0.140435}
,
{0.121401,0.100697,0.093458,0.173828,-0.0476697,0.170504}
,
{0.188828,0.169443,0.0917604,0.0687969,0.307521,0.0830356}
,
{0.230066,0.0593162,-0.0117754,0.21229,-0.118848,0.0382825}
,
{-0.182153,0.0958036,-0.0675896,0.268447,0.10848,-0.14714}
,
{0.021639,-0.0182833,-0.200868,-0.0101884,0.0875298,0.0230318}
,
{-0.13573,0.315771,-0.169938,0.0370172,0.19988,-0.0967225}
,
{0.0455897,-0.0752146,0.186264,0.10673,0.047247,0.0274363}
,
{0.0427395,-0.0491208,-0.0853349,0.0499245,0.0693263,-0.0111755}
,
{-0.10624,-0.060232,0.00665547,-0.0671313,0.178519,-0.032698}
,
{-0.0606766,-0.0798493,-0.029036,-0.0578026,0.0569899,-0.0618384}
,
{0.017816,0.106612,-0.0995608,-0.0175576,0.0482612,-0.0182873}
,
{-0.136469,-0.0505544,0.0809888,-0.0896872,-0.0598927,0.0172203}
,
{-0.0489108,-0.0384772,0.0695344,0.0361519,-0.100647,0.0455492}
,
{-0.0150615,-0.0363885,-0.237873,-0.146989,0.00253367,-0.0511211}
,
{-0.00801655,-0.231615,-0.105109,0.0131793,0.0498057,-0.146443}
,
{0.0177087,-0.0250742,-0.126588,-0.00857316,-0.153888,-0.254729}
,
{0.201238,0.0575085,0.0581695,-0.0505402,-0.147348,-0.0470684}
,
{0.113306,-0.0620794,-0.0627976,-0.0288059,-0.205266,-0.0263429}
,
{-0.179719,0.136778,-0.013664,0.0210501,-0.0683777,0.13854}
,
{-0.0763195,0.160501,-0.318869,-0.0422327,-0.0842625,0.177842}
,
{0.180875,-0.130536,-0.0734852,0.118719,0.0167851,-0.100839}
,
{0.202482,0.0429502,0.0798527,-0.0055621,0.0446423,0.0842243}
,
{0.00901007,0.185225,-0.17013,0.138885,0.488364,-1.25709}
,
{0.00509056,-0.089109,0.0518015,0.314499,-0.092393,0.0880641}
,
{-0.015039,-0.00693175,-0.0114536,-0.0863408,0.0259538,0.0383566}
,
{0.228017,1.68647e-05,0.00855766,0.0221151,0.260573,-0.314677}
,
{0.0152797,0.167832,-0.0912771,0.0857689,-0.0680614,-0.10461}
,
{0.0941563,0.113123,-0.113196,0.00522747,0.0667195,-0.136452}
,
{0.0956803,0.00523337,0.0745053,-0.137585,-0.0616546,0.0157376}
,
{0.0148843,0.0490671,-0.00682321,-0.05301,-0.00614222,0.0282747}
,
{0.251201,-0.0163314,0.0394996,0.527223,0.0417523,0.0687248}
,
{-0.0661032,0.107488,-0.0962076,-0.0824531,0.191098,-0.17172}
,
{0.0714044,-0.0913439,-0.0031828,0.268717,-0.0337819,0.122153}
,
{0.0471347,0.0591354,0.201059,0.12829,-0.0183024,0.212583}
,
{-0.0179705,0.00956843,-0.0580874,-0.0241576,-0.0213786,0.0102266}
,
{0.374599,-0.177907,-0.21172,0.0577314,0.417675,0.127792}
,
{-0.116328,-0.0438117,0.0805879,-0.0431004,-0.108387,-0.255517}
,
{-0.153285,0.052094,-0.00557527,-0.258279,0.0260328,0.000787975}
,
{0.048952,-0.0643107,-0.243199,0.310053,-0.0169814,0.141746}
,
{0.0085743,-0.0442695,-0.0431399,0.0621551,0.0808556,-0.0577746}
,
{0.444824,-0.515846,0.162822,0.291533,0.350856,0.203045}
,
{0.179122,-0.218285,0.0527362,0.202871,0.148407,-0.0706981}
,
{-0.0878496,0.136111,0.0401672,-0.207488,-0.0534325,0.122852}
,
{0.15684,0.178819,0.0412898,0.0956192,-0.0796904,-0.0230346}
,
{0.127933,-0.106025,0.0826771,0.0517134,0.15696,0.0128565}
,
{0.0652592,-0.121861,0.0709667,-0.145058,-0.025589,-0.179452}
,
{-0.0742663,-0.0549252,0.173654,0.0275572,-0.00954635,-0.0194192}
,
{0.0050366,-0.0704819,-0.125143,-0.108336,0.0987973,0.0808434}
,
{0.0518206,-0.0371096,0.0191263,-0.165925,-0.112411,-0.00959897}
,
{-0.171942,-0.161709,-0.0393619,0.0326261,0.0109977,0.0200102}
,
{-0.128563,-0.201117,0.206984,-0.0889269,0.0801137,0.0135346}
,
{-0.0468049,0.0813452,0.0486834,0.0992316,-0.0291491,-0.192599}
,
{-0.100208,0.0683241,-0.230753,-0.135302,-0.139495,0.00704628}
,
{0.0125887,0.0473522,0.0895312,-0.189428,0.13257,-0.0279554}
,
{-0.0290523,0.0955251,-0.177189,-0.034935,-0.0798689,0.158194}
,
{0.119592,0.147317,-0.0423281,0.0364276,0.0109216,0.0560874}
,
{0.0586676,0.0562039,0.0783529,0.199901,-0.0251482,0.122105}
,
{0.0781284,-0.152372,0.20452,0.0608846,0.00294383,0.0414204}
,
{-0.0314189,0.0232281,0.00925087,-0.182981,-0.0413623,-0.219556}
,
{0.108838,-0.0377408,-0.0374399,-0.0921514,0.040312,0.0119111}
,
{-0.0913544,-0.0433603,-0.0640588,0.0348844,-0.0419298,-0.0811593}
,
{-0.0175214,0.0294458,-0.0309044,0.0339204,-0.0856851,-0.102325}
,
{-0.177412,0.167897,-0.0751221,-8.91447e-05,-0.102475,-0.041246}
,
{0.177179,0.00332414,-0.0198093,-0.0453639,0.162595,-0.0691698}
,
{0.211469,0.125641,0.091366,-0.0938972,0.0632895,0.150162}
,
{-0.137463,0.00355321,0.0979876,-0.000396986,0.0740146,0.0118705}
,
{-0.0185681,-0.00729364,0.0170145,-0.0652979,-0.132925,0.0851012}
,
{-0.167951,-0.0681085,0.216337,-0.055567,0.0745014,0.124112}
 };
  static const float bias2[1] = { -0.10149 };
  static const float weights2[][1] = { {-0.130294}
,
{0.0691693}
,
{0.0922197}
,
{0.0716012}
,
{0.0761489}
,
{0.0908467}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_53(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_53(v, index);
}
static int assign_gen_lepton_prior_5_1_53() {
  global_gen_lepton_prior.at(5,1,53) = &specialized_gen_lepton_prior_5_1_53;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_53 = assign_gen_lepton_prior_5_1_53();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_1_54(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0450666,-0.162275,-0.0657967,0.191002,-0.144243,0.223788 };
  static const float weights1[][6] = { {0.00571963,0.110977,-0.198655,-0.034372,0.150852,0.0635624}
,
{0.107189,-0.353334,0.110381,-0.0339271,-0.0186314,0.0730865}
,
{0.219804,0.162449,0.180331,0.0081547,-0.0345839,0.321993}
,
{-0.442741,0.038236,-0.0114583,0.673185,-0.184934,1.0425}
,
{0.244759,-0.099155,0.0498117,0.112768,-0.304351,0.253789}
,
{-0.0621642,-0.169672,-0.232179,0.0935418,-0.10611,0.326265}
,
{-0.0108216,0.0247323,-0.0641131,0.383475,-0.0954882,0.261168}
,
{-0.110792,0.0569123,0.314524,0.187313,0.0248642,0.160959}
,
{-0.21203,-0.0983862,0.0912529,8.34619e-05,0.334008,6.31342e-05}
,
{-0.0794662,0.168338,0.0363404,-0.0930106,0.214899,-0.01302}
,
{-0.092812,0.102746,0.113312,-0.00503539,0.103727,-0.0784584}
,
{0.00613448,-0.186865,0.0734555,0.0304304,-0.197372,0.218436}
,
{0.0325257,0.135465,-0.0580481,-0.0823594,0.0673823,-0.0933722}
,
{-0.178197,-0.125294,0.0463027,0.0213,0.0164551,0.209476}
,
{-0.00986396,-0.030524,-0.365457,-0.23095,0.327263,-0.203717}
,
{0.0391556,0.0906603,-0.149438,-0.109349,0.215338,0.200025}
,
{0.0694278,-0.140566,-0.307483,-0.285914,0.274751,-0.159657}
,
{0.18605,-0.141509,0.127067,0.205807,0.15026,-0.219826}
,
{0.00990052,-0.0027079,0.0528968,0.0813585,0.0780947,-0.00990027}
,
{0.0440503,0.0679436,0.0751757,0.0440385,0.0650939,-0.199539}
,
{-0.0564347,0.035281,0.101097,0.0690899,0.0139811,0.00256353}
,
{0.125736,0.0451804,-0.0298008,0.0883599,0.125743,0.10255}
,
{0.0994684,0.00686128,-0.0131749,0.154521,0.217781,-0.116133}
,
{-0.102862,-0.055866,-0.0284691,-0.0385213,0.0540436,-0.0381042}
,
{-0.0941816,-0.0751644,0.0856039,0.0354148,0.108704,-0.0978478}
,
{0.0723647,-0.189829,-0.101853,0.0584392,-0.0156855,-0.00898621}
,
{0.00172328,-0.109173,0.122046,0.0275465,-0.294131,0.0198554}
,
{0.0234267,-0.0170177,0.0313928,-0.0863286,-0.0724506,-0.115717}
,
{0.0438086,-0.15176,-0.0848918,0.0505248,0.0615304,-0.0966611}
,
{-0.0441845,0.0263832,0.0740451,0.0320803,0.00365207,-0.014879}
,
{-0.388412,0.269337,-0.388753,-0.0772828,0.239475,-0.0264082}
,
{-0.135685,-0.205431,0.0374246,-0.243004,-0.0456823,-0.010131}
,
{0.0678887,0.151648,0.167622,0.185204,-0.0617553,-0.125634}
,
{-0.0652877,0.412627,-0.00735863,0.0757075,-0.0729023,0.0024693}
,
{-0.0968143,0.00360738,-0.0270638,-0.0438083,-0.0578676,-0.0111916}
,
{0.246354,-0.016213,-0.130597,-0.0873685,-0.2071,0.0599361}
,
{-0.672556,-0.710393,-0.51485,-0.475888,0.42341,-0.0242447}
,
{0.0295125,-0.0635643,-0.200393,-0.0674556,0.0767567,0.100184}
,
{0.178956,-0.0386474,0.096614,0.132555,-0.0803533,-0.0641615}
,
{-0.168086,-0.00131699,0.154913,-0.101946,0.0419057,-0.0255334}
,
{-0.0642552,0.0598964,-0.00300904,0.00412321,-0.0132428,-0.0225284}
,
{0.271407,-0.616238,-0.243021,-0.170558,0.157893,-0.0441344}
,
{-0.20469,0.00437751,-0.0989776,-0.0619729,-0.129042,-0.0500988}
,
{0.41372,0.0660502,0.0849477,0.0301736,-0.289147,0.254992}
,
{0.0497796,-0.214861,0.072502,-0.00699158,-0.0998505,-0.0168314}
,
{0.178779,0.00461443,-0.0699544,0.10941,0.123143,-0.102584}
,
{0.518871,0.145697,0.198505,0.0596993,-0.264428,0.125615}
,
{0.160726,0.0127907,0.196846,0.114848,0.0902118,-0.0106586}
,
{0.147749,0.217479,-0.172714,0.0533297,0.091415,-0.503197}
,
{-0.107775,0.104959,0.240117,0.101987,0.0883132,0.0497468}
,
{-0.14606,-0.0032873,0.271845,0.0288351,-0.122032,-0.0742556}
,
{0.0319215,-0.213458,-0.317618,-0.261636,-0.0521918,-0.0875709}
,
{0.139461,-0.172821,0.1643,0.0730842,-0.155311,-0.251716}
,
{0.44082,-0.176178,-0.115547,0.111354,0.113605,-0.163912}
,
{0.0294371,-0.108441,-0.0941013,0.231644,-0.131478,0.0956622}
,
{0.145892,-0.0341232,-0.0741012,-0.129466,-0.0349634,0.044274}
,
{-0.132984,-0.0736921,0.0437848,-0.235683,0.137144,0.202372}
,
{-0.0128994,0.0554997,-0.00636904,-0.129908,-0.0143917,0.0962047}
,
{-0.0944102,0.10013,0.129239,-0.0286375,0.123366,0.138657}
,
{0.0391295,-0.0398864,-0.0360434,-0.0249316,0.105585,-0.132445}
,
{-0.0407546,-0.0798294,-0.0739187,-0.115907,0.00227049,0.250539}
,
{0.0571145,0.0184799,-0.0579717,-0.101818,0.137488,-0.16149}
,
{0.0039325,0.00848891,0.031907,0.106642,0.140678,0.12588}
,
{0.0756362,0.0255466,0.166164,0.103129,0.126107,0.208443}
,
{-0.0828521,0.021299,0.00913784,-0.00598618,0.111337,-0.0484953}
,
{0.0385914,0.0538798,0.00714557,0.025692,-0.00860847,0.116954}
,
{-0.0294714,-0.106754,0.046664,0.157963,0.00390048,-0.135228}
,
{-0.0113115,-0.0622263,-0.0497482,0.145806,0.0481152,-0.121891}
,
{0.0196223,-0.0629204,0.0486134,-0.052554,-0.112434,-0.0583076}
,
{-0.0828859,-0.0144285,0.240433,-0.142208,-0.0324431,-0.177005}
,
{-0.069982,0.124878,-0.0789924,-0.23819,-0.034068,-0.0260853}
,
{-0.0559086,0.0231626,-0.101649,0.0507883,0.00803793,0.160378}
,
{0.0804045,0.077017,-0.174849,0.0383299,-0.068807,-0.16801}
,
{0.00404151,-0.0230016,0.00155863,-0.0561646,0.0909166,-0.0985253}
,
{0.0381345,0.0399735,-0.133208,-0.0116173,0.0754826,0.200755}
,
{-0.180169,-0.0870013,-0.0854278,0.206654,-0.130013,0.0164687}
,
{-0.0161582,0.0930176,0.0353557,0.0184936,-0.0171088,0.161251}
,
{0.0691707,0.0148759,-0.217752,-0.0851233,0.0182581,0.154659}
,
{0.00881409,-0.050938,-0.0578618,-0.0424502,0.156268,-0.244453}
 };
  static const float bias2[1] = { -0.130743 };
  static const float weights2[][1] = { {0.0931212}
,
{0.129613}
,
{0.113167}
,
{-0.16399}
,
{0.0929996}
,
{-1.24398}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_1_54(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_1_54(v, index);
}
static int assign_gen_lepton_prior_5_1_54() {
  global_gen_lepton_prior.at(5,1,54) = &specialized_gen_lepton_prior_5_1_54;
  return 0;
}
static int initialize_gen_lepton_prior_5_1_54 = assign_gen_lepton_prior_5_1_54();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_2_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.412067,-0.326006,0.15481,-0.0555468,-0.300253,-0.381986 };
  static const float weights1[][6] = { {0.330033,-0.595292,0.423677,-0.743818,-0.521198,-0.234788}
,
{0.0250899,-0.0362315,0.218622,-0.296222,-0.238163,-0.554669}
,
{0.689591,-0.561372,0.120794,-0.144895,-0.24596,-0.209945}
,
{0.0564248,0.0978462,-0.158839,0.551318,0.428119,-0.187616}
,
{0.440391,-0.28159,0.126151,-0.0736552,-0.264776,-0.478743}
,
{0.411942,-0.352765,0.103576,-0.197134,-0.307609,-0.29964}
,
{0.537969,-0.505178,0.248548,-0.11464,-0.161042,-0.0873258}
,
{0.11362,0.348552,-0.236851,0.588552,-0.867706,-0.143018}
,
{-1.24755,0.65049,-0.583683,1.87931,1.47933,0.0544646}
,
{-0.0643458,0.07376,-0.0186179,-0.0446805,-0.185374,0.23257}
,
{0.135564,0.0376822,-0.235168,0.236405,-0.121422,0.0824053}
,
{0.217794,-0.0414937,-0.239898,0.218105,-0.0859886,-0.15127}
,
{-0.659435,0.0758027,-0.177349,0.420139,0.387214,-0.320866}
,
{-0.866769,-0.0150013,-0.151361,0.295901,0.189908,-0.00682643}
,
{-0.463671,0.146025,-0.186964,0.501331,0.140777,-0.206905}
,
{0.167483,0.121755,-0.00747045,-0.0596976,-0.147277,0.00788409}
,
{-0.687795,0.0315451,-0.284805,0.637186,0.266133,-0.145433}
,
{-0.0813844,-0.18708,0.105159,0.0792698,-0.0785941,-0.103612}
,
{-0.815029,0.128089,-0.213034,0.633818,0.23289,-0.200155}
,
{-1.02068,0.185495,-0.174776,0.0939016,0.268882,-0.216582}
,
{-0.0979102,0.0584432,-0.133759,-0.0978057,0.0770487,-0.0657593}
,
{-0.277978,0.00603602,0.0316876,0.0463404,-0.159544,-0.144577}
,
{-0.193732,0.138268,0.108116,0.108514,0.0293753,-0.0782819}
,
{-0.33357,-0.216728,-0.186439,0.177221,-0.317357,-0.194051}
,
{0.0240722,-0.10031,0.0141523,0.11115,-0.162585,-0.526447}
,
{0.00162637,-0.138893,0.0118148,-0.111859,-0.165873,-0.415642}
,
{0.0530378,-0.340167,0.132079,0.0948553,-0.0309911,-0.24893}
,
{0.10426,-0.0937835,0.266142,-0.258813,0.155498,-0.36202}
,
{-0.908885,0.41228,-0.426133,0.594656,0.891387,-0.0272075}
,
{-0.115405,0.121787,0.0570635,-0.160153,-0.0797064,-0.155167}
,
{0.0626581,0.0597856,0.00635055,-0.192769,0.0200187,-0.0534188}
,
{-0.033572,-0.111299,0.112946,-0.242044,0.0187172,-0.0285392}
,
{0.136293,-0.00556541,0.138947,0.0849595,0.0139842,-0.0395361}
,
{-0.303157,0.112798,0.117493,0.0618512,-0.186576,-0.0528098}
,
{-0.0640525,-0.0890856,0.10022,0.00566813,0.149941,0.0919834}
,
{-0.0230231,-0.0177241,-0.1239,0.0429557,-0.0855689,0.0105617}
,
{0.0697923,0.418956,-0.0168119,0.102379,-0.263571,0.17996}
,
{-0.0700477,-0.0353549,0.0267427,-0.11745,0.0289618,-0.0399739}
,
{-0.0890858,0.112892,0.0338388,-0.0898614,0.081918,0.0931439}
,
{-0.124762,-0.0848722,-0.296973,-0.0184927,-0.109278,-0.0177254}
,
{0.0458188,0.0411206,0.147692,-0.0110474,0.117799,-0.0871212}
,
{-0.130802,-0.067952,0.115584,-0.0237194,0.194398,-0.124199}
,
{0.0913815,-0.11735,-0.117902,0.250781,-0.0419268,0.0644437}
,
{-0.120495,0.0931624,0.127175,-0.0855223,-0.0058965,-0.122555}
,
{0.0368851,-0.0462959,0.207691,-0.00873065,0.0650558,-0.0419026}
,
{0.0333579,0.0128144,-0.145222,0.0528314,-0.174088,-0.0410451}
,
{0.118481,-0.111568,-0.27556,0.10267,-0.222474,-0.137152}
,
{-0.0545311,0.0292128,0.0838594,0.0099307,0.19885,-0.0309194}
,
{0.111259,-0.0527373,-0.0899295,-0.0399662,0.116413,-0.133829}
,
{-0.159715,-0.0464161,-0.072745,-0.0662715,0.0762296,0.0837624}
,
{-0.0624195,0.0061561,0.161431,-0.0963909,0.151003,0.140306}
,
{0.044278,-0.073651,-0.158536,0.0694893,0.014935,0.0424842}
,
{0.154251,-0.0011196,0.0493348,0.0692324,-0.0605597,-0.0657842}
,
{-0.0235507,-0.0383946,0.107021,-0.0220908,0.0849405,-0.126202}
,
{0.000605243,-0.0848144,-0.0364059,-0.127278,0.049934,0.127327}
,
{-0.0864863,0.0751032,0.0863666,-0.0273274,0.0279982,0.0687582}
,
{-0.110577,0.111341,0.220346,-0.0145621,0.0987585,-0.0592956}
,
{-0.0470311,-0.140728,-0.0911758,-0.0765481,-0.0454553,0.0978357}
,
{-0.0286248,0.019207,0.0984539,0.247116,0.123852,0.176032}
,
{-0.157561,0.112802,-0.00472814,0.0838793,-0.124212,0.142605}
,
{0.0651848,-0.0964375,-0.0735528,0.024801,-0.0206625,-0.0258817}
,
{0.0935211,0.241196,-0.0235409,-0.0988505,0.0452029,-0.0350787}
,
{0.0831081,-0.0960677,-0.124883,-0.0264593,0.0440498,-0.0215169}
,
{-0.0512487,-0.165293,-0.0077,-0.0522696,0.101168,0.164492}
,
{-0.0724444,0.0339681,-0.0683956,-0.0463301,0.00982209,-0.132173}
,
{0.0466786,0.208307,0.114247,-0.0362149,0.0770767,-0.0464671}
,
{-0.0220162,0.0716749,0.182234,-0.120884,0.332001,0.134259}
,
{0.0386128,-0.250774,0.0591874,-0.0137177,0.0420613,-0.0146551}
,
{0.0341341,0.172188,-0.00848438,-0.0525419,0.0757554,0.0609267}
,
{-0.0560121,-0.00245108,-0.0186973,0.00844932,-0.10272,-0.126265}
,
{-0.0539828,-0.203698,-0.0916583,0.0368608,-0.0823404,0.0187274}
,
{-0.0645339,0.0235873,0.0427072,0.0790052,-0.285393,-0.0152127}
,
{0.085146,-0.106896,-0.0511022,0.0700391,0.041865,-0.000930669}
,
{0.0168506,-0.111986,0.0551979,-0.0987564,0.218578,-0.00667201}
,
{-0.0414199,-0.217506,0.0594304,-0.299397,1.09538,-0.0906265}
,
{-0.082688,0.0841879,0.0414693,-0.042482,0.000481878,0.198544}
,
{-0.414724,-0.0707437,0.398738,-0.0106747,-0.48615,-0.274195}
,
{0.202502,-0.344626,-0.100227,-0.437214,1.1185,-0.0250759}
,
{0.0487821,-0.34883,-0.0904052,-0.30319,0.946555,-0.0397604}
 };
  static const float bias2[1] = { 0.451544 };
  static const float weights2[][1] = { {-0.0226905}
,
{0.00771395}
,
{-0.00934219}
,
{0.0143298}
,
{0.0126143}
,
{-0.00420683}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_2_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_2_50(v, index);
}
static int assign_gen_lepton_prior_5_2_50() {
  global_gen_lepton_prior.at(5,2,50) = &specialized_gen_lepton_prior_5_2_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_2_50 = assign_gen_lepton_prior_5_2_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_2_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.574336,0.264998,0.742721,0.184739,0.317702,-0.0315111 };
  static const float weights1[][6] = { {1.47358,-0.288739,1.16167,-0.572193,-1.07105,-0.82225}
,
{0.0699937,-0.258387,0.352063,-0.0177722,-0.249866,-0.303414}
,
{0.399811,0.521198,0.23013,-0.244491,-0.0250428,-0.443764}
,
{1.47708,2.04808,1.2977,1.79,0.848092,0.799688}
,
{0.402043,0.142493,0.696491,0.408498,0.263236,0.233877}
,
{0.410784,0.111938,0.531162,-0.138056,-0.00123176,-0.109011}
,
{0.591328,-0.0377474,0.729957,0.0460106,-0.0107118,-0.225567}
,
{0.0441777,-0.0772616,-0.00290477,0.0321507,0.00824313,0.0365749}
,
{-0.336437,0.331424,-0.82287,0.0264542,0.646701,0.299609}
,
{0.105234,-0.0465896,-0.0954665,-0.0602081,0.0261525,-0.120434}
,
{0.163788,0.159695,0.0353461,0.0416956,-0.161389,0.09848}
,
{0.0124143,-0.0292598,0.119049,0.0741974,-0.0878792,-0.0106569}
,
{0.119262,0.0118144,-0.0336692,-0.117504,0.292959,0.194923}
,
{0.0193936,0.107034,0.0228471,0.100188,0.140061,0.0534766}
,
{-0.110697,0.270997,-0.544917,-0.0817984,0.271792,0.0844392}
,
{-0.0867747,-0.0355345,-0.228651,0.111529,-0.171818,-0.00262258}
,
{-0.306892,0.0758764,-0.216848,0.15245,0.212897,-0.0970875}
,
{0.148646,-0.177928,0.166022,0.021978,0.48904,0.131402}
,
{-0.0746281,-0.0623207,-0.236221,-0.0928075,0.110074,0.0382367}
,
{-0.0222692,0.126993,-0.379489,0.0532349,0.0791155,-0.0163407}
,
{0.00094851,0.111185,-0.0555231,0.0370829,-0.114181,-0.00709541}
,
{-0.0933104,-0.124826,-0.231459,0.00833954,0.0610124,-0.101945}
,
{0.0541236,-0.0889992,-0.0182629,-0.182421,0.0521194,0.109754}
,
{0.036492,-0.0343552,0.079633,-0.101,-0.00919821,0.159039}
,
{0.226898,-0.156045,0.131993,-0.00438917,0.0401443,-0.0600869}
,
{0.0269345,-0.1427,0.04858,-0.00850574,0.141913,-0.13354}
,
{0.167179,-0.0776335,-0.167361,-0.256586,0.0561092,0.0824334}
,
{0.050471,0.0985546,0.128898,-0.079481,-0.154496,0.0573335}
,
{0.126606,0.549573,0.295864,0.541576,0.472136,1.07509}
,
{-0.028401,-0.0771738,-0.143042,-0.0797631,0.219914,0.0367751}
,
{-0.131129,-0.0149236,0.117678,-0.000889649,-0.0385174,0.045174}
,
{0.0790344,-0.0436258,0.1741,-0.213512,0.0725571,-0.00771051}
,
{-0.01828,0.0368844,0.203116,0.040859,-0.0109077,-0.00189045}
,
{0.0167104,0.0730752,0.077461,0.215049,0.0278326,-0.249217}
,
{0.0169746,0.172374,-0.185788,0.0611861,0.117422,-0.106801}
,
{-0.0489257,-0.0680753,0.0770316,0.0215335,-0.0169754,0.0403101}
,
{0.0219919,-0.266316,0.419263,0.129927,0.126396,0.058075}
,
{0.0261423,-0.0767838,0.039019,-0.158354,0.0252422,-0.188554}
,
{0.0153427,-0.166646,0.147433,-0.107502,0.105157,0.0214196}
,
{0.224945,-0.207807,-0.168311,0.135396,0.0681197,-0.139663}
,
{0.0214614,0.00344809,-0.0254716,0.0305833,-0.00882822,0.000703104}
,
{-0.100671,-0.247862,0.248499,0.00154228,0.0206148,0.147873}
,
{-0.218304,-0.105667,0.000874315,0.0242655,0.0156778,0.17003}
,
{-0.0431108,0.0381132,-0.0722841,-0.188193,0.0875703,-0.082909}
,
{-0.149423,-0.0404721,-0.128038,-0.0803114,-0.0862681,-0.0379717}
,
{0.031099,0.0271692,-0.0225337,0.0092646,-0.0283408,0.046309}
,
{-0.180451,-0.0498573,-0.155886,-0.273399,-0.0191582,0.162145}
,
{0.0526162,0.00459043,0.11683,0.188287,0.0678515,0.00200761}
,
{-0.0294558,0.0865829,-0.100047,-0.0084853,-0.143046,0.179101}
,
{-0.0130979,0.0799717,-0.0157444,-0.0333225,0.0306651,-0.0915459}
,
{0.0150652,0.0368523,-0.0497901,-0.0395668,-0.00774156,-0.00809665}
,
{0.209472,0.132664,0.055457,0.204225,0.0942073,-0.183526}
,
{0.094794,0.0432089,0.0419608,0.0763133,0.00768801,-0.0513135}
,
{-0.0946873,-0.112177,0.171487,0.079642,-0.0226961,0.0526171}
,
{-0.0272977,0.136715,0.084963,0.0936424,0.117771,0.0417416}
,
{0.004762,0.0537587,-0.000222178,0.0316915,-0.0022893,-0.0221872}
,
{0.332343,0.623664,-0.218647,0.148826,0.126814,-0.0191576}
,
{-0.00557621,0.0190999,0.0107328,0.0298629,-0.0951232,-0.0370772}
,
{0.0791265,-0.0872799,-0.125553,0.0930033,0.039891,-0.112062}
,
{-0.0161705,-0.11842,-0.116901,-0.0437846,0.111016,-0.126546}
,
{0.00289499,-0.0684489,-0.032842,-0.0469995,-0.00186919,0.0089502}
,
{-0.199382,0.626387,0.266023,0.904556,-0.141609,-0.506635}
,
{0.117276,0.183085,0.133208,-0.146732,-0.0553494,0.186182}
,
{0.091163,0.0738712,-0.0786117,-0.177718,0.0618495,0.159858}
,
{-0.0121087,0.0139435,-0.101107,-0.137234,-0.0825953,0.134137}
,
{0.0367916,0.0889422,0.0174269,-0.0266922,0.0399171,-0.0313651}
,
{-0.126394,0.326552,-0.159203,0.0950107,-0.345579,-0.0863469}
,
{-0.182076,0.0339132,0.0804047,0.121677,0.0452019,0.0415729}
,
{0.0604585,-0.0933027,0.11332,-0.00525808,0.00093676,-0.0378699}
,
{-0.076378,0.0399673,-0.15275,-0.11859,0.0224335,0.0911535}
,
{-0.13026,-0.197487,0.0999092,0.193153,-0.0341236,0.0312039}
,
{-0.385717,0.196547,0.0256151,-0.329562,0.0972442,-0.193966}
,
{-0.0821647,-0.101401,0.136339,-0.039182,-0.0780639,-0.139029}
,
{0.0746334,-0.241472,-0.0408074,-0.0337007,0.110682,-0.150836}
,
{-0.135379,-0.769911,-0.278495,0.535815,-0.450914,1.37571}
,
{0.0312712,-0.103174,0.0655703,-0.254653,0.096113,0.182959}
,
{0.443323,-0.696494,0.60629,0.273914,-0.635812,0.405609}
,
{0.0843973,-0.608768,-0.15629,0.520378,-0.468041,1.43576}
,
{-0.10256,-0.756004,0.0685815,0.685318,-0.545521,1.54669}
 };
  static const float bias2[1] = { 0.213502 };
  static const float weights2[][1] = { {-0.0318783}
,
{0.0206345}
,
{-0.043641}
,
{0.0224423}
,
{0.0341614}
,
{0.0223973}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_2_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_2_51(v, index);
}
static int assign_gen_lepton_prior_5_2_51() {
  global_gen_lepton_prior.at(5,2,51) = &specialized_gen_lepton_prior_5_2_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_2_51 = assign_gen_lepton_prior_5_2_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_2_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.17152,-0.0218446,-0.283385,-0.148489,-0.0799991,0.213646 };
  static const float weights1[][6] = { {0.0214117,0.0807505,0.244658,-0.21699,0.0547295,0.0699069}
,
{0.0657563,0.253196,-0.0762622,-0.407279,0.303781,-0.0518514}
,
{0.112117,-0.305043,-0.68183,-0.23531,-0.583809,0.0323127}
,
{0.772102,-1.34824,-0.45596,0.269766,0.464313,1.12887}
,
{0.016944,-0.0893365,-0.381912,-0.155417,-0.18419,0.23402}
,
{-0.157185,0.0233975,-0.241637,-0.110114,-0.135357,-0.0638466}
,
{-0.0343865,0.0202113,-0.351917,-0.294218,-0.347096,-0.198676}
,
{-0.0160283,-0.000588767,-0.0591085,0.0729198,-0.201322,0.172437}
,
{0.202675,0.0404957,-0.325917,0.0933737,-0.0321377,-0.0829919}
,
{0.165975,0.218321,0.159751,-0.00339883,-0.127488,0.0551849}
,
{-0.185538,0.0313654,0.0318591,0.120688,0.00536648,0.0826864}
,
{0.0887588,0.0606446,0.03895,-0.0145941,-0.0666244,-0.047656}
,
{0.168588,0.249692,-0.217292,0.0315034,0.335924,-0.239485}
,
{-0.0831031,-0.0652588,-0.146182,-0.3113,0.17075,-0.0319028}
,
{0.0479397,0.1602,-0.0705273,0.179942,0.142767,-0.0197878}
,
{-0.0178056,-0.171286,0.144952,-0.00350036,0.000857968,0.182368}
,
{0.241842,-0.0545765,-0.0255409,0.139911,0.00652088,-0.127203}
,
{0.226945,-0.229266,0.0687896,0.0603819,-0.147519,-0.149059}
,
{-0.0681917,-0.0257883,0.0118284,0.0718311,-0.00799391,-0.298545}
,
{0.00702405,-0.0707871,0.0987993,0.346739,-0.0100049,-0.0774457}
,
{0.00306857,0.0194216,0.023338,0.0287733,-0.0742968,0.157995}
,
{-0.0530885,-0.0437476,-0.0262708,0.00889772,-0.0728817,-0.278321}
,
{-0.108639,-0.15192,-0.0939449,0.0087184,0.142894,-0.0166914}
,
{-0.0445432,0.0600953,0.0875037,0.105231,-0.016624,-0.0561516}
,
{-0.0653728,-0.0379521,0.279441,-0.530106,-0.0936721,0.136742}
,
{-0.288994,-0.201775,0.155117,-0.156462,-0.201634,0.242861}
,
{-0.0719313,-0.0920675,-0.148992,-0.401202,0.0277595,0.0787189}
,
{-0.0686154,-0.081676,0.0610867,-0.358005,0.00267178,-0.0768913}
,
{0.0702591,-0.0533474,-0.0159308,0.307869,-0.171805,-0.10909}
,
{-0.0287789,-0.233211,0.0659919,-0.0806435,-0.0556617,-0.0562303}
,
{-0.136902,0.255368,0.0915602,0.0406942,0.0531317,-0.129065}
,
{-0.0596257,-0.0776318,-0.22617,0.191338,-0.071874,-0.108493}
,
{-0.228419,0.0311007,0.046099,0.0922583,0.0715874,0.0475486}
,
{-0.565256,-0.401773,0.0320413,0.685058,-0.279198,-0.0555449}
,
{-0.133566,0.00616537,0.0459048,0.00913379,-0.0904238,0.0308933}
,
{-0.0417525,0.0125698,0.0203621,-0.0313756,0.136106,-0.0869987}
,
{-0.193394,-0.461018,-0.205674,0.100311,0.223873,-0.084364}
,
{0.208229,0.139024,0.00583073,0.0194803,-0.0956532,0.0280123}
,
{0.0231092,0.0626682,-0.124298,-0.000820715,-0.195978,0.133927}
,
{-0.0439744,0.122794,0.0113298,0.0777026,-0.16374,-0.0872992}
,
{-0.090079,-0.0120137,0.0463006,0.105973,-0.0442889,0.0251764}
,
{0.0726042,-0.0843232,-0.0593448,-0.028888,0.22486,0.473796}
,
{-0.133454,-0.0411097,0.108867,0.209049,-0.301793,-0.221888}
,
{-0.0459676,0.245955,0.0812307,-0.00476804,-0.0679757,-0.198486}
,
{0.0315957,-0.131032,-0.0329466,-0.0140162,-0.122743,-0.0049875}
,
{-0.0254917,-0.0104798,0.0121101,0.0360212,-0.0365819,0.0392194}
,
{-0.0488527,0.227085,0.038905,0.0371946,-0.022926,0.00304823}
,
{-0.0644447,-0.0373524,0.0269601,0.0604864,0.0686783,0.142024}
,
{0.105432,0.144491,0.0139505,-0.152787,0.0639305,-0.233916}
,
{0.0135736,0.0547385,-0.104041,-0.0906916,-0.172505,-0.00523432}
,
{0.0423391,-0.0417637,-0.0389251,-0.0343792,-0.0348701,-0.00882564}
,
{0.0503354,0.130925,0.0617026,0.0271941,-0.175747,0.132759}
,
{0.0839531,-0.0606932,-0.0781983,-0.0506294,-0.0347034,-0.217537}
,
{-0.0180921,0.0498339,0.0581825,-0.0138291,0.171263,0.29116}
,
{0.0934233,-0.0714854,-0.0705828,0.0111276,0.0414649,0.195447}
,
{0.0401089,0.0830862,0.063317,0.104259,0.0172556,0.00777837}
,
{-0.0148002,0.0157343,-0.203162,-0.264806,0.215128,-0.0964958}
,
{-0.0226486,0.0480025,-0.102685,0.189219,0.0959431,-0.122827}
,
{-0.046559,-0.145606,0.134055,-0.0428826,-0.216644,0.177133}
,
{0.00633939,-0.0431369,0.0454315,0.463701,0.045126,-0.216174}
,
{-0.0539962,-0.133939,-0.197888,0.198586,-0.00775411,0.0261681}
,
{-0.0881242,0.08563,-0.0201231,-0.975934,0.1492,0.0235322}
,
{-0.0557447,-0.14495,0.00889581,0.232847,-0.0772637,0.0728418}
,
{-0.00915362,0.0557907,0.133251,0.186344,0.239233,-0.121205}
,
{-0.237602,-0.0142746,0.0397009,0.040193,-0.142306,0.0871272}
,
{0.0243407,0.127601,-0.244678,0.370343,-0.0668689,0.309385}
,
{-0.0336022,-0.0412311,0.104524,0.507918,-0.105583,-0.0468886}
,
{-0.164327,-0.184437,0.111741,-0.125745,0.0564224,-0.148932}
,
{-0.0415181,0.12752,0.0648675,-0.0254826,0.0749787,0.105007}
,
{-0.0155015,0.197603,-0.0883294,0.0617255,0.0342921,0.0124293}
,
{0.0623282,0.0104177,0.0365096,-0.0750801,-0.00498075,0.042103}
,
{-0.112132,0.182093,-0.16828,1.72529,-0.0545156,-0.140834}
,
{-0.0864929,-0.0484842,-0.0942978,0.00744061,0.07306,0.0948955}
,
{0.0238318,-0.170402,-0.17214,0.169538,-0.199423,-0.149591}
,
{-0.148122,-0.0251186,0.0890453,0.046806,0.0273213,0.187637}
,
{0.0639502,0.180701,0.144848,-0.0422441,-0.0721283,-0.139256}
,
{-0.0466899,-0.000868799,-0.0191214,0.157196,-0.0226564,-0.0330845}
,
{0.000884389,0.192476,0.185347,-0.101664,0.019482,0.0169338}
,
{-0.102473,0.0833565,0.0240995,0.0759096,0.156541,-0.00744874}
 };
  static const float bias2[1] = { -0.171894 };
  static const float weights2[][1] = { {0.0667808}
,
{0.0426533}
,
{-0.119821}
,
{0.0559512}
,
{0.0560141}
,
{-0.562266}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_2_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_2_52(v, index);
}
static int assign_gen_lepton_prior_5_2_52() {
  global_gen_lepton_prior.at(5,2,52) = &specialized_gen_lepton_prior_5_2_52;
  return 0;
}
static int initialize_gen_lepton_prior_5_2_52 = assign_gen_lepton_prior_5_2_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_3_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.12533,0.0482183,-0.0844097,-0.0427427,-0.74111,-0.420712 };
  static const float weights1[][6] = { {-0.760258,0.152526,-0.84313,0.259534,-0.822596,-0.423477}
,
{0.517103,-0.340677,0.250613,0.181849,-0.734952,-0.223995}
,
{0.0186652,0.0675994,-0.112292,-0.118785,-0.594949,-0.390424}
,
{3.09232,-0.0301184,-0.189491,-0.413907,-0.332504,0.139837}
,
{-0.0882588,0.179037,0.16627,-0.107262,-0.705097,-0.224572}
,
{-0.245888,0.157776,-0.250313,0.11832,-0.925973,-0.671911}
,
{0.00522931,-0.0721604,-0.26961,0.16893,-0.71919,-0.578096}
,
{-0.410873,0.102656,0.750294,0.213984,-0.452323,-0.101959}
,
{2.0021,-0.507123,0.885908,-0.456333,0.36279,-0.0649047}
,
{0.0692941,-0.160814,0.0417448,-0.240736,0.181405,-0.103357}
,
{-0.0193242,0.0124417,-0.0823222,0.119232,-0.131993,0.0368019}
,
{0.0226424,-0.092126,-0.12866,0.0222158,-0.109966,0.17073}
,
{0.696993,-0.184114,0.053388,-0.148915,0.034822,-0.1516}
,
{0.257169,-0.410777,-0.183091,-0.551507,-0.0575944,-0.0534499}
,
{0.545646,-0.293648,0.0530819,-0.433296,-0.0814894,-0.191802}
,
{0.181206,-0.122625,-0.153042,0.00429899,0.00110367,-0.041532}
,
{0.441474,-0.196174,0.0867412,-0.254214,-0.132909,-0.265307}
,
{-0.238913,-0.0264303,0.178295,0.179489,-0.193597,-0.198484}
,
{0.668634,-0.2495,0.34423,-0.432073,0.111817,-0.0511915}
,
{0.212985,-0.350621,-0.111841,-0.375201,0.179178,0.126532}
,
{0.0927534,-0.201268,-0.015768,-0.186635,-0.212402,-0.0606718}
,
{0.0176153,-0.0322456,-0.14256,0.030685,-0.399472,-0.129038}
,
{-0.0398542,0.0677625,-0.0135051,0.023683,0.143044,0.0223093}
,
{0.00348706,0.0534516,-0.0612082,0.0446407,-0.508317,-0.203793}
,
{-0.0106865,-0.0674116,-0.145642,-0.128466,-0.070495,-0.100645}
,
{-0.0547795,-0.0570292,0.128511,0.0282412,-0.0458429,-0.167093}
,
{-0.0810503,0.0814782,0.125913,-0.147488,-0.164548,-0.0954432}
,
{-0.114983,-0.0142472,-0.127906,-0.0845298,0.174895,-0.204161}
,
{0.354254,0.210406,-0.300539,-0.0775698,-0.271732,-0.257157}
,
{-0.00685433,-0.246299,-0.116401,0.157619,-0.0816371,0.134042}
,
{-0.0641055,0.0971202,-0.150285,-0.23467,0.117874,-0.0766971}
,
{0.0341056,0.000980507,0.249003,-0.148047,0.00535972,-0.040032}
,
{0.11541,-0.00885742,0.0085573,-0.0678063,-0.108081,-0.0663431}
,
{-0.213041,-0.0796536,0.254079,0.380121,0.538231,0.0910613}
,
{-0.0174373,0.0385511,-0.0817243,-0.0468148,0.0877484,0.0758852}
,
{-0.01598,0.00705041,0.0336937,0.0591507,0.000137876,0.0307219}
,
{0.0251596,0.0657928,0.0594969,-0.0914857,-0.368593,0.0285556}
,
{0.0361194,0.00613536,-0.0126931,0.0111054,0.119964,-0.0772663}
,
{0.0812955,0.207501,-0.167506,-0.255906,0.0115609,0.139463}
,
{0.117405,-0.0218686,0.0138958,0.162304,0.0680433,0.181014}
,
{0.0179672,0.0559072,0.0246795,0.108277,-0.0194515,0.0466085}
,
{-0.0356018,0.338963,0.182722,0.0375315,-0.0709202,-0.0189935}
,
{-0.119005,-0.148833,0.0528055,0.0300072,0.00561464,0.105771}
,
{0.0169101,0.0635743,0.0621746,0.238353,-0.259022,-0.0804776}
,
{0.071366,-0.0122139,0.104244,0.09887,-0.164941,-0.144459}
,
{-0.0239222,0.0937225,0.00464304,-0.115771,0.00430903,0.0384518}
,
{0.00288055,0.0871882,-0.056108,-0.178972,0.116383,-0.101583}
,
{-0.0463195,-0.0823643,-0.0506548,-0.079606,-0.0374608,0.152174}
,
{-0.00511547,-0.0176183,0.030544,-0.188914,0.144687,-0.0434073}
,
{0.0501285,-0.0844865,-0.159701,0.0944783,0.0504052,-0.0910583}
,
{0.0244683,-0.121137,-0.0606139,-0.0293954,0.0108024,-0.0704241}
,
{0.0198116,-0.0111391,0.0286911,0.0453437,-0.152513,-0.169605}
,
{-0.0686399,-0.12427,0.1893,-0.0414907,-0.00846108,0.00203299}
,
{0.0196864,-0.0112723,0.055965,0.0191693,-0.123894,-0.0548635}
,
{-0.019306,-0.0719883,-0.0313188,0.185457,0.103788,-0.0744365}
,
{0.0266659,-0.0051654,0.0818441,-0.0102675,-0.071374,0.0305334}
,
{-0.00360349,0.116946,0.144104,-0.197262,0.0594886,0.0921046}
,
{-0.0247859,0.0663526,-0.070476,-0.060573,-0.0585511,0.128166}
,
{0.0374675,-0.167812,0.226702,0.0835223,-0.0385041,-0.0298598}
,
{-0.10559,0.115262,0.0195123,-0.0234783,-0.0254431,0.0377466}
,
{-0.0235134,0.0337303,-0.0801685,-0.0102867,0.0655714,-0.00954408}
,
{-0.0322722,0.18927,-0.0201442,-0.200356,-0.0115052,0.0831777}
,
{-0.103489,-0.15354,0.129529,0.0582066,-0.0110423,-0.0776319}
,
{0.164088,-0.170356,-0.0362153,-0.0493583,0.119286,-0.231589}
,
{0.0109444,0.0670959,0.00258945,0.0236358,0.122988,-0.0514181}
,
{0.0653478,0.0859569,-0.0529295,0.0341207,0.0403359,0.00809521}
,
{0.17299,0.148136,-0.197674,0.0468405,0.108529,-0.168017}
,
{-0.0312333,0.102996,-0.0425839,-0.0858741,0.00397742,0.0311793}
,
{0.0876243,0.00618813,-0.0113661,-0.0695561,-0.00294441,-0.03938}
,
{-0.0821994,0.0197891,-0.102839,0.110846,0.0899488,-0.0779653}
,
{-0.0576967,-0.0747487,0.0570114,0.0268523,-0.0349407,0.0470459}
,
{0.0272602,-0.016192,0.186503,0.10191,-0.36174,0.0662074}
,
{0.076061,0.0867438,-0.0409084,-0.0593085,-0.0313386,0.074105}
,
{0.137674,0.00337512,0.017718,0.0113482,-0.010146,0.00519468}
,
{0.0721283,0.149728,-0.333744,-0.0493749,0.764801,-0.17208}
,
{0.00365505,0.192345,0.0131177,-0.0555965,0.0106441,0.11159}
,
{0.494195,0.24976,0.301187,0.850985,-0.913441,-0.0925974}
,
{-0.0435477,0.0440445,-0.410209,0.0596564,0.845239,-0.126815}
,
{-0.0783504,0.151059,-0.296636,0.0179333,0.710461,0.0938791}
 };
  static const float bias2[1] = { 0.0872905 };
  static const float weights2[][1] = { {0.0214498}
,
{-0.0104067}
,
{0.0249785}
,
{-0.00887818}
,
{0.0161242}
,
{0.00307313}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_3_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_3_50(v, index);
}
static int assign_gen_lepton_prior_5_3_50() {
  global_gen_lepton_prior.at(5,3,50) = &specialized_gen_lepton_prior_5_3_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_3_50 = assign_gen_lepton_prior_5_3_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_3_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.318922,-0.072532,0.04481,-0.156255,0.771631,0.191825 };
  static const float weights1[][6] = { {-0.245324,-0.58304,0.0802357,-0.100503,0.432475,0.310276}
,
{-0.076913,0.133931,0.416428,0.026576,0.61914,0.0375486}
,
{-0.0119158,-0.0150499,0.277329,0.601453,0.304506,-0.0612417}
,
{0.469206,0.935677,0.753012,0.824206,1.69672,-0.545139}
,
{-0.428534,0.129931,0.290955,0.015261,0.570549,0.227564}
,
{-0.598999,-0.338555,-0.284812,-0.177923,0.836826,0.479439}
,
{-0.531608,-0.122201,0.0649349,-0.249012,0.53493,0.20089}
,
{0.241167,-0.0538151,-0.0161037,0.246633,0.0355702,0.0789248}
,
{0.853725,0.474264,0.104339,-0.0676631,0.272006,-0.233331}
,
{0.0324861,0.145768,-0.0690857,-0.108861,-0.226398,0.0827722}
,
{0.073236,0.150137,-0.0933221,0.140145,0.209236,0.0469234}
,
{-0.00351808,0.0272332,0.035595,0.00566307,0.075233,0.178917}
,
{-0.0388111,0.343754,-0.0762336,-0.0434685,0.00295582,0.0322661}
,
{-0.201681,0.190524,0.0329482,-0.134232,0.202017,0.149313}
,
{0.187371,0.210455,0.00183863,0.0190369,-0.0287926,0.00670281}
,
{-0.120153,-0.0497329,0.0680766,-0.186324,0.108352,0.0161229}
,
{0.115118,0.32993,0.152399,0.111569,-0.111275,-0.0739224}
,
{0.0233583,0.169003,0.0527417,-0.369663,0.389382,-0.0323081}
,
{0.0308597,-0.0199049,0.0149762,0.00410978,-0.153146,-0.0829234}
,
{0.0318496,0.203553,0.0163236,-0.12677,-0.254106,0.0783422}
,
{-0.0279708,0.19078,-0.105684,-0.171069,-0.0773805,0.247616}
,
{0.228212,-0.0369443,0.0562486,0.128677,-0.00110747,0.109266}
,
{0.0588532,-0.0841779,0.0883598,-0.0146137,-0.0397346,0.0209865}
,
{0.118443,0.245761,-0.146745,-0.322193,0.0919755,0.18242}
,
{0.0898132,-0.0467991,-0.0851766,0.0948929,-0.221852,0.0814201}
,
{-0.171099,0.103152,-0.207485,-0.260942,0.00188014,-0.0937389}
,
{0.232509,-0.16479,-0.0787221,0.115562,0.0616981,-0.158423}
,
{0.063401,0.0852041,-0.151373,-0.167701,0.186032,-0.0834746}
,
{0.751792,-0.406085,0.562761,-1.14999,0.665523,-0.157615}
,
{0.115207,-0.198411,0.105294,0.0664724,0.147663,0.107127}
,
{0.109356,-0.078857,0.0372482,0.0610762,0.000721753,0.00307935}
,
{-0.0300736,0.235932,0.131199,0.0306885,-0.00418602,0.09958}
,
{0.114825,-0.0866396,-0.0234977,-0.150102,0.153427,-0.0270476}
,
{0.51385,-0.235019,0.247319,0.298623,-0.0224894,0.210116}
,
{-0.0821612,0.0614937,0.141216,0.0693827,-0.219388,-0.151294}
,
{0.00634104,0.0776723,-0.0586641,-0.0219505,0.0451916,0.051151}
,
{0.209444,-0.270256,-0.132982,0.00783553,-0.169767,-0.131915}
,
{-0.108341,-0.0118054,0.0860178,0.0891656,0.157715,0.222439}
,
{0.0920714,0.0429394,-0.0579954,-0.269794,0.0496878,0.0758048}
,
{0.124915,-0.151965,-0.0536977,-0.0915835,0.0591128,0.108025}
,
{-0.0198205,0.0327659,-0.00916107,0.033801,0.0180179,-0.0233197}
,
{-0.142148,-0.0684051,0.130623,-0.176282,0.141463,-0.157686}
,
{0.0992713,0.0570095,-0.0470285,-0.134435,-0.0493517,-0.114918}
,
{-0.0836169,0.0807812,-0.0238987,-0.0850772,-0.103804,0.0742227}
,
{0.165949,-0.059434,0.033777,-0.0704158,0.0216016,0.108405}
,
{-0.0228326,-0.0197608,-0.0562759,-0.0893284,0.0203562,-0.0709027}
,
{-0.0661016,-0.133564,0.0502112,-0.202588,-0.0816221,-0.11656}
,
{-0.0830517,0.0910169,-0.063146,0.0970548,-0.0279683,-0.0310736}
,
{0.00360956,0.0836086,0.0357335,-0.168283,-0.130764,0.233886}
,
{0.104631,0.0219461,-0.125468,0.198625,-0.0976596,0.0379536}
,
{0.00752552,-0.0009431,0.0240739,0.0430124,0.000511116,0.0161949}
,
{0.00172253,-0.0480494,0.120143,0.244409,-0.0676447,0.0197842}
,
{-0.166109,0.0609605,0.241474,0.0302241,0.0582965,0.0674836}
,
{0.0936597,0.148548,-0.147421,-0.027117,-0.0021536,0.143539}
,
{0.0357782,0.106929,-0.0485404,0.111308,-0.162426,-0.183959}
,
{-0.0322119,0.0765989,0.0994075,-0.018073,0.159877,-0.0305089}
,
{-0.790821,-0.482151,-0.0339474,-0.631173,-0.065602,-0.13724}
,
{-0.0407186,-0.209085,0.0988886,-0.0102206,-0.0492027,0.08178}
,
{0.0721135,-0.0932789,-0.154967,0.13713,-0.0297431,0.0713414}
,
{-0.104276,0.0447669,-0.0988534,0.0260872,-0.00127359,-0.015286}
,
{-0.13683,0.105701,0.00705514,-0.0278811,0.0542756,-0.0604783}
,
{0.253658,-0.246422,0.228025,0.248345,0.701803,-0.172976}
,
{-0.135569,0.0333957,0.172476,-0.138636,0.110136,-0.204701}
,
{0.0100453,0.00848056,-0.0593545,0.178194,-0.110448,0.0530431}
,
{-0.0365737,0.00988501,0.00879069,-0.183637,0.121669,-0.0751611}
,
{0.0186971,0.0351149,0.0818341,0.0634599,0.0615591,0.0356784}
,
{-0.303801,-0.189147,-0.018262,0.247294,-0.456037,-0.181356}
,
{0.0504149,-0.211343,0.0389033,0.262347,-0.00583052,-0.265458}
,
{-0.0720758,0.134039,0.149065,0.0313591,0.00468806,-0.048157}
,
{-0.135782,0.133203,0.124741,-0.283413,-0.171421,-0.0719508}
,
{-0.0334399,-0.0918933,-0.0353448,0.0181209,-0.109814,-0.0597}
,
{-0.251088,-0.0354196,-0.141874,0.211724,0.269668,0.327705}
,
{-0.0680282,-0.0460971,-0.105993,0.180143,-0.0546617,-0.119756}
,
{0.114878,-0.0437705,0.0557397,0.128072,0.0920529,0.0625057}
,
{0.296899,0.514327,-0.483373,0.0294702,0.195716,0.170808}
,
{-0.0666875,-0.100892,-0.0439551,0.507075,-0.0560555,-0.0704385}
,
{-1.16692,0.40259,-1.38129,-0.0135898,0.319391,0.789592}
,
{0.354303,0.359867,-0.57793,-0.0474779,0.0526958,0.390582}
,
{0.0303085,0.624713,-0.613987,-0.136985,0.117448,0.327039}
 };
  static const float bias2[1] = { 0.0391514 };
  static const float weights2[][1] = { {0.0304147}
,
{0.0373921}
,
{0.0491041}
,
{-0.0223317}
,
{-0.0387326}
,
{-0.0354045}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_3_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_3_51(v, index);
}
static int assign_gen_lepton_prior_5_3_51() {
  global_gen_lepton_prior.at(5,3,51) = &specialized_gen_lepton_prior_5_3_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_3_51 = assign_gen_lepton_prior_5_3_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_4_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -1.01999,-0.653738,0.869802,-1.06495,-0.595092,0.711717 };
  static const float weights1[][6] = { {-1.29085,-0.242288,0.849926,-0.924764,-0.768259,0.736019}
,
{-0.0742171,0.179174,-0.124101,-0.349984,-0.314244,-0.250847}
,
{0.0316563,-0.330653,0.163948,-0.201003,-0.100713,-0.536801}
,
{0.354114,-0.675391,-0.036822,0.476305,1.67382,0.455028}
,
{-1.14241,-0.800213,0.943528,-1.0679,-0.532538,0.551633}
,
{-1.20176,-0.789853,0.897905,-1.20999,-0.982246,0.786834}
,
{-1.11113,-0.396469,1.09409,-1.11203,-0.819665,0.463472}
,
{0.923962,-0.372956,0.139096,-0.579561,0.278592,0.34842}
,
{0.161291,-0.0313711,-0.655803,0.560706,-0.375356,-0.484667}
,
{0.0189276,-0.0764935,0.123999,0.0815842,0.0570501,-0.0694317}
,
{-0.0944645,-0.2201,0.0013688,-0.101985,0.0251413,-0.0218745}
,
{-0.0549815,0.0250648,-0.135512,-0.0553357,0.0802047,0.132592}
,
{0.00915321,-0.0718384,-0.307721,0.183756,0.272237,-0.145081}
,
{-0.420487,-0.319255,0.337364,-0.465124,-0.0693808,0.358772}
,
{0.107747,-0.0344599,-0.204164,0.215513,0.295296,-0.134933}
,
{-0.0593708,0.0962498,-0.104355,0.0980161,0.0361731,0.00579933}
,
{0.0826671,0.105839,-0.197013,0.335398,0.330772,-0.187593}
,
{-0.0935167,0.110322,0.429843,-0.587709,-0.279228,-0.00789743}
,
{-0.129003,0.0151342,-0.264693,0.527102,0.295577,-0.244739}
,
{0.143158,-0.00340108,-0.0853581,0.409588,0.376071,0.0613702}
,
{-0.139614,-0.419122,-0.109581,0.131917,0.112701,-0.100596}
,
{-0.0323334,-0.522341,-0.128685,-0.0184072,-0.139887,-0.089959}
,
{0.237044,-0.0947505,0.118253,0.034036,-0.0487653,-0.0389633}
,
{-0.0144154,-0.161231,-0.0544008,0.313016,-0.286943,-0.327207}
,
{0.000827564,-0.242438,0.145162,-0.130873,-0.274678,0.356923}
,
{-0.10336,-0.298943,0.317033,0.155421,0.127936,-0.0874775}
,
{0.0930422,-0.134969,-0.103227,0.068388,-0.254827,0.483581}
,
{0.00992892,0.0731391,0.0082948,-0.0133829,0.113669,-0.289249}
,
{-0.507594,-0.0810181,0.502262,-0.420951,-0.608727,0.0315909}
,
{0.0806637,0.0389011,0.170688,-0.0946856,-0.0212803,-0.0749063}
,
{-0.0580011,0.0743259,0.0214258,0.113617,0.0818323,0.086178}
,
{-0.137483,0.216324,0.107964,0.149331,-0.0333346,-0.0100897}
,
{0.114988,-0.0305571,-0.0362596,-0.103253,0.0914286,0.199477}
,
{-0.134925,-0.217085,-0.268816,-0.265831,0.482171,-0.0170064}
,
{-0.061613,0.042717,-0.191516,-0.0857679,0.0616459,-0.00334263}
,
{-0.00765557,-0.0542576,-0.090078,-0.0398542,0.00647179,-0.0245294}
,
{-0.00954708,-0.0867402,-0.27323,-0.069904,-0.178542,-0.063281}
,
{-0.167662,0.034759,0.0259231,-0.0197312,0.143833,0.00244011}
,
{-0.0561579,-0.116493,-0.0285747,0.049007,-0.21324,-0.340394}
,
{-0.0751815,-0.169783,-0.0767602,0.0482761,-0.0141356,-0.0145533}
,
{-0.0727885,0.0233445,0.0689588,0.0439574,0.0777564,0.0992637}
,
{-0.198642,0.241575,0.158504,0.0554882,0.190695,0.0596713}
,
{0.00432196,-0.122833,0.0446459,0.0856763,-0.0403194,-0.0191845}
,
{0.147517,-0.0113823,-0.0937802,-0.317599,0.133333,-0.208167}
,
{0.0223462,0.0521495,0.119492,0.0532144,0.0615277,0.0645021}
,
{0.0996279,0.0278544,0.0471393,-0.00833665,-0.068285,-0.00369771}
,
{0.187999,0.0717569,0.00144232,-0.0529473,-0.20611,-0.165979}
,
{0.038325,0.0146637,0.0815064,0.0518847,-0.0610855,0.158096}
,
{-0.0370964,0.253494,0.00935661,0.0319747,-0.0830962,-0.0765698}
,
{0.0197069,-0.0817233,-0.101801,-0.111153,-0.103816,-0.124573}
,
{-0.0242765,-0.0167142,-0.0458277,0.0017261,-0.0194163,-0.101197}
,
{-0.0224211,0.0937777,-0.0888618,-0.12895,0.125785,-0.393982}
,
{-0.0625643,-0.0308111,-0.0419504,0.0717951,0.210072,0.0646635}
,
{0.132823,0.08087,0.215928,0.0220933,0.0217264,0.211369}
,
{0.12558,-0.0982204,0.0445149,-0.104403,0.00922199,-0.103589}
,
{-0.0277045,-0.105652,0.0231595,0.113675,0.110411,0.160573}
,
{-0.0556644,0.0842378,0.0611644,-0.0193109,0.290626,-0.31554}
,
{-0.131807,-0.0327986,0.0170615,0.134117,0.0742012,0.0512015}
,
{-0.0410795,0.0144084,-0.0222745,0.0255429,-0.136641,0.0940017}
,
{0.10578,0.0572067,0.127634,-0.0444576,0.196948,-0.124975}
,
{0.0262011,0.0727693,-0.0711475,-0.102819,-0.0528057,-0.066733}
,
{0.0579549,-0.133321,-0.0744023,0.0401631,0.0531539,0.15031}
,
{-0.0829472,0.112222,-0.111875,-0.0354511,0.109006,0.102347}
,
{-0.0830976,-0.0165755,0.0510598,0.149329,-0.177181,0.059475}
,
{-0.0194734,-0.0598892,-0.041933,0.0392809,-0.0523372,0.0781533}
,
{0.0338734,0.10653,0.0753243,0.0799558,-0.10728,-0.132323}
,
{0.0386985,0.0165011,0.129531,0.184134,-0.281914,0.0259059}
,
{0.0857987,0.165981,0.112818,0.221656,-0.0977385,-0.135637}
,
{-0.0118332,-0.0166637,0.0449582,-0.116833,0.0893868,-0.15584}
,
{0.0295078,-0.0221375,0.0133492,-0.00839058,-0.021121,0.101368}
,
{-0.0385364,-0.0956216,-0.0663966,-0.089549,0.116313,0.15181}
,
{-0.0329837,-0.52245,-0.0363164,0.115609,-0.0484435,0.0915768}
,
{0.0946877,0.0810275,-0.0109987,0.154603,0.0615462,-0.105463}
,
{-0.101914,-0.038132,0.0497154,-0.0399289,0.0381142,0.0105867}
,
{-0.113526,0.601142,-0.0506257,-0.030784,0.190366,0.203403}
,
{-0.0293286,-0.0644819,0.00667806,-0.043392,-0.0392907,-0.194979}
,
{-0.129056,-0.779521,0.363517,-0.578139,0.280155,-0.717824}
,
{-0.335624,0.545854,0.0869221,0.120276,0.117029,0.356501}
,
{-0.525991,0.392058,-0.0973119,-0.068092,0.164777,0.334629}
 };
  static const float bias2[1] = { 0.156485 };
  static const float weights2[][1] = { {0.0279225}
,
{0.0164063}
,
{-0.014323}
,
{0.0194998}
,
{0.01715}
,
{-0.00805057}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_4_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_4_50(v, index);
}
static int assign_gen_lepton_prior_5_4_50() {
  global_gen_lepton_prior.at(5,4,50) = &specialized_gen_lepton_prior_5_4_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_4_50 = assign_gen_lepton_prior_5_4_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_4_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.25651,-0.160597,-0.09938,0.202281,0.0253376,0.0569762 };
  static const float weights1[][6] = { {0.384526,-0.614132,-0.28867,-0.21457,0.45879,0.232123}
,
{-0.136133,-0.205355,0.402014,-0.260334,0.0133308,-0.637718}
,
{-0.716287,-0.18313,-0.0723251,0.0371887,-0.370429,-0.401599}
,
{-0.545694,0.945037,0.531844,1.33872,-0.484831,0.206052}
,
{-0.264512,0.0753752,-0.17997,0.380462,0.0979482,-0.0194719}
,
{-0.303695,-0.0951689,-0.299705,0.00876004,-0.129122,0.0867721}
,
{-0.33672,-0.500663,-0.257151,-0.0334554,0.0198962,-0.123588}
,
{0.157731,0.0320915,-0.0977829,0.346054,0.200039,-0.00634232}
,
{0.128981,0.16603,0.236441,-0.13918,-0.437628,-0.195148}
,
{-0.135771,0.0641319,0.0673814,-0.0647151,-0.0454122,0.0722147}
,
{0.129128,-0.0721987,0.0808977,0.0026302,0.0852967,-0.0599796}
,
{0.152786,-0.0687703,-0.0246462,0.00587469,0.132123,-0.212613}
,
{-0.26839,0.332678,-0.00741038,-0.127829,0.102411,-0.0551855}
,
{0.113963,-0.447569,-0.284232,-0.450029,0.011524,0.186429}
,
{-0.178412,0.453552,0.207019,-0.075632,0.236444,-0.28407}
,
{-0.104603,0.0454869,-0.171709,0.209623,-0.217153,0.0823293}
,
{-0.186628,0.581872,0.0565953,0.109397,0.17296,0.00236419}
,
{0.239345,-0.0445097,0.356833,0.0857004,0.329049,-0.0798875}
,
{0.0123135,0.0894521,0.0127771,0.0143939,0.064532,-0.0613642}
,
{0.00797433,0.133905,0.0752328,0.114749,-0.113136,0.0323515}
,
{0.0534934,0.0770271,-0.0863324,-0.0211031,-0.0429121,-0.159043}
,
{-0.190978,0.0452908,-0.0684116,-0.114111,-0.162186,-0.201427}
,
{-0.184614,-0.0250861,-0.0440038,0.143829,0.0147154,0.0361027}
,
{-0.00909038,0.00201442,0.129873,-0.00620719,0.100495,0.111587}
,
{-0.596262,-0.221434,0.160148,0.430954,0.146582,0.0277397}
,
{0.0490856,-0.445406,-0.0551531,-0.137593,0.336932,0.198556}
,
{0.0186247,-0.0625523,0.175451,-0.128458,-0.0221052,-0.0510362}
,
{0.194964,-0.51768,-0.348711,-0.00945688,0.419597,0.200211}
,
{-0.0813255,-0.0295311,0.37344,0.0267731,0.316683,-0.393948}
,
{-0.0957098,0.216739,-0.0676275,0.0243226,-0.0168182,0.142124}
,
{-0.067027,-0.0181014,-0.00838783,-0.0314212,-0.00650527,-0.0227789}
,
{0.200508,-0.0640991,0.0204362,0.0413985,-0.0622,-0.0963731}
,
{-0.0964405,-0.0951501,-0.0705544,0.0749341,0.160424,0.165376}
,
{-0.0532881,0.232808,-0.285985,-0.163174,-0.108425,0.125686}
,
{-0.0937328,0.0417679,0.0626299,-0.0143801,0.0648632,0.0354408}
,
{-0.0437673,0.0380871,-0.0646214,-0.0575867,-0.042887,0.0277019}
,
{-0.284015,-0.280615,-0.300732,0.148415,-0.606393,-0.340955}
,
{-0.0180126,-0.0582052,0.0789836,-0.127439,0.0572585,-0.122933}
,
{0.0366458,0.0554067,-0.0375353,0.00561927,0.0825347,-0.0348428}
,
{0.132748,-0.00189606,-0.241805,0.133289,0.0406778,-0.0972811}
,
{0.160894,-0.00230843,-0.0277232,0.0236935,-0.0728721,-0.0830132}
,
{0.500749,0.119198,0.135256,0.0379049,0.057471,0.257841}
,
{-0.134118,-0.0111381,0.0641275,-0.0111057,-0.14314,0.12176}
,
{-0.149173,-0.0768859,0.0389746,0.106139,0.069825,-0.0713973}
,
{0.100004,-0.148363,-0.0363757,0.0730655,-0.0670716,-0.0981569}
,
{0.0650243,-0.0252662,0.0145254,0.0340078,-0.0139545,-0.0727171}
,
{0.0791209,0.0822804,-0.0694965,0.145695,0.0610202,0.222816}
,
{0.135662,0.165194,0.0527319,0.0464435,0.0965999,0.141707}
,
{-0.405653,-0.0122386,-0.0599193,-0.00652226,0.0418008,-0.118503}
,
{-0.0758393,-0.00777792,0.0450896,0.0491614,0.0279364,-0.157875}
,
{0.0447749,-0.0638647,0.0991624,0.0526807,0.0942243,-0.08441}
,
{0.239686,0.117,0.242716,-0.137257,0.303472,0.0447132}
,
{-0.051885,-0.0357336,0.0736721,-0.0894201,0.120143,0.0705827}
,
{-0.113408,-0.0803907,0.0326183,0.127213,0.0450235,-0.100139}
,
{0.183155,0.207747,-0.0602422,-0.0163578,0.0353498,-0.125308}
,
{0.187599,0.0551911,-0.0149819,0.0670784,-0.174107,-0.00508384}
,
{-0.290771,-0.350455,0.205181,0.289673,-0.203912,-0.241392}
,
{0.24613,-0.137515,0.0265241,0.0297253,0.0270177,0.023807}
,
{0.101972,-0.139311,-0.00173872,0.0759109,-0.0533537,0.0117917}
,
{-0.220605,-0.199876,0.0366623,0.063578,0.408292,-0.00309076}
,
{0.0649455,-0.156415,-0.0869362,-0.0869512,-0.232851,-0.194363}
,
{-0.440625,0.377908,0.00886118,0.320099,0.112691,-0.575103}
,
{-0.134565,0.0669283,0.00722683,0.0651998,-0.0160779,-0.0396369}
,
{-0.0432333,0.0408537,0.0385738,-0.149217,0.0136469,-0.077008}
,
{0.0125665,0.0429872,-0.198111,0.147688,-0.146187,0.140972}
,
{0.0288679,-0.120119,-0.0264948,-0.00325688,-0.447938,0.108705}
,
{0.135545,-0.157382,-0.597431,0.556077,0.0921029,-0.594752}
,
{0.0854825,-0.0902468,0.0478868,0.178374,-0.0342786,-0.0452223}
,
{0.18692,0.0140967,0.0620808,0.236862,0.134176,0.186894}
,
{0.00560688,0.0809164,-0.121605,-0.0313004,0.195455,0.0710514}
,
{0.142259,-0.141284,0.0718773,0.129388,-0.0227172,-0.0263005}
,
{-0.321344,-0.529814,-0.551122,0.803806,-0.152819,-0.0107599}
,
{0.0622681,-0.0802543,0.0410856,-0.117081,0.105713,-0.0764574}
,
{-0.193379,-0.141442,-0.20988,0.181659,-0.0130593,-0.089692}
,
{0.342684,-0.653984,-0.0580338,-0.011711,0.041803,0.335009}
,
{-0.179563,-0.152917,-0.0863179,0.0895855,-0.359816,0.695915}
,
{0.358406,-0.73097,-0.396837,-0.630766,0.227971,0.507285}
,
{0.345075,-0.464927,-0.0919526,-0.194655,0.114503,0.105205}
,
{0.122546,-0.387343,-0.0482101,-0.0516814,0.14505,0.271605}
 };
  static const float bias2[1] = { -0.248523 };
  static const float weights2[][1] = { {-0.0244182}
,
{0.0448134}
,
{0.0571168}
,
{0.0587649}
,
{-0.0442598}
,
{-0.0321294}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_4_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_4_51(v, index);
}
static int assign_gen_lepton_prior_5_4_51() {
  global_gen_lepton_prior.at(5,4,51) = &specialized_gen_lepton_prior_5_4_51;
  return 0;
}
static int initialize_gen_lepton_prior_5_4_51 = assign_gen_lepton_prior_5_4_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_4_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.253994,-0.610563,-0.197128,-0.130288,-0.355106,0.07777 };
  static const float weights1[][6] = { {0.149809,-0.134995,-0.0621908,0.164056,-0.083504,0.200114}
,
{-0.0559635,-0.245707,0.0955593,-0.196021,-0.173677,-0.165533}
,
{-0.115348,0.107722,-0.370275,0.228381,0.161001,0.0255428}
,
{-0.256393,1.21133,0.967767,0.414077,1.27851,0.146428}
,
{-0.302692,-0.67849,-0.355203,-0.0976795,-0.405139,-0.0574479}
,
{-0.29874,-0.836552,-0.38081,-0.288491,-0.738967,0.0322132}
,
{-0.129984,-0.756297,-0.279952,-0.383116,-0.525767,-0.0446511}
,
{-0.00239728,-0.0295669,0.128851,-0.0960999,-0.122462,0.199298}
,
{-0.0411363,0.214958,-0.17344,0.118267,0.179022,-0.175969}
,
{0.0424328,-0.00174324,0.128781,-0.147099,0.0392673,-0.11648}
,
{0.000103032,-0.0167136,-0.0848569,-0.140969,-0.0466838,0.0693672}
,
{0.105119,0.192328,-0.130321,-0.074348,-0.0337547,0.123646}
,
{-0.0922391,0.121108,0.0289211,0.0555835,-0.00494845,0.128791}
,
{0.0271134,0.0617285,-0.0772826,0.0372225,-0.0777891,-0.0371039}
,
{-0.18951,-0.00982362,-0.0322719,0.022297,0.0309053,0.16958}
,
{-0.108797,-0.11955,-0.0661017,-0.00910477,-0.0139679,-0.0325403}
,
{0.0812549,-0.0139877,-0.063947,-0.12585,0.0727825,-0.123117}
,
{0.139347,0.0967951,-0.0308404,-0.0144226,-0.021263,-0.0542642}
,
{0.413958,-1.67921,-1.2614,0.79027,-1.47428,0.89862}
,
{0.0860299,0.176165,0.026698,0.0238666,-0.127075,0.106525}
,
{-0.16241,0.572429,-0.0143709,-0.215635,0.547079,-0.169445}
,
{-0.324153,0.0607719,0.0968191,-0.362719,0.124027,-0.120901}
,
{-0.0302547,-0.0201336,0.0609952,0.150463,0.123651,-0.0716219}
,
{-0.224411,-0.0742668,-0.0356858,-0.344878,0.261514,0.0174726}
,
{0.198677,-0.113641,-0.121167,-0.160392,-0.0805181,0.102678}
,
{0.0294239,-0.334933,-0.288123,-0.101145,-0.275167,0.154908}
,
{-0.0152176,-0.0400017,-0.07656,-0.00341593,-0.0548296,0.036833}
,
{0.172285,-0.238969,-0.0448472,-0.0808563,-0.0720836,0.220303}
,
{0.1256,-0.321654,-0.014713,0.0650225,-0.324416,0.276547}
,
{0.0490281,0.0789055,0.107609,-0.0797479,0.000643275,-0.0909362}
,
{-0.223593,0.182133,0.119258,0.240785,-0.0503255,0.0069041}
,
{-0.169824,0.095775,0.0445893,-0.0922038,-0.154471,-0.00187976}
,
{0.104824,0.109923,0.0924226,0.0360302,-0.180081,-0.192601}
,
{-0.131087,-0.065315,-0.0926058,-0.00796132,0.203493,0.220266}
,
{0.00010544,-0.0847653,0.286518,0.0218254,-0.0455782,0.0729584}
,
{-0.071859,0.065175,-0.184054,0.013479,0.011164,-0.0473993}
,
{0.041841,0.140393,-0.403877,0.179345,0.0305939,-0.0332238}
,
{-0.082708,0.0116357,-0.00197395,0.0176124,-0.0135936,0.124907}
,
{-0.0571182,-0.0800212,-0.10213,0.0813903,0.13912,-0.00390255}
,
{-0.0448132,-0.0271731,-0.0873665,0.0198506,0.0248884,-0.079456}
,
{-0.0276419,0.0227426,0.0486804,-0.118276,-0.0601862,-0.0211956}
,
{0.12214,0.139497,-0.0316484,-0.174834,-0.0751411,-0.03908}
,
{-0.0847646,0.119376,0.101856,0.05382,-0.132435,-0.0238911}
,
{-0.0721301,0.120139,0.0226779,0.19668,-0.162361,-0.0920906}
,
{0.146146,0.134641,0.00340267,-0.0163606,-0.126596,-0.116839}
,
{-0.00751481,-0.0493577,-0.0297929,0.0171084,0.0685365,0.0424971}
,
{0.0422693,-0.096269,-0.0858428,-0.0356179,0.140376,-0.0798795}
,
{-0.0116892,-0.0402706,0.00636451,-0.0241194,0.0350219,0.0114832}
,
{0.0740972,-0.125222,-0.0171938,-0.201724,0.0765663,0.0969493}
,
{-0.0521705,0.111911,0.00134323,0.0767097,-0.0794407,0.0237508}
,
{-0.0256161,0.0225309,-0.0283145,0.0803681,-0.00777492,-0.0394007}
,
{-0.120784,-0.0617611,-0.0434772,-0.177918,0.0640828,-0.0760789}
,
{-0.0109494,-0.0389807,0.00197047,-0.0805036,0.0163446,0.00351543}
,
{-0.140575,-0.150729,0.033147,-0.0327052,0.114673,0.23739}
,
{-0.150714,0.0179172,0.0362497,0.232021,-0.106366,-0.0137571}
,
{-0.130287,0.0106284,0.00951222,-0.00844877,-0.0789621,-9.46609e-05}
,
{-0.158332,-0.0777209,-0.101661,-0.0211087,-0.0352271,-0.106496}
,
{0.170808,-0.175061,0.0496266,-0.0526552,-0.157908,-0.0754314}
,
{-0.0273039,-0.0766929,0.127947,0.111205,0.0332858,-0.167725}
,
{-0.199428,0.0251158,-0.0755908,-0.113221,-0.125165,0.0358869}
,
{0.0603473,-0.015407,-0.039227,0.0199235,0.0704728,0.212153}
,
{0.145662,-0.139262,-0.117705,-0.132627,0.108625,-0.0393585}
,
{0.0912144,-0.107715,-0.147212,0.00357403,0.136132,-0.0455903}
,
{0.0255447,0.0732848,-0.044975,-0.257952,0.0183431,0.221843}
,
{0.157258,0.00730223,0.0569818,0.152729,0.022037,-0.15922}
,
{-0.0966994,0.0538154,-0.0358408,-0.10668,0.0139375,0.131107}
,
{-0.105454,-0.0370566,0.0240921,-0.135261,-0.0141863,0.0549099}
,
{0.0107351,-0.0699336,-0.0134506,-0.178724,-0.0362407,0.152794}
,
{-0.110776,0.0922643,-0.0574592,0.0663558,0.0556288,-0.0277673}
,
{-0.0188694,0.0908533,-0.119293,0.0265285,-0.0040737,0.149424}
,
{-0.23931,-0.0363331,0.0066238,0.063798,-0.00763193,0.104553}
,
{0.152493,0.0671399,-0.054927,0.0519644,0.0380923,-0.0518354}
,
{-0.248551,-0.0113036,-0.0739375,0.172949,-0.166437,0.157123}
,
{0.0769644,0.00924693,-0.0737485,-0.151753,0.0527147,-0.0865756}
,
{0.0890113,0.21891,-0.038311,-0.0270327,-0.109652,-0.133113}
,
{-0.0254904,0.075941,-0.144095,-0.237624,-0.148974,0.0286034}
,
{-0.1977,-0.0595678,-0.190628,0.127348,-0.0327343,-0.0174032}
,
{0.0128942,0.151593,0.0599221,0.0964998,0.0891571,-0.0184738}
,
{0.0356161,0.00896282,0.114628,-0.163394,0.0126429,-0.215944}
 };
  static const float bias2[1] = { -0.312908 };
  static const float weights2[][1] = { {-0.0173993}
,
{0.0350145}
,
{0.0327765}
,
{-0.0267785}
,
{0.0314048}
,
{-0.0120231}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_4_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_4_0(v, index);
}
static int assign_gen_lepton_prior_0_4_0() {
  global_gen_lepton_prior.at(0,4,0) = &specialized_gen_lepton_prior_0_4_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_4_0 = assign_gen_lepton_prior_0_4_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_5_5_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.544592,-0.499856,0.266427,-0.629779,-0.539972,-0.565616 };
  static const float weights1[][6] = { {-1.01879,-0.293774,-0.132531,0.0232578,-0.216148,-0.637804}
,
{0.00553357,-0.402337,0.291034,-0.271583,-0.750668,-0.13615}
,
{0.795248,-0.0422571,-0.419895,-0.447621,0.34494,-0.425681}
,
{2.21606,-0.190912,0.373824,0.131543,1.2964,-0.818157}
,
{-0.484848,-0.489292,0.217333,-0.704133,-0.363843,-0.536246}
,
{-0.610007,-0.447563,0.406718,-0.656642,-0.690571,-0.478875}
,
{-0.814011,-0.53804,0.24823,-0.82956,-0.695005,-0.514589}
,
{0.683248,-0.00936894,-0.00350291,-0.141029,-0.384577,-0.54463}
,
{-0.0509824,-0.0199209,-0.394923,-0.0590512,-0.340467,0.0938324}
,
{-0.0413549,0.072806,-0.0630951,-0.0758854,0.0687051,0.0768008}
,
{-0.115123,-0.1887,0.181172,-0.102203,0.14228,-0.154372}
,
{0.209784,0.100366,0.112921,-0.0345937,-0.049222,-0.174464}
,
{0.284649,-0.00402467,-0.104795,0.23447,0.297251,-0.0576301}
,
{-0.546015,-0.283395,0.060153,-0.0786372,0.137391,-0.322414}
,
{0.137482,-0.1649,-0.373058,0.120301,0.120308,0.257783}
,
{0.0735252,0.10776,-0.174629,-0.0791188,0.246935,0.071246}
,
{0.207688,0.0475865,-0.265447,-0.0277866,0.167158,0.0338422}
,
{-0.516231,-0.128011,-0.0202609,-0.395895,-0.349911,-0.775566}
,
{0.4313,-0.134354,-0.308588,-0.127714,0.268831,0.345829}
,
{0.123139,-0.0876641,-0.251061,0.435902,0.613951,-0.0194759}
,
{-0.352593,-0.0224546,-0.180172,0.250882,-0.25987,-0.443715}
,
{-0.166158,-0.0179775,-0.115361,-0.0774439,-0.0567598,-0.754282}
,
{-0.051927,-0.0586468,0.0903445,-0.0524164,0.00550499,-0.0464141}
,
{-0.120193,0.0264017,-0.136844,-0.0778536,-0.0257203,-0.628233}
,
{-0.234461,-0.211947,-0.338778,-0.834455,-0.305522,-0.141326}
,
{0.0273092,-0.271689,-0.305933,0.197676,-0.100259,0.251584}
,
{0.414688,-0.108136,-0.227611,0.123541,-0.166868,-0.172067}
,
{-0.398651,-0.322053,0.000141693,-0.18738,-0.191072,-0.0696334}
,
{-1.05622,0.0415241,-0.135604,0.528589,-0.102199,-0.163168}
,
{0.0720519,0.0799454,-0.0961486,0.156727,-0.119726,-0.145738}
,
{-0.00857571,-0.0963495,-0.0301519,0.000752835,0.039211,-0.057571}
,
{0.0168319,-0.0171083,-0.0286617,-0.135822,0.14852,0.05505}
,
{0.172888,0.0413494,0.0214591,0.0855096,0.0559989,-0.105859}
,
{0.326348,0.0551665,0.234473,-0.690148,0.371635,-0.118323}
,
{-0.121454,-0.012149,-0.0277862,0.116323,-0.0386569,0.0285255}
,
{0.00538803,-0.0550804,-0.106807,-0.00429511,-0.00922663,-0.0114449}
,
{0.00950811,0.0231578,0.00444498,-0.262852,0.0679383,-0.126913}
,
{0.0288802,-0.0801492,-0.133125,0.0384451,0.0324274,0.0712917}
,
{-0.15784,-0.0188274,-0.059023,0.0604451,0.129307,-0.147334}
,
{-0.156005,-0.107758,-0.0558265,0.0950355,-0.114069,-0.0968034}
,
{-0.0316451,-0.00285018,-0.0194017,0.0661432,0.043783,0.0558831}
,
{-0.0144622,-0.0107696,0.0528632,0.121368,0.329186,0.254897}
,
{0.0128455,0.0254963,-0.18379,0.00114222,0.0498659,0.0456029}
,
{0.205332,-0.0248092,-0.0510705,-0.174133,-0.105041,-0.0775466}
,
{-0.0105044,0.0510313,-0.122955,0.164459,-0.0737621,0.0968945}
,
{0.0379937,-0.112238,-0.206781,-0.0380411,0.021921,-0.0609101}
,
{0.134576,-0.0245044,0.0602018,-0.0988757,0.0163004,0.0689264}
,
{0.0157784,-0.170181,-0.21608,-0.223278,0.0453491,-0.0961474}
,
{-0.0891263,0.00701259,0.0106483,0.156998,-0.000238234,0.0166662}
,
{0.0896364,-0.0671072,-0.102578,0.00819105,0.120046,0.140872}
,
{-0.017132,0.0280945,0.0439992,-0.0217616,-0.0553784,0.0114325}
,
{-0.0190806,0.0184026,0.0339349,0.0590325,-0.146187,0.00336381}
,
{-0.112379,0.0741498,0.0760753,-0.102851,-0.188094,-0.150101}
,
{0.0138645,-0.0686967,-0.174899,0.0541977,-0.051752,-0.132195}
,
{-0.10117,0.0194497,0.132865,0.134061,0.0706884,0.0812215}
,
{-0.0273103,0.135409,0.0641756,-0.0354125,0.144718,-0.0325138}
,
{-0.176248,-0.132605,0.0436136,-0.149748,-0.0515531,-0.13133}
,
{0.107744,-0.0243668,0.211263,-0.142372,-0.14185,-0.0335388}
,
{-0.0664832,-0.175619,-0.0544737,0.0939097,0.0275659,-0.133856}
,
{-0.0323585,-0.0200471,-0.130848,-0.00243586,0.236042,0.0181177}
,
{0.0021236,0.297313,-0.0390574,0.0247296,0.103487,0.032511}
,
{-0.0747876,0.140715,0.0182333,-0.145785,-0.0348965,-0.0375781}
,
{-0.0171592,-0.100643,-0.0584928,0.121447,-0.0211724,-0.0492437}
,
{0.0366858,-0.0654417,-0.22721,-0.125788,-0.168667,-0.0390226}
,
{0.00440126,0.117542,-0.0965071,0.0993112,0.191486,0.00933761}
,
{-0.000840473,0.0419185,0.150343,-0.038528,0.0280944,0.0139292}
,
{-0.0866413,-0.0194935,0.110016,-0.158908,-0.156988,-0.00356776}
,
{-0.0773509,0.018781,0.00945997,-0.028571,0.0603176,-0.0155392}
,
{0.100258,0.120904,0.304711,0.0340828,-0.0861052,0.0240434}
,
{0.0163543,0.0231926,-0.0433563,0.0856238,-0.0302548,-0.0588101}
,
{0.0407549,0.193469,0.150746,0.041786,0.207505,-0.00032012}
,
{0.0386597,0.24887,-0.0256371,0.0800648,0.162186,0.0731743}
,
{0.0400748,0.0282571,-0.083824,0.0485642,0.0692177,-0.176675}
,
{-0.0351545,-0.00687875,-0.0483143,-0.135803,0.0319049,0.283787}
,
{-0.38268,-0.0827502,0.0638038,0.0569328,0.042466,0.018325}
,
{-0.0358606,-0.022669,-0.116904,-0.0848732,0.0382419,-0.00700518}
,
{0.0364528,0.225353,0.211733,-0.816219,-0.0784082,-1.38432}
,
{-0.223839,-0.093999,-0.175824,0.124782,-0.0588473,-0.110425}
,
{0.0700789,0.0382158,-0.0387318,0.0799922,0.209237,0.157986}
 };
  static const float bias2[1] = { -0.0414801 };
  static const float weights2[][1] = { {0.0283277}
,
{0.0756246}
,
{-0.0370864}
,
{0.010725}
,
{0.0180143}
,
{0.0435677}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_5_5_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_5_5_50(v, index);
}
static int assign_gen_lepton_prior_5_5_50() {
  global_gen_lepton_prior.at(5,5,50) = &specialized_gen_lepton_prior_5_5_50;
  return 0;
}
static int initialize_gen_lepton_prior_5_5_50 = assign_gen_lepton_prior_5_5_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_1_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0247877,0.052414,-0.0363027,-0.170023,0.210123,0.290645 };
  static const float weights1[][6] = { {-0.00327337,0.183381,0.418061,-0.504137,0.274978,0.035106}
,
{0.903401,-0.120729,0.0286276,-0.0303822,-0.272579,-0.0711081}
,
{0.423385,0.128129,-0.116279,0.254047,-0.253739,0.191081}
,
{0.472555,-1.08892,-0.750385,0.550014,-0.56219,-0.237089}
,
{0.0852807,0.140383,-0.2103,-0.291562,0.362106,0.427119}
,
{-0.309432,0.31469,0.154218,-0.268186,-0.0351238,0.205523}
,
{0.0414915,0.433989,0.234927,-0.169887,0.173177,0.311696}
,
{0.00162946,0.289098,-0.173504,0.0356879,0.163276,0.0166028}
,
{-0.133246,-0.0380593,-0.380511,0.131254,-0.352465,0.489048}
,
{-0.0499327,0.0852581,0.0522956,-0.0878363,0.08455,0.0427879}
,
{0.160327,0.0111095,0.132421,0.0585517,0.0592494,-0.0819417}
,
{0.113277,-0.165753,-0.1153,0.0182418,-0.178141,-0.201298}
,
{0.197517,-0.104933,0.102648,0.0571957,0.212644,0.00964879}
,
{-0.126219,-0.357309,-0.43298,-0.471378,-0.200879,0.204076}
,
{0.245764,-0.264522,-0.119164,-0.0140969,-0.0561722,-0.431689}
,
{0.0719753,-0.103988,0.101903,-0.152217,-0.180819,-0.131176}
,
{0.0903237,-0.145428,-0.00911573,-0.0705562,0.123148,0.0156852}
,
{0.0422911,0.128605,0.512355,-0.120747,-0.202825,-0.0507572}
,
{-0.191579,0.0518162,0.200658,-0.141452,0.242398,0.268999}
,
{-0.325249,-0.333486,-0.0895426,-0.197894,-0.254848,0.0635793}
,
{-0.0292056,-0.337203,-0.302137,0.113943,-0.0946009,0.0375863}
,
{0.255855,-0.3857,-0.393425,0.0492288,-0.209335,-0.0384872}
,
{0.159623,0.0930502,-0.0683877,-0.0714932,0.0606755,0.171673}
,
{-0.26314,-0.301935,-0.00941491,-0.416993,0.291665,-0.127438}
,
{-0.0739844,0.0745783,-0.0794926,0.102117,0.00688803,-0.113419}
,
{0.0721002,0.00275013,0.138279,0.0298978,0.151564,0.0278535}
,
{0.0222367,0.0826439,0.011418,0.222562,0.0474927,-0.0264584}
,
{0.0386609,-0.0538752,0.0994887,0.0255366,0.114555,0.0888976}
,
{0.130315,-0.0874348,0.122187,-0.330837,-0.0951027,0.0326516}
,
{0.14662,-0.194315,0.0723686,0.128559,0.131703,-0.185192}
,
{0.118555,0.0192828,0.1575,-0.102028,0.0749479,-0.0718534}
,
{0.089583,-0.0667355,-0.0195923,-0.242021,-0.00367474,0.0301644}
,
{-0.110977,-0.0783515,-0.140508,0.0157724,0.0716298,0.0920293}
,
{-0.230221,0.0446642,0.164783,-0.2507,0.1906,0.0387629}
,
{-0.0770723,-0.0217748,0.12613,-0.0163124,0.00716277,-0.0774209}
,
{0.00107484,0.0869795,0.0756623,-0.0284926,-0.0192836,0.0229645}
,
{-0.322029,0.209475,-0.38413,0.731393,-0.405957,0.344826}
,
{-0.142073,0.0185125,-0.234378,-0.210386,-0.035218,0.0716991}
,
{-0.194493,-0.366403,-0.138301,-0.175146,-0.0119311,0.0285225}
,
{-0.193753,0.137951,-0.256344,0.0812481,-0.00296345,0.0545538}
,
{-0.162572,-0.0105439,-0.16554,0.11743,-0.0209225,0.0241339}
,
{0.0864993,-0.767159,-0.936005,-0.98268,-0.351339,-0.224805}
,
{-0.240165,0.579824,-0.184607,-0.0334298,0.192774,-0.138209}
,
{-0.0158906,-0.0629758,0.261056,0.63609,-0.105281,0.187687}
,
{0.0264653,0.176842,0.0468472,0.163489,-0.112723,0.12036}
,
{-0.00782369,-0.031503,-0.0260705,-0.0426096,-0.0137202,0.000503849}
,
{-0.269059,-0.338392,-0.399169,-0.229659,0.0982277,-0.0997449}
,
{0.0670221,-0.00935325,-0.00212753,0.0846377,0.0490175,-0.10395}
,
{0.10697,0.123369,0.135874,0.28315,-0.0695165,0.049937}
,
{0.0440277,-0.0377961,0.0494593,-0.00121686,-0.225346,-0.0247264}
,
{0.0260366,-0.0818205,0.00399397,-0.102544,-0.0290743,-0.0114275}
,
{-0.0161035,0.170001,0.090262,-0.087668,0.0244007,-0.140783}
,
{0.0258101,-0.0708459,0.0898551,-0.0908788,0.158478,0.141431}
,
{0.0895066,0.11253,0.0558005,-0.0742962,-0.0843638,-0.0138488}
,
{0.0829685,0.000539148,0.0983533,-0.0590781,-0.0776343,-0.100638}
,
{-0.104851,0.0250612,-0.0528944,0.0791481,0.0837,-0.074076}
,
{0.0811255,-0.0646501,0.126548,-0.177905,0.00955359,0.090003}
,
{0.0507702,0.169009,-0.108322,0.146574,0.107519,0.0584452}
,
{-0.0977051,-0.122807,0.0112173,-0.13784,-0.0207991,-0.123207}
,
{0.0190884,0.0313961,-0.09124,-0.17693,-0.0627409,0.113589}
,
{0.0639516,0.0233249,0.0740758,0.0221744,0.0712844,-0.078623}
,
{-0.477849,0.0256077,-0.448075,-0.115601,0.0299172,-0.917642}
,
{0.0814229,-0.0917956,0.189387,0.0354318,-0.0338516,0.0588158}
,
{-0.0834075,0.0675257,-0.0817369,0.0801012,-0.000176449,0.0191309}
,
{-0.00930436,-0.130601,-0.164439,0.0236808,-0.0606993,0.0238276}
,
{-0.0538411,-0.00857682,-0.0357234,0.0377652,-0.026118,0.125592}
,
{0.0950547,0.160898,-0.0760826,0.362735,0.432254,-0.521496}
,
{-0.0492338,0.187397,0.117748,-0.0649909,0.0987782,0.208654}
,
{0.00671851,-0.0859421,-0.0808999,0.0355996,-0.204884,-0.118942}
,
{0.0203326,0.147663,0.0185503,0.109321,-0.043422,0.0288763}
,
{0.0291884,-0.0214128,-0.00132966,-0.0688895,-0.10646,0.0328238}
,
{0.462664,0.28912,0.434867,-0.00951411,-0.3501,0.0649952}
,
{0.035317,-0.104317,-0.0436229,-0.0520535,-0.0365003,-0.0567174}
,
{-0.0825071,-0.101083,-0.0845512,-0.0763077,0.0924579,-0.126989}
,
{-0.521002,0.209745,0.426719,0.588594,0.25167,0.352678}
,
{0.0555246,-0.0715378,0.169841,0.114424,0.301645,0.106259}
,
{-2.77815,-1.8592,3.01096,0.4651,-2.38545,-2.80446}
,
{-0.542919,-0.0598265,0.172735,0.53818,0.626681,0.448409}
,
{-0.393929,0.081416,0.30143,0.552437,0.508061,0.71155}
 };
  static const float bias2[1] = { 0.248026 };
  static const float weights2[][1] = { {0.0759385}
,
{0.131235}
,
{-0.0942054}
,
{-0.102232}
,
{0.0619484}
,
{0.0402392}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_1_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_1_51(v, index);
}
static int assign_gen_lepton_prior_6_1_51() {
  global_gen_lepton_prior.at(6,1,51) = &specialized_gen_lepton_prior_6_1_51;
  return 0;
}
static int initialize_gen_lepton_prior_6_1_51 = assign_gen_lepton_prior_6_1_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_1_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.377245,-0.19014,-0.360108,-0.134951,-0.247129,0.319502 };
  static const float weights1[][6] = { {-0.264577,0.184172,-1.21196,0.336751,-0.198463,0.730497}
,
{-0.13124,-0.133134,-0.0156753,-0.122849,-0.427308,-0.194926}
,
{0.044087,-0.502253,0.0562428,-0.0410294,-0.186041,-0.301545}
,
{0.539335,-0.50385,0.489175,-0.504425,-0.652848,0.493273}
,
{0.592592,-0.367632,-0.414144,-0.146076,-0.339998,0.627991}
,
{0.271102,0.0731058,-0.247502,-0.0524903,-0.068941,0.176229}
,
{0.142255,-0.109596,-0.468252,-0.120811,-0.120461,0.0524833}
,
{0.365977,0.178394,-0.0660788,-0.235709,0.367438,0.0295378}
,
{-0.00485307,-0.0315485,0.0487776,-0.400531,0.168287,0.0660835}
,
{-0.128453,0.0609057,-0.216935,0.0975708,0.0365809,-0.101873}
,
{-0.229272,0.231234,0.036842,-0.132067,-0.0565297,0.0466965}
,
{-0.0494856,0.0616987,-0.102442,0.0607991,0.120031,0.052764}
,
{0.270731,-0.229881,0.0342926,-0.0552655,0.151125,0.0840146}
,
{0.00719355,-0.0834951,0.100287,0.155383,-0.0118598,0.00864267}
,
{-0.00215673,0.286661,0.464857,-0.521717,0.42711,0.0741946}
,
{0.0990918,-0.127629,0.122977,-0.150611,-0.00582901,-0.0581662}
,
{0.124211,0.0237071,0.0345002,-0.330516,-0.10577,0.201772}
,
{0.0627969,-0.00702191,-0.136085,0.511815,0.353717,-0.184567}
,
{-0.067266,0.254962,0.184105,-0.0211087,-0.281862,0.108377}
,
{0.0223981,-0.0268748,-0.0214046,-0.126346,0.0472188,-0.0298105}
,
{0.0686954,0.147157,0.0739997,-0.17271,0.0830032,0.127824}
,
{-0.0945158,-0.173315,0.181267,-0.273311,0.0317145,0.163471}
,
{-0.134672,-0.00681581,-0.0238154,0.0138482,0.00364116,-0.0494915}
,
{-0.00203355,0.0779021,0.00334871,-0.116362,-0.0342902,0.0532287}
,
{0.109739,0.0521071,0.162434,0.0440324,-0.174324,0.00942034}
,
{0.00772774,-0.0785012,-0.220479,0.0688059,-0.0839676,-0.139305}
,
{0.068367,-0.0121447,-0.0839367,-0.0148427,-0.209098,-0.127906}
,
{-0.0151341,-0.174616,-0.0159088,0.0478058,-0.354631,0.043337}
,
{-0.133289,-0.494712,0.483322,0.12611,-0.251856,0.240297}
,
{-0.182336,-0.021935,-0.0714188,-0.16052,-0.00664467,-0.0404881}
,
{0.0382434,-0.00509058,0.20875,0.0663609,0.0272909,0.164774}
,
{0.120846,-0.0217312,-0.0914695,0.0204675,0.0256253,-0.049504}
,
{0.060634,0.0840815,-0.169112,0.0632027,0.103642,-0.0392589}
,
{-0.0785386,0.331352,-0.313571,-0.394577,-0.210409,0.140658}
,
{-0.16497,-0.215992,-0.0763526,-0.375136,-0.119492,-0.146431}
,
{0.013109,-0.0689081,0.0104732,0.0922719,0.018963,-0.0462465}
,
{0.259105,0.302125,-0.103494,-0.171986,0.14183,-0.178836}
,
{0.0981704,-0.0545381,-0.0509967,-0.1249,0.143449,-0.0902773}
,
{-0.032665,0.0053177,0.0485375,0.0648239,-0.0105087,0.12869}
,
{0.132274,-0.212838,0.145248,-0.5051,0.180828,0.0233645}
,
{0.06663,0.0843766,0.0729968,0.0204081,0.0219864,0.0773236}
,
{0.012451,-0.0329685,0.0484468,0.310761,0.181322,0.147069}
,
{-0.0631151,0.0280171,0.181658,-0.360391,-0.0579856,0.176386}
,
{-0.347088,0.0452865,0.0543751,-0.00843397,-0.361684,0.27564}
,
{0.160984,0.018496,-0.0675606,0.057412,0.0463784,-0.2104}
,
{-0.128814,0.00319281,0.020332,-0.0195771,-0.0969329,0.0947324}
,
{0.255629,-0.245451,0.321729,-0.594539,-0.104122,-0.0901751}
,
{0.0287745,0.168681,-0.18324,0.0135853,0.130852,-0.0208776}
,
{-0.133687,-0.205183,0.0759619,0.115571,-0.0833997,0.0242588}
,
{0.0158559,-0.26026,0.0506991,-0.123653,0.0175026,0.19357}
,
{0.126181,0.121986,-0.0126167,-0.121756,-0.0631885,-0.0696278}
,
{0.140876,0.0919176,-0.0809219,0.387564,0.341824,0.00504856}
,
{-0.139713,-0.0487071,0.112155,-0.0433923,-0.0155572,-0.0901853}
,
{0.0144391,0.164487,0.0115774,0.127979,0.115943,0.162711}
,
{-0.0145548,0.107606,-0.0744867,0.065896,0.203282,0.0388892}
,
{-0.0134157,-0.0148381,-0.0421166,-0.011639,-0.0465141,-0.0544654}
,
{0.475197,-0.368195,-0.0610627,-0.12162,-0.101675,-0.0762858}
,
{0.0191891,-0.193761,0.0588562,-0.0235242,0.203403,0.147381}
,
{-0.10328,0.0302368,0.0125742,-0.0776332,0.117171,0.00179109}
,
{-0.00958397,0.205227,0.0950639,-0.211678,-0.441048,-0.038426}
,
{0.0336603,-0.0393401,-0.0512897,0.0227445,0.0900951,-0.0511563}
,
{-0.483234,-0.514413,0.0169692,-0.115629,-0.790465,-0.856535}
,
{-0.222035,0.209057,-0.245585,0.0134843,-0.0738597,-0.069692}
,
{-0.019883,-0.0421107,-0.0609843,-0.00992755,-0.236432,0.195048}
,
{-0.0320244,-0.120678,0.045781,-0.0841443,0.174231,-0.000765048}
,
{0.0733646,0.042719,-0.0559618,0.0441066,0.0740196,-0.061905}
,
{-0.229991,0.150549,0.261607,0.141796,0.589759,-0.11889}
,
{-0.0347435,-0.00768216,0.062305,-0.0770218,0.234506,-0.0325435}
,
{0.0202686,0.116066,-0.189303,-0.0464874,0.147778,-0.0522105}
,
{0.153957,-0.142178,-0.142688,0.0390678,0.119397,-0.0599221}
,
{-0.0481547,0.0222387,0.0524238,-0.0296934,-0.0320148,0.0526891}
,
{0.139315,-0.414862,-0.410844,0.332588,-0.00243814,0.161686}
,
{0.0498493,-0.0310741,0.0864131,-0.00130764,0.346743,-0.189505}
,
{0.241111,-0.0650995,-0.0966695,0.211996,0.225804,-0.00838476}
,
{0.532495,-0.275536,0.577517,0.496379,1.27799,-0.617297}
,
{-0.0838984,0.1085,-0.0574317,-0.0185366,-0.158456,0.00946959}
,
{0.0755271,-0.159382,0.132061,-0.0361915,0.0016093,-0.0397141}
,
{0.431828,-0.013276,0.677485,0.279644,1.50703,-0.669774}
,
{0.231614,-0.213133,0.621526,0.309411,1.41211,-0.834806}
 };
  static const float bias2[1] = { 0.291052 };
  static const float weights2[][1] = { {0.0987431}
,
{-0.0698317}
,
{-0.0832881}
,
{-0.146393}
,
{-0.0708671}
,
{0.0833846}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_1_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_1_52(v, index);
}
static int assign_gen_lepton_prior_6_1_52() {
  global_gen_lepton_prior.at(6,1,52) = &specialized_gen_lepton_prior_6_1_52;
  return 0;
}
static int initialize_gen_lepton_prior_6_1_52 = assign_gen_lepton_prior_6_1_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_1_53(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.153486,0.118676,-0.02453,0.167198,-0.144796,-0.14547 };
  static const float weights1[][6] = { {0.13401,-0.0651047,-0.082899,0.233935,-0.260274,-0.25989}
,
{-0.0496684,-0.10501,-0.00439318,0.0851374,0.127072,0.238179}
,
{-0.00140561,0.313782,-0.187651,-0.188266,-0.069505,-0.414095}
,
{0.200313,0.0879721,-0.0410583,0.0767739,-0.0777974,-0.00733774}
,
{0.276999,0.0896238,0.0304719,0.139017,-0.310503,-0.104527}
,
{0.0704705,0.254774,-0.0349661,0.351429,-0.185268,-0.140806}
,
{0.109306,0.15427,0.0195178,0.167053,-0.423025,0.00198886}
,
{0.0743353,0.208692,-0.189688,0.165694,0.0959995,0.122246}
,
{0.0295943,-0.203986,-0.0954914,-0.139882,-0.11129,0.508974}
,
{-0.0798889,-0.0107476,-0.10223,0.0589793,-0.0768231,0.11419}
,
{-0.147217,0.11426,-0.00609001,-0.0859218,0.0404521,0.0644138}
,
{-0.0670875,0.0491001,-0.135397,-0.147567,0.0316654,-0.143093}
,
{-0.056771,0.12042,-0.141248,0.193154,0.0896652,-0.0524202}
,
{0.0952976,-0.11254,-0.0163752,-0.0051428,0.0134521,0.142037}
,
{-0.079983,0.271163,-0.0133094,-0.169689,-0.0275948,-0.0307925}
,
{-0.140317,0.0647442,0.180223,0.0528368,0.141148,0.0176543}
,
{0.00089677,0.227387,0.175748,0.180517,0.0656262,-0.0600199}
,
{-0.285202,0.166525,0.0380601,-0.208715,-0.233562,-0.206202}
,
{-0.0101726,-0.0301827,-0.0372748,0.0564227,-0.0589929,0.00928843}
,
{-0.0426022,-0.107904,-0.117558,0.10257,0.0695267,0.13224}
,
{-0.0266312,-0.0184531,-0.162208,0.0373678,0.0616764,-0.286178}
,
{0.196819,-0.142016,-0.24905,-0.0807874,0.0518305,-0.114844}
,
{0.122216,-0.00314112,0.0765564,-0.0581945,0.0683706,-0.17184}
,
{0.25412,0.0430413,-0.0954481,-0.040082,0.157108,-0.20001}
,
{-0.140387,0.503987,-0.0237256,-0.145418,0.583912,-0.00634454}
,
{0.361039,-0.185149,-0.165639,0.0126099,0.0147335,-0.028026}
,
{-0.030592,-0.0941731,-0.106752,0.0977106,-0.120466,-0.144544}
,
{-0.182805,-0.2286,0.0359512,0.0697311,-0.236048,-0.171036}
,
{-0.118523,0.179199,-0.103309,0.110541,0.283069,0.0443866}
,
{-0.0559375,-0.0511939,0.0530042,0.0493756,0.159681,0.0459714}
,
{0.0373379,-0.106161,0.113402,0.178526,0.124679,-0.386886}
,
{-0.0589766,-0.185407,-0.0129393,0.0486544,-0.0857334,0.0619412}
,
{-0.0255351,0.0836533,0.146072,0.0881433,-0.00795657,-0.192275}
,
{0.509797,0.0444238,-0.0178159,-0.437335,-0.19479,-0.204643}
,
{-0.063658,-0.0595557,0.0508065,-0.00669413,-0.0275841,0.106045}
,
{0.127763,-0.0428912,0.0832887,-0.149289,-0.0345053,-0.18759}
,
{0.360965,0.226439,-0.0255092,0.197531,0.43145,-0.647537}
,
{-0.0744942,0.0579745,-0.0846639,0.0747713,0.00546289,-0.0400982}
,
{0.168943,0.114768,-0.0445276,0.0362809,0.225838,0.343608}
,
{0.0287763,0.124873,0.178993,-0.267402,-0.196925,-0.428462}
,
{0.135141,-0.0616362,0.131754,-0.146697,-0.0109578,-0.00500479}
,
{0.126986,-0.0459023,0.033733,-0.540913,-0.62174,0.382094}
,
{-0.0454965,0.184838,0.116637,0.017547,-0.244191,-0.101695}
,
{-0.2055,0.226067,0.178147,-0.233499,-0.3236,-0.00881587}
,
{0.134566,0.0488656,-0.00495176,-0.339205,-0.0333467,-0.0225628}
,
{-0.144236,0.0341573,0.00311607,0.236439,0.113438,0.030551}
,
{0.371375,0.468995,-0.0662929,0.304483,0.569559,-0.20514}
,
{0.16506,0.171288,0.0613186,-0.016307,0.0206119,0.0519592}
,
{0.174623,-0.008906,-0.0804268,-0.100519,0.042164,0.454371}
,
{0.059168,-0.115549,0.0501317,0.0126283,-0.0148306,-0.0639252}
,
{-0.0905664,-0.0549042,-0.0240665,-0.0994347,-0.150057,-0.0650552}
,
{-0.151191,-0.0770452,0.0502836,-0.026849,-0.159456,0.119816}
,
{0.179496,-0.0288452,0.103939,0.0397547,0.172445,0.119051}
,
{0.194392,0.123619,0.114737,-0.157741,-0.107184,0.156113}
,
{-0.30639,0.0477187,0.0521935,-0.12029,-0.0669855,0.193412}
,
{0.0191365,-0.116159,-0.0813603,-0.0310934,-0.062457,-0.0614539}
,
{-0.330875,0.028322,0.0114897,0.0882475,0.0770642,-0.188986}
,
{-0.625465,-0.0670175,0.0343206,-0.199628,-0.118315,0.137396}
,
{-0.459551,0.0262324,-0.0169384,-0.262158,0.161623,-0.00901093}
,
{-0.0737453,-0.185019,0.146273,0.0362815,0.158185,0.0924115}
,
{-0.0488452,0.00789322,0.0720365,-0.143237,-0.186377,-0.0327155}
,
{0.8303,-0.992049,0.197864,0.0161181,-0.864644,-0.110943}
,
{0.100801,-0.303225,0.0665823,-0.0691637,-0.0529885,0.189086}
,
{-0.000574806,-0.0169691,0.0362315,0.129307,0.228429,0.0519361}
,
{-0.266795,0.304614,0.0917556,-0.138291,-0.342385,0.100217}
,
{-0.0994458,0.0909119,-0.0444325,-0.0083705,0.067468,0.0516501}
,
{-0.203144,0.107099,-0.0687311,-0.303015,0.750621,0.0888363}
,
{-0.106588,0.134055,0.125287,0.0371282,-0.0761501,0.185144}
,
{0.103816,0.106993,0.18551,-0.0821751,-0.171631,0.00322747}
,
{-0.160139,0.264018,0.103746,-0.296516,-0.246002,0.21241}
,
{-0.037045,0.00940534,-0.0799711,0.176453,0.211381,-0.0355235}
,
{0.835602,0.0586351,-0.138713,0.492001,-0.534105,-0.120586}
,
{-0.323749,0.0969511,-0.191109,-0.265194,-0.103158,0.115623}
,
{-0.38584,0.263436,-0.0605634,-0.455027,-0.393746,0.0276476}
,
{-0.775737,-1.36683,-0.15392,-1.38102,1.08683,-0.0740639}
,
{0.227427,-0.231614,-0.0526551,-0.141169,0.675926,-0.0112256}
,
{0.124254,0.0762163,-0.209081,-0.00353505,0.259425,0.26328}
,
{-0.697709,-1.24997,-0.0644909,-1.22572,1.16185,0.0643071}
,
{-0.583722,-1.17901,0.0500723,-1.187,1.29228,0.0714458}
 };
  static const float bias2[1] = { 0.0754968 };
  static const float weights2[][1] = { {0.0913724}
,
{0.259089}
,
{-0.197218}
,
{0.139062}
,
{-0.132481}
,
{-0.435194}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_1_53(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_1_53(v, index);
}
static int assign_gen_lepton_prior_6_1_53() {
  global_gen_lepton_prior.at(6,1,53) = &specialized_gen_lepton_prior_6_1_53;
  return 0;
}
static int initialize_gen_lepton_prior_6_1_53 = assign_gen_lepton_prior_6_1_53();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_1_54(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0322827,-0.0094716,0.0858,-0.101869,0.0978686,0.216742 };
  static const float weights1[][6] = { {-0.158462,0.0582472,0.0200264,0.143576,0.304938,0.075236}
,
{-0.138242,-0.0706022,0.142518,0.417051,0.0506559,0.141624}
,
{0.327252,-0.00577462,-0.673827,0.17216,0.424056,-0.0316626}
,
{-0.246247,-0.166143,1.50819,0.152221,-0.939148,-0.0980857}
,
{0.0700304,-0.0185532,-0.122321,-0.254407,0.149869,0.0352728}
,
{-0.192097,0.0859562,-0.153485,-0.0253477,0.21626,0.309328}
,
{-0.0378072,-0.125422,0.0674465,-0.131742,0.131132,0.224433}
,
{0.0948471,0.17594,-0.132875,-0.240343,0.205607,-0.00814464}
,
{0.0531549,0.0494084,0.212954,-0.16933,-0.21049,-0.0324285}
,
{-0.0399446,-0.179433,0.200553,0.104015,0.0930619,-0.134343}
,
{0.0403908,0.0637769,-0.136521,-0.0594262,0.0209212,-0.0673291}
,
{0.0529348,-0.0514471,0.0562005,-0.0681632,0.0267343,-0.0125693}
,
{-0.168331,-0.17171,-0.121765,0.00498393,-0.0157558,0.183698}
,
{-0.129293,-0.230684,0.0738076,0.0249076,-0.0748062,0.111654}
,
{-0.00426698,-0.0910474,0.177359,0.220096,0.285335,-0.507244}
,
{0.0946551,0.00745647,-0.149919,0.248472,-0.108194,0.150631}
,
{-0.0562856,-0.0602607,-0.0647631,-0.0293002,0.153296,-0.164067}
,
{-0.0503119,0.0678563,-0.0548721,0.149878,-0.0059348,0.0299525}
,
{-0.0967706,-0.0485821,-0.057753,0.0808814,0.140696,0.122994}
,
{-0.282633,-0.0905891,0.00074786,0.107586,0.0124744,0.0455068}
,
{0.168631,-0.249946,0.0366181,-0.0363992,-0.0387296,0.0134543}
,
{-0.127517,0.125262,0.212077,-0.0096288,-0.0479688,-0.218331}
,
{-0.10004,-0.0063677,-0.0152684,-0.0458008,0.0570535,-0.120851}
,
{-0.183226,-0.143278,0.013007,0.120393,-0.0354892,0.142717}
,
{0.21651,0.169205,0.033493,-0.353944,0.000740492,0.15002}
,
{-0.121756,-0.0680288,0.173919,0.0326598,-0.0548156,-0.0660813}
,
{-0.0598892,-0.183157,0.0559435,-0.0211067,-0.217656,-0.224928}
,
{-0.127621,-0.00222259,-0.0698019,-0.181426,0.154208,0.0801279}
,
{-0.0518712,-0.00976923,-0.440144,0.388441,-0.00759435,-0.438976}
,
{0.0100198,0.0944197,0.0187534,-0.0192341,-0.0214032,0.0804853}
,
{0.115708,0.0522108,0.293353,0.385571,-0.149247,0.00643655}
,
{-0.073052,-0.114462,-0.0526485,0.0160239,-0.145463,0.0661069}
,
{0.11242,0.0597673,-0.093351,0.182284,0.0334537,-0.183591}
,
{0.0814922,0.0889799,0.669115,-0.0599636,-0.401916,0.0753395}
,
{-0.117598,-0.0976448,-0.231062,-0.476902,-0.159021,0.161029}
,
{0.154913,0.180304,-0.272933,0.061446,0.00506527,0.21126}
,
{0.0263122,-0.0249513,0.230042,0.19325,0.0251667,-0.205886}
,
{-0.162927,0.0829688,-0.253433,-0.172693,-0.00839498,0.117406}
,
{-0.167058,-0.0360233,-0.135503,-0.172367,0.111492,-0.125446}
,
{-0.361759,0.049349,-0.210714,-0.152945,-0.138365,0.495987}
,
{-0.0255858,-0.172022,-0.137502,-0.206661,-0.000781406,0.0579383}
,
{-0.116987,-0.0978758,-0.057409,-0.236802,-0.141056,-0.0865806}
,
{-0.416628,-0.114002,-0.306919,-0.0901612,0.117162,0.286753}
,
{0.0177604,0.182654,-0.0974256,-0.159565,-0.146381,0.179415}
,
{-0.224416,-0.0418907,0.0104382,0.0609677,0.0951243,0.223665}
,
{0.259107,0.0156154,0.163958,0.158362,0.0906434,-0.267093}
,
{0.074053,0.0616756,0.0316165,-0.263149,-0.0463822,-0.438493}
,
{-0.162003,0.00546798,-0.012465,0.0890362,-0.0238408,0.034573}
,
{-0.143394,0.223394,0.0442067,0.00177562,-0.0553601,0.0881859}
,
{0.136082,-0.0738252,-0.254249,-0.242989,0.168456,-0.00836203}
,
{0.212614,-0.00916542,0.0740417,0.120228,0.10347,-0.0264149}
,
{-0.0228151,-0.157862,0.181306,0.0547149,0.0745545,-0.0989839}
,
{0.222731,-0.13355,-0.0657056,-0.122918,0.0424545,-0.139541}
,
{-0.0897507,0.042548,-0.00666647,-0.137368,-0.17712,0.0426135}
,
{-0.237911,-0.167868,0.106162,-0.19379,-0.371786,1.11483}
,
{0.137392,0.0457847,0.178146,0.056364,0.304573,-0.2796}
,
{0.19833,-0.0225466,0.0343616,0.136069,-0.44116,-0.294472}
,
{-0.104321,0.100579,0.212044,0.0447508,-0.247337,0.998601}
,
{-0.201569,-0.0529191,-0.119064,-0.0793122,-0.495287,0.771496}
,
{0.0311025,-0.0457396,-0.301873,0.279533,-0.176685,-0.0564699}
,
{0.0500879,0.0945768,-0.0290757,-0.230379,0.0274899,-0.208497}
,
{0.431983,0.0401518,0.123263,-0.69565,-0.712993,0.470144}
,
{0.164729,-0.0671862,-0.275256,0.377247,-0.124995,-0.00395403}
,
{0.06677,-0.0859363,-0.0957685,0.31522,-0.143756,-0.335243}
,
{-0.341104,0.229279,0.0115317,0.0555299,-0.451429,0.155809}
,
{0.0164584,-0.0262333,0.0909772,-0.210822,-0.226902,0.177873}
,
{0.21648,0.0133598,0.0856901,-0.158167,-0.219931,-0.48847}
,
{-0.257062,-0.0345217,-0.0309792,0.120027,-0.311743,0.274131}
,
{-0.111531,0.0014426,-0.00562363,-0.0810317,-0.234036,0.0495542}
,
{0.0730783,0.0980344,-0.319662,0.469244,0.217806,-0.563359}
,
{0.0959221,-0.125704,-0.00201603,-0.303479,-0.00828476,-0.324154}
,
{-0.325907,-0.0233056,0.014623,-0.519945,0.0857731,-0.114113}
,
{-0.126478,-0.129704,-0.271189,0.252732,-0.0714682,-0.595156}
,
{0.148053,-0.0953248,-0.317114,0.351717,0.251514,-0.696568}
,
{0.0197751,-0.0983045,-0.134621,0.108042,0.184717,-0.0874089}
,
{-0.329305,0.00986668,0.413803,-0.41721,-0.132175,0.310568}
,
{0.0984615,-0.165556,-0.0922578,-0.00537374,-0.0803921,0.20147}
,
{0.146097,-0.0458454,-0.026595,0.0196763,-0.0490104,-0.241767}
,
{-0.197785,-0.0148673,0.165938,-0.0533742,0.186965,0.113036}
 };
  static const float bias2[1] = { 0.0203058 };
  static const float weights2[][1] = { {-0.216349}
,
{-0.00374087}
,
{0.131104}
,
{-0.0951575}
,
{0.21835}
,
{0.0968399}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_1_54(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_1_54(v, index);
}
static int assign_gen_lepton_prior_6_1_54() {
  global_gen_lepton_prior.at(6,1,54) = &specialized_gen_lepton_prior_6_1_54;
  return 0;
}
static int initialize_gen_lepton_prior_6_1_54 = assign_gen_lepton_prior_6_1_54();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_2_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.205489,-0.105117,0.0105657,-0.0833624,0.0440883,-0.1213 };
  static const float weights1[][6] = { {-0.0744994,0.117965,0.0152405,-0.107967,-0.00573883,-0.203299}
,
{-0.327243,0.0179747,-0.210441,-0.163506,0.217755,0.0940809}
,
{-0.128838,-0.131759,-0.204064,0.132202,-0.186234,0.0607502}
,
{0.218448,0.0503479,0.302133,-0.0876997,-0.0277778,0.043924}
,
{-0.259777,-0.17221,-0.0581061,0.0828636,-0.0062613,0.0816878}
,
{-0.252938,-0.150328,-0.131734,-0.0703008,0.00211002,-0.162126}
,
{-0.364097,-0.107484,0.145895,0.118246,0.0938873,-0.291121}
,
{-0.00373997,-0.10183,-0.202965,0.0277001,0.146698,-0.158163}
,
{0.158222,-0.161151,-0.136901,0.0625981,0.0201372,-0.164416}
,
{-0.0237945,-0.193911,0.232233,0.113788,-0.00296834,0.0700815}
,
{0.101538,0.153383,-0.0710137,0.0373211,0.127135,0.0535116}
,
{-0.00361995,0.0930092,-0.0165349,-0.214524,-0.176715,0.212603}
,
{-0.177063,-0.241974,0.258984,0.0235896,-0.184305,-0.367658}
,
{-0.156024,-0.112688,-0.0510932,-0.0655266,-0.18126,-0.0446107}
,
{-0.180442,-0.204519,0.330574,-0.0802086,-0.24902,-0.116333}
,
{0.13395,0.0142359,-0.196689,-0.134314,-0.00517398,-0.121343}
,
{-0.361588,-0.101781,0.108226,0.0575718,-0.252038,-0.0971946}
,
{0.0849465,0.028462,0.133441,0.0646569,-0.00668922,-0.0429214}
,
{-0.0855142,-0.238198,0.139594,-0.0419597,-0.155843,-0.166195}
,
{0.248812,-0.000840568,0.0227201,-0.0532454,-0.102452,-0.241677}
,
{-0.0555798,-0.121123,-0.119625,-0.134701,-0.153352,-0.0617327}
,
{0.147435,-0.254226,-0.216796,-0.0304221,-0.0367601,-0.237473}
,
{-0.00624082,0.136786,0.0266378,0.13944,0.067517,0.137314}
,
{-0.207834,-0.215219,-0.159596,0.0286804,0.145987,-0.21612}
,
{-0.231462,-0.261329,-0.0242363,0.0319046,-0.14147,-0.150375}
,
{-0.346233,-0.0607763,0.0215885,-0.135829,-0.0816844,-0.212736}
,
{-0.199739,0.050399,0.335935,-0.120275,-0.210285,-0.0940952}
,
{-0.174266,0.226751,0.248206,-0.267858,0.0214053,-0.00907799}
,
{-0.296425,-0.262808,-0.0764898,0.0515853,-0.0109306,0.186987}
,
{0.245154,-0.0614431,-0.128299,-0.0573241,0.033705,-0.0640706}
,
{-0.0383507,-0.141202,0.108901,0.0919184,-0.00959665,-0.119698}
,
{-0.205502,0.241898,0.108468,0.171404,0.237994,0.0284579}
,
{-0.0288224,0.0635803,0.069567,-0.0990934,-0.112491,0.03063}
,
{0.18081,-0.397246,0.372816,0.103508,0.22981,-0.230959}
,
{-0.210707,0.030765,-0.257973,0.152238,-0.150309,-0.0719474}
,
{0.22023,-0.00685007,0.111608,-0.0506623,0.219664,-0.13498}
,
{0.123595,0.165677,-0.187783,-0.364892,0.229191,0.0374141}
,
{-0.187301,-0.0317386,-0.0707758,0.0948834,0.0206041,0.00422207}
,
{-0.260476,0.189256,-0.314615,-0.168952,0.0557365,0.300836}
,
{0.0129667,-0.20206,-0.216218,-0.0781725,-0.198192,0.150577}
,
{-0.0819182,-0.0401156,-0.0830851,0.218503,0.161713,0.0841777}
,
{0.102699,0.148169,-0.202064,-0.404258,-0.319548,0.010685}
,
{0.101661,-0.0182734,-0.0525944,-0.0473305,-0.0294664,-0.132311}
,
{0.121398,-0.0720137,0.237218,0.015017,-0.152557,0.103511}
,
{-0.0113758,0.0583647,0.0799548,0.209276,0.00544408,0.129086}
,
{0.056622,0.0930311,-0.0110385,-0.0378189,-0.0228495,0.120263}
,
{0.0348778,0.0469575,-0.479217,0.160374,0.0396679,-0.0282432}
,
{0.0451953,0.134021,-0.107907,0.108446,-0.0259214,0.068827}
,
{-0.0623278,-0.0841957,-0.0906949,-0.0461102,0.112492,0.00345112}
,
{0.0104889,0.159343,0.0100046,-0.105358,-0.0544966,-0.0319486}
,
{-0.033675,0.0944375,0.204813,0.170142,-0.200939,0.0389613}
,
{-0.133887,-0.116851,-0.690972,-0.0461344,0.42909,0.124621}
,
{-0.00492594,-0.016174,-0.108091,-0.157198,-0.135027,0.069682}
,
{0.0951347,0.235796,-0.157233,-0.119555,-0.0146213,0.0125555}
,
{-0.177242,0.0972217,-0.236399,-0.128215,0.0566562,0.116272}
,
{-0.122879,0.189114,0.0757325,0.230013,0.156167,0.27371}
,
{-0.213307,-0.0844735,0.136988,-0.249444,0.0501002,-0.228097}
,
{-0.108418,-1.44896e-05,-0.0691303,-0.0394492,-0.141999,-0.271322}
,
{-0.192258,0.0871491,-0.00851661,0.0225761,0.0668279,-0.109487}
,
{0.126756,0.00353996,0.269518,-0.0131852,-0.0401711,-0.00581311}
,
{0.230601,0.159824,0.0427896,0.0800226,0.0443424,0.125899}
,
{-0.25691,0.30105,0.0742338,0.0707519,0.278141,-0.00042786}
,
{-0.0207968,0.186245,-0.0462443,0.00704334,0.0325622,-0.222847}
,
{0.079675,0.0152726,0.13173,0.180825,-0.111591,-0.144626}
,
{0.161016,-0.298397,0.0988735,-0.0800677,-0.146373,-0.14692}
,
{0.109065,0.100487,0.148588,-0.00541612,0.0542718,-0.170244}
,
{0.149817,-0.139313,-0.0489626,-0.0328435,-0.137842,0.0593405}
,
{-0.181811,-0.159679,-0.0220941,0.135673,-0.111167,-0.191707}
,
{0.0537074,-0.146656,0.29016,0.0684112,-0.229603,-0.19209}
,
{-0.226612,-0.222618,-0.146375,0.282137,0.0632572,-0.0777462}
,
{0.243979,-0.0758443,0.00400893,0.179849,-0.0692322,0.0126874}
,
{0.0776606,-0.0601528,0.278794,-0.133778,-0.0381127,0.0466062}
,
{0.0909141,0.0817542,0.0234154,-0.0505327,0.0955983,0.0631536}
,
{-0.0340723,0.169191,-0.0699612,0.205447,0.152562,0.0131703}
,
{0.460216,-0.295278,0.341326,0.244981,-0.325987,-0.0428019}
,
{0.149466,-0.10109,0.112997,-0.122405,0.0873145,0.202525}
,
{0.312527,-0.374707,0.0275856,0.22725,-0.27355,-0.415183}
,
{0.562714,-0.20256,0.597819,0.369018,-0.245692,-0.107947}
,
{0.418201,-0.329931,0.374302,0.193261,-0.321353,0.0115579}
 };
  static const float bias2[1] = { 0.511787 };
  static const float weights2[][1] = { {-0.155143}
,
{0.159791}
,
{-0.0900754}
,
{-0.323751}
,
{0.131141}
,
{0.214344}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_2_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_2_50(v, index);
}
static int assign_gen_lepton_prior_6_2_50() {
  global_gen_lepton_prior.at(6,2,50) = &specialized_gen_lepton_prior_6_2_50;
  return 0;
}
static int initialize_gen_lepton_prior_6_2_50 = assign_gen_lepton_prior_6_2_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_2_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.172992,-0.0398255,-0.298649,0.404663,0.642132,-0.176443 };
  static const float weights1[][6] = { {-0.987761,-0.276477,-0.661461,-0.838379,-0.237159,1.39877}
,
{0.162866,-0.115095,0.301762,0.242134,-0.184772,-0.46262}
,
{-0.0907747,0.173803,-0.799362,-0.276343,0.00114394,0.212588}
,
{-0.208893,0.450243,0.0419867,1.1025,0.225287,-1.01491}
,
{0.243664,0.0382904,-0.0706066,0.333847,0.425871,-0.116361}
,
{0.295549,-0.193779,-0.307607,0.337888,0.799082,-0.211194}
,
{0.174157,-0.139919,-0.39155,0.302209,0.69099,-0.0641874}
,
{0.142523,-0.183605,0.352754,-0.0698694,0.249683,-0.261118}
,
{-0.335437,-0.715039,-0.0217363,0.0294318,-0.156492,-0.653504}
,
{-0.157949,0.00354029,0.062136,-0.100308,-0.212661,-0.0744653}
,
{-0.0890162,-0.0471093,-0.0440767,0.00166192,0.0412827,-0.00191398}
,
{0.0754261,-0.0275952,0.143525,0.0760927,-0.0692794,0.0496805}
,
{-0.0202879,-0.166354,-0.315597,-0.11114,0.235864,-0.1501}
,
{0.28403,-0.184348,-0.0315983,-0.00535911,-0.170629,0.0242719}
,
{0.0484015,-0.165619,-0.194993,-0.43287,-0.325587,-0.210067}
,
{-0.145947,0.0568383,0.0965492,0.0557416,0.00229805,0.0765855}
,
{0.0713405,-0.0640298,-0.227716,0.225785,0.102769,-0.280756}
,
{0.310935,0.873032,-0.0082281,0.221936,0.0177792,0.723296}
,
{-0.0361386,0.0129084,0.0580583,-0.161259,0.188746,0.0361913}
,
{-0.335048,-0.271726,-0.162964,0.0340372,-0.0207885,-0.0393184}
,
{-0.121204,-0.233767,0.139659,-0.0420568,0.0511335,-0.123021}
,
{-0.240234,-0.366676,0.0971371,0.109365,-0.0982164,0.014978}
,
{0.150808,-0.0274734,-0.116551,0.0768728,-0.0369804,-0.151083}
,
{-0.212297,-0.323996,-0.332004,0.137804,-0.189516,0.0371023}
,
{0.00939023,0.0232014,-0.0492929,-0.116807,0.0492765,0.134669}
,
{0.0810485,0.103278,0.0266218,0.0946751,0.123451,0.130302}
,
{-0.0437521,-0.0219724,-0.00206702,-0.0400566,0.0218996,0.0231957}
,
{-0.0394511,0.0903056,-0.212002,-0.0234708,0.020397,-0.101503}
,
{-1.33938,-0.356733,-0.0940627,0.0213135,0.107651,0.110007}
,
{0.13793,-0.070178,-0.0406767,-0.10848,0.131598,0.0972401}
,
{-0.0545592,0.00191554,-0.028954,0.00708236,-0.0188018,-0.00856744}
,
{-0.0861903,0.0424175,0.119183,0.00939663,0.155625,0.0408538}
,
{-0.0224897,0.0483117,0.0499245,-0.0237668,0.155846,-0.00120561}
,
{-0.0283451,-0.047671,-0.112082,0.0328762,-0.00598589,-0.0137408}
,
{-0.0416608,0.0535457,0.060064,-0.070151,0.0481289,0.0983267}
,
{-0.0288243,-0.0747133,-0.0259268,0.00664668,-0.00582581,0.0461377}
,
{0.516824,-0.179225,0.307091,0.0374057,-0.0367044,0.061523}
,
{0.0299886,-0.102952,0.00355534,0.108606,-0.0426943,-0.0659403}
,
{0.0206212,-0.330973,0.0220627,-0.0306557,0.0321385,-0.058126}
,
{0.185678,0.0708186,-0.112149,-0.16281,0.0799015,-0.149837}
,
{-0.0512702,-0.165308,0.00924818,0.0213275,-0.00534961,0.0477431}
,
{0.230762,0.660605,-0.158363,0.0838567,-0.0782457,0.248986}
,
{0.0472519,-0.285553,-0.0980195,0.0375647,-0.00674552,-0.0848834}
,
{0.0941765,0.513587,0.0253638,0.0923019,-0.0744224,0.209174}
,
{-0.0894523,0.0904074,0.0531658,-0.02028,0.155684,0.0638935}
,
{0.0119572,0.0251644,0.0108007,-0.0143492,0.0108073,-0.0348929}
,
{0.227554,-0.505214,0.122057,-0.0491587,0.0849857,0.0213111}
,
{-0.136642,0.0352868,-0.176968,-0.0153699,-0.144391,-0.116054}
,
{-0.0635742,-0.287873,0.226125,-0.0666434,0.102315,-0.113122}
,
{-0.0322027,-0.11049,-0.00184085,-0.0357479,0.00464921,-0.0665831}
,
{-0.013791,-0.00155155,-0.035016,0.009394,-0.014179,0.019015}
,
{-0.342447,-0.29617,-0.203387,0.0546797,-0.0452584,0.159192}
,
{0.0268054,0.181112,-0.0232863,-0.000140753,0.0207845,0.00793812}
,
{-0.355452,-0.273325,-0.115893,-0.00310506,0.0347586,0.0343032}
,
{-0.0659702,0.104269,-0.0422937,-0.029402,0.128171,0.0412998}
,
{0.0111219,0.00612439,-0.0130379,-0.0455787,0.000912808,-0.0365582}
,
{-0.206026,-0.283832,0.385259,-0.221118,0.0907781,0.103202}
,
{-0.051034,-0.0159969,-0.0309923,-0.0478774,-0.0580313,-0.0687414}
,
{0.189722,-0.0272991,0.0514412,0.0136215,-0.0285613,-0.00332117}
,
{0.135076,-0.0118198,0.0524801,0.0844227,0.175903,-0.177391}
,
{0.0389389,-0.0496446,-0.00104848,0.0204842,-0.0686764,0.000935074}
,
{-0.0139855,0.238296,0.109102,0.379834,0.0710998,0.142713}
,
{-0.000793167,-0.00636608,-0.053608,-0.124782,-0.0322448,0.130398}
,
{-0.0856531,-0.057424,-0.0499495,0.076746,-0.219892,0.0649655}
,
{-0.0603432,0.0113197,0.0267243,-0.227137,0.0367823,-0.0345087}
,
{-0.05382,-0.0139551,0.0853966,0.0433544,0.0247886,-0.00492303}
,
{0.0368222,-0.479155,-0.529608,-0.616759,-0.386653,-0.148928}
,
{0.0219734,0.0562184,-0.0625167,0.118332,-0.00436442,0.0821347}
,
{0.0594554,-0.0733422,-0.07838,0.143282,-0.0627472,0.00567798}
,
{-0.036504,0.00572777,-0.0176623,0.0398649,0.119654,-0.0934078}
,
{-0.03974,-0.0323184,0.042181,0.0650687,-0.0022601,0.066049}
,
{-0.546887,-0.165776,0.370982,0.0693835,0.109013,-0.166703}
,
{0.0870662,-0.119396,-0.0184811,-0.0801005,-0.0892098,0.0201137}
,
{-0.0519337,0.124045,0.059005,0.0178408,-0.026789,0.0319501}
,
{-0.0918317,0.0512212,-0.0118473,-0.668963,-0.320226,0.0386605}
,
{-0.0311995,0.0912646,-0.296655,-0.199809,0.0535964,-0.0630446}
,
{-0.757637,0.42412,-0.0814111,-0.0461733,-0.747122,0.873051}
,
{0.00551394,0.285482,-0.0716752,-0.679138,-0.071114,0.280839}
,
{0.249309,0.280703,0.16817,-0.606758,-0.0389454,-0.0684626}
 };
  static const float bias2[1] = { 0.0658108 };
  static const float weights2[][1] = { {0.14364}
,
{-0.13216}
,
{-0.101609}
,
{0.106299}
,
{0.110707}
,
{-0.070585}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_2_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_2_51(v, index);
}
static int assign_gen_lepton_prior_6_2_51() {
  global_gen_lepton_prior.at(6,2,51) = &specialized_gen_lepton_prior_6_2_51;
  return 0;
}
static int initialize_gen_lepton_prior_6_2_51 = assign_gen_lepton_prior_6_2_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_2_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.450439,-0.520922,0.650842,-0.293449,-0.0662341,0.694454 };
  static const float weights1[][6] = { {0.338315,-0.698949,-0.107776,-0.00307809,-0.0777243,0.260702}
,
{0.0588245,0.00819697,-0.213896,-0.14704,0.356244,0.155218}
,
{-0.0668735,0.0844077,-0.024229,-0.273491,0.606645,0.0154085}
,
{1.24782,-0.229648,0.710199,-0.79575,0.11607,1.26616}
,
{0.373794,-0.570469,0.47392,-0.157539,0.0201387,0.541326}
,
{0.336562,-0.596124,0.651327,-0.216516,-0.17514,0.627723}
,
{0.367729,-0.452839,0.818892,-0.211885,0.152664,0.455698}
,
{0.0267233,0.441143,0.0427583,-0.0061031,-0.341787,0.570473}
,
{0.0963595,0.185711,-0.24433,0.0313896,-0.335303,0.158981}
,
{0.104546,-0.173085,0.0934654,-0.0408068,-0.00467208,0.102482}
,
{0.118217,-0.102704,0.0127411,-0.0345342,-0.129487,0.0312561}
,
{0.111901,-0.0578034,-0.149673,0.0509537,-0.185697,-0.0363398}
,
{0.0359438,-0.0221209,0.0985986,-0.0699911,-0.0673743,0.0597735}
,
{0.169894,0.0146357,0.188418,0.197537,-0.0569429,-0.13121}
,
{-0.128682,0.14811,0.0769066,0.169618,-0.14571,-0.18958}
,
{0.179833,0.0298449,0.0616177,0.0947345,0.0179286,0.0289045}
,
{-0.00764844,-0.0526387,0.0437621,0.0671512,-0.275593,0.108396}
,
{-0.0697968,0.0809089,-0.139766,-0.0947773,0.252479,0.148762}
,
{-0.0790662,-0.0495134,-0.170781,0.148011,-0.133445,-0.0726874}
,
{0.0472529,0.0177353,-0.133315,-0.0168147,-0.112826,0.0438113}
,
{-0.0806747,0.0289524,-0.0261895,-0.216913,-0.556197,-0.00408474}
,
{0.0443513,0.132146,0.0590539,0.0181575,-0.153852,0.0279637}
,
{-0.082654,0.202061,0.16547,-0.0942648,-0.1963,-0.000947082}
,
{0.0194285,-0.0617433,0.125715,0.113355,-0.0247296,-0.108737}
,
{0.0859217,-0.401634,0.159632,0.268289,-0.00990961,0.0897673}
,
{0.149581,0.128623,0.149353,0.0959887,-0.0659567,-0.0874516}
,
{-0.40675,-0.130748,-0.101829,0.017878,-0.0303003,0.0514198}
,
{0.280643,0.05268,-0.270299,0.221806,0.0315927,0.0838273}
,
{0.502338,0.489864,-0.22078,0.93719,-0.0447341,0.348943}
,
{0.121774,-0.0164766,0.0676432,0.0754555,0.0370935,-0.0655248}
,
{0.105431,0.00749881,-0.0314924,0.104485,-0.170964,0.0197703}
,
{0.0204968,0.0013209,-0.0677116,-0.023056,-0.000142617,-0.00612942}
,
{-0.0926057,-0.0482684,-0.09132,-0.0863598,-0.02178,0.122523}
,
{-0.0250937,-0.0118345,0.226307,-0.124749,0.0942057,-0.0651734}
,
{0.0789424,0.014647,0.0980197,0.0111578,-0.219044,-0.00169237}
,
{-0.0204008,0.00868083,-0.0611628,-0.0383139,0.120979,0.024667}
,
{0.00283584,-0.167554,0.240919,0.0707103,-0.136892,-0.195574}
,
{0.0184717,-0.009148,-0.134356,-0.0415746,-0.393404,-0.0629852}
,
{0.0180039,0.0675695,-0.00855826,-0.116439,0.190467,0.02998}
,
{0.0479842,0.0518057,-0.057674,0.0358316,-0.2578,0.110109}
,
{0.0270105,0.0130954,0.00582935,0.000952848,0.0528849,-0.000387357}
,
{-0.044893,-0.143775,-0.188318,0.074273,0.39603,0.0207142}
,
{-0.0534863,0.125878,0.0600029,0.0463282,-0.419984,0.236138}
,
{0.04763,-0.05178,0.0920479,0.0877429,-0.220472,-0.0650341}
,
{0.00548467,0.0388687,-0.0416058,0.0641358,0.150181,0.11215}
,
{0.0162577,-0.0149962,0.0230631,0.0539839,-0.109342,-0.0216187}
,
{-0.0123416,-0.10216,-0.161437,-0.125072,0.0329123,-0.137825}
,
{-0.0615376,0.0980017,0.117855,-0.0456932,0.184341,0.081799}
,
{0.12009,-0.0610262,-0.00665571,-0.0205636,-0.424364,-0.157291}
,
{0.0759719,0.0555125,0.00912203,0.100492,0.19046,0.017146}
,
{0.157784,0.0324422,0.00429387,0.122227,0.0287351,0.0191347}
,
{0.190936,-0.136148,-0.112339,-0.0297886,-0.146691,-0.0912309}
,
{0.140873,0.0524221,0.0794436,0.187656,0.027109,0.131123}
,
{0.1259,0.0789664,-0.157485,-0.049902,-0.3658,0.123968}
,
{-0.155512,-0.323701,0.00235179,-0.131694,-0.0747036,-0.075948}
,
{0.0586427,0.0904489,-0.0168165,-0.000677304,0.00950902,-0.0051648}
,
{0.271322,-0.70147,0.302292,-0.869701,0.502018,-0.243939}
,
{0.00968753,-0.162972,0.0985928,-0.300886,0.122147,0.138597}
,
{-0.0132501,-0.156652,0.146988,0.0877614,-0.285635,0.101029}
,
{0.369238,-0.386839,-0.233166,-0.0597684,-0.037112,-0.170326}
,
{0.23221,-0.0420198,0.0998074,-0.133347,0.125912,-0.137941}
,
{-0.353354,0.60243,0.404734,-0.110147,0.345276,0.519984}
,
{0.106545,-0.302647,-0.105223,0.18158,0.170901,0.0630336}
,
{0.211128,-0.132658,-0.144647,-0.144277,-0.0493924,-0.0545012}
,
{-0.287245,-0.0685664,0.214714,0.217891,0.0038198,0.132258}
,
{-0.0708706,-0.0901255,0.198073,0.139169,0.0430583,0.0109558}
,
{0.199206,0.286681,0.159971,-0.646781,2.17572,-0.629748}
,
{-0.320908,-0.0300603,0.108486,-0.0370154,-0.259676,0.0847604}
,
{-0.297089,-0.186931,0.216751,0.142766,-0.0510416,0.065878}
,
{0.143523,0.0444704,0.125867,0.453231,0.140368,0.158676}
,
{-0.0727969,-0.00208205,0.127113,0.239276,-0.0176183,0.104845}
,
{-0.128584,1.82425,0.127439,0.0615731,0.136079,-0.129363}
,
{0.0370906,0.127283,0.100404,0.447415,-0.0623148,0.18802}
,
{0.126353,0.0608794,0.167208,0.239926,-0.0610071,0.0309073}
,
{-0.844902,2.09059,-0.149551,0.594364,0.613583,-0.949358}
,
{-0.160743,0.233938,0.148025,-0.0840655,0.163415,0.0706155}
,
{-0.120283,0.18277,-0.0180899,-0.0281464,-0.0262019,0.00678484}
,
{-0.950842,2.18927,0.0270253,0.646284,0.8411,-0.900361}
,
{-0.796873,2.0265,-0.219527,0.392258,0.645372,-1.07665}
 };
  static const float bias2[1] = { 0.123482 };
  static const float weights2[][1] = { {0.0909218}
,
{-0.199963}
,
{0.114059}
,
{-0.112062}
,
{-0.329789}
,
{0.153965}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_2_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_2_52(v, index);
}
static int assign_gen_lepton_prior_6_2_52() {
  global_gen_lepton_prior.at(6,2,52) = &specialized_gen_lepton_prior_6_2_52;
  return 0;
}
static int initialize_gen_lepton_prior_6_2_52 = assign_gen_lepton_prior_6_2_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_3_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.17595,-0.0396683,0.0918357,0.173195,-0.11263,0.0391049 };
  static const float weights1[][6] = { {-0.0891382,0.306689,-0.300241,0.851004,0.303123,-0.202531}
,
{-0.275556,-0.0497959,-0.374952,0.749534,-0.036801,-0.000805359}
,
{-0.11433,0.10516,-0.134961,0.156982,-0.250514,-0.098489}
,
{-2.31834,1.26557,-3.06448,1.3689,0.434228,-1.39981}
,
{0.243516,0.139048,0.122744,0.249048,-0.0753006,0.0134424}
,
{0.314162,-0.178688,-0.0477416,-0.0477653,0.00335653,0.208723}
,
{0.135405,-0.0568958,0.430029,-0.0177455,-0.202097,0.177737}
,
{0.217479,0.0891529,0.689938,-1.18599,0.315857,0.333693}
,
{0.498461,-0.0908263,-0.197288,-0.394393,-0.0237182,0.0348191}
,
{-0.00377236,-0.045954,0.137447,-0.0143583,0.147155,-0.0953379}
,
{-0.0322803,0.078958,-0.1266,0.203212,-0.0184148,0.0687132}
,
{-0.0497051,0.129359,0.0274736,0.0724062,0.0164413,-0.0589045}
,
{0.276965,0.0531524,-0.107284,0.0554851,0.0727846,0.00869581}
,
{-0.181616,0.266187,-0.439711,-0.0611408,0.0226588,-0.28509}
,
{0.113504,-0.107198,0.0246093,0.109984,-0.146111,-0.157706}
,
{0.0281447,0.140195,0.0106152,-0.0852549,0.111251,0.148296}
,
{0.0423936,-0.195831,0.0857357,0.27106,-0.35804,0.0875085}
,
{-0.34305,0.322398,0.108296,1.24349,-0.235891,-0.122073}
,
{-0.124139,0.0242207,0.0342656,0.303661,-0.0147344,-0.156644}
,
{0.143765,0.115496,-0.511769,-0.531076,-0.00109975,-0.0587146}
,
{-0.0155089,-0.0163901,-0.35936,-0.412022,0.00845785,-0.136813}
,
{0.310598,0.143874,-0.471649,-0.755317,-0.0371741,0.0387428}
,
{0.0714251,0.196292,0.194888,0.00593539,0.0893932,-0.125553}
,
{-0.0828305,-0.01043,-0.612532,-0.59765,0.0862752,-0.0524478}
,
{0.0844619,0.186338,0.521037,0.282799,-0.0806595,-0.211858}
,
{0.179024,-0.132208,0.26819,0.0186347,0.047571,-0.0165126}
,
{0.131287,-0.245746,-0.0339386,0.0954824,-0.064716,0.107858}
,
{-0.0758232,0.0391342,-0.00843071,0.130729,-0.128151,0.0683072}
,
{-0.122286,-0.0253788,-1.30189,0.102992,0.312593,-0.479289}
,
{-0.0642907,0.016328,0.0675881,-0.0680907,0.198157,-0.19183}
,
{0.0115198,0.129223,-0.0119635,-0.111305,-0.159726,0.131023}
,
{-0.0987324,-0.0606241,-0.157322,-0.183684,-0.150921,-0.0879538}
,
{-0.0770451,-0.113982,-0.13614,-0.167861,0.0709581,0.0168504}
,
{-0.202107,-0.29958,0.0968871,-0.371278,-0.42505,-0.202745}
,
{-0.0560486,0.0391528,-0.101894,0.0431994,-0.00401957,-0.061291}
,
{0.0881569,-0.0946654,0.0480919,-0.0252297,-0.113317,-0.160066}
,
{0.000202357,-0.0665519,-0.0189307,-0.364953,0.108116,0.0292272}
,
{-0.00969821,0.155928,-0.0161933,0.126547,-0.206613,0.261667}
,
{-0.260374,0.0859488,0.0116357,0.207859,-0.143034,0.231103}
,
{-0.0340359,0.157494,-0.0291711,-0.131958,0.144411,-0.0651685}
,
{-0.0627928,-0.0190412,0.057874,0.0962895,0.253422,0.0467202}
,
{0.167684,0.0930045,0.244167,0.277327,0.248777,-0.0100626}
,
{-0.152993,-0.0686484,-0.125967,0.0880661,0.384216,0.199956}
,
{0.0323975,0.0839029,0.34584,-0.356872,0.0139657,-0.0320293}
,
{0.055683,-0.117814,-0.0015304,0.101413,0.145758,0.0438023}
,
{0.0397747,-0.0611376,0.0101933,-0.129765,-0.115567,-0.0663971}
,
{0.142067,-0.128406,0.0200704,0.0357541,0.136745,-0.131384}
,
{-0.138964,0.03298,0.117251,-0.0155089,0.532741,-0.0153249}
,
{-0.15693,-0.0478137,0.172204,-0.101702,0.195314,-0.0167732}
,
{-0.0644091,0.0218312,0.101509,-0.107663,-0.170057,0.0507213}
,
{-0.176389,-0.135578,-0.146724,0.0319816,-0.106373,-0.0896482}
,
{-0.0628864,-0.0458257,0.089983,-0.0267179,-0.134396,-0.0402605}
,
{-0.00938956,0.0777879,0.035186,0.180437,-0.0556154,-0.0144694}
,
{0.0592024,0.0175085,-0.178563,-0.154643,0.101315,0.0123916}
,
{0.0163983,-0.100626,0.0238641,-0.0391971,0.132003,-0.111339}
,
{0.075884,-0.0192811,0.0730447,0.0376892,0.0444698,-0.0379569}
,
{-0.147561,-0.0337694,0.195667,0.020082,0.702024,-0.0946073}
,
{-0.0423724,0.189489,0.0535118,-0.0909645,-0.0163824,0.171563}
,
{-0.0452571,-0.0246056,-0.00355174,0.137709,0.0638953,0.0367166}
,
{0.0135862,-0.0610857,0.0377103,0.0133971,0.0999059,0.118784}
,
{-0.068342,0.163234,-0.0636811,-0.0296402,-0.027806,0.181713}
,
{-0.0526567,0.0988143,-0.117161,-0.105606,0.237971,-0.00910326}
,
{-0.0627956,0.12819,-0.0386575,-0.0888017,0.0479586,-0.0585035}
,
{0.116245,-0.0217616,0.158748,0.152417,0.084344,-0.0924064}
,
{-0.0789136,-0.0503809,0.0549363,-0.124201,-0.0175757,-0.0268815}
,
{-0.00295362,-0.0195179,0.0104134,0.00745561,0.00374113,-0.0206359}
,
{-0.188771,0.230585,0.23164,0.0608358,0.29528,0.23287}
,
{0.0377189,-0.150319,0.0332185,0.0730619,-0.0283597,-0.115029}
,
{-0.0976398,-0.0282224,-0.00126017,0.11949,0.00455116,-0.0877507}
,
{0.0263397,0.030841,0.0439022,-0.00180952,-0.0490443,-0.0971458}
,
{-0.0539366,-0.204746,-0.00507402,-0.012835,0.0158207,-0.182404}
,
{0.15683,-0.111062,0.106618,-0.00752513,-0.23529,-0.0751271}
,
{-0.0563001,0.015435,0.00187587,-0.122235,-0.00214033,-0.00109772}
,
{-0.137036,-0.11514,-0.0251013,0.153455,0.0205882,0.0915558}
,
{0.0306943,0.385716,-0.96938,0.14278,0.771715,-0.100683}
,
{-0.177614,-0.0990995,0.18028,-0.00500994,0.295281,-0.0561522}
,
{-0.871919,-0.578851,0.421505,0.0145829,0.0649421,0.62207}
,
{-0.0013735,0.220275,-0.967609,0.151273,0.841566,0.0250953}
,
{-0.0226326,0.486045,-0.822346,-0.0758406,0.732939,0.0366856}
 };
  static const float bias2[1] = { 0.643488 };
  static const float weights2[][1] = { {0.0117939}
,
{-0.0221184}
,
{0.0300104}
,
{-0.0348416}
,
{-0.00795287}
,
{0.0232148}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_3_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_3_50(v, index);
}
static int assign_gen_lepton_prior_6_3_50() {
  global_gen_lepton_prior.at(6,3,50) = &specialized_gen_lepton_prior_6_3_50;
  return 0;
}
static int initialize_gen_lepton_prior_6_3_50 = assign_gen_lepton_prior_6_3_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_3_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.577929,0.223393,0.143809,-0.0604924,-0.0482085,0.695248 };
  static const float weights1[][6] = { {1.51704,-1.37231,1.00075,-1.0408,0.854211,-0.83932}
,
{-0.248586,-0.24019,-0.584002,-0.565497,0.158828,-0.0965822}
,
{-0.234067,0.0468932,-0.417891,-0.290813,-0.539148,-0.0940876}
,
{-0.390911,0.410392,-1.6289,-0.441169,0.582986,0.826437}
,
{-0.36212,0.179428,-0.0309758,-0.0393597,-0.254467,0.653648}
,
{-0.648498,0.159322,0.0478171,-0.201914,-0.12158,0.710433}
,
{-0.437204,0.0962571,0.412979,-0.0922934,-0.06462,0.514299}
,
{0.453047,0.0702747,0.0548127,-0.182505,-0.115016,0.362939}
,
{-0.345479,-0.31189,-0.429709,-0.203104,-0.137108,-0.0699246}
,
{0.00691568,-0.0633119,-0.0341224,-0.00762368,0.191026,0.100099}
,
{0.103746,-0.117359,-0.014631,-0.203081,-0.000586527,0.168183}
,
{-0.00797847,-0.119656,0.0209087,-0.0224569,-0.0879302,0.00436892}
,
{-0.386589,-0.0471411,-0.141534,-0.00958303,0.134753,0.210263}
,
{0.144548,0.126316,-0.166705,-0.00450037,0.146208,-0.0819155}
,
{0.246216,-0.155267,-0.432233,0.036419,-0.0235744,-0.392136}
,
{-0.144693,0.157463,-0.104032,-0.0691081,-0.0463474,0.100058}
,
{-0.261377,-0.0183448,-0.0135852,0.0543543,0.0202559,0.228616}
,
{-0.117878,0.0303504,-0.355738,0.0462332,-0.692984,0.0966692}
,
{-0.125092,0.0323246,-0.00847278,0.289291,-0.226839,0.0105396}
,
{0.155583,0.131662,0.18904,-0.182258,0.109192,-0.047175}
,
{0.143442,-0.000906495,-0.0173014,-0.0427834,0.0300347,0.00558084}
,
{0.0568311,-0.178208,-0.111802,-0.289938,0.264011,-0.0347888}
,
{-0.132226,-0.154238,-0.00721772,-0.154496,-0.0747744,-0.10449}
,
{-0.0103124,0.0610965,-0.221883,0.0871018,0.135495,-0.04995}
,
{-0.131371,-0.40613,-0.07553,-0.0359455,0.12778,0.0321466}
,
{-0.139264,-0.235169,0.100794,0.174775,-0.109115,0.033184}
,
{-0.0730022,-0.498628,0.0925404,-0.0501077,-0.234076,-0.0343949}
,
{0.252226,-0.290354,0.347653,-0.166314,-0.119767,0.0236812}
,
{1.96103,-1.59936,1.15596,-0.97164,0.518695,-0.615061}
,
{-0.182777,0.107539,-0.0628423,0.204811,-0.0704261,0.143839}
,
{-0.0964432,-0.122518,-0.101224,-0.104303,-0.025287,-0.00826491}
,
{-0.0865964,-0.0424321,0.203689,0.0394266,-0.0211923,0.222064}
,
{-0.142118,-0.0415224,0.0397107,0.128506,-0.179818,-0.00806378}
,
{0.192796,-0.0869247,-0.233907,-0.274026,0.0612813,0.181867}
,
{0.0205278,-0.0243459,0.027685,-0.155471,-0.110845,0.130193}
,
{-0.0504436,-0.0113133,0.00871165,0.0391453,0.0503504,-0.0333401}
,
{-0.178378,-0.137299,-0.220912,0.138434,0.399931,-0.0622855}
,
{0.000799888,0.0274735,-0.0659307,0.146513,-0.00913248,-0.112251}
,
{4.85473e-05,0.0166158,0.0395243,-0.023978,-0.0162282,-0.00713523}
,
{-0.0686103,-0.0657686,0.00907718,0.0718714,0.0616626,0.0621832}
,
{-0.0377433,-0.00568951,-0.0478286,-0.0448461,-0.0134859,-0.00633434}
,
{0.36091,0.288494,0.292327,0.271609,0.241278,0.0210039}
,
{0.0935446,-0.0767527,0.21724,-0.0891853,-0.017059,-0.0389587}
,
{0.0178077,0.0832162,-0.198611,-0.0112104,-0.0516796,0.0245719}
,
{-0.0167819,0.0971728,0.0226895,0.069962,0.000233458,-0.0992143}
,
{0.0424136,-0.015479,-0.0630344,-0.101673,-0.053528,0.0365533}
,
{0.0464013,0.0760867,0.250634,0.0358539,0.0950774,-0.0304087}
,
{-0.0561066,-0.0888207,-0.079372,-0.0210725,0.00624954,0.0785397}
,
{0.0323242,-0.11914,-0.0758932,-0.199993,0.0202527,0.0543759}
,
{0.129383,-0.0359717,-0.16103,0.0307863,0.00754044,-0.132584}
,
{0.00330934,0.00797718,0.0795791,0.0704427,0.0175747,-0.00459146}
,
{-0.0424023,-0.302132,0.239259,-0.127539,-0.116301,-0.0130517}
,
{-0.156851,-0.0391577,0.141059,-0.0378271,-0.0460413,0.143763}
,
{0.0580663,0.0630656,-0.0482979,0.0264632,0.077895,0.0112654}
,
{-0.0147506,0.110175,0.0867582,0.0274322,-0.00528394,0.055156}
,
{0.0338956,0.0917278,0.0524056,-0.00562103,-0.0252591,-0.00657766}
,
{0.682733,-0.745919,0.359424,-0.212328,1.65874,-0.0601665}
,
{0.0686771,0.104919,0.105405,0.0529211,0.131878,-0.00361453}
,
{0.151963,0.0683846,-0.171103,-0.0239577,0.163933,-0.0410446}
,
{0.198178,0.0655117,0.0654158,0.163073,0.119514,0.127798}
,
{0.194341,0.338328,-0.0591049,-0.103138,-0.0786708,0.0291117}
,
{-0.36938,0.3694,-0.200226,0.449664,-0.907317,0.210599}
,
{-0.0343041,0.207746,-0.0792149,0.0424151,0.122387,-0.0295116}
,
{0.0821009,0.000477982,0.0977708,0.0551654,0.0589441,-0.0663999}
,
{-0.138806,-0.193956,0.074403,-0.00435842,-0.0106271,0.0949697}
,
{-0.0371201,-0.0460947,-0.0465413,-0.00176618,0.0609713,0.00128474}
,
{0.174275,-0.0457331,-0.136348,-0.858499,0.364966,0.0149197}
,
{-0.167525,-0.0623905,-0.105542,-0.0808078,-0.0547554,-0.0620199}
,
{0.0425961,-0.203875,-0.144973,-0.269877,-0.006269,-0.0439613}
,
{-0.0962707,-0.0393229,-0.0800685,-0.110699,-0.20571,-0.0265149}
,
{0.0302271,0.127427,-0.113049,-0.17025,0.0463034,-0.0127515}
,
{0.0779477,0.119608,-0.0547415,-0.257727,-1.06496,0.222033}
,
{0.0942728,0.104639,-0.136656,-0.0968535,-0.102434,0.161613}
,
{-0.109535,-0.0678673,0.0329767,-0.305611,0.0592329,-0.186043}
,
{0.747872,-0.237671,-0.190101,0.335307,0.20358,-0.326487}
,
{-0.529466,-0.701652,-0.129648,-0.0275562,0.286321,-0.0758543}
,
{1.46409,-0.504986,-0.496272,0.763101,-1.3488,-1.13126}
,
{0.955357,-0.195441,-0.275502,0.118977,0.187338,-0.524714}
,
{1.14722,-0.142023,-0.360518,0.232113,0.365199,-0.454968}
 };
  static const float bias2[1] = { 0.144511 };
  static const float weights2[][1] = { {-0.113423}
,
{0.0670061}
,
{0.0836686}
,
{-0.071393}
,
{0.0442937}
,
{0.142844}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_3_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_3_51(v, index);
}
static int assign_gen_lepton_prior_6_3_51() {
  global_gen_lepton_prior.at(6,3,51) = &specialized_gen_lepton_prior_6_3_51;
  return 0;
}
static int initialize_gen_lepton_prior_6_3_51 = assign_gen_lepton_prior_6_3_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_6_4_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.301952,0.603047,-0.458405,-0.00903194,0.227471,0.592378 };
  static const float weights1[][6] = { {0.0406696,-0.150188,-0.0440251,-0.495897,-0.457775,0.648103}
,
{-1.06103,-0.273348,-0.474099,1.36958,0.491581,0.498207}
,
{-0.142352,0.912693,0.295892,-0.304953,-1.08937,0.26041}
,
{0.375208,1.59701,-0.424824,1.22891,0.432828,-0.0480171}
,
{-0.34026,0.42845,-0.48652,-0.0904991,0.136766,0.811088}
,
{0.0139524,0.303059,-0.295068,-0.428498,0.325085,0.744858}
,
{-0.135881,0.529408,-0.231361,-0.392349,0.0771661,0.663376}
,
{0.259151,0.29221,0.403015,0.279273,0.528021,0.865076}
,
{-0.487007,-0.393188,0.174224,-0.539044,0.253351,0.0965147}
,
{0.102939,-0.0147072,0.0105964,-0.0648049,-0.145144,0.0521454}
,
{0.124399,-0.0825226,0.044634,-0.19114,-0.209484,-0.0963562}
,
{-0.11723,-0.174676,-0.0233093,-0.0785719,-0.0143189,-0.0612723}
,
{-0.351865,0.0386005,0.205013,-0.175715,-0.297629,0.261152}
,
{0.0243071,0.637096,-0.286149,-0.199754,0.0485184,-0.0959575}
,
{-0.228626,-0.231734,0.331906,-0.0571803,-0.83932,-0.00475275}
,
{-0.0478317,-0.111836,-0.174809,0.0199907,-0.124615,-0.216024}
,
{-0.280289,0.153057,0.00837897,0.0176576,-0.504336,0.0307703}
,
{-0.516965,-1.54721,0.685122,-0.589948,0.178489,0.48966}
,
{-0.206091,0.330277,-0.381945,0.000402805,-0.249153,-0.0962011}
,
{0.0507742,0.157747,0.262862,0.159443,0.162993,-0.195668}
,
{-0.221644,-0.0368785,0.183714,-0.646079,0.372464,-0.253203}
,
{-0.0446198,0.0586204,-0.0820196,-0.432388,-0.013534,0.0246193}
,
{0.0399609,-0.0347971,-0.0714796,-0.118423,-0.106077,0.0289483}
,
{0.302949,0.206827,0.0336727,-0.117266,-0.122263,0.0243774}
,
{0.00361526,-0.231919,0.23295,-0.0651387,-0.31075,-0.0698652}
,
{0.194785,-0.0639196,-0.237832,-0.123111,-0.400263,-0.0604257}
,
{-0.208769,-0.0781774,-0.230737,0.110534,-0.228706,-0.021425}
,
{-0.00171131,0.000481896,-0.329799,-0.124295,-0.628712,0.148341}
,
{0.379177,-0.348806,-0.388561,-0.575037,-1.05768,0.388451}
,
{-0.0251772,0.0313287,0.0704345,-0.156857,-0.0768225,-0.0287954}
,
{0.115109,0.167036,-0.10597,0.0444181,-0.0170342,0.00868632}
,
{-0.0299342,0.0708427,-0.123079,-0.0541924,-0.115137,-0.0181763}
,
{-0.196905,0.114453,-0.210302,-0.0428639,0.242722,-0.104193}
,
{0.0902436,0.216802,0.0298107,-0.0717532,-0.0317933,0.261679}
,
{-0.129301,0.143454,0.258099,0.0403913,0.213743,-0.0536525}
,
{0.15111,-0.0715924,-0.0686372,0.0833821,0.000378422,0.0856384}
,
{0.0327617,0.158358,0.00351833,0.0740798,-0.364042,0.119622}
,
{-0.127664,-0.0697654,-0.0576591,0.0716627,-0.0391046,-0.17059}
,
{0.0833026,0.177664,0.207978,0.240916,-0.0883374,-0.0740761}
,
{0.0605353,-0.071847,0.00511975,0.17672,0.0310163,0.113041}
,
{0.00768876,-0.0510547,-0.0652303,0.00148258,-0.0515514,0.00948518}
,
{0.26552,-0.056844,-0.167971,-0.0781665,-0.11443,0.0829706}
,
{-0.150129,0.00287134,0.219575,0.285774,0.0928534,-0.309469}
,
{-0.0775978,-0.156865,-0.0700326,-0.213683,0.192376,0.27381}
,
{0.0997878,0.0819281,0.0469408,0.123715,0.0613365,-0.0868687}
,
{0.00264511,0.0705088,-0.0292541,-0.0636939,-0.06808,0.00979337}
,
{0.0841818,-0.069137,-0.246644,-0.17912,-0.0446633,0.0223331}
,
{-0.217461,-0.0790637,0.16738,-0.0311959,0.11033,0.121002}
,
{-0.0960554,0.110088,0.175174,-0.0835809,0.0488195,-0.142791}
,
{-0.0451142,0.0942379,0.0944903,0.233902,0.00934868,-0.057934}
,
{-0.152717,0.0675138,0.190641,-0.000199509,0.126493,-0.109733}
,
{0.313164,0.0150497,0.217095,0.118117,0.187669,-0.0336039}
,
{0.0488435,-0.030181,0.111827,0.0157155,0.105063,-0.0415068}
,
{0.100667,0.0099862,0.186376,-0.135101,0.278222,-0.0149729}
,
{0.16792,0.0410298,0.00152121,0.119183,-0.00996392,0.0363998}
,
{0.114817,0.0786439,0.197313,0.145746,-0.119996,-0.0142925}
,
{0.160617,0.131005,-0.142507,0.0905798,-0.199862,-0.0374861}
,
{0.0308455,-0.0576511,0.0159203,0.202537,0.168837,0.0503131}
,
{0.142049,-0.115507,0.0616961,-0.0625172,0.130322,-0.125055}
,
{0.212804,-0.179112,0.0260774,0.243965,0.168035,-0.0113423}
,
{-0.0610351,0.0536814,0.26288,0.011038,0.0793387,0.0229789}
,
{0.0891735,-0.276943,-0.0321941,0.0171699,0.335479,0.104966}
,
{0.0187445,0.0382884,-0.0198744,0.00696357,-0.155528,0.0494795}
,
{0.15832,0.177216,-0.0320714,0.069304,0.173864,-0.103962}
,
{-0.0605384,0.00922714,-0.219819,0.0157264,0.0693258,0.0610802}
,
{0.0124285,0.219231,0.00524895,-0.121755,0.00586092,-0.0010443}
,
{0.266427,-0.242084,0.246605,-0.12742,-0.376572,0.00547884}
,
{0.177369,0.135769,0.0894493,-0.0829015,0.198431,0.0921659}
,
{0.199981,-0.0568712,0.014739,-0.191392,0.0801781,-0.143087}
,
{0.138927,0.200466,-0.18749,0.110301,0.138749,-0.176067}
,
{0.0282839,-0.00280078,-0.0241056,0.0299736,0.189838,-0.00905062}
,
{0.00246901,0.160231,-0.150763,-0.0523071,0.10307,-0.0290078}
,
{-0.0156022,0.121365,0.0153805,-0.119119,-0.00937741,0.00908298}
,
{0.0377392,-0.119352,0.156559,-0.150365,-0.00868408,0.174202}
,
{0.423051,-0.286112,0.201743,-0.386921,-0.22325,-0.19082}
,
{-0.0393988,0.138797,0.533823,0.153698,-0.185983,0.0156669}
,
{-0.0474588,-1.13612,0.177127,0.0670985,-1.28145,-0.0513902}
,
{0.250387,-0.619838,0.142101,-0.339203,-0.22815,-0.0303434}
,
{0.365308,-0.213414,0.139263,-0.503146,-0.372729,-0.266411}
 };
  static const float bias2[1] = { 0.0257854 };
  static const float weights2[][1] = { {-0.0653264}
,
{0.0362497}
,
{-0.0348592}
,
{0.098089}
,
{0.031837}
,
{0.0952914}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_6_4_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_6_4_50(v, index);
}
static int assign_gen_lepton_prior_6_4_50() {
  global_gen_lepton_prior.at(6,4,50) = &specialized_gen_lepton_prior_6_4_50;
  return 0;
}
static int initialize_gen_lepton_prior_6_4_50 = assign_gen_lepton_prior_6_4_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_0_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.504972,-0.388436,-0.259641,-0.620877,-0.0972865,-0.0429452 };
  static const float weights1[][6] = { {-0.605688,-0.476861,0.038245,-0.0763948,0.114891,-0.26504}
,
{-0.465785,-0.238524,-0.292894,-0.410976,-0.28953,-0.279299}
,
{-0.218858,0.047072,-0.13212,-0.377591,-0.196143,-0.236444}
,
{0.239751,0.152963,-0.870012,-0.521206,-0.232976,1.28992}
,
{-0.610901,-0.399743,-0.159691,-0.774749,0.0953162,-0.13442}
,
{-0.594708,-0.387906,-0.347701,-0.374317,-0.065518,-0.183575}
,
{-0.44009,-0.418479,-0.119217,-0.366852,-0.0914903,-0.316836}
,
{-0.027318,-0.141263,-0.162959,-0.124477,-0.0510232,-0.0238662}
,
{-0.183411,0.198469,-0.499936,-0.509972,-0.478176,0.78425}
,
{-0.0538918,0.119236,0.0757671,0.0143463,-0.0924112,0.0230779}
,
{0.221568,-0.0609712,0.110676,0.0299978,-0.0462353,0.0102055}
,
{-0.0751129,0.015218,0.189209,0.044717,0.0327092,0.122409}
,
{-0.275612,-0.191282,-0.337851,-0.52696,-0.252005,0.35225}
,
{-0.446522,-0.0321914,-0.309646,-0.369326,-0.314526,0.261405}
,
{-0.175993,-0.0102506,-0.263981,-0.636846,-0.403437,0.591402}
,
{-0.0752593,-0.0304177,-0.0935353,0.194938,0.10369,-0.132485}
,
{-0.254491,-0.0611906,-0.343158,-0.308555,-0.239903,0.613356}
,
{-0.338968,0.0284577,-0.0600506,-0.621534,-0.260402,0.0195485}
,
{-0.154042,-0.39432,0.0165192,-0.185727,-0.0994308,0.00445062}
,
{-0.146145,-0.0951167,-0.170839,-0.49035,-0.14533,0.116088}
,
{-0.226982,-0.291066,-0.125339,-0.453614,-0.364123,0.0697186}
,
{-0.315065,-0.292659,-0.00540171,-0.486253,-0.406079,-0.0341004}
,
{-0.027544,-0.0954882,0.120715,0.0141291,-0.0174817,-0.238685}
,
{-0.305744,-0.250899,-0.135157,-0.502138,-0.171609,0.225417}
,
{-0.204255,0.138129,0.0144312,-0.38693,-0.0770654,-0.162498}
,
{-0.200081,-0.255972,0.0282099,-0.220186,-0.178309,-0.0982631}
,
{-0.185169,0.110198,0.0474825,-0.327163,-0.20539,-0.221294}
,
{-0.198922,-0.0146827,0.0209299,-0.295197,-0.442651,-0.228235}
,
{0.339757,0.0100777,0.190086,-0.388745,-0.771189,1.16493}
,
{-0.042054,0.0424121,-0.11116,0.105749,0.041059,0.0327095}
,
{-0.0754031,-0.0899171,0.116057,-0.202361,0.0800865,0.0980273}
,
{0.0162652,-0.0712966,-0.0165884,-0.104491,0.0110139,0.162179}
,
{-0.0686048,0.0920289,-0.23092,0.0837245,0.180112,0.128292}
,
{-0.184733,-0.086877,0.0595741,0.241282,-0.0433367,0.0367648}
,
{0.020194,0.0398648,0.116412,-0.0861003,0.155176,0.0778637}
,
{0.0747214,-0.0520876,-0.0391948,-0.0226276,0.0394826,-0.00287454}
,
{0.0187831,0.0652353,0.150681,0.269347,0.15027,-0.0121931}
,
{0.0694788,-0.285487,-0.0839647,0.00400373,-0.172396,-0.00629533}
,
{-0.161773,0.0911408,0.115154,-0.00335004,0.0480907,0.18105}
,
{0.0427886,0.152155,0.0470971,-0.0785942,-0.0692185,0.0200409}
,
{0.0315939,-0.154846,0.042925,-0.0943286,0.0688342,0.0158838}
,
{-0.108696,-0.192635,0.346965,-0.222187,0.0231369,0.159845}
,
{-0.00763718,0.0489942,0.041025,0.147189,0.039703,-0.0362293}
,
{-0.0585512,-0.112414,-0.0745109,0.108697,0.0173011,-0.0364833}
,
{-0.10319,-0.0639395,-0.0391269,-0.158862,0.0916836,-0.0557196}
,
{-0.094941,0.141265,0.0657885,0.0803118,-0.0620555,0.00712488}
,
{-0.120539,0.246369,-0.120689,0.206074,-0.217751,0.0398955}
,
{0.00808698,-0.0292549,0.0384733,0.0751656,-0.17026,-0.00627988}
,
{0.000330551,-0.169387,0.0817072,-0.0749225,0.0708527,0.100243}
,
{-0.128212,0.0368595,-0.017773,0.0338257,0.0990245,-0.0735624}
,
{0.101624,0.0822972,-0.0313053,0.020623,0.0339891,-0.0255465}
,
{0.0706222,-0.199168,-0.0920757,0.0270333,-0.116968,0.00124751}
,
{0.0890011,0.142535,-0.0818781,0.100089,-0.10407,0.0618302}
,
{0.00975023,0.214237,-0.0307384,0.0505815,0.0330019,-0.00968581}
,
{0.00329943,-0.0412324,-0.0534772,0.0888392,0.0564902,-0.0663022}
,
{0.0471551,-0.0287466,-0.0689401,0.10185,-0.0486546,-0.0412032}
,
{0.189648,0.0434629,-0.157831,0.28036,-0.00295543,0.0539289}
,
{0.0800224,-0.0441076,-0.111806,-0.0471902,0.0460128,-0.249}
,
{0.156045,-0.0449447,-0.100792,0.0752353,-0.0785052,-0.0718584}
,
{0.0881656,-0.0162344,-0.00573792,-0.0282018,-0.0776351,0.0724565}
,
{-0.0414928,0.0213399,0.113591,-0.0792057,0.0196109,0.0902235}
,
{0.0517974,0.303705,-0.0267736,-0.161596,0.0422436,0.13812}
,
{-0.228951,0.132148,0.0865139,0.0773129,0.125469,0.0436499}
,
{0.0269252,0.0980709,0.164706,-0.0218225,-0.025671,-0.00856869}
,
{0.0887961,-0.0944156,0.119759,0.0897195,-0.0275884,0.227906}
,
{-0.0768908,0.0938321,-0.0728883,-0.0850628,0.00352718,-0.0974825}
,
{0.17308,-0.134095,-0.365711,-0.096784,0.156777,-0.371969}
,
{-0.0104322,0.082922,0.0422173,-0.0789275,0.108447,0.01422}
,
{-0.154399,0.0884884,-0.160371,0.0512955,-0.049695,0.126027}
,
{0.0586405,0.0411815,-0.131654,-0.00788914,-0.0192488,0.0546518}
,
{0.00726145,-0.0956315,0.0576993,0.0904304,-0.0493,0.0553376}
,
{-0.0539763,-0.284504,0.114419,0.123107,0.0698825,0.20342}
,
{0.0923092,-0.114305,0.04203,0.0852428,0.165379,0.00253662}
,
{0.037587,0.168629,-0.0706518,-0.0556784,-0.0270864,-0.1544}
,
{-0.179151,-0.10183,0.214904,-0.0364659,0.0751691,0.271586}
,
{0.274525,0.0647529,0.146894,-0.142954,0.0554578,-0.0376614}
,
{0.0151985,-1.01457,0.597636,0.0296821,-0.143925,-0.322263}
,
{-0.215597,-0.0922145,0.124781,-0.0966248,-0.0889734,0.388218}
,
{-0.304866,-0.0837196,0.168015,-0.00979873,0.0500606,0.291054}
 };
  static const float bias2[1] = { 0.413229 };
  static const float weights2[][1] = { {0.0034963}
,
{0.00789441}
,
{-0.00530446}
,
{-0.0136376}
,
{-0.00576782}
,
{0.00690007}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_0_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_0_50(v, index);
}
static int assign_gen_lepton_prior_7_0_50() {
  global_gen_lepton_prior.at(7,0,50) = &specialized_gen_lepton_prior_7_0_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_0_50 = assign_gen_lepton_prior_7_0_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.100508,-0.0753384,0.151292,0.15649,-0.0115533,-0.0595619}
,
{0.0395592,-0.229278,-0.178522,-0.00567358,-0.0716722,0.169509}
,
{0.0086409,-0.0296492,-0.208058,-0.240824,0.0532167,0.00999766}
,
{0.0397996,0.0163538,0.143528,0.10999,0.156981,0.00756444}
,
{-0.0691921,-0.0182212,0.0186428,-0.112138,0.187166,0.242545}
,
{-0.0159644,-0.10228,0.155672,-0.077491,0.186158,0.0732792}
,
{-0.0084274,0.190841,-0.0736924,0.0206486,0.101476,-0.0528583}
,
{-0.126308,-0.0401379,-0.0221139,-0.00284832,0.00176362,-0.0962477}
,
{0.0542619,0.0545207,-0.128099,-0.118226,0.0753348,-0.0461818}
,
{-0.134795,-0.0815331,0.0428943,-0.0235443,0.170752,-0.0131071}
,
{-0.0759615,0.0161789,-0.22958,-0.034621,0.152086,-0.0390917}
,
{-0.0488271,-0.0164042,-0.0921094,0.133038,-0.162455,0.0949971}
,
{0.0489357,-0.207939,0.0894743,-0.212829,0.201258,0.145115}
,
{-0.130417,0.051812,-0.00507153,0.0894573,-0.0468761,-0.0886634}
,
{0.0461731,0.219267,0.0855715,0.0758354,0.0342759,0.22276}
,
{0.231071,-0.0735532,0.0107787,-0.0577615,-0.0382847,0.111318}
,
{0.201926,-0.146239,-0.0958744,0.195312,0.0389159,0.025287}
,
{0.0256207,-0.078867,-0.216088,0.0217618,0.0452744,-0.045235}
,
{-0.226177,-0.115019,0.226564,0.0599297,-0.167565,0.0234546}
,
{-0.211437,-0.240404,0.108222,0.0920238,-0.0770539,-0.147339}
,
{-0.0804792,0.104655,0.169054,0.0491709,0.030297,-0.0525089}
,
{-0.123433,0.00955007,0.0270206,0.0847874,0.0809684,-0.0316908}
,
{0.216459,0.0462291,0.132249,-0.0300791,0.0532985,-0.0486792}
,
{-0.0665747,0.00844954,0.0356677,0.0552244,-0.0286208,-0.197488}
,
{-0.0234305,0.00135524,0.141663,-0.00281677,0.01395,0.207578}
,
{-0.157823,-0.0409496,-0.143007,0.0598194,-0.191715,0.112529}
,
{0.0593028,-0.0248085,0.0203378,0.156748,-0.0872847,0.0357622}
,
{-0.0328293,-0.000508975,-0.00474503,-0.121257,0.0627314,-0.23141}
,
{0.154807,0.102421,0.142307,-0.107911,-0.0594741,-0.0776601}
,
{-0.0549577,0.0417997,-0.15724,0.120295,-0.117285,0.174058}
,
{-0.110902,-0.0102224,-0.168512,-0.0723352,-0.0179726,0.023053}
,
{-0.0821744,-0.013152,-0.065354,-0.126719,-0.0316128,-0.126064}
,
{0.131558,0.0801126,0.108011,0.14442,0.0741436,0.157909}
,
{0.0907558,-0.00710882,0.105176,-0.136858,-0.0274812,-0.0707829}
,
{0.0332881,-0.0777824,0.0856983,-0.0271241,-0.179798,-0.0526076}
,
{0.0109941,0.0646073,-0.0444418,-0.111321,-0.0137822,-0.125591}
,
{0.117069,0.0953763,-0.0600233,-0.0137028,0.14166,-0.101572}
,
{0.0174121,-0.0323781,0.00570225,-0.0585592,-0.101932,0.010333}
,
{-0.159152,-0.0296177,-0.020528,-0.0614999,-0.10034,-0.202977}
,
{-0.0569979,0.0209872,0.0878054,0.0056297,0.0229499,0.00962557}
,
{0.118221,0.179108,0.00462208,0.052256,-0.0279735,-0.166492}
,
{-0.0404222,-0.198095,0.137611,-0.010613,0.0280141,0.0250314}
,
{0.00291111,-0.0819248,0.0389044,-0.0529867,-0.160425,-0.00906578}
,
{0.0424804,0.0651162,0.126083,0.0312212,0.0158385,-0.0054277}
,
{0.0282793,0.0628757,0.0719427,-0.0768875,0.147517,-0.132234}
,
{0.135725,0.0942778,0.0403994,-0.0688645,0.0622897,0.0437759}
,
{-0.0219812,0.0868829,-0.0310292,0.106465,0.0304652,-0.0121297}
,
{-0.03266,-0.156605,-0.237469,0.233964,-0.0526889,0.120475}
,
{0.1569,0.126261,0.107646,-0.139835,0.216501,-0.0548927}
,
{-0.102253,0.000931601,-0.0230684,-0.171699,0.0330836,0.0207304}
,
{0.0314171,-0.138261,-0.202486,-0.0213879,0.019695,0.164284}
,
{0.123274,0.163308,-0.0529599,0.0782775,0.214313,-0.118133}
,
{-0.212062,-0.205549,-0.0450872,-0.0943829,0.140415,0.00791492}
,
{0.0754397,-0.191592,-0.115413,-0.108411,-0.0128162,0.0875219}
,
{-0.0674227,-0.0612241,-0.0658516,-0.0539202,-0.138853,-0.0108776}
,
{-0.132342,0.184775,-0.116174,-0.0768481,-0.174311,0.0316024}
,
{0.0929413,0.215583,-0.0630592,-0.0919403,-0.0736016,0.0831004}
,
{0.120906,0.157997,0.0012253,0.0671471,-0.172304,-0.0395628}
,
{0.0430776,-0.0345315,0.061894,-0.0631018,0.0989759,-0.147166}
,
{-0.0651902,0.0352971,0.0991995,-0.0691473,-0.0256282,0.0088996}
,
{0.0576877,-0.186701,-0.167947,0.00645933,-0.11972,-0.0367997}
,
{-0.144399,0.0832129,0.151087,-0.227286,-0.0836941,-0.108}
,
{0.140844,-0.0567943,-0.116357,-0.104039,0.0298134,-0.22859}
,
{-0.124417,0.0886138,-0.00191122,0.167765,0.0385019,-0.0784504}
,
{-0.0552266,-0.0903751,-0.00268715,-0.0152696,-0.0517673,0.0272875}
,
{0.0443914,0.125566,-0.0551849,0.110093,0.0367234,-0.0763827}
,
{0.226448,-0.155901,-0.178809,-0.179994,0.113525,-0.0884289}
,
{-0.0944707,-0.153919,0.00216961,0.178917,-0.0119653,0.115761}
,
{0.14783,-0.0637021,0.111596,-0.201435,-0.070223,-0.0844575}
,
{-0.129317,0.0987059,0.157761,0.0757494,0.068218,-0.0656537}
,
{0.0769637,-0.0315455,0.190275,0.125952,-0.0445827,0.154669}
,
{0.112388,-0.145796,-0.142393,0.0432908,0.00149864,0.0884957}
,
{0.0504652,0.0893862,0.107124,-0.0524787,-0.0158211,-0.141573}
,
{-0.0841675,-0.112035,-0.0482929,-0.136085,-0.159696,0.0533087}
,
{-0.152563,-0.0062755,-0.0479916,-0.0813308,-0.233134,0.0327844}
,
{-0.0181716,-0.122112,0.15297,0.137726,-0.0572603,0.116855}
,
{0.183054,-0.130468,-0.145595,0.065353,-0.093524,-0.131897}
,
{-0.109587,-0.0383324,-0.0954038,0.117924,0.11292,-0.0217345}
,
{0.0937489,-0.0303843,0.0118899,0.0393904,0.0617985,0.0658895}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.104303}
,
{-0.103957}
,
{-0.00356732}
,
{-0.0804362}
,
{-0.0867767}
,
{-0.239072}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_0(v, index);
}
static int assign_gen_lepton_prior_1_1_0() {
  global_gen_lepton_prior.at(1,1,0) = &specialized_gen_lepton_prior_1_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_0 = assign_gen_lepton_prior_1_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_0_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.330452,-0.438007,0.758596,0.132577,-0.0206955,-0.0213664 };
  static const float weights1[][6] = { {-0.535885,-0.366307,0.665385,0.173946,-0.0639857,-0.379754}
,
{0.173377,-0.288821,-0.0508129,-0.0652602,0.103358,0.163975}
,
{-0.0194857,-0.256322,0.285796,0.313604,-0.151112,-0.0699219}
,
{1.1578,-0.569296,0.859845,-0.347471,-0.375417,0.27089}
,
{0.312153,-0.501073,0.674573,0.306473,0.0416074,-0.149379}
,
{0.406299,-0.530406,0.568476,0.16646,-0.0421885,-0.148832}
,
{0.107999,-0.401467,0.890437,0.112307,-0.181892,-0.179815}
,
{0.0468677,0.0321755,-0.0986435,0.0862204,0.0434126,0.0306544}
,
{0.376951,0.184193,-0.564007,0.0416569,0.12711,-0.0785443}
,
{0.0858447,0.0791616,-0.0195253,0.079063,0.14887,0.0457509}
,
{0.120854,-0.0426348,-0.0956231,0.0796258,0.204818,0.098866}
,
{0.163469,-0.0523578,0.0241735,0.173354,0.227577,0.123876}
,
{0.22673,-0.203183,0.104674,0.147061,0.0157141,-0.0402846}
,
{-0.00359695,-0.155129,-0.168535,0.0895639,-0.0543042,-0.0398847}
,
{-0.0462973,-0.0839053,-0.760906,-0.102119,0.0133755,0.307872}
,
{0.135748,-0.0596229,0.112258,0.115658,0.0253682,-0.00283059}
,
{0.0600602,0.0817132,-0.185509,0.116535,-0.0549038,0.0502748}
,
{0.386844,-0.186314,0.0973544,-0.15727,0.0467607,0.182209}
,
{-0.56845,0.147465,0.0946068,0.0803321,-0.0495548,0.0251599}
,
{0.094931,-0.0637721,-0.358455,0.000776552,0.0810815,-0.067964}
,
{0.0107328,0.00578458,-0.123602,0.0521742,-0.100109,-0.00349672}
,
{-0.033389,-0.128562,-0.203638,-0.0465533,0.157501,0.0637732}
,
{-0.115768,-0.115087,-0.06447,0.128503,0.00311458,0.0188626}
,
{0.0206841,-0.20467,-0.29682,-0.029927,-0.150809,-0.0104639}
,
{-0.148793,0.0163495,-0.0583212,-0.128096,-0.227212,-0.131847}
,
{0.00902077,0.201628,0.263369,-0.00746597,-0.0920736,0.0783784}
,
{-0.0640621,-0.0135535,-0.0281844,-0.176723,-0.419443,-0.0668518}
,
{-0.058728,-0.0342392,0.0994498,-0.388667,-0.418535,-0.185854}
,
{0.551811,0.391097,-0.0815764,0.528561,-0.0553476,-0.0614638}
,
{0.0596197,-0.0814413,0.118881,0.0398541,0.0145873,-0.218542}
,
{-0.00923877,0.000587039,-0.023555,0.0882295,0.0498071,0.0884189}
,
{0.136646,0.0947851,-0.020858,0.19491,-0.0578825,-0.0799362}
,
{-0.146733,0.0469909,0.240428,-0.0305144,0.160188,-0.0190487}
,
{0.0534491,0.268554,-0.0826431,0.00538605,-0.00466287,-0.0602339}
,
{-0.127014,0.0704882,0.101861,0.0865712,0.188858,-0.0305661}
,
{6.8906e-05,-0.120622,-0.0753499,-0.05887,0.0146189,-0.0270253}
,
{0.0798376,0.232591,-0.0524559,0.0429389,-0.140613,-0.0988593}
,
{0.111766,0.0738559,0.0166702,-0.120331,-0.130352,0.0289584}
,
{0.0654725,0.258689,0.100541,0.0996644,0.177211,0.102637}
,
{-0.0146478,-0.00998514,0.0201367,0.0598479,0.0144035,0.0385747}
,
{-0.00842999,-0.0315856,-0.000547399,-0.0412602,-0.0342833,-0.0248166}
,
{-0.0474666,-0.432195,-0.197315,0.0539026,0.169555,0.163066}
,
{-0.00462828,-0.0949755,0.105896,-0.0565974,-0.100408,-0.0192982}
,
{-0.00206819,-0.0230541,-0.0401767,-0.0388163,-0.0439837,-0.0348951}
,
{0.00467863,-0.0415161,0.0436295,0.107658,-0.107305,-0.153378}
,
{0.00733571,0.0501612,0.0452126,0.165001,0.0829646,0.135548}
,
{-0.0619508,0.161758,0.0717865,0.0196672,0.0460245,0.0270285}
,
{0.011877,-0.107498,-0.0787338,-0.0272539,0.0330376,0.152981}
,
{0.000402141,0.109749,0.194031,0.0695923,-0.0710168,0.0153861}
,
{-0.0925202,0.0890153,0.13607,-0.0317074,-0.025424,0.0485086}
,
{0.0113239,-0.0534575,-0.0159655,-0.0237447,-9.8031e-05,-0.0203335}
,
{-0.0190484,-0.112064,0.051117,-0.126878,0.245159,-0.020152}
,
{0.111944,-0.00782144,-0.105453,-0.0442657,-0.028141,-0.148348}
,
{-0.0690673,-0.0694549,0.00706962,-0.0136724,-0.107696,0.0237387}
,
{0.0578352,-4.54971e-05,-0.0705019,-0.0577434,-0.28526,-0.0207284}
,
{0.0627752,-0.00699893,-0.0150263,-0.0962942,-0.140287,-0.128618}
,
{0.605838,-0.0547824,0.138578,-0.0800562,-0.109482,0.112642}
,
{-0.0780933,-0.031878,-0.188717,0.0258884,-0.162404,-0.174926}
,
{0.00546853,-0.0179027,0.193985,0.0713814,-0.0732957,-0.0570286}
,
{-0.102497,0.00258022,0.0890227,0.288984,-0.125043,-0.0170957}
,
{0.0790321,-0.114387,-0.0152617,-0.0604878,0.135581,-0.0498999}
,
{0.395124,-0.103325,0.036361,0.295723,-0.0307996,-0.401989}
,
{0.128565,0.0380478,-0.0711676,-0.0804584,0.165271,0.0219348}
,
{0.0786266,-0.055755,-0.037631,0.0818624,0.190389,-0.00909301}
,
{-0.159865,-0.124196,-0.0723398,-0.0822985,0.191114,0.0967461}
,
{-0.0957928,-0.00388053,-0.0200836,-0.0740553,0.0242237,-0.0659814}
,
{0.257416,-0.433836,0.219154,-0.327586,-0.476527,0.24631}
,
{0.111869,0.0438887,0.150322,-0.01709,0.10365,0.0976943}
,
{-0.0263604,0.0847441,-0.0594163,-0.0205915,0.0938206,-0.013279}
,
{-0.195364,-0.0542446,0.0350717,0.106421,-0.0525792,-0.117792}
,
{0.0723487,0.107028,0.041671,0.116944,-0.0438475,0.0279305}
,
{0.144499,-0.0421852,-0.200774,0.431777,-0.0089688,0.276224}
,
{0.148744,0.114476,0.0524252,-0.22562,0.0386797,0.184051}
,
{0.176809,0.131255,0.0170536,0.14338,-0.0259478,0.146163}
,
{0.171881,0.194779,-0.0570239,-0.101945,-0.310029,0.316428}
,
{-0.0509531,0.0720981,0.0252879,0.0236698,-0.156205,-0.0718731}
,
{0.38004,0.294346,0.198608,-0.040729,0.0211056,-0.333051}
,
{0.129436,0.1954,0.0216791,0.0366106,-0.138311,0.368731}
,
{-0.108018,0.0909817,0.219748,-0.172713,-0.353085,0.30305}
 };
  static const float bias2[1] = { 0.425832 };
  static const float weights2[][1] = { {0.0278962}
,
{0.0162042}
,
{-0.0515944}
,
{-0.0171978}
,
{-0.0149659}
,
{0.0298143}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_0_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_0_51(v, index);
}
static int assign_gen_lepton_prior_7_0_51() {
  global_gen_lepton_prior.at(7,0,51) = &specialized_gen_lepton_prior_7_0_51;
  return 0;
}
static int initialize_gen_lepton_prior_7_0_51 = assign_gen_lepton_prior_7_0_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_0_52(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.322468,0.199635,0.122702,0.159816,-0.126406,-0.0427397 };
  static const float weights1[][6] = { {-0.074681,-0.511714,0.144953,0.656051,0.0824887,-0.222604}
,
{0.50108,-0.187166,-0.0369549,-0.540537,0.0626672,0.00973402}
,
{0.198896,0.0548986,-0.649183,0.43061,-0.0605715,-0.821916}
,
{0.826536,0.329448,0.578841,0.126975,-0.853004,-0.138518}
,
{0.327528,0.248286,0.160541,0.144835,-0.011052,0.131674}
,
{0.101924,0.0539497,-0.121384,-0.279058,-0.15418,0.128967}
,
{0.216927,0.230199,0.0993168,0.0184939,0.155673,-0.0279306}
,
{-0.00623782,-0.104879,0.103251,-0.00969355,0.0382612,-0.11212}
,
{0.147413,-0.225847,0.026567,-0.0455565,0.0147033,0.0506077}
,
{-0.0412913,0.12446,0.0524835,-0.0760676,-0.114014,0.143367}
,
{0.0773499,-0.0575161,-0.0185196,-0.109753,-0.0415421,0.100956}
,
{-0.0479133,-0.12472,-0.161452,0.19941,-0.0601019,0.148726}
,
{0.348193,0.0856714,-0.0487993,0.0266843,-0.0409973,-0.0175152}
,
{0.102235,-0.167138,0.163942,0.0447941,0.0111971,0.0775851}
,
{0.139893,-0.304565,-0.204124,-0.0521665,-0.188893,0.139091}
,
{0.214045,0.0793464,0.0360089,-0.20491,0.103215,-0.117212}
,
{0.410761,-0.264024,-0.281899,0.0659035,0.044174,-0.134881}
,
{0.0249926,-0.215781,-0.266458,0.254104,0.17803,-0.0126729}
,
{-0.654679,-0.0260179,0.00583556,-0.0798303,-0.169901,0.067036}
,
{-0.00125665,0.111548,0.0173871,-0.018798,-0.257601,-0.179018}
,
{-0.0664164,0.168418,0.0511839,0.00861471,0.110732,0.0197879}
,
{-0.0884179,0.0303894,-0.0115814,0.164143,0.0318288,-0.219252}
,
{-0.0795213,0.0706388,-0.0981401,0.162627,0.0317271,0.162599}
,
{0.0794536,-0.155987,0.0112202,-0.0742457,-0.12931,-0.12723}
,
{0.0794352,0.097782,-0.387582,-0.663461,-0.151238,0.0261559}
,
{-0.369799,0.0667792,-0.125629,0.253307,0.0842671,-0.130446}
,
{-0.154522,-0.37854,-0.00706168,-0.175436,-0.152365,-0.0526777}
,
{0.286696,0.287512,-0.28609,-0.264193,-0.167763,0.0141582}
,
{0.15231,-1.13046,0.338473,0.330392,0.229855,0.407991}
,
{0.0479022,-0.176104,0.107205,-0.0981622,-0.0705589,0.15677}
,
{0.0280818,0.0610858,0.00694444,-0.050633,-0.103401,0.0987386}
,
{0.0730466,0.13459,-0.160959,-0.178168,0.0232952,0.214576}
,
{-0.00878436,0.0580034,-0.0483572,0.0399913,0.014825,0.10938}
,
{0.0332356,-0.0458114,-0.0978817,0.195481,-0.245104,0.177919}
,
{0.038176,-0.0451218,0.0987963,-0.0291471,-0.0290894,0.0654031}
,
{0.0065433,0.0391356,-0.0430239,-0.0109218,-0.0458766,0.0833419}
,
{0.0592804,-0.0943926,-0.183179,0.278569,0.0522043,-0.249175}
,
{0.0300772,0.26092,-0.164699,-0.173063,-0.156339,0.210068}
,
{-0.0374321,0.165672,0.0772304,-0.0202637,0.0588438,0.302585}
,
{-0.00767619,-0.028717,-0.0146818,-0.0941697,0.0189868,0.0571086}
,
{-0.00941759,-0.0700097,0.00808603,0.0276873,0.103811,-0.0848876}
,
{0.107346,-0.0814716,-0.00118614,-0.0823592,-0.110962,0.113725}
,
{0.0733299,-0.1199,0.252606,-0.110853,0.0121742,0.0260905}
,
{-0.113028,0.0190471,0.13031,0.0957052,0.0664109,-0.367904}
,
{0.128188,0.0553725,-0.0210017,0.0314799,0.0712575,0.107347}
,
{-0.00600678,-0.0604284,-0.00994586,0.0416665,0.0189379,-0.105171}
,
{-0.0350766,0.149844,0.39497,-0.229898,0.0625522,0.115784}
,
{-0.142293,-0.0263781,0.12027,-0.103822,0.0990034,-0.013003}
,
{0.0171651,-0.0775886,-0.159229,0.170907,-0.0439953,-0.163888}
,
{0.00916425,0.0665397,-0.00586747,0.0907136,0.0761826,0.226012}
,
{-0.00570926,-0.0161134,0.0467901,-0.0143226,0.0366044,0.0380802}
,
{0.0709255,-0.249897,-0.155645,0.0922543,-0.285385,0.00281827}
,
{-0.123886,-0.0807078,0.261724,0.0174847,0.139761,0.255767}
,
{-0.0609866,-0.134799,0.0915398,0.233578,0.152897,-0.0761039}
,
{0.0569319,0.0843124,0.0224631,-0.0661244,0.0773023,-0.156755}
,
{-0.0197003,-0.00299104,0.115609,-0.0914079,-0.140364,-0.0647776}
,
{0.0124609,-0.118168,0.941556,-0.890935,1.5735,0.460132}
,
{0.0922175,0.0587533,-0.0568065,-0.212383,-0.253064,-0.0779563}
,
{0.0754285,0.108472,-0.0810716,-0.0655712,0.111513,-0.019677}
,
{0.0743648,0.322058,-0.0610565,0.245932,-0.324531,0.0109467}
,
{-0.0202336,-0.0309423,0.0236157,-0.0689593,-0.0426609,-0.0352366}
,
{0.146911,0.0983756,-0.556547,1.01936,0.231982,0.31438}
,
{-0.125359,-0.0732707,0.293714,0.289376,-0.195135,-0.000741266}
,
{0.106194,0.0328393,0.114763,0.0780128,-0.266328,0.122358}
,
{-0.244896,0.147473,0.288231,-0.0922564,0.123523,0.0439204}
,
{0.00248954,0.033359,-0.161949,-0.11401,0.146153,-0.040658}
,
{-0.484682,-0.466284,1.62765,-0.874313,0.246417,0.467868}
,
{-0.111896,-0.0763499,0.275088,-0.0925181,0.171484,-0.0811332}
,
{0.0744367,-0.0561287,0.2985,-0.144992,0.131112,0.242152}
,
{-0.054465,0.0567886,-0.196401,0.242657,-0.0709493,-0.0351289}
,
{-0.0189023,0.012973,0.0102737,-0.101243,0.0830285,-0.0884443}
,
{-0.298786,0.403126,-1.03196,0.128987,0.18557,0.237096}
,
{0.125863,-0.0864996,0.061225,0.147885,0.179322,0.0906046}
,
{-0.180655,-0.19208,-0.113352,0.208154,0.0673029,-0.183373}
,
{0.895456,-0.337443,-1.40028,-0.191368,-0.106808,0.38149}
,
{0.0845229,-0.200652,0.0454457,0.0050512,-0.0549912,0.124773}
,
{0.0495966,0.0143399,-0.141562,0.117411,0.102716,0.136966}
,
{0.883572,-0.253226,-1.55175,-0.433668,-0.229177,0.366755}
,
{0.576039,-0.387501,-1.30204,-0.401907,-0.14763,0.625175}
 };
  static const float bias2[1] = { 0.07799 };
  static const float weights2[][1] = { {0.0768087}
,
{0.0400929}
,
{0.0444346}
,
{0.0367132}
,
{0.0720957}
,
{-0.0932462}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_0_52(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_0_52(v, index);
}
static int assign_gen_lepton_prior_7_0_52() {
  global_gen_lepton_prior.at(7,0,52) = &specialized_gen_lepton_prior_7_0_52;
  return 0;
}
static int initialize_gen_lepton_prior_7_0_52 = assign_gen_lepton_prior_7_0_52();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_1_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.260099,-0.249231,-0.351292,-0.0170468,-0.477187,-0.218848 };
  static const float weights1[][6] = { {0.25076,0.273222,-0.112838,-0.291756,-0.241165,0.0776216}
,
{-0.50737,-0.501993,-0.170766,-0.17953,-0.110747,-0.230073}
,
{0.075199,0.282071,-0.201165,-0.455202,-0.418769,-0.588812}
,
{-0.333297,-0.141604,-0.25418,-0.423062,-0.31305,-0.0251138}
,
{-0.26806,-0.337838,-0.39061,-0.131555,-0.459588,-0.146404}
,
{-0.130402,-0.25354,-0.314246,0.0427759,-0.579202,-0.250364}
,
{-0.210815,-0.203359,-0.433787,0.171926,-0.311172,-0.021524}
,
{0.0651761,-0.0266103,-0.00111053,0.0613628,0.0341691,0.0517943}
,
{1.44623,1.43362,-0.215428,-0.725992,-0.434948,-0.442533}
,
{-0.0725889,0.0603562,-0.0509364,0.0821226,-0.0178532,0.0293305}
,
{0.148168,-0.137708,0.118412,-0.117042,-0.0639636,-0.00442622}
,
{0.0185598,-0.124853,-0.112536,0.00702344,0.189854,-0.0847425}
,
{0.304997,0.136879,-0.156634,-0.44734,-0.500352,-0.153315}
,
{-0.0647694,-0.016676,-0.279953,-0.395892,-0.279268,-0.106171}
,
{0.747127,0.37998,-0.106699,-0.640197,-0.523956,-0.337017}
,
{0.110733,-0.0102653,0.137013,-0.0268507,-0.000978154,-0.0276352}
,
{0.369274,0.266134,-0.249994,-0.627612,-0.397542,-0.188018}
,
{0.800223,0.893657,-0.521257,-0.146435,-0.571489,-0.217675}
,
{-0.0889981,-0.0239107,-0.196584,-0.282424,-0.311048,-0.0673159}
,
{0.297508,0.122328,-0.373906,-0.525409,-0.31771,0.0141743}
,
{0.107283,-0.0300879,-0.265544,-0.287709,-0.571086,0.0105031}
,
{-0.146136,-0.0613403,-0.284665,-0.050655,-0.359136,0.0869048}
,
{-0.0928888,-0.0464022,0.0701973,0.0130668,0.12033,-0.067774}
,
{0.0249134,-0.0471794,-0.22094,-0.0803669,-0.525611,0.0901054}
,
{-0.426097,-0.122916,-0.066212,-0.212692,-0.125987,-0.0377525}
,
{-0.0774471,-0.299093,-0.39463,-0.0411683,-0.469821,-0.158571}
,
{-0.0620526,-0.117657,-0.128563,0.066183,-0.419128,-0.271787}
,
{-0.0358482,-0.44028,-0.042282,0.0508173,-0.236608,-0.139538}
,
{1.19534,0.255406,0.0336925,-0.942071,-0.190486,-0.405487}
,
{0.059978,0.0829074,0.190325,-0.0440134,0.134985,0.0649157}
,
{-0.0991866,-0.0632486,-0.12135,-0.0316435,0.152609,0.147323}
,
{0.121357,0.0472802,-0.0671073,0.0663438,-0.150863,-0.0956316}
,
{0.141886,0.0385853,0.194805,0.0173805,-0.0368751,0.0221148}
,
{-0.0345732,0.0890779,0.00665038,-0.189905,-0.0844541,0.0318319}
,
{-0.026442,0.12983,-0.0573682,0.137597,-0.0128205,0.0551197}
,
{0.0244769,-0.0809184,-0.0343788,-0.037545,-0.0221572,-0.0509939}
,
{-0.0216444,-0.0151452,-0.0110459,0.208972,-0.175336,-0.0495474}
,
{-0.0149597,-0.0596886,0.127297,-0.0426596,0.116185,-0.0736962}
,
{-0.128102,0.154569,0.0286718,0.1087,-0.0702806,-0.163125}
,
{0.0350564,0.203607,0.0527927,-0.0389916,-0.0606601,0.0395236}
,
{0.0738187,0.0905654,-0.0713602,0.0951904,0.10465,0.084441}
,
{0.200555,0.0147036,-0.0682761,0.103463,-0.00177364,0.0113747}
,
{-0.0746898,-0.0946898,0.137321,0.101067,0.0595227,-0.0505275}
,
{-0.00979128,0.00229939,0.0388298,-0.00599176,0.0257552,-0.00388906}
,
{0.0698004,0.0724785,0.0413911,-0.0906718,-0.183673,-0.041986}
,
{-0.0292862,-0.0183591,0.0663378,-0.0153375,-0.0228541,0.0145814}
,
{-0.0527918,0.042106,0.0611604,0.0122477,-0.00122184,0.0761634}
,
{-0.0570895,0.0840217,-0.0925821,0.0563489,0.127289,0.140682}
,
{-0.0409141,0.0325309,-0.0527599,-0.244529,-0.134291,-0.121901}
,
{-0.146012,-0.191024,0.0213947,-0.0548287,0.12295,0.0451158}
,
{-0.0645128,0.0120247,0.0498931,-0.0460379,-0.0765469,-0.0407271}
,
{-0.206441,0.0601416,0.196603,-0.0539527,-0.0351044,-0.167773}
,
{0.139724,0.102235,0.157962,-0.0227672,-0.238055,0.0331731}
,
{0.117572,-0.0576774,0.151325,-0.0622532,-0.0948928,0.127789}
,
{-0.0455455,-0.138804,-0.0204383,-0.0248014,0.0377055,0.0567767}
,
{-0.0273591,0.119529,0.0365019,0.123176,0.0840365,0.0704873}
,
{0.11923,-0.0585087,-0.0573622,0.146539,0.00421962,-0.180314}
,
{0.0192564,0.146637,-0.0468613,0.203551,0.0226894,-0.0731497}
,
{0.00439906,-0.0794866,0.0604407,0.088354,0.154099,-0.103486}
,
{0.083733,0.199882,0.0381378,0.0471388,-0.0707126,-0.0668775}
,
{0.0795428,-0.0789254,0.00142622,-0.079939,0.0294401,0.0234984}
,
{-0.249864,0.00450784,-0.0355415,-0.191303,0.108702,0.0642334}
,
{0.0320717,-0.0525079,-0.170433,-0.0420684,0.0264286,0.0795083}
,
{-0.037707,-0.0231305,0.167089,0.244063,0.112585,0.0868455}
,
{-0.0195369,-0.14149,0.18711,-0.0891525,0.1242,0.0356431}
,
{0.034649,-0.0404226,0.042487,0.000300192,-0.0582944,-0.0654322}
,
{0.0699044,-0.167373,0.0448263,0.0700067,-0.0305055,-0.0485442}
,
{-0.0239359,0.0699782,0.0178036,-0.0522277,-0.159393,0.0762311}
,
{0.116115,-0.0638978,0.166575,0.195536,-0.0664531,-0.222884}
,
{0.0783282,-0.0805164,0.0773389,0.0971563,-0.00331167,0.0883543}
,
{-0.0944983,-0.00229328,-0.0959585,-0.0769817,-0.051658,-0.0151897}
,
{-0.177262,0.0672117,0.0256658,-0.0509084,0.0257517,0.0819616}
,
{-0.0480514,-0.113961,0.171584,-0.0201374,-0.0784881,0.0196102}
,
{0.0255248,0.177882,0.0187915,-0.0557843,0.0764788,0.0205218}
,
{-0.0766003,0.167834,0.0789736,-0.157568,-0.18072,0.0358306}
,
{0.00855348,0.0267819,0.0854137,-0.0430736,0.118077,0.164815}
,
{0.14237,0.474647,-0.0278639,0.151577,0.153702,0.0519875}
,
{-0.0482075,-0.142895,-0.130428,-0.15772,-0.0364042,-0.100953}
,
{0.0591215,0.0258984,-0.0965682,0.0401461,-0.0265859,-0.0863406}
 };
  static const float bias2[1] = { 0.301794 };
  static const float weights2[][1] = { {0.00802593}
,
{0.00577969}
,
{0.012331}
,
{-0.0121234}
,
{0.00574029}
,
{-0.00694359}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_1_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_1_50(v, index);
}
static int assign_gen_lepton_prior_7_1_50() {
  global_gen_lepton_prior.at(7,1,50) = &specialized_gen_lepton_prior_7_1_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_1_50 = assign_gen_lepton_prior_7_1_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_1_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.126019,0.00349053,-0.42413,0.0829626,-0.155764,-0.128231 };
  static const float weights1[][6] = { {-0.418433,-0.197934,0.0112987,0.182194,-0.451221,-0.0413436}
,
{0.102832,0.0512495,-1.11794,0.112288,0.516182,-0.408252}
,
{0.0762734,0.419268,-0.785641,-0.149051,-0.0568368,-0.637929}
,
{1.59861,0.817915,-0.136305,-0.599161,0.119924,2.30309}
,
{0.0541433,0.058046,-0.635424,0.237619,-0.0607152,-0.198615}
,
{-0.0148524,-0.0651396,-0.367174,-0.0690724,-0.33126,-0.509149}
,
{-0.0314032,0.0528748,-0.244423,0.362347,-0.268085,-0.511925}
,
{0.0496109,-0.131833,0.00564127,0.0544125,-0.0174289,0.0220601}
,
{0.297922,0.34553,-0.438582,0.00485921,0.296095,0.688217}
,
{-0.0125825,0.0125433,0.149683,-0.10161,-0.0112603,0.177216}
,
{0.0342407,0.0304204,-0.0498937,0.0488998,-0.0358238,0.190862}
,
{0.000184005,-0.139419,0.0804403,0.0909944,-0.000371299,0.0538096}
,
{0.129152,0.0783474,-0.215476,-0.246194,0.0706024,0.0486832}
,
{-0.0674291,-0.0759288,-0.0890434,-0.202407,0.280315,-0.180271}
,
{0.0637424,-0.0589593,0.133885,-0.53296,-0.045474,0.352115}
,
{-0.0786203,0.0867791,-0.0359118,0.104071,-0.0110868,0.00174511}
,
{0.224062,-0.100813,-0.0538942,-0.407137,-0.0372439,0.239044}
,
{0.284415,0.00526023,-0.286849,0.0944494,-0.0169644,0.469848}
,
{-0.24234,-0.0867278,-0.155718,0.00814138,-5.30274e-05,-0.0655201}
,
{0.22068,0.0496304,0.166449,-0.0897902,-0.278092,0.0481114}
,
{0.168402,-0.246739,0.093147,-0.0972034,-0.0951293,-0.259978}
,
{-0.100087,-0.0934344,-0.0917429,0.12983,0.105086,0.0257602}
,
{-0.0263232,0.217844,-0.173639,-0.072377,0.0615653,-0.110035}
,
{0.0602322,0.101267,-0.00288547,0.117938,-0.0138686,0.0574744}
,
{0.0501241,-0.106105,0.0576355,-0.052683,0.132594,-0.182245}
,
{-0.00970439,-0.107387,0.0229942,0.200804,0.000943032,0.0663387}
,
{0.0744106,0.00921106,-0.0712333,0.189191,-0.175693,-0.0257619}
,
{-0.0691529,-0.264366,0.0952859,-0.143704,-0.0182063,-0.136811}
,
{0.216792,-0.507225,-0.0779395,-0.535725,-0.146395,0.376233}
,
{0.11714,-0.0329551,-0.0501639,0.0192389,0.158755,-0.151765}
,
{-0.00540703,0.0455996,0.0118665,-0.0894816,-0.0556556,-0.0602232}
,
{0.0722334,0.0828153,-0.0841443,-0.171253,-0.168559,0.11732}
,
{0.159837,-0.0280381,0.0597848,0.217651,0.142607,-0.155533}
,
{0.0867367,-0.135892,0.0657824,0.166485,0.0360728,0.02713}
,
{0.0752694,0.0576074,0.110274,-0.00826012,-0.157043,0.0469305}
,
{-0.0485029,0.00972155,-0.0522589,-0.0515097,-0.0666373,0.0592052}
,
{-0.133834,-0.229445,-0.0910616,-0.13049,-0.0514452,0.176234}
,
{-0.0679493,0.112106,0.0578678,-0.0884697,0.0363583,-0.138424}
,
{-0.0324296,-0.0788365,-0.0739615,-0.0492459,0.0682726,0.0199158}
,
{0.112628,0.00457166,-0.182287,0.101305,0.0585495,-0.137252}
,
{0.0281441,0.00415594,0.0526804,-0.0517673,-0.110436,0.0660964}
,
{0.134032,0.126175,0.119926,0.115756,-0.031335,-0.155754}
,
{-0.125137,-0.0308515,0.0570427,-0.0621222,0.0384281,0.0773193}
,
{-0.0342098,-0.161919,-0.0890378,0.175461,0.0476237,0.106325}
,
{0.0532036,-0.0947189,-0.120057,0.158793,0.173531,-0.0428011}
,
{-0.0129045,-0.0449764,-0.0200666,0.0523181,0.0780928,-0.00387512}
,
{-0.0472635,0.241305,-0.0470286,0.231094,0.145112,0.166178}
,
{-0.0479752,0.0588605,0.0552775,-0.0114857,-0.0914252,0.144061}
,
{0.0476526,-0.00943421,0.050265,-0.034005,-0.103681,-0.070715}
,
{-0.0482945,0.0727013,0.129968,0.00150768,0.0405335,-0.092082}
,
{-0.0114598,0.0390339,0.032593,-0.0073465,-0.00486295,0.00319849}
,
{-0.102638,0.139599,-0.0496972,-0.0408391,-0.0538555,0.0722969}
,
{0.0781159,-0.00812095,-0.0185453,0.0550587,-0.0266558,0.0408807}
,
{-0.0421809,-0.163465,-0.225293,-0.0379311,0.030531,0.0774565}
,
{0.179765,0.126159,0.0831239,0.143594,0.0937128,-0.00527317}
,
{0.0516379,-0.146859,0.0634486,-0.0665767,-0.0664352,0.0590227}
,
{-0.318682,0.441243,-0.191255,-0.341725,-0.594808,0.526621}
,
{0.129933,0.0491149,0.00369209,-0.022069,0.10594,-0.207134}
,
{-0.0222371,0.00877581,0.0919166,0.251273,0.0010865,0.0851373}
,
{-0.0317801,0.0689208,0.00944117,0.191681,0.142626,0.0389146}
,
{0.0868715,0.0335668,0.123767,0.0486638,-0.0182939,0.0048528}
,
{-0.0142856,0.104586,0.712422,-0.0555991,0.670416,-1.09761}
,
{-0.0973122,-0.0361868,0.0466983,-0.0753299,-0.172587,-0.0289039}
,
{0.0782715,0.0739975,-0.0783487,-0.121586,-0.104055,0.0126509}
,
{-0.138747,-0.262787,-0.276482,0.0966775,-0.00730543,0.142039}
,
{0.0106039,0.138491,0.00590137,0.104549,0.0546947,-0.0527849}
,
{-0.31309,0.209625,-0.110761,0.19654,-0.955922,0.554812}
,
{0.0526102,-0.0675771,-0.109628,-0.129989,-0.0717561,0.117734}
,
{-0.0512984,-0.0762458,-0.044417,-0.0114361,-0.00205776,-0.0199202}
,
{-0.0129064,0.0232229,-0.0584393,0.0810763,0.0346164,0.0528435}
,
{-0.058377,0.0568463,-0.118861,0.0422895,0.0609341,-0.0409907}
,
{0.338838,0.218672,-0.8727,-0.446618,-0.167043,0.465708}
,
{0.0514318,0.214522,-0.0478245,0.0342801,-0.120723,0.040547}
,
{0.0318322,0.0761888,-0.0266753,0.141835,0.0480402,0.0728437}
,
{-0.238058,0.159142,-0.209193,-0.0714006,-0.146668,0.189576}
,
{-0.188654,0.173567,-0.0110925,-0.210968,0.0601763,-0.29117}
,
{0.497915,-0.258221,-0.801079,-0.408853,1.87104,0.103073}
,
{-0.194201,0.142196,0.0579278,-0.203929,-0.295183,0.481737}
,
{-0.350486,0.0421383,-0.184596,-0.245211,-0.0620172,0.190732}
 };
  static const float bias2[1] = { 0.275874 };
  static const float weights2[][1] = { {0.0237443}
,
{0.0228032}
,
{-0.0243912}
,
{-0.0298932}
,
{0.0293445}
,
{0.0185923}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_1_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_1_51(v, index);
}
static int assign_gen_lepton_prior_7_1_51() {
  global_gen_lepton_prior.at(7,1,51) = &specialized_gen_lepton_prior_7_1_51;
  return 0;
}
static int initialize_gen_lepton_prior_7_1_51 = assign_gen_lepton_prior_7_1_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.146054,-0.310517,0.0175681,0.882988,0.444169,-0.383504 };
  static const float weights1[][6] = { {-0.105004,-0.275644,-0.085398,-0.812701,-1.09354,-0.354156}
,
{-0.36768,0.170323,-0.0363383,-0.222498,0.184172,-0.0133824}
,
{-0.988911,0.127664,0.0402856,-0.00506111,0.029862,-0.0519202}
,
{-0.204796,0.11159,0.867627,1.12454,0.556562,0.303166}
,
{-0.117312,-0.320213,-0.0678365,0.830428,0.268165,-0.48019}
,
{-0.16452,-0.18251,-0.194422,0.619064,0.3078,-0.404781}
,
{-0.154942,-0.457203,-0.255965,0.826149,0.384679,-0.487783}
,
{-0.0324683,0.100563,-0.260681,0.139129,-0.141426,0.112847}
,
{-0.166683,-0.153916,-0.123018,0.0105531,0.090547,0.210653}
,
{0.0069435,0.0750172,-0.0272245,-0.00990147,-0.203123,-0.0517957}
,
{-0.10913,-0.0413052,0.0102905,-0.0297673,0.0802589,-0.0697958}
,
{0.0814646,0.0222475,0.183139,-0.0254414,0.0625957,-0.0512741}
,
{-0.0410779,0.248988,0.134616,0.0276328,0.126906,0.531118}
,
{-0.169548,0.0639931,0.155494,0.0703058,0.121064,0.469568}
,
{0.195955,-0.048088,-0.144858,0.00713803,-0.0903122,-0.099071}
,
{-0.197711,-0.0318449,-0.118646,-0.0682782,0.17902,-0.128067}
,
{-0.134468,0.101171,-0.459768,0.153684,0.422425,0.568786}
,
{-0.158569,0.174012,0.00698502,0.093066,-0.0939567,0.203931}
,
{0.0205396,-0.13886,-0.07748,0.330927,-0.237382,-0.629039}
,
{-0.0817292,0.00814827,-0.251129,0.0462878,-0.0916587,-0.175849}
,
{0.105825,-0.146252,-0.0327457,0.00720024,0.00808318,-0.00285494}
,
{-0.0591666,-0.128647,0.034543,-0.0579852,0.0682788,-0.0384723}
,
{0.158479,0.208801,-0.137528,-0.00268973,-0.199331,0.220582}
,
{-0.109418,-0.0171042,-0.115635,-0.0258647,0.0416597,-0.192992}
,
{-0.216721,-0.086016,0.0778194,-0.413436,0.0144228,0.0868161}
,
{-0.258396,0.00919969,-0.101271,-0.430882,0.0141911,0.0136947}
,
{0.0197837,-0.0823556,-0.0892239,-0.198876,-0.0378665,0.113134}
,
{-0.224723,0.0532532,-0.153352,-0.489441,-0.0437722,0.0569396}
,
{0.295401,0.439065,0.500023,0.526445,0.360639,0.562112}
,
{-0.00978083,0.222136,0.0985491,0.105245,-0.143508,-0.0529293}
,
{0.0517812,-0.0624386,-0.000793391,0.0616799,-0.0466402,0.050954}
,
{0.0477494,-0.0763284,-0.15181,-0.00668442,0.0141519,0.0887961}
,
{0.197837,-0.0495657,0.139885,0.11009,-0.0114622,-0.00359565}
,
{0.247958,0.115248,0.022014,0.135908,0.0317849,0.0269767}
,
{0.112956,-0.108056,0.0189564,-0.0298586,0.0395176,0.0019823}
,
{0.0212014,0.101426,0.0145222,0.0239602,-0.0186058,-0.017626}
,
{0.217576,-0.231016,0.153086,0.166161,-0.113685,-0.0770555}
,
{-0.0289622,-0.0257913,0.029867,-0.0487676,0.053428,-0.000111419}
,
{0.127842,0.0486206,-0.0836658,-0.0780529,0.0907279,0.00492028}
,
{0.0845507,-0.0589793,-0.0800122,0.0262757,-0.0203678,0.00460242}
,
{-0.0302672,0.0387905,0.0795989,-0.0423461,0.0394776,0.000249093}
,
{-0.0554313,-0.129148,0.23831,-0.016275,0.0363541,-0.109895}
,
{0.0849032,0.0289001,-0.0287863,-0.103101,0.0985556,-0.0340832}
,
{0.135138,-0.083009,-0.105443,-0.0496469,0.0406115,0.0541896}
,
{0.00112644,-0.0506106,0.0801519,-0.0367679,0.0443917,0.0310048}
,
{0.00445015,0.0300747,0.00758559,0.0389584,-0.0219417,-0.0224332}
,
{0.117128,-0.254863,-0.0404383,-0.162342,0.162985,0.180707}
,
{0.0985445,0.0670628,-0.125196,-0.0061043,0.00197062,0.0162111}
,
{-0.159938,0.0971346,-0.40132,0.0326731,-0.0322016,-0.123756}
,
{0.0705546,0.0473534,-0.0930009,-0.0496439,0.0468403,0.0186184}
,
{-0.103095,-0.0298822,-0.0456339,-0.0520129,0.0381561,-0.0383756}
,
{-0.0141089,-0.00614079,-0.0965711,-0.132611,0.103359,0.0333191}
,
{0.0682105,0.0280382,-0.0756277,-0.0339767,0.0360096,-0.0524435}
,
{0.0201376,-0.161506,0.0369555,-0.0472623,0.0507874,0.0146963}
,
{-0.0900071,-0.0577821,-0.0968461,0.106535,0.00384856,-0.0437218}
,
{-0.19119,-0.145957,-0.0803357,-0.0892874,0.0121065,-0.0103367}
,
{0.943817,0.0626189,-0.0710469,-0.22465,-0.000502895,0.0725757}
,
{-0.962706,0.348142,0.129473,0.255302,-0.0974628,0.0584642}
,
{0.0232658,0.205433,0.383036,0.0352455,0.0912149,-0.0327527}
,
{0.0949519,0.00843462,0.174842,-0.0081764,0.0265621,-0.00827454}
,
{0.0999365,0.0755393,-0.11956,-0.122229,0.0139609,-0.0394392}
,
{-0.0841753,0.203804,0.114498,0.313976,0.266898,-0.245617}
,
{-0.0802216,-0.384231,0.0218625,0.497921,0.646225,-0.514494}
,
{-0.095256,0.181518,0.107684,-0.506746,0.0598216,-0.107815}
,
{0.15653,-0.0207655,-0.333708,0.203605,-0.0360182,-0.0111425}
,
{0.221653,-0.0176651,-0.0196011,0.175131,0.0500305,-0.0168689}
,
{-0.462598,0.0898273,-0.891383,-0.557901,-0.120346,0.0685048}
,
{-0.21756,-0.0648566,0.0447565,-0.0279622,0.383785,-0.104094}
,
{-0.218284,-0.0448974,0.0474055,-0.0628804,0.0768559,-0.054811}
,
{0.0341128,0.0584403,0.0321686,0.119165,0.030924,-0.0344502}
,
{0.0116377,0.0902832,-0.0689587,0.0490117,0.00161453,-0.0390306}
,
{0.555047,0.486816,0.454066,0.266238,-0.070739,0.0457456}
,
{0.777361,0.262381,0.782155,0.0584424,-0.318314,0.351422}
,
{-0.0980321,0.405153,0.078708,-0.17333,-0.0934847,0.0127486}
,
{0.398345,1.059,-0.0069201,-0.326475,-0.797481,0.625485}
,
{0.496342,0.256404,-0.172485,0.0826553,0.177399,-0.130216}
,
{-0.0837576,-0.786743,0.645354,0.0950792,0.269636,-0.956988}
,
{0.0181904,0.0296262,0.111346,-0.133267,0.0821259,0.0381485}
,
{-1.2187,0.302631,-0.0859442,0.381632,-0.741308,-0.0812568}
 };
  static const float bias2[1] = { 0.00919836 };
  static const float weights2[][1] = { {-0.0465364}
,
{0.0579904}
,
{-0.0638434}
,
{0.0859229}
,
{0.0953586}
,
{0.0660427}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_1(v, index);
}
static int assign_gen_lepton_prior_1_1_1() {
  global_gen_lepton_prior.at(1,1,1) = &specialized_gen_lepton_prior_1_1_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_1 = assign_gen_lepton_prior_1_1_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_2_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.337233,-0.108331,-0.421912,0.117268,-0.15692,-0.289803 };
  static const float weights1[][6] = { {-0.117674,-0.195623,-0.053307,0.214994,0.138078,0.0559367}
,
{0.105785,0.458808,-0.328472,-0.517937,-0.52681,-0.168697}
,
{-0.257796,0.153893,-0.232472,0.389705,-0.560876,0.130565}
,
{-0.316755,-0.811085,-0.40918,0.715704,0.156276,-0.0636881}
,
{-0.113379,-0.0177497,-0.183085,0.0524031,-0.288046,-0.20885}
,
{-0.344349,0.0645895,-0.553242,0.0722593,-0.0316619,-0.403459}
,
{-0.220117,-0.00459173,-0.48471,-0.0666756,-0.0475666,-0.0831961}
,
{-0.0614988,-0.0229957,0.0201317,0.124614,-0.00113848,-0.129719}
,
{0.0397375,-0.507658,-0.390027,0.00513813,1.21334,-0.221974}
,
{0.0213759,-0.0793205,-0.0586454,0.00704506,-0.0978803,0.0412862}
,
{-0.0657397,0.0801835,0.0163742,-0.0358777,-0.207575,0.248042}
,
{0.0573602,0.139299,0.0890551,-0.0435446,-0.0168311,-0.100077}
,
{-0.128225,-0.0572991,-0.430391,0.223413,0.0495535,-0.387551}
,
{-0.131071,-0.292397,-0.494237,0.179361,-0.196052,-0.393424}
,
{0.133894,-0.502191,-0.159934,0.0584048,0.13104,-0.278824}
,
{-0.0110752,-0.112973,0.071188,0.183108,0.0604678,-0.118043}
,
{-0.0545025,-0.152551,-0.499122,0.0809912,0.212079,-0.49095}
,
{-0.257354,-0.00457409,-0.20414,0.255701,0.665554,-0.455576}
,
{-0.196978,-0.218748,-0.371657,-0.252274,-0.0287939,-0.0532325}
,
{-0.311657,-0.296165,-0.287148,-0.0874736,0.26115,-0.436737}
,
{-0.0899367,-0.420219,-0.412432,0.0144285,-0.0234165,-0.37551}
,
{-0.249885,-0.260152,-0.435014,-0.2062,-0.0116695,-0.41399}
,
{-0.044164,-0.0798365,-0.0964669,0.0107727,-0.0861903,-0.0112644}
,
{-0.175301,0.148168,-0.147403,-0.456605,-0.0706933,-0.121907}
,
{-0.304394,-0.0690046,-0.474091,-0.0116436,0.146737,0.00145337}
,
{-0.0672419,-0.0584265,-0.296041,-0.237184,-0.37481,-0.17329}
,
{0.0415905,-0.219191,-0.364361,-0.105869,0.0910184,-0.118391}
,
{-0.144648,-0.232446,-0.162174,-0.259388,-0.306789,-0.311874}
,
{0.204474,-0.404167,-0.0426965,0.327764,0.594791,-0.305177}
,
{0.145586,-0.00527694,-0.138935,0.0436139,-0.0528924,-0.145543}
,
{-0.153939,0.0662764,-0.0107355,-0.114138,-0.141498,0.0645902}
,
{-0.185577,-0.019513,0.0941204,-0.00745989,0.0933221,0.056899}
,
{0.0703441,0.00319962,0.0749269,0.00118813,-0.0864861,0.0756791}
,
{-0.0329199,0.15632,-0.124496,0.0552013,0.00834411,-0.0492413}
,
{-0.0174359,-0.124684,-0.0520421,-0.024645,-0.108629,0.154124}
,
{0.0108477,0.0355763,0.0121891,0.0500787,-0.00140862,0.049829}
,
{-0.0235889,0.185461,0.0393806,0.127943,-0.0291005,-0.0851463}
,
{0.0696386,0.0255166,0.216972,0.0431036,0.0847568,-0.118654}
,
{-0.000309759,0.0251298,-0.039156,-0.103058,-0.0120342,-0.00243815}
,
{0.0147153,-0.101212,-0.107358,-0.0138498,0.017495,0.139807}
,
{5.01704e-05,0.11194,0.0244155,0.0154843,-0.00860304,0.100698}
,
{0.0349366,0.0166922,0.0359299,-0.116384,-0.0336087,-0.00440051}
,
{0.168481,-0.0977342,0.227788,0.0481597,-0.0303256,0.273207}
,
{-0.170172,-0.291493,0.0105726,0.0373283,0.0162292,0.18814}
,
{0.104726,0.119993,-0.138026,-0.161141,0.0204064,-0.0939658}
,
{-0.0703677,-0.0107644,-0.0402684,-0.0227361,0.00854266,-0.183897}
,
{-0.0241396,0.169337,-0.0641493,0.15227,0.0263853,-0.127963}
,
{-0.123794,-0.11229,0.0945136,0.0683719,-0.00937026,0.0475498}
,
{0.0716018,-0.4287,0.0809689,-0.194445,-0.0155581,0.00980459}
,
{-0.0730926,-0.161234,-0.0206418,0.00525931,0.0287133,-0.064491}
,
{0.0936221,-0.078528,0.00667749,-0.0358352,0.00303861,0.0419575}
,
{-0.0351001,-0.343599,-0.0641256,-0.322207,0.0283626,-0.0890642}
,
{0.129654,-0.0573007,0.0586706,-0.129617,-0.0266574,-0.0439857}
,
{-0.113608,0.210783,0.106924,-0.0365399,0.00956755,-0.166524}
,
{0.0332558,-0.156731,0.0330931,-0.171613,-0.110284,-0.00296946}
,
{-0.0372041,0.0556835,0.215342,0.0310412,0.10232,0.020871}
,
{-0.0992172,-0.114147,0.0336978,0.0171394,0.14894,0.0309726}
,
{0.110223,-0.205272,-0.0532236,0.00256411,0.137907,0.0284108}
,
{0.149432,0.119399,-0.102161,-0.066923,0.0243877,0.0310488}
,
{0.03042,0.0112318,-0.12503,-0.105841,0.0328431,0.0220426}
,
{0.0136075,-0.00267098,-0.101326,-0.0182454,-0.104176,-0.0966199}
,
{0.171764,-0.0907129,-0.117855,-0.0509339,-0.215042,0.0196327}
,
{-0.0899195,-0.121361,-0.0151498,0.0273197,-0.0222917,-0.0735078}
,
{0.180261,0.0716612,0.152804,-0.0862446,0.0539087,-0.0175949}
,
{-0.161119,0.141697,0.0347774,0.133506,-0.00741533,0.160544}
,
{0.00917314,0.0309731,-0.0996951,0.0248772,-0.0616555,-0.0390643}
,
{0.192408,0.367903,0.217546,0.0738543,-0.133601,-0.204705}
,
{-0.0160019,0.0989038,0.0281704,-0.0237971,-0.0377097,-0.0437212}
,
{-0.0953238,0.255817,0.0979083,0.154477,0.139676,0.0592797}
,
{-0.117365,-0.0390426,0.126391,-0.0168254,-0.172542,0.0549206}
,
{-0.0710284,0.0507897,0.0892686,-0.00809203,0.0606156,0.0307348}
,
{0.0713719,0.168334,-0.109351,-0.221173,0.1139,-0.110812}
,
{-0.112032,0.0298765,-0.0711459,0.165386,0.109382,-0.0733787}
,
{-0.0469389,0.0261102,0.10207,-0.227418,0.131948,-0.00146525}
,
{-0.160592,0.189438,0.171174,0.0738352,-0.187318,0.00282789}
,
{0.130236,0.0855431,0.158128,-0.0168108,0.00317726,0.124156}
,
{-0.0903279,-0.140154,0.0455507,-0.574027,0.475123,-0.343441}
,
{-0.0882294,0.220778,0.124758,0.0763782,-0.158605,-0.189574}
,
{0.0197633,0.351293,0.14259,0.203429,0.084043,-0.234874}
 };
  static const float bias2[1] = { 0.231025 };
  static const float weights2[][1] = { {0.00869286}
,
{-0.00530797}
,
{-0.103841}
,
{0.00852738}
,
{0.0237357}
,
{-0.00703135}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_2_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_2_50(v, index);
}
static int assign_gen_lepton_prior_7_2_50() {
  global_gen_lepton_prior.at(7,2,50) = &specialized_gen_lepton_prior_7_2_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_2_50 = assign_gen_lepton_prior_7_2_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_2_51(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.647934,0.221074,0.0737836,-0.276107,-0.00927503,-0.260778 };
  static const float weights1[][6] = { {0.595836,-0.223146,0.134552,-0.435784,-0.103009,0.0738622}
,
{-0.0765061,-0.69942,0.000568905,0.393723,-0.483417,-0.43105}
,
{-1.40597,0.129319,-0.29408,-0.202619,0.865587,0.179783}
,
{-2.08065,-0.0678835,1.38681,2.09168,2.98465,-0.5198}
,
{-0.555258,0.0695751,0.134489,-0.499138,0.225555,-0.0444782}
,
{-0.699817,0.0861535,-0.0179145,-0.622056,-0.177555,-0.0390032}
,
{-0.56677,0.306372,-0.103886,-0.639531,-0.39611,-0.215085}
,
{-0.174713,0.0606933,-0.112463,-0.0636534,0.0740756,-0.183524}
,
{-0.0115294,-0.310494,0.294395,0.229581,0.616966,-0.162888}
,
{-0.213957,0.0568046,-0.108008,-0.093458,-0.0729861,0.0819973}
,
{0.0592607,0.0123185,0.0171486,0.131983,0.0390543,0.222054}
,
{0.017208,0.128924,-0.174649,0.0612363,0.0814233,0.0103236}
,
{-0.29803,0.135017,-0.108779,0.14759,0.209577,0.0946494}
,
{-0.233214,0.0891818,-0.187734,0.0172723,-0.133246,-0.235583}
,
{0.234549,0.00804286,-0.0790773,-0.0180156,0.322719,0.322108}
,
{0.0797029,-0.164056,-0.248499,0.0408732,0.100197,-0.095876}
,
{-0.167094,-0.0560744,-0.0125615,0.0712714,0.183294,0.0294197}
,
{0.239997,-0.352158,0.54216,0.0326142,0.243534,-0.58415}
,
{-0.171618,0.0440478,-0.109727,-0.0163835,-0.0865838,-0.116484}
,
{0.141786,-0.012855,0.0429303,0.145979,0.0876061,-0.268793}
,
{-0.134686,-0.234498,0.0633867,-0.167009,0.0340143,-0.0694113}
,
{0.286236,-0.134497,-0.157918,0.164189,-0.00738553,-0.0769714}
,
{-0.146898,-0.0466451,0.0205776,-0.195508,0.066369,0.219671}
,
{-0.100692,-0.13436,-0.00721594,-0.0458247,0.101089,-0.0516843}
,
{1.16719,-0.369073,0.147086,0.0579415,0.188726,-0.042923}
,
{-0.0551048,-0.383212,0.0426921,0.198129,-0.16587,0.0183505}
,
{-0.362216,-0.0486804,-0.183549,-0.113115,0.0260341,-0.179009}
,
{0.0941455,-0.619174,0.0544041,-0.252522,-0.0436213,0.0697511}
,
{0.0573144,-0.792682,0.362093,0.709429,-0.779758,0.180243}
,
{-0.019947,0.0672122,-0.027242,-0.0801401,-0.191675,0.135905}
,
{0.0509026,0.0190878,0.109219,0.0302148,-0.0273218,0.126075}
,
{-0.0354276,-0.234896,-0.113702,-0.0428447,-0.16142,0.04007}
,
{-0.0444898,0.0252127,0.17519,0.0873081,0.0622509,-0.0776655}
,
{0.00519517,0.231856,-0.0623994,0.158992,-0.0358863,-0.0135073}
,
{-0.0301584,0.0690026,0.0163328,0.0221626,0.0522322,-0.0384896}
,
{0.0982542,0.0181377,-0.11552,0.0293619,0.0224823,-0.120253}
,
{-0.180172,0.250018,0.268242,-0.422463,0.0597533,-0.227187}
,
{0.086144,-0.0124062,0.00819556,0.0851599,-0.0707986,0.130803}
,
{0.0118411,-0.00287021,-0.0808846,-0.122349,0.104336,-0.172059}
,
{0.046595,0.032826,-0.0715633,-0.146673,-0.211329,0.06797}
,
{-0.0594684,-0.0397138,-0.0484111,-0.0655276,0.0331698,-0.076332}
,
{-0.171236,-0.226886,0.0368807,-0.200676,-0.100635,0.00790411}
,
{0.030158,-0.173232,0.135663,0.0646306,0.218324,0.0561474}
,
{-0.0136891,0.132197,-0.104094,0.072508,0.0477703,0.102348}
,
{0.151934,0.080869,0.0332595,-0.0165248,0.00310945,-0.0880366}
,
{-0.0309044,-0.0488836,0.0166564,-0.0367555,0.00956981,-0.00573637}
,
{-0.0186736,-0.115183,-0.14296,0.230703,-0.105219,-0.0831321}
,
{-0.121026,-0.0840659,-0.106445,0.0343881,0.0116885,0.00878651}
,
{-0.0344787,-0.0783813,0.157586,-0.0533539,0.010582,0.256622}
,
{-0.00855976,0.0663891,0.0250024,0.0203049,-0.0176866,0.0444373}
,
{0.022358,0.0160495,-0.00248959,0.0334496,-0.0135887,-0.0283774}
,
{-0.0685483,0.0757184,0.0295222,-0.0160574,-0.038057,-0.0627183}
,
{0.0309148,-0.0830731,-0.0020984,-0.026601,0.0292676,0.0327859}
,
{-0.058227,-0.102912,-0.0793884,-0.121772,0.0292333,0.0340229}
,
{0.0876018,0.097393,-0.00718501,-0.293423,-0.104561,-0.162733}
,
{-0.165219,-0.0729732,-0.000847665,0.0849264,4.19585e-05,0.167876}
,
{-0.203993,1.65404,0.530331,-0.150228,-0.302411,0.306098}
,
{-0.0631379,-0.128387,0.174058,0.0661974,-0.105149,-0.288675}
,
{0.0441167,-0.00647031,-0.139086,-0.254548,-0.023397,-0.296525}
,
{-0.0903286,-0.12658,0.0106349,-0.0657529,-0.138496,-0.0797304}
,
{-0.0273598,0.237442,0.0435432,0.0232015,-0.0589857,-0.0259083}
,
{0.305709,0.515631,-0.582458,0.0754697,-0.206644,-0.0522335}
,
{0.00674506,0.0505806,0.0986202,-0.176463,0.0410604,-0.106377}
,
{-0.0194695,-0.128334,0.0557761,0.0439891,-0.0107653,-0.115701}
,
{0.185471,0.140601,0.175825,-0.128194,0.0668088,-0.0496877}
,
{0.0344392,0.287896,-0.0377354,0.0652177,0.068681,0.0475377}
,
{-0.343016,-0.0120448,-0.030492,0.496285,0.0868561,-0.0622119}
,
{-0.0785133,-0.249533,-0.0529485,-0.153506,0.0387169,0.173533}
,
{-0.138164,0.0755984,0.0464383,-0.0191311,0.0713719,0.029746}
,
{0.0453311,0.0250158,-0.00236973,0.0960098,-0.137859,-0.149881}
,
{0.0870411,-0.1044,-0.0223387,0.00950707,-0.0182248,-0.0730735}
,
{-0.916999,0.279891,0.370485,0.916434,-0.197097,0.294379}
,
{-0.13928,0.0993951,0.0886601,-0.0930131,-0.127334,-0.0181895}
,
{0.0939791,-0.031371,0.0900862,-0.0487304,0.133676,0.107049}
,
{-0.0847078,0.522429,-0.23537,-0.217647,-0.0590149,0.0786845}
,
{0.230726,-0.188913,-0.027318,0.707628,-0.0269347,0.367062}
,
{0.83526,-0.854425,0.721762,1.12757,3.038,-2.37396}
,
{-0.113604,0.261794,-0.0873275,-0.127918,0.0640099,-0.0157035}
,
{-0.133383,0.31711,-0.409641,0.00710504,0.0653385,0.100638}
 };
  static const float bias2[1] = { -0.0513739 };
  static const float weights2[][1] = { {-0.0354341}
,
{-0.0564855}
,
{0.0319516}
,
{0.0337656}
,
{0.0412824}
,
{-0.0326597}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_2_51(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_2_51(v, index);
}
static int assign_gen_lepton_prior_7_2_51() {
  global_gen_lepton_prior.at(7,2,51) = &specialized_gen_lepton_prior_7_2_51;
  return 0;
}
static int initialize_gen_lepton_prior_7_2_51 = assign_gen_lepton_prior_7_2_51();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_7_3_50(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.277571,-0.110812,-0.192566,-0.471531,-0.130223,-0.297143 };
  static const float weights1[][6] = { {-0.130348,0.240047,-0.176609,-0.420814,-0.178172,0.147359}
,
{-0.478692,-0.417628,-0.0822864,-0.142073,0.0440827,-0.217494}
,
{0.236481,-0.0409187,0.0222544,0.354983,0.312685,-0.320904}
,
{1.60747,-0.206403,0.0795625,-1.04389,-0.473081,0.136346}
,
{-0.425033,-0.19485,-0.0948922,-0.286471,-0.0798791,-0.194031}
,
{-0.441387,-0.0644544,-0.364675,-0.0330338,-0.190788,-0.283677}
,
{-0.661169,-0.23285,-0.0811167,-0.326918,-0.0333871,-0.276418}
,
{0.00123137,0.316101,-0.0409705,-0.0126828,-0.320141,-0.0619798}
,
{0.729021,0.452866,-0.32719,-0.148922,0.554064,-0.448596}
,
{-0.128159,-0.247612,-0.205806,0.131364,-0.177114,-0.0968899}
,
{-0.0585243,0.0489335,-0.0636786,-0.116376,0.166958,0.0141782}
,
{-0.0800526,0.0683044,0.018454,0.0216407,0.000515436,0.122446}
,
{0.435398,0.520798,-0.480607,-0.225002,0.215139,-0.285131}
,
{-0.0894632,-0.31925,-0.240781,-0.412225,-0.366373,-0.383585}
,
{0.668694,0.504594,-0.307976,-0.222423,0.0896127,-0.341504}
,
{-0.0584551,0.00101754,0.0672081,-0.0633689,-0.118347,0.100032}
,
{0.229839,0.340581,-0.181633,-0.467103,0.139328,-0.264185}
,
{-0.134371,0.405606,-0.423454,-0.333604,0.284223,-0.465446}
,
{-0.0433958,-0.316169,-0.0388826,-0.232284,-0.289862,-0.346645}
,
{0.172666,-0.213897,-0.125818,-0.259972,0.0643058,-0.339717}
,
{0.0659675,-0.00676769,-0.0855283,-0.0933513,-0.0673743,-0.235432}
,
{-0.223614,0.0781755,-0.319063,-0.248139,-0.121544,-0.135756}
,
{-0.142458,-0.0208682,0.153676,-0.20299,0.0420281,-0.124251}
,
{-0.00951918,-0.043122,-0.259498,-0.232901,0.0407078,-0.371519}
,
{-0.190518,-0.223175,-0.107497,-0.225955,0.179106,-0.0970071}
,
{-0.474963,0.23012,0.00698478,-0.0815019,-0.00733256,-0.0110287}
,
{-0.573306,-0.0453825,-0.048646,-0.351148,-0.552627,0.201113}
,
{-0.192753,-0.165713,0.101678,-0.144568,-0.238167,0.0538842}
,
{-0.0212304,0.76642,-0.126649,0.129045,-0.349345,0.28446}
,
{-0.0465424,-0.0950502,0.0950322,0.227241,0.0726046,-0.0854721}
,
{-0.140596,0.0482445,0.140086,0.0323956,0.00828883,-0.0362528}
,
{-0.143926,-0.0410987,0.0597274,0.0998912,-0.0423315,0.0968187}
,
{-0.159707,-0.134839,0.103893,0.0598049,0.0529312,0.0661134}
,
{-0.0852448,0.138319,-0.00930996,0.145961,0.00357362,-0.0782757}
,
{-0.119145,0.0377417,0.0974596,0.00378471,0.00296956,0.140202}
,
{-0.0160807,0.0259046,-0.057834,-0.0366127,-0.000256112,-0.00986767}
,
{0.0792585,-0.0534339,-0.148551,0.00823563,-0.067563,-0.00813893}
,
{0.128795,-0.110223,0.0576352,0.0504291,0.0301885,0.125275}
,
{0.0409872,-0.0779711,0.0760855,0.122268,-0.00785166,0.104738}
,
{-0.0273432,-0.156341,0.164649,-0.0903152,-0.137762,-0.104108}
,
{-0.00805593,0.0238782,-0.141363,0.0407422,-0.00872703,0.0779017}
,
{0.0202123,0.03619,-0.245315,0.172774,0.0353111,0.142999}
,
{0.07212,0.0342034,-0.136891,-0.164401,0.112435,-0.0729501}
,
{-0.0672339,0.0823742,-0.0672115,0.337588,-0.0395725,0.1206}
,
{0.0210835,-0.117731,0.000575292,-0.143385,-0.105476,0.127273}
,
{0.000155522,0.00482781,0.0697165,0.0425687,0.0127149,0.0138424}
,
{-0.104681,0.133012,0.0106068,0.0104641,0.154698,-0.236696}
,
{-0.0797974,0.157994,0.170612,-0.0764294,0.0525782,0.122653}
,
{-0.00362596,0.0179171,-0.000856815,-0.145248,0.0298744,-0.00528971}
,
{-0.121328,-0.00841048,0.0444119,-0.019772,0.0708858,0.0221678}
,
{0.0257316,-0.0589034,0.0783567,-0.0437811,-0.00953028,-0.0537055}
,
{0.0801502,-0.0459481,0.142784,0.046493,0.0225153,-0.0868941}
,
{0.135053,-0.0720045,0.0306545,-0.105931,-0.0788513,-0.172649}
,
{-0.0804086,0.0888799,0.128317,-0.0844538,0.0036089,0.0533239}
,
{0.0918984,-0.251764,0.0330909,0.0295932,0.209981,-0.250301}
,
{0.21376,-0.0895835,0.0833855,0.078944,-0.0354018,0.151894}
,
{0.118041,0.0552412,-0.174007,0.133334,0.170891,0.186253}
,
{0.0991548,0.0301872,-0.148406,-0.00519089,-0.0727016,0.0423364}
,
{0.0789191,0.0797595,0.165032,-0.0580534,-0.0265884,-0.215875}
,
{0.0804321,0.0116474,0.0360592,-0.00370189,0.0632187,-0.0727994}
,
{-0.062784,0.122286,0.0400677,0.166615,0.00499779,-0.205626}
,
{-0.269391,0.0658802,0.0619331,-0.362895,0.0911634,0.0170093}
,
{0.061001,-0.103548,0.0468848,-0.143781,-0.0256483,0.0687586}
,
{0.226837,0.134344,0.0401437,0.0472671,0.0046684,-0.0407589}
,
{-0.0439832,-0.0229914,-0.215879,-0.108284,-0.039357,-0.0910268}
,
{0.0136068,0.00540249,-0.150752,0.121879,-0.00287025,-0.0361721}
,
{0.0619415,-0.181452,-0.0868312,0.315584,-0.174417,-0.119298}
,
{0.070397,-0.0343089,-0.168249,0.16055,0.00778407,0.0852346}
,
{0.142502,0.0671941,-0.183797,-0.0629132,-0.119817,0.0435295}
,
{0.0288903,-0.150181,0.223327,-0.19763,-0.0572863,-0.0286782}
,
{-0.0541961,-0.044169,0.00999776,0.117762,0.0271223,0.121138}
,
{0.14467,-0.049633,0.0191131,0.152261,0.0825021,0.023517}
,
{-0.0687708,0.151838,0.0821157,0.152767,-0.0466204,0.0309844}
,
{0.0565722,-0.063264,0.0752885,-0.00724205,0.0196685,-0.0103107}
,
{0.178085,0.170861,-0.300939,-0.0921397,-0.34564,0.000277821}
,
{-0.143325,-0.0731711,0.242208,-0.106949,0.0452145,0.0489011}
,
{0.464705,0.5502,0.209233,-0.245571,-0.672812,-0.278426}
,
{0.162247,0.132457,0.0318045,-0.0491923,-0.269717,-0.22292}
,
{-0.110514,0.226,-0.222233,-0.189813,-0.313518,-0.0420936}
 };
  static const float bias2[1] = { 0.18967 };
  static const float weights2[][1] = { {0.0168828}
,
{0.0126398}
,
{-0.00172109}
,
{-0.0310755}
,
{0.021767}
,
{0.00346317}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_7_3_50(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_7_3_50(v, index);
}
static int assign_gen_lepton_prior_7_3_50() {
  global_gen_lepton_prior.at(7,3,50) = &specialized_gen_lepton_prior_7_3_50;
  return 0;
}
static int initialize_gen_lepton_prior_7_3_50 = assign_gen_lepton_prior_7_3_50();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0517243,0.841365,0.288675,0.299976,-0.192088,-0.280076 };
  static const float weights1[][6] = { {0.549597,0.529303,-0.677847,-0.479173,0.922944,-0.273517}
,
{0.167851,0.0645628,-0.043216,0.114351,0.070383,-0.17376}
,
{-0.382566,0.0842455,0.0477199,0.154019,0.0780694,-0.131713}
,
{0.398042,0.486156,0.724143,0.548523,-0.377,0.189611}
,
{-0.0453746,0.833601,0.238812,0.372783,-0.265808,-0.422819}
,
{-0.106367,0.746117,0.120568,0.362269,-0.162694,-0.0997168}
,
{0.0428223,0.656418,0.412625,0.226129,-0.123163,-0.348334}
,
{0.123386,-0.038611,-0.127473,0.143293,-0.133749,-0.0950354}
,
{-0.287736,-0.237846,0.208337,0.106305,0.0923508,-0.0442351}
,
{-0.0961606,-0.114935,-0.0379608,-0.1108,0.0839215,0.160074}
,
{-0.0505193,0.0856027,0.0135721,-0.110249,0.102545,-0.107349}
,
{0.120209,-0.264531,0.104815,-0.023253,0.0975508,0.0506962}
,
{-0.00773396,0.303639,0.295026,0.292568,-0.461345,0.06004}
,
{-0.122664,0.219145,0.346676,0.354623,-0.313968,0.0782389}
,
{0.0359243,-0.0827884,-0.0404924,0.236227,-0.0913178,0.0496444}
,
{0.166836,0.0277061,-0.0138922,-0.0431004,-0.0434117,-0.233635}
,
{-0.0619851,-0.34737,0.429044,0.301653,-0.185281,0.0414158}
,
{0.258596,-0.0882493,-0.213788,0.140805,-0.0541152,-0.152644}
,
{0.545058,0.774281,-0.182331,-0.140701,-0.261981,-0.132077}
,
{-0.0203535,-0.519914,0.104308,0.0646125,0.105827,0.0363561}
,
{-0.079818,-0.0140299,0.0903443,-0.0461837,0.0264578,-0.157507}
,
{0.0251758,-0.155059,-0.033367,0.0468075,0.0631983,-0.120288}
,
{0.0232138,0.111421,-0.0701151,0.0962977,0.0914099,0.053683}
,
{0.11018,-0.18531,0.0226025,0.0363865,0.0373409,-0.119953}
,
{-0.10081,0.0203588,0.0512472,-0.0715112,-0.00517841,0.0018431}
,
{-0.0177193,-0.0153579,0.034411,0.0193875,0.134991,-0.00731377}
,
{-0.0206339,0.0489091,0.0899866,0.0348756,-0.0578893,0.186061}
,
{0.177569,-0.00299169,0.114243,-0.0173893,0.0953082,0.0139377}
,
{-0.0506657,-0.227695,0.45368,0.00694753,-0.00200385,0.495838}
,
{-0.150704,-0.0160365,-0.147485,-0.038056,0.10711,-0.010746}
,
{-0.0486102,0.0344878,-0.0193242,0.0694282,0.0797873,-0.0156154}
,
{-0.0909392,0.168688,0.0645065,-0.0929661,0.201644,-0.00254928}
,
{-0.0209654,-0.0324604,0.135285,-0.0958,-0.0188854,-0.296067}
,
{-0.0401734,0.00697025,-0.0715882,0.0275148,-0.208876,0.065901}
,
{-0.0937111,-0.0556735,-0.0466569,0.0175114,-0.0423697,-0.137315}
,
{-0.00794917,-0.000701261,0.0463984,-0.0434226,-0.0364736,-0.0372955}
,
{0.0207656,0.295649,0.0670017,-0.0487744,-0.132382,-0.00507934}
,
{-0.0288409,0.0316423,-0.0779829,0.0545567,0.0191893,-0.0822027}
,
{-0.0519383,-0.187247,-0.133713,0.0851838,-0.0478993,-0.277791}
,
{-0.00237706,-0.0465793,0.092961,-0.103268,0.0416545,0.187629}
,
{0.0359192,0.035791,-0.0734425,0.0350466,-0.124765,0.019214}
,
{0.150859,-0.100958,-0.0600364,0.0559902,-0.0243808,-0.0429384}
,
{0.0278628,-0.00235481,-0.140992,0.119569,-0.0976663,-0.0691516}
,
{-0.0394368,0.207498,-0.117771,0.116737,-0.125995,-0.111613}
,
{0.00534011,0.00276077,0.0621553,-0.0746485,-0.00437214,0.087236}
,
{0.0249637,-0.0123056,-0.021422,0.0404206,0.00185845,-0.109348}
,
{-0.131679,-0.226001,-0.13112,0.108176,0.0316177,0.0789498}
,
{-0.0441462,-0.00537987,0.0247925,-0.0254169,-0.0289961,-0.0975092}
,
{0.0154451,0.0121304,0.0477739,0.0705959,0.229543,-0.0644303}
,
{0.00665333,-0.0351979,0.0594838,-0.0396607,0.0778125,0.0904648}
,
{-0.0367005,-0.0123396,0.0608831,-0.0573707,0.0977533,0.124563}
,
{-0.0553509,0.50242,0.0612059,-0.0619103,0.0741581,0.0452261}
,
{0.0259511,-0.0177878,-0.00362814,0.010608,-0.0205826,-0.0602575}
,
{-0.00870517,0.107359,-0.0126352,0.0184043,1.45367e-05,0.0470566}
,
{0.107202,0.00483476,0.115807,0.0174517,-0.00157584,-0.0419512}
,
{-0.109692,-0.000600817,-0.0495688,0.0967203,0.270768,0.0661541}
,
{-0.0403208,-0.0345531,-0.0542742,0.00865208,0.316011,0.0480756}
,
{0.106625,0.00237674,0.0798866,0.0456212,-0.095452,-0.118956}
,
{-0.0177574,0.0223761,-0.147715,0.300011,-0.125618,-0.100491}
,
{0.160331,-0.00771294,0.113273,0.0643384,0.282714,-0.0463069}
,
{-0.0673764,0.0179578,0.0196327,0.0591012,0.0690388,0.00287255}
,
{-0.054515,-0.0458674,0.0560597,-0.0788173,-0.136564,-0.297374}
,
{-0.0590001,-0.0113695,-0.0109117,-0.018646,-0.109986,-0.0981448}
,
{0.0618077,-0.034144,0.0715944,-0.0582614,0.250953,-0.136448}
,
{0.00028408,-0.00513529,-0.0137843,0.0359955,0.0620585,0.00399858}
,
{-0.0600287,0.0149608,-0.0283994,0.0826361,0.0260046,-0.0203133}
,
{-0.121184,0.0720632,0.190626,0.222791,0.504243,0.111227}
,
{0.134255,-0.011166,0.0326758,-0.0670943,0.141123,0.117275}
,
{-0.327896,0.181106,0.198066,0.0751506,0.337053,0.326488}
,
{-0.0443383,0.0108667,-0.0577863,0.0247763,-0.0199936,0.0401437}
,
{0.109644,-0.0100531,0.0831309,-0.171079,-0.245605,-0.0046496}
,
{0.182716,0.137168,0.439437,-0.136362,-0.0710695,0.37619}
,
{-0.128302,0.00483761,-0.0395678,-0.064983,-0.0702865,0.0727091}
,
{0.233146,-0.110634,-0.246045,0.00191136,0.0369294,0.0151752}
,
{0.312052,0.222568,-0.155828,0.460498,-0.322483,0.527762}
,
{0.00159543,0.0538931,-0.210482,0.348316,-0.147016,-0.0270124}
,
{-0.264797,0.0626782,0.0928547,-0.13524,-0.0916595,0.232963}
,
{-0.135843,-0.221334,-0.489596,-0.18836,-0.12261,-0.00132689}
,
{-0.545638,0.395349,0.576151,-0.172642,-0.175322,0.555048}
 };
  static const float bias2[1] = { 0.405699 };
  static const float weights2[][1] = { {-0.0161634}
,
{-0.122034}
,
{0.0328003}
,
{0.036707}
,
{-0.017319}
,
{0.0389271}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_2(v, index);
}
static int assign_gen_lepton_prior_1_1_2() {
  global_gen_lepton_prior.at(1,1,2) = &specialized_gen_lepton_prior_1_1_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_2 = assign_gen_lepton_prior_1_1_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.149058,-0.00753739,-0.0611135,-0.0684742,0.146236,0.262341 };
  static const float weights1[][6] = { {-0.0489527,-0.14421,-0.0535612,-0.125967,-0.0620399,0.134504}
,
{0.0251021,-0.0746524,0.468257,0.012303,0.145976,0.118309}
,
{0.388456,0.0640329,0.00998408,-0.9433,0.143747,0.193836}
,
{0.166264,-0.288399,-0.191822,0.100918,0.271415,-0.132582}
,
{0.0876281,0.180163,0.147684,-0.224791,0.165687,0.264474}
,
{0.217301,-0.0617757,-0.123341,-0.0447967,0.11971,0.249702}
,
{0.263765,0.075025,0.139018,-0.124025,0.183828,0.146103}
,
{0.0651472,0.159887,-0.0197448,-0.0646969,-0.120486,-0.00942673}
,
{0.293506,0.0894205,-0.275162,-0.321609,0.0495775,0.00448539}
,
{0.129425,0.0611441,0.00174079,0.0179948,-0.0270382,-0.0296945}
,
{-0.0308167,0.155904,-0.0398536,0.0366748,-0.104509,-0.127811}
,
{-0.0973716,-0.0385252,0.105118,0.0528446,0.167704,-0.0359364}
,
{-0.00992082,0.346213,0.181665,-0.0835746,0.20144,0.172644}
,
{0.149626,0.286539,-0.13802,0.118159,0.299105,0.421938}
,
{0.00495787,0.0155348,-0.00301299,0.12549,0.103485,0.0564252}
,
{-0.136488,-0.0876479,-0.138167,-0.127049,0.057011,-0.103665}
,
{0.312228,0.525347,-0.187879,0.185658,0.167869,0.271457}
,
{-0.0358676,-0.244866,-0.0229441,0.221582,0.236438,0.016306}
,
{-0.146773,-0.298991,-0.109863,-0.186708,-0.0524591,0.937039}
,
{-0.0291155,0.146471,-0.14907,-0.141367,-0.0949076,-0.252358}
,
{-0.107723,-0.0235051,0.0810038,0.0472184,0.119542,-0.0797646}
,
{-0.0738712,-0.150315,-0.265451,-0.126572,0.101936,-0.0533818}
,
{-0.151417,0.0132986,-0.00610325,-0.20953,0.0746062,0.0648478}
,
{0.0431546,-0.0169001,-0.291832,-0.114432,0.00299583,-0.0573509}
,
{-0.229923,-0.212166,0.147609,-0.121562,-0.1652,0.173313}
,
{0.105506,-0.10785,0.030425,0.0228119,0.0101557,0.0264193}
,
{-0.021838,0.0805147,0.111949,0.137012,-0.220357,0.171071}
,
{-0.102482,-0.0620974,0.101613,-0.206558,-0.173356,0.129667}
,
{-0.136814,-0.0894409,0.0428791,-0.0842255,-0.0315049,0.204634}
,
{-0.0886588,-0.0878609,-0.177733,-0.129864,-0.114857,-0.0518365}
,
{0.080189,0.140413,-0.094561,-0.0551314,0.073086,0.166839}
,
{0.0948441,-0.12142,0.0450651,-0.0852998,-0.0424351,-0.00366851}
,
{0.269811,0.0740126,0.0208509,0.0260335,-0.170927,0.0041563}
,
{-0.122283,0.0706816,-0.201343,0.188977,0.110036,0.116522}
,
{-0.1508,0.0678196,-0.0738765,-0.0386118,-0.00257962,0.0381596}
,
{0.0594712,-0.146084,0.0495004,0.0107962,0.0998172,0.0396072}
,
{0.00567641,-0.11837,-0.0890361,-0.145031,0.115759,-0.155964}
,
{0.0246183,0.0773744,-0.0214711,0.143639,-0.0763051,0.0125279}
,
{0.0701198,-0.0913079,-0.0720079,-0.147108,0.0372373,-0.0515235}
,
{0.198563,0.000705102,-0.198608,-0.314801,0.0155791,0.0796763}
,
{-0.0214851,0.0732283,-0.0143221,-0.0302929,-0.0754014,-0.00599733}
,
{0.0258076,0.490906,-0.284781,0.25805,-0.30926,0.1948}
,
{0.0117951,-0.0104179,-0.0215875,0.105912,-0.0102456,0.00650579}
,
{-0.00783189,-0.0733126,0.118171,-0.530723,0.0320459,0.0847336}
,
{0.166466,-0.0452487,0.0594416,-0.0124431,0.019329,0.150562}
,
{-0.0419099,0.0205552,0.0958037,0.0849754,0.0170445,0.043393}
,
{-0.107409,0.0961551,-0.361481,0.243456,-0.158109,-0.300735}
,
{-0.0505874,0.0428394,-0.0357793,0.0258928,-0.0149818,-0.00481898}
,
{-0.137527,0.0555244,-0.157797,-0.334155,0.0112008,-0.041471}
,
{0.201456,-0.0230528,-0.236508,-0.111938,-0.0487643,-0.0121854}
,
{0.0527758,-0.0505465,-0.140749,0.0714244,0.0180594,0.00192575}
,
{0.30391,-0.07104,-0.0689479,0.307792,-0.00174909,0.235956}
,
{-0.0630143,-0.0151891,-0.0443926,0.0557364,0.00320297,-0.0582586}
,
{-0.055292,-0.0516502,0.161295,-0.263406,0.0390618,0.00624029}
,
{0.0391303,-0.101929,0.0185759,-0.0112919,-0.00619327,-0.018698}
,
{-0.112587,-0.170944,-0.00740232,0.0603649,-0.137128,-0.0711508}
,
{0.0370137,-0.191255,-0.0521924,-0.0473599,0.0251054,0.260358}
,
{-0.196756,-0.239279,0.0721205,0.0439768,0.140382,0.162279}
,
{0.134205,-0.133835,-0.00774378,-0.0362764,-0.114923,-0.15124}
,
{-0.0867929,-0.0360375,0.00270516,0.109678,-0.107566,-0.0404884}
,
{-0.00494042,0.00210377,-0.0744202,0.0303551,-0.0307164,0.104914}
,
{0.0817571,0.0377514,0.0276043,0.168158,0.0626568,0.0120442}
,
{0.196921,0.0206017,0.0317648,-0.179185,0.0787648,0.0829153}
,
{-0.151832,-0.0996398,-0.0154959,0.0788238,-0.168838,0.133942}
,
{0.105777,0.125998,0.0138183,0.0157167,0.0196153,0.126333}
,
{-0.0197026,-0.0331462,0.0993457,0.104018,0.180414,0.0191946}
,
{0.00737172,0.159022,0.149962,-0.0308467,-0.118705,0.177823}
,
{0.240576,-0.152878,0.172171,0.0830512,0.0209961,-0.0966589}
,
{0.0717074,0.186424,0.123273,0.125765,0.132584,-0.0101174}
,
{0.19738,0.0192663,0.128659,-0.216863,-0.128518,0.0255945}
,
{-0.127744,0.104084,-0.126841,-0.0350987,0.00341819,0.111137}
,
{0.143941,0.0133341,0.112918,-0.0460221,-0.0376701,-0.00245713}
,
{-0.0106308,0.0557049,-0.0229565,-0.0916835,-0.0610738,-0.00837893}
,
{-0.0192572,0.0799644,-0.164037,0.0812241,0.0715773,-0.103375}
,
{-0.196901,-0.225891,-0.13986,0.139873,-0.0301227,0.00228057}
,
{0.0906854,-0.0819469,-0.111419,-0.0996785,-0.011866,0.0218309}
,
{0.0268293,-0.130251,0.0958922,0.0642181,0.000510276,-0.152237}
,
{0.135385,-0.0706889,0.0913259,0.0591674,-0.151808,0.117504}
,
{-0.0849528,0.0896539,0.0522653,-0.133698,-0.236457,-0.0251805}
 };
  static const float bias2[1] = { 0.128703 };
  static const float weights2[][1] = { {0.0381218}
,
{0.0486247}
,
{-0.242907}
,
{0.0806154}
,
{0.0534318}
,
{-0.0886134}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_3(v, index);
}
static int assign_gen_lepton_prior_1_1_3() {
  global_gen_lepton_prior.at(1,1,3) = &specialized_gen_lepton_prior_1_1_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_3 = assign_gen_lepton_prior_1_1_3();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_9_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.258575,-0.177543,0.945033,0.0471799,0.000117083,0.421201 };
  static const float weights1[][6] = { {0.108757,-0.0199347,-0.126631,-0.155512,0.0279344,0.195194}
,
{0.105214,0.126549,0.16561,-0.0940321,0.0275082,0.362274}
,
{0.0272879,0.213669,0.361102,0.234713,0.0731723,0.393028}
,
{0.649098,-0.526159,0.618551,0.194332,-0.156614,0.275106}
,
{0.242429,-0.424402,0.950375,0.0504245,0.0377433,0.478941}
,
{0.250244,-0.00698756,0.745593,0.0357656,0.0953718,0.329902}
,
{0.266468,-0.15355,1.03511,0.152625,-0.0361127,0.411776}
,
{0.00731102,0.370876,-0.0453026,0.0597904,-0.00657167,0.00249895}
,
{0.0512898,0.0430441,-0.429163,0.10158,0.17368,0.291105}
,
{0.0277351,-0.00459308,0.0616103,-0.0455597,-0.130258,0.186442}
,
{-0.0370437,0.0418815,0.0766007,-0.0264503,-0.0627737,-0.014756}
,
{0.147742,-0.0106325,0.115253,-0.0691194,0.0272417,0.0279485}
,
{0.0459751,0.162605,-0.386495,0.352115,-0.0850813,0.406194}
,
{0.356362,-0.176514,-0.524737,0.332855,0.0117941,-0.128182}
,
{0.114386,0.00137938,-0.0771236,0.061846,0.0242227,0.141078}
,
{0.00851725,-0.0531855,-0.0401624,-0.0573384,0.229881,0.0586821}
,
{1.70018,-0.206884,-0.650307,0.613872,0.657262,-0.687232}
,
{0.0885292,0.0701414,-0.505556,0.13446,0.191641,0.303999}
,
{-2.47505,0.133555,-0.149518,-1.1442,-1.15913,2.05621}
,
{0.0487988,0.0239796,-0.269828,0.173523,0.206283,-0.190437}
,
{0.0104389,-0.0474308,-0.211689,-0.00311332,0.0555232,-0.242422}
,
{0.0219225,-0.0643851,0.0621207,-0.0991056,-0.0650434,-0.000824967}
,
{0.14068,-0.0654818,-0.0746882,-0.0376214,-0.175999,0.00980864}
,
{-0.00707075,-0.274003,-0.0318683,-0.0429081,-0.0322462,-0.147674}
,
{0.00334372,-0.170402,-0.158616,-0.0313147,0.032547,0.0208855}
,
{-0.0604263,-0.330927,-0.14012,0.185995,-0.0497613,-0.0830979}
,
{0.0766253,0.21238,0.0165327,-0.0670776,0.00472008,0.103251}
,
{0.0537719,-0.150551,-0.204304,-0.260249,-0.00130854,0.0865529}
,
{0.221461,0.172714,-0.464758,-0.0181262,-0.414397,0.0800191}
,
{-0.00955976,-0.0125515,0.0704164,-0.157607,0.209659,-0.0368978}
,
{0.0155473,-0.0201474,-0.0259159,0.0634036,-0.110722,0.00460304}
,
{0.00143159,0.0601244,0.0767952,-0.119905,0.0607993,-0.0313969}
,
{-0.00349259,-0.0814677,0.0319861,-0.0374207,0.0125765,-0.0167003}
,
{-0.0028479,0.0686043,0.0964144,-0.084138,0.0599462,-0.0286127}
,
{0.00232154,-0.0784495,0.0254571,-0.17994,0.160907,-0.00918726}
,
{0.0015987,0.00285492,-0.0464615,0.0611149,-0.133597,0.00639656}
,
{0.00892386,-0.393153,-0.0328735,-0.0992016,-0.083193,0.00190422}
,
{-0.00441854,-0.0681525,-0.0243568,0.00513272,0.00641397,-0.00481893}
,
{-0.00843706,-0.0264743,-0.0301279,0.180789,-0.0447358,0.0440868}
,
{0.00171797,0.124713,-0.00101343,-0.0750201,0.0649378,-0.0147284}
,
{0.00383619,0.0320121,-0.0605232,-0.0700395,0.090218,0.00389572}
,
{0.00893806,0.0436422,-0.113532,-0.200512,0.155264,-0.0238283}
,
{-0.000608449,0.0456833,-0.023702,0.0129175,-0.00284039,-0.00660983}
,
{0.00375569,0.123361,0.0337157,-0.0636994,-0.0168302,-0.051267}
,
{-0.00603054,0.0388716,-0.129169,-0.0650224,0.104919,-0.0232036}
,
{0.00211693,0.00819075,0.0194906,0.0399043,-0.0881606,0.00222349}
,
{0.00696169,0.159873,0.00519563,0.0367525,-0.0490969,0.0273116}
,
{0.0031786,0.0243899,0.00645635,-0.0150497,0.0253862,-0.00782773}
,
{0.00860033,-0.00881177,-0.019421,-0.00178434,-0.0986727,0.0141526}
,
{0.00424195,-0.00245803,0.0343588,-0.00406273,-0.0150523,-0.0111063}
,
{0.00182407,-0.0288949,0.0187782,0.0187591,-0.0235866,-0.00226578}
,
{0.0107009,0.0252271,-0.00760986,-0.0947663,0.0289131,-0.0173017}
,
{0.0052459,0.113073,0.00243242,-0.0308748,-0.0202995,-0.0171127}
,
{0.00516186,-0.031203,0.102262,0.00733407,0.00440451,0.00197645}
,
{-0.0311953,0.0633662,0.1801,0.100593,0.0098036,-0.0825554}
,
{-0.00536957,-0.0450841,0.127628,-0.0503694,-0.143583,-0.0524561}
,
{-0.0316909,-0.242048,0.0333222,-0.0817033,0.0376504,-0.0947101}
,
{-0.0107231,-0.30862,0.130603,0.033403,0.034922,-0.0420541}
,
{-0.0083638,-0.155004,0.0285048,0.0108612,0.106402,0.00809074}
,
{0.00202274,-0.0916048,0.211783,-0.140628,0.0368064,-0.0195896}
,
{0.0128392,-0.0673209,-0.123693,-0.0780657,0.0241443,0.0401003}
,
{0.0107957,-0.229272,-0.176324,0.0183531,0.0820303,0.0522325}
,
{-0.0421659,0.847764,-0.0481087,0.168095,0.0108064,-0.0895484}
,
{-0.0171494,0.110092,0.028342,-0.104765,0.0895829,-0.0699132}
,
{-0.0174724,-0.112962,0.0897984,-0.191245,-0.0298004,-0.0713034}
,
{-0.00881955,0.0585056,0.000632134,-0.0544835,0.0722691,-0.0202902}
,
{-0.034454,-0.109375,0.0596257,-0.236463,-0.040379,-0.121876}
,
{-0.113031,-0.669659,-0.588904,0.512783,-0.0447549,0.0912778}
,
{-0.00417581,0.195165,-0.0305757,-0.121423,0.0806354,-0.0258315}
,
{-0.0320383,0.114574,0.0447445,-0.0584948,0.0271515,-0.0920571}
,
{0.0156451,-0.133468,-0.00847263,-0.0348853,0.00349486,0.0490374}
,
{0.0197703,0.0772778,-0.153545,0.0604233,-0.0773401,0.061184}
,
{0.0955084,-0.549194,-0.171392,-0.625345,-0.0484289,0.298081}
,
{0.0187559,0.226718,0.039271,0.0296361,-0.0938523,0.0463036}
,
{0.119205,-0.13743,-0.19532,-0.574191,-0.102596,0.123427}
,
{0.0460287,-0.0138358,-0.18837,-0.159166,-0.051091,0.0802868}
,
{0.0286258,-0.121552,0.172968,0.0653393,-0.256315,0.115479}
,
{0.0849686,-0.0610226,0.0236361,0.0648769,0.00620279,-0.157919}
,
{-0.134709,0.326007,0.186742,0.0426727,0.545198,-0.197389}
 };
  static const float bias2[1] = { 0.295015 };
  static const float weights2[][1] = { {0.133103}
,
{-0.00920953}
,
{-0.0842673}
,
{0.0178484}
,
{0.0140037}
,
{-0.0457799}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_0_0(v, index);
}
static int assign_gen_lepton_prior_9_0_0() {
  global_gen_lepton_prior.at(9,0,0) = &specialized_gen_lepton_prior_9_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_0_0 = assign_gen_lepton_prior_9_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_9_1_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0714853,0.0124586,0.133691,-0.371222,-0.472496,-0.00696644 };
  static const float weights1[][6] = { {-0.303917,-0.738792,-0.553288,-0.502499,-0.732102,-0.760584}
,
{-0.0890535,0.0504966,-0.0624129,-0.071977,0.0313644,-0.0982911}
,
{-0.00196983,-0.0519363,0.0478203,-0.132535,-0.164018,-0.0597967}
,
{0.455012,0.253277,0.461684,-0.380442,-1.09602,0.647798}
,
{-0.337541,0.0225082,0.0169215,-0.106656,-0.546978,-0.0951272}
,
{0.0458685,0.14724,0.0680598,-0.463424,-0.193155,0.199141}
,
{-0.0289237,-0.0151175,0.312822,-0.364142,-0.460791,-0.0747953}
,
{-0.0201436,-0.00182455,0.0433615,0.0175434,-0.010021,-0.0482969}
,
{-0.142305,0.0284031,0.0774121,0.144617,-0.0669523,-0.0475743}
,
{0.0279234,0.0865383,-0.0209795,-0.0079604,0.0958316,-0.147988}
,
{0.113269,-0.16551,0.0991124,-0.14843,-0.142036,-0.132854}
,
{-0.0508907,-0.0629436,-0.014519,0.104646,-0.0239445,0.211155}
,
{0.154383,0.121004,0.0919926,0.270115,0.0725396,-0.0400686}
,
{0.00794704,0.316346,0.155997,0.1156,-0.00887191,0.562175}
,
{-0.0661292,-0.0327053,-0.0663009,0.153337,-0.112994,0.0955897}
,
{0.0367906,-0.0813215,-0.00370952,-0.118878,0.0133713,-0.0101047}
,
{0.182429,0.504897,0.459293,-0.665393,-0.798506,0.548428}
,
{0.268286,0.00249696,0.0383902,0.00160438,-0.129696,-0.133487}
,
{-2.40673,-3.19272,-2.14729,2.27232,3.02053,-3.16551}
,
{-0.0103266,0.141798,0.0135778,0.0857123,0.110519,0.242126}
,
{0.0210892,0.0772239,0.149748,-0.00832265,0.227869,0.192371}
,
{0.036112,0.0655435,0.0653962,0.0509418,0.154915,0.0455758}
,
{0.0779513,0.00881801,0.11815,-0.157599,0.136371,0.0869817}
,
{0.0485404,0.0604422,0.228877,0.228241,0.289644,0.23613}
,
{-0.0779324,0.0615688,-0.118184,-0.0122444,-0.1987,-0.0206694}
,
{0.0919554,-0.0707461,-0.0796853,-0.216948,0.0145086,0.0527412}
,
{0.00383532,-0.00479388,-0.0186453,0.0515224,0.0228676,0.149096}
,
{-0.0593575,0.066091,0.0285021,-0.100834,-0.0662074,-0.0122139}
,
{0.37363,0.322233,0.194614,0.383418,0.283343,0.511749}
,
{-0.128983,0.0606101,-0.0794122,-0.00131846,-0.0879009,-0.115873}
,
{0.116362,-0.00867407,0.133862,0.217264,-0.0279491,-0.134252}
,
{-0.316412,0.0742885,0.0557772,0.100688,0.000745658,-0.00526577}
,
{0.0126613,0.0043656,-0.00993678,-0.056031,0.0324425,-0.0180939}
,
{0.158866,-0.0062876,0.113339,0.0178219,0.0519708,-0.0450013}
,
{-0.103996,0.0874015,-0.0166899,0.0423399,0.0920698,0.0259122}
,
{0.16728,-0.0429507,-0.0244456,-0.0643406,0.0468834,0.0690193}
,
{0.111505,-0.0652969,-0.00447975,-0.0662702,0.118606,0.165627}
,
{0.037108,-0.00036863,-0.016339,-0.0113678,0.0313149,0.0416147}
,
{0.0524034,-0.0228518,-0.0132226,-0.0477594,0.0935749,0.108226}
,
{0.0531465,-0.00282017,-0.111684,-0.0313814,-0.00514292,0.0793196}
,
{-0.0459234,0.0240683,-0.0755485,0.0198716,-0.0610994,-0.012968}
,
{-0.0861665,0.114967,-0.118053,0.102055,-0.0180607,0.000711431}
,
{-0.0248731,-0.0107577,-0.00107526,-0.0128714,-0.00443338,-0.00138179}
,
{-0.058738,-0.0514493,-0.033295,-0.0626505,0.000440629,0.0763477}
,
{0.0279785,0.0331704,-0.126691,0.050501,0.0095068,0.0995231}
,
{0.0129336,0.0130736,0.0761934,0.0301684,0.0556998,-0.00115569}
,
{0.0880656,-0.0431892,0.11517,-0.0654725,0.0347465,-0.0780263}
,
{-0.0167106,0.00452247,0.0189738,0.0463634,-0.0505305,-0.04507}
,
{-0.0165682,-0.00417041,-0.00555375,0.018051,-0.0976792,-0.0879139}
,
{0.0225443,-0.0600723,-0.0167874,-0.07696,0.031211,0.0585756}
,
{0.0190138,-0.030355,-0.00817457,-0.0326124,0.0147941,0.0322737}
,
{0.0671061,-0.0345415,0.0385728,-0.0520264,0.140664,0.149332}
,
{0.00459995,0.004071,0.0159211,0.0134883,0.00359925,-0.00870863}
,
{-0.0206168,-0.0103827,0.0356342,0.0210767,0.0438852,0.0275891}
,
{-0.0265197,0.0216553,0.0198252,0.0405583,-0.0454625,-0.00504295}
,
{-0.174261,0.0210592,-0.035672,0.0527333,-0.0589322,0.0365713}
,
{-0.0211567,-0.0194324,-0.0863816,0.028414,0.0480214,0.0780828}
,
{0.185444,-0.0920537,-0.0418802,-0.192515,0.079611,0.0437374}
,
{-0.0908623,0.0306118,-0.00244084,0.0396708,-0.0169681,-0.00889905}
,
{-0.0510091,-0.00460648,-0.053153,-0.0231192,-0.0164144,0.028957}
,
{-0.0222719,0.0606791,-0.0694979,0.0805347,-0.0792324,-0.0431345}
,
{-0.0570224,0.0289655,0.110139,0.0220047,0.0387934,-0.0453776}
,
{0.147806,0.00148509,0.0456726,0.261741,-0.207367,-0.160752}
,
{0.159356,-0.00561851,-0.0553482,-0.0188862,0.0256992,0.0168914}
,
{-0.0644345,0.00280525,0.0112623,0.0561649,0.00275054,-0.0140334}
,
{0.0561941,0.018293,-0.0389289,0.0511174,-0.0166067,-0.0353877}
,
{-0.0423328,0.0514218,-0.0220327,0.06671,-0.0409316,-0.0398447}
,
{0.0251853,0.057226,-0.100299,0.0719933,-0.317557,0.0527115}
,
{-0.0638189,0.0160218,0.019665,0.0160177,-0.0146562,-0.0168246}
,
{0.0783012,0.0129381,0.0559166,0.0212853,0.0715152,-0.0396262}
,
{0.0139614,-0.0453788,0.0826821,-0.081282,0.0978105,0.0304567}
,
{0.00193385,-0.0789763,0.08741,-0.101282,0.153646,0.0900799}
,
{0.0852242,0.0846641,0.0571666,0.0213738,0.472696,-0.0979422}
,
{-0.0648191,-0.0209779,0.0525534,-0.0144832,-0.0094946,0.0130447}
,
{-0.440295,-0.0306726,0.206344,0.110112,0.216665,0.240023}
,
{-0.40576,-0.0369012,0.0390975,-0.0256969,0.00210212,0.146499}
,
{0.340988,0.021881,0.0104658,0.308539,0.366425,0.145383}
,
{-0.143065,-0.0200918,0.162707,0.118902,-0.100592,0.182346}
,
{0.225225,0.230476,0.000733351,0.311855,0.0101124,-0.0570856}
 };
  static const float bias2[1] = { 0.0438071 };
  static const float weights2[][1] = { {0.0207949}
,
{0.0961168}
,
{0.0549417}
,
{-0.0538139}
,
{-0.0764945}
,
{0.0616951}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_1_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_1_0(v, index);
}
static int assign_gen_lepton_prior_9_1_0() {
  global_gen_lepton_prior.at(9,1,0) = &specialized_gen_lepton_prior_9_1_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_1_0 = assign_gen_lepton_prior_9_1_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_9_2_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.051832,-0.0316639,-0.442409,-0.0719873,-0.409195,-0.0557115 };
  static const float weights1[][6] = { {-0.339526,-0.460209,0.241435,-0.118695,0.687653,0.567644}
,
{-0.0437323,-0.558187,-0.447863,-0.280726,-0.172977,0.202994}
,
{-0.387426,-0.10118,-0.0667324,0.188136,-0.0907045,-0.04174}
,
{-0.043652,1.07115,-1.21629,-0.0631135,-0.661362,-1.57188}
,
{-0.0311617,-0.0460695,-0.310986,-0.164747,-0.683102,0.155457}
,
{0.0809821,-0.218704,-0.199919,0.0461892,-0.11705,0.0419174}
,
{0.204477,-0.0554976,-0.106576,0.104579,-0.499402,0.0340284}
,
{-0.117184,-0.099418,0.00222517,-0.159055,-0.0305318,0.117233}
,
{0.0912875,-0.386159,-0.174056,-0.0836585,0.116582,-0.0480483}
,
{-0.0695523,0.0158771,-0.0215434,-0.149637,-0.0822939,0.100558}
,
{-0.0348145,-0.0654542,-0.0107542,0.11095,-0.14037,-0.0741844}
,
{0.0124211,-0.0461177,0.00540808,-0.121719,0.0585097,0.137351}
,
{-0.262617,0.21591,-0.152833,-0.0593816,-0.0351373,0.00249413}
,
{-0.490404,-0.233796,0.416141,0.0831206,0.775525,-0.0216168}
,
{0.0757967,0.0179253,-0.00857846,-0.14624,-0.206724,-0.0660486}
,
{0.00183937,0.152352,-0.15955,0.172299,0.13386,0.199138}
,
{0.0305474,-0.232691,-0.410513,-0.0476657,-0.396272,-0.183036}
,
{-0.177369,-0.0918553,-0.0570479,-0.0597053,-0.0422116,0.212676}
,
{-0.0987277,0.0534482,-0.124764,0.080375,0.0619806,0.14183}
,
{0.0971717,-0.200453,0.156535,0.143279,0.503635,-0.085985}
,
{-0.0393577,-0.10321,-0.0092433,-0.291205,0.22007,0.0108906}
,
{0.142289,-0.239191,0.0184038,-0.116645,0.040667,-0.157888}
,
{-0.0349483,0.0642482,-0.0867441,0.21599,0.172498,0.0519778}
,
{-0.0781862,0.0457333,0.128017,-0.00631644,0.0365589,-0.00102279}
,
{-0.212805,-0.0632431,0.201955,0.209845,-0.0809979,-0.106553}
,
{-0.188901,0.123896,0.0969086,0.0876588,-0.132569,-0.046365}
,
{0.270035,0.10654,-0.131546,-0.0190123,0.109292,0.0488774}
,
{-0.188368,0.026583,-0.124379,-0.217618,0.0762575,0.168514}
,
{-0.548744,0.0993409,0.270037,-0.109632,-0.10525,-0.281304}
,
{-0.0255075,0.117628,-0.133396,-0.0452489,0.0977345,-0.386671}
,
{-0.0165583,-0.119535,-0.189465,-0.12782,-0.247874,-0.0281206}
,
{-0.116183,0.179264,-0.303314,-0.194227,0.137735,-0.1208}
,
{-0.01339,0.044998,0.00162818,-0.0722597,-0.000223031,0.0781024}
,
{0.0499717,-0.116104,-0.170106,0.102975,-0.023763,0.623652}
,
{-0.0538223,-0.0319382,-0.300925,-0.0894684,0.10521,-0.172158}
,
{-0.0423829,0.0086699,0.353016,-0.128263,-0.133292,0.0703435}
,
{-0.115597,0.0375154,0.322706,0.0961517,-0.117665,-0.0444139}
,
{-0.0804498,-0.0832144,-0.00830093,0.0880007,-0.0188065,-0.00370156}
,
{0.0641287,-0.0916039,0.00238985,0.0275644,-0.0286177,0.333201}
,
{-0.00170503,0.065395,0.0533875,-0.128434,-0.0299141,0.0811728}
,
{-0.0442124,0.0253389,0.023649,-0.0220695,-0.0071037,-0.0515958}
,
{-0.0883584,0.313351,0.119981,-0.040793,-0.0546734,-0.0385325}
,
{-0.0885464,-0.0156215,-0.00870662,0.0877176,-0.017822,-0.0491426}
,
{0.109469,0.00494013,-0.0633713,0.0241591,0.0450689,0.0165596}
,
{0.00866945,0.0488102,0.0458985,0.0594425,-0.00771542,-0.176008}
,
{-0.0734971,-0.0510201,-0.0494905,-0.0739971,0.0118851,0.0320552}
,
{0.0274367,-0.162877,-0.0711131,0.0170466,0.0345549,-0.0353149}
,
{-0.00604516,0.0718164,0.00260909,-0.0371215,0.0162233,-0.0225801}
,
{0.32245,0.00331102,0.0258739,0.189499,0.0217261,0.0966127}
,
{0.0831077,-0.140304,-0.0209771,0.176548,-0.0168996,0.0441352}
,
{0.0265506,0.0176692,0.00700918,-0.126528,-0.00253126,0.0307341}
,
{0.104456,0.0306164,-0.207627,0.0856156,0.0521232,0.0500645}
,
{-0.0512759,-0.0226839,0.00543737,0.0616516,-0.0138078,-0.0123973}
,
{-0.019653,-0.135617,0.0786784,-0.244701,-0.0296762,0.0266675}
,
{0.212667,0.0907254,0.0473058,-0.00978952,0.0203769,-0.0950917}
,
{-0.0410096,0.103593,0.0026078,0.0917587,-0.00910844,-0.0083325}
,
{-0.132176,-0.171163,-0.0246215,-0.206216,-0.0231537,-0.0547873}
,
{0.132981,-0.528319,-0.296583,0.506935,0.0167148,-0.459263}
,
{-0.0813762,-0.190404,-0.0150727,0.180105,-0.00473973,-0.121854}
,
{-0.152374,0.166058,0.0175762,-0.0385345,0.0121515,0.0202444}
,
{0.0858502,-0.154878,-0.00812583,-0.0162178,0.0207889,-0.0746951}
,
{0.183216,-0.0671143,0.038139,0.0141412,-0.0562817,0.0532304}
,
{-0.0836376,-1.08361,0.0563738,-0.5502,-0.314843,0.420869}
,
{-0.146919,-0.222444,-0.0656248,0.0115573,0.00110713,-0.056875}
,
{-0.244193,-0.0045576,-0.0571576,-0.00248894,-0.0386656,0.0358412}
,
{-0.069185,0.0103083,-0.03194,-0.0089572,-0.017161,0.0458205}
,
{-0.0444449,0.233349,-0.0516607,0.0700046,-0.0127175,0.04441}
,
{0.272225,0.510726,0.101712,0.113973,-0.162636,0.23132}
,
{0.241127,0.0880232,0.0977827,-0.0160517,-0.00783062,0.013846}
,
{0.263864,-0.05485,-0.0307483,0.051165,0.000447484,-0.0332834}
,
{0.0166113,-0.0115216,0.0159862,-0.0400949,0.00741327,0.0164781}
,
{-0.0166904,-0.0990105,0.0718874,-0.131786,-0.00695374,-0.0276867}
,
{-0.173168,-0.680261,0.115337,0.0113995,0.0399612,-0.156191}
,
{-0.12781,-0.113185,-0.0167865,-0.116137,-0.0151189,-0.0165078}
,
{-0.180144,0.285043,0.321326,0.163283,-0.107718,-0.158762}
,
{0.335707,-0.198973,-0.0898245,0.00572079,0.0708199,0.0610326}
,
{0.456331,-0.304081,0.0806404,-0.0365715,-0.334006,0.567384}
,
{-0.125438,0.048807,0.15822,-0.310119,-0.366246,-0.422228}
,
{-0.0755501,0.092983,-0.456082,0.13097,0.160995,-0.406098}
 };
  static const float bias2[1] = { -0.127835 };
  static const float weights2[][1] = { {-0.0177154}
,
{-0.0290261}
,
{0.0338209}
,
{0.0104393}
,
{0.0569172}
,
{0.0176091}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_9_2_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_9_2_0(v, index);
}
static int assign_gen_lepton_prior_9_2_0() {
  global_gen_lepton_prior.at(9,2,0) = &specialized_gen_lepton_prior_9_2_0;
  return 0;
}
static int initialize_gen_lepton_prior_9_2_0 = assign_gen_lepton_prior_9_2_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.375664,0.234962,-0.0761765,-0.0561123,0.35496,0.36195 };
  static const float weights1[][6] = { {0.57192,0.260889,-0.244677,-1.79527e-05,0.752502,0.49296}
,
{-0.00910816,-0.170837,0.0247934,0.124425,0.0603013,-0.125063}
,
{0.0747875,0.0357813,0.268463,-0.210833,-0.0554876,-0.0396491}
,
{0.777646,0.492435,-0.0154676,0.784787,0.877958,0.430201}
,
{0.454888,0.332745,-0.108104,0.0121449,0.286449,0.487557}
,
{0.168745,0.156984,-0.0234329,-0.257435,0.329615,-0.016272}
,
{0.179359,0.260915,0.086674,-0.126086,0.286759,0.375262}
,
{0.115252,-0.0136365,-0.193353,-0.191153,-0.179443,0.0105723}
,
{0.267384,-0.155731,-0.0871752,0.15465,0.127661,0.337193}
,
{-0.0173785,-0.227683,0.0331893,0.117622,0.120259,0.0630475}
,
{0.102696,-0.0633263,0.0244191,-0.248471,0.116429,-0.24413}
,
{0.0979043,-0.132016,0.0132338,-0.00836933,-0.101854,-0.19848}
,
{0.165247,0.0418827,-0.159061,-0.19662,-0.150136,-0.0449635}
,
{0.60775,0.0666385,-0.024484,0.0600177,0.417124,0.278826}
,
{-0.150718,0.215864,-0.0905745,-0.0419836,-0.0904321,-0.0377029}
,
{0.725383,0.19582,-0.100985,0.200604,0.569412,0.208795}
,
{0.376802,0.318465,-0.0938359,0.199773,0.48228,0.18352}
,
{0.0822741,-0.0609386,0.222451,-0.281166,0.0812621,0.0115817}
,
{0.351684,0.263262,-0.163758,-0.0611294,0.209999,0.286589}
,
{-0.152005,0.0448168,-0.0216862,-0.0196045,-0.0846679,-0.277091}
,
{0.0280098,0.00483406,-0.0692979,-0.202096,-0.0945421,-0.171326}
,
{0.0504704,-0.0968089,-0.00345041,0.0792433,-0.0627076,-0.301771}
,
{0.0974717,0.0694168,-0.0157988,-0.0977113,0.103169,0.0503442}
,
{-0.0498062,-0.106019,0.0688622,0.0344569,0.0721631,-0.151035}
,
{-0.0196072,-0.133823,-0.137917,-0.0695322,0.123543,0.0217214}
,
{0.0306469,0.0258582,0.045733,-0.329322,-0.0809201,0.0941206}
,
{-0.279528,0.280813,0.157551,0.0822643,0.0583221,-0.0316872}
,
{0.153633,-0.0610707,-0.103026,-0.435055,-0.0384758,-0.104602}
,
{-0.150768,-0.566113,0.0328234,0.00299989,-0.0794036,-0.11403}
,
{-0.0942813,-0.0345926,0.154276,-0.0100361,-0.139824,-0.0585481}
,
{0.01506,-0.053505,-0.0334458,-0.0690423,-0.0611137,-0.100222}
,
{-0.0808799,0.176348,0.114609,0.0992689,0.0559684,-0.0562384}
,
{-0.0185544,0.0452484,0.106293,-0.090506,0.0342066,-0.0179031}
,
{0.128724,-0.0674068,0.21577,-0.0103791,-0.0845722,-0.0253144}
,
{-0.0821027,0.037579,0.00945017,-0.107977,-0.0411643,0.104656}
,
{0.0992252,0.120957,0.109731,0.118679,-0.133323,0.0682619}
,
{0.0458332,0.118272,-0.147672,-0.130446,-0.0817966,-0.0208587}
,
{0.0971831,-0.248499,-0.148292,-0.213125,0.042318,-0.0488504}
,
{-0.0295032,0.0581652,-0.161613,-0.33512,0.00306577,-0.0802076}
,
{-0.0799406,-0.0384544,-0.015646,0.142676,0.112806,-0.154505}
,
{0.0454819,0.0556683,-0.130767,-0.0414738,-0.0807323,0.00951497}
,
{0.0180622,-0.192686,0.00795438,0.322862,0.00262728,0.0321996}
,
{0.0447318,-0.0179813,-0.1437,-0.0511262,-0.0480058,-0.0640637}
,
{0.00161187,-0.279462,-0.0143146,-0.0165322,0.103067,0.119075}
,
{-0.0437697,0.033155,-0.0975802,-0.0740149,0.0591107,-0.0751572}
,
{0.0368977,-0.0560392,-0.0443219,-0.0162732,-0.0217009,0.0455625}
,
{0.0786313,-0.0178552,-0.0257741,0.141005,-0.116584,0.303459}
,
{0.0346289,0.0124904,0.0236076,-0.0401507,-0.0674827,-0.0310305}
,
{0.0101357,0.32801,0.060761,-0.0553343,-0.106402,-0.148959}
,
{0.0248435,0.151906,-0.188131,0.011699,0.18829,-0.0318394}
,
{-0.0494247,-0.0682172,0.0966346,-0.183092,-0.0671268,0.0982941}
,
{0.0949229,-0.0779012,0.137677,0.0322498,-0.0724517,-0.0224784}
,
{-0.0308462,-0.145826,0.10218,0.15982,-0.0353229,0.0895559}
,
{0.0697339,0.0275094,0.0366356,0.104155,-0.0683855,-0.133377}
,
{0.132379,0.066168,-0.112481,0.197621,0.00109816,0.105268}
,
{-0.018219,0.0253829,0.0379164,-0.11982,-0.0942589,-0.0957742}
,
{-0.129405,-0.0726759,-0.0318402,-0.0261671,0.0843112,0.00223116}
,
{0.118669,-0.136175,-0.00997933,-0.328315,-0.136433,0.17551}
,
{-0.0871976,0.0621848,-0.0301553,0.0844212,0.02552,0.0204253}
,
{0.125271,-0.110776,0.0880475,-0.105916,-0.137982,-0.0959132}
,
{-0.0896663,-0.115743,0.023028,-0.037158,0.126406,0.000570799}
,
{-0.0366387,0.154088,-0.000611088,0.140466,0.0478036,0.081176}
,
{-0.0202536,-0.0566883,0.193882,-0.0461907,0.205628,-0.257821}
,
{0.0217988,-0.0902775,0.0413745,-0.0673733,0.0216728,-0.0354194}
,
{0.0326477,0.0544893,-0.141933,0.14178,0.00727008,-0.00818537}
,
{-0.099071,0.0917412,-0.0570738,-0.184395,0.175799,-0.117514}
,
{0.0327375,-0.166734,0.0371274,-0.0614086,-0.132526,0.0891699}
,
{0.112544,-0.0739377,-0.573439,-0.140636,-0.199197,0.245573}
,
{0.0599344,-0.00182821,-0.00838451,0.0564068,-0.0851337,-0.0242932}
,
{0.0226308,-0.0757243,-0.0521958,0.102609,0.0955694,0.176575}
,
{-0.176412,0.00568705,-0.0633405,0.00034243,-0.166243,-0.00787778}
,
{0.131334,0.0837874,0.0732377,0.100041,0.0747564,-0.156049}
,
{-0.412435,0.278096,-0.127209,-0.0377389,-0.0153001,0.0733743}
,
{-0.048524,-0.115484,-0.255809,-0.221898,0.0750167,0.0862715}
,
{-0.278155,-0.00136439,0.0771294,0.413089,0.143376,-0.0771762}
,
{-0.0658062,-0.108964,0.0224372,0.117769,0.178197,0.0364208}
,
{-0.145744,-0.0951563,0.0497212,0.211566,0.213266,0.194188}
,
{-0.25285,-0.565794,-0.261805,-0.486212,-0.538966,-0.367267}
,
{-0.070097,-0.292806,0.452977,-0.0915367,-0.292225,-0.471037}
 };
  static const float bias2[1] = { 0.357233 };
  static const float weights2[][1] = { {0.0526099}
,
{0.0300965}
,
{-0.00893778}
,
{0.0215384}
,
{0.0464647}
,
{0.040796}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_57(v, index);
}
static int assign_gen_lepton_prior_10_0_57() {
  global_gen_lepton_prior.at(10,0,57) = &specialized_gen_lepton_prior_10_0_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_57 = assign_gen_lepton_prior_10_0_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.114723,0.282913,-0.00168775,-0.0316527,0.438869,0.165856 };
  static const float weights1[][6] = { {0.231865,0.0705329,-0.133798,-0.0722097,0.506706,0.241776}
,
{0.340999,-0.132088,0.100044,-0.155559,0.0301761,0.321195}
,
{0.0947424,-0.1394,-0.401494,0.237391,0.0550978,-0.303326}
,
{0.066996,0.165684,-0.201228,-0.243623,0.680154,0.202841}
,
{0.261763,0.421947,0.0393234,-0.0529647,0.377455,0.116981}
,
{-0.0889539,0.488003,0.0249333,0.0236235,0.550348,0.163854}
,
{0.145537,0.112462,0.00280531,-0.0753481,0.413357,0.0526989}
,
{0.332003,-0.114346,0.00771593,-0.0176848,-0.0108312,0.0334663}
,
{-0.0130777,0.157265,0.0143874,-0.202549,0.032255,-0.0293183}
,
{-0.0287694,-0.182818,0.108199,0.110961,0.185335,0.100971}
,
{0.0773455,-0.0218707,-0.00584933,-0.184447,0.182445,0.118733}
,
{-0.21406,-0.211325,0.122979,0.132376,-0.0395197,0.0307843}
,
{0.00871566,-0.0278284,-0.0781431,-0.0615694,-0.0097517,0.00950636}
,
{0.250965,0.197733,-0.135976,0.00607893,0.602633,0.0367595}
,
{0.182291,-0.0213541,0.0884614,0.01679,0.0237137,0.0926464}
,
{0.577825,0.360156,0.126898,-0.125878,0.923676,0.493202}
,
{0.343097,0.718041,0.10954,-0.0512857,1.04881,0.521087}
,
{-0.109562,-0.117937,-0.226602,0.100659,0.14344,0.0673771}
,
{0.0568681,0.124905,0.00883075,0.0251998,-0.0707844,-0.017206}
,
{-0.106763,-0.0891749,-0.0188388,0.00913162,-0.0685848,0.0179147}
,
{-0.0758084,-0.171564,0.0349338,-0.0562598,0.0658565,-0.0615781}
,
{0.241083,0.0748838,-0.0606748,-0.0862722,-0.151883,-0.0292514}
,
{0.0792749,-0.00415003,0.118825,0.119325,0.0797534,0.0268768}
,
{-0.00927265,-0.0318479,0.110398,0.0580956,0.0148518,-0.0119446}
,
{0.158588,0.212804,-0.159266,-0.133947,-0.123274,0.0852287}
,
{-0.110723,-0.16822,-0.165705,-0.0197606,0.161737,-0.0333455}
,
{0.216372,0.346224,0.126235,0.128556,0.0183042,0.344876}
,
{-0.067346,0.0527337,-0.0863842,0.0627147,0.245049,0.047551}
,
{-0.1627,-0.551971,0.271946,0.0935379,-0.468212,-0.648779}
,
{-0.117318,-0.123644,0.0606259,-0.102357,0.0988657,0.0165921}
,
{-0.0780918,-0.0273756,-0.0679684,0.118913,0.107258,-0.0131058}
,
{-0.144782,-0.00325777,0.208166,0.0251386,0.0168042,-0.0789397}
,
{0.0174479,-0.0214097,0.0518051,0.0106374,-0.00744849,0.0402916}
,
{0.11759,0.160792,0.157918,-0.0504961,0.12404,-0.243655}
,
{-0.123124,-0.159023,0.126367,-0.00155899,0.0535597,-0.0578528}
,
{0.0484587,0.067929,-0.113751,0.00153569,-0.0415937,0.2273}
,
{-0.0313408,0.0275297,0.218251,0.0235739,-0.0186884,0.0215605}
,
{-0.0019471,0.0382596,-0.0520037,-0.0484742,-0.00991881,-0.0271226}
,
{0.122659,-0.135453,0.179509,-0.0211799,0.00734514,-0.00581359}
,
{0.0127457,-0.077327,0.00833465,0.0709785,-0.0254212,1.91916e-05}
,
{-0.0246937,0.0548621,0.0786337,-0.0196094,0.0364458,-0.00970068}
,
{-0.0259924,0.024905,-0.295765,-0.146848,-0.00779813,0.204926}
,
{0.0185888,0.106087,0.0171961,-0.0469446,-0.0586105,0.0627626}
,
{0.0161676,0.123982,0.150142,-0.0102574,-0.108839,0.216524}
,
{-0.164945,0.121613,0.00827136,0.0508628,-0.0177709,0.0588353}
,
{0.0897066,-0.060319,-0.0638115,-0.133396,-0.00816786,-0.0573873}
,
{0.0781437,-0.0281497,0.209028,0.216704,0.000452687,-0.161234}
,
{-0.146554,-0.0524189,-0.0904562,-0.0681694,0.0614853,-0.0256498}
,
{0.244668,-0.0724067,-0.211343,0.21807,0.0409666,0.00922532}
,
{0.105473,-0.0754974,-0.0840677,0.0387409,-0.0701214,0.0837183}
,
{-0.101589,0.0116071,0.0998028,0.0793399,0.100959,-0.0547684}
,
{-0.193346,-0.0285944,0.0731641,0.132406,0.0442343,-0.0424738}
,
{0.13902,-0.00671157,-0.0220863,-0.100243,-0.00319232,-0.167424}
,
{0.132781,0.025091,0.000481953,0.0934566,-0.0279631,-0.0623043}
,
{-0.208034,0.00469341,-0.217637,-0.0310722,-0.055383,-0.133719}
,
{0.171362,-0.0593246,-0.173329,0.0400019,0.182884,-0.366731}
,
{0.124253,-0.0339737,0.0521401,-0.0214928,0.0436213,-0.131599}
,
{-0.0481015,-0.0295673,-0.136112,-0.125323,-0.00914948,0.182315}
,
{-0.0989029,-0.20559,0.213664,0.0929592,-0.180192,0.653884}
,
{0.0476089,-0.0314011,0.165597,0.163985,0.131057,-0.0206151}
,
{0.0705902,-0.0979648,0.119992,0.0341788,-0.146868,0.103033}
,
{0.195147,0.0474882,0.0895308,0.163014,-0.0267271,-0.245533}
,
{0.134234,-0.0879931,-0.013177,0.106438,-0.00139418,0.136617}
,
{-0.00405611,-0.302866,-0.0698021,0.0774792,-0.226409,0.255715}
,
{-0.1197,-0.155663,0.0419214,0.0797656,-0.136202,-0.00610975}
,
{-0.0877632,0.0829419,0.0347703,0.178446,0.195259,-0.00521588}
,
{0.130409,0.123885,0.168164,-0.0593229,0.14674,0.019438}
,
{0.0357725,0.0155197,0.00646297,0.0313342,-0.0080864,-0.081288}
,
{-0.235736,-0.150212,-0.126071,-0.058057,0.471262,0.00378832}
,
{0.0440115,0.177411,-0.0474575,0.143896,0.113348,0.166692}
,
{-0.0618686,-0.183279,-0.144562,0.338684,0.120309,0.0398468}
,
{0.0578794,-0.00847391,0.217908,-0.0193041,-0.100488,-0.0941309}
,
{-0.114061,0.116619,-0.243748,0.0427824,-0.0850085,0.00966667}
,
{-0.356011,-0.134962,0.159612,0.0480609,0.0735759,-0.103911}
,
{-0.286462,-0.191814,0.216311,-0.308752,-0.132131,-0.00566327}
,
{-0.089062,-0.351471,0.0747207,-0.116439,0.000342063,-0.0163032}
,
{-0.249857,0.00366105,-0.0399178,-0.0135621,0.186375,0.0624682}
,
{0.00875101,-0.0500556,-0.0115771,0.0210826,0.0665802,-0.0805918}
,
{0.191195,0.248341,0.309423,-0.278088,0.915856,0.673449}
 };
  static const float bias2[1] = { 0.263484 };
  static const float weights2[][1] = { {0.0159684}
,
{0.0317431}
,
{0.033113}
,
{-0.0215266}
,
{0.0727652}
,
{0.0209874}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_58(v, index);
}
static int assign_gen_lepton_prior_10_0_58() {
  global_gen_lepton_prior.at(10,0,58) = &specialized_gen_lepton_prior_10_0_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_58 = assign_gen_lepton_prior_10_0_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.268379,0.54434,-0.361788,0.362678,-0.182617,0.415487 };
  static const float weights1[][6] = { {0.204844,0.249551,0.0885299,0.056338,-0.205116,-0.0395539}
,
{0.605703,0.0358694,0.221206,0.163374,-0.189883,0.0516695}
,
{-0.197707,-0.0983648,-0.161662,-0.0915116,-0.216567,-0.177389}
,
{1.01197,0.560043,-0.490237,0.528424,0.0479713,0.509854}
,
{0.285914,0.307012,-0.460624,0.191352,-0.333856,0.282644}
,
{0.131457,0.436091,-0.455156,0.269579,-0.232829,0.459363}
,
{0.356729,0.391865,-0.231403,0.443045,0.0909128,0.340723}
,
{-0.25388,-0.000474534,-0.0195822,-0.132288,-0.315349,0.105451}
,
{0.114062,-0.0414448,0.00115839,0.026772,0.461153,0.0788358}
,
{0.0516406,-0.106105,0.0466967,-0.113217,0.113697,0.0433614}
,
{0.128769,0.165908,-0.138115,0.169202,0.0578905,-0.196525}
,
{-0.170465,-0.192733,-0.145936,-0.0924644,0.00886857,0.0656541}
,
{0.0897333,0.140394,0.0855396,-0.170931,-0.111543,-0.107949}
,
{-0.147175,0.222265,0.10942,0.191307,-0.0293442,0.209108}
,
{0.108975,-0.0610676,0.10233,0.237856,0.0131933,-0.0387011}
,
{0.158821,0.44724,-0.260767,-0.0284461,-0.0188494,0.091039}
,
{-0.0284218,0.345734,-0.132033,0.38407,-0.0458383,0.248356}
,
{-0.161736,0.0935054,-0.0216667,0.0968692,-0.304506,-0.0830433}
,
{0.00447731,0.0304409,0.0753583,0.184931,-0.237089,-0.00649597}
,
{0.126333,-0.0253516,0.0984324,-0.028994,-0.0744917,0.0525428}
,
{-0.155248,0.0508638,0.192558,0.0703874,-0.162967,0.216152}
,
{-0.0298789,-0.0389059,0.0955988,-0.00894512,-0.0385231,0.135616}
,
{0.166338,0.0558529,0.0356928,0.0481184,-0.0665748,0.147751}
,
{-0.0724655,0.0338483,0.0391293,0.119935,-0.0194259,-0.00234471}
,
{0.0760123,0.0710031,-0.00135934,0.252661,-0.122486,0.00912794}
,
{0.102571,0.106734,-0.143177,0.0901863,0.00609406,0.0707417}
,
{0.00122823,0.156999,0.104628,-0.0347928,0.052774,0.0985547}
,
{-0.149376,0.152509,-0.138395,0.00815584,-0.0896144,0.111748}
,
{0.0465287,-0.0594207,-0.0713636,0.216525,-0.0680123,-0.0353079}
,
{0.0434533,-0.0747961,-0.220487,-0.12211,0.0841193,0.186708}
,
{-0.152599,0.00722425,0.225769,-0.128656,0.0882379,0.0871851}
,
{-0.347106,-0.116318,0.0242903,0.166657,0.174222,0.0987823}
,
{0.00105366,0.0907169,-0.00931272,-0.0532047,-0.15605,-0.0709924}
,
{-0.0117721,-0.0650734,-0.17238,0.134198,-0.0951595,0.052722}
,
{-0.0495472,0.143751,0.0616915,-0.0800208,0.0430039,0.0960968}
,
{-0.0301773,0.048224,3.77114e-05,-0.0158448,-0.113112,-0.0974697}
,
{0.183629,-0.0217358,0.0766137,-0.10284,0.37785,0.113632}
,
{0.0370049,-0.0172634,-0.054841,-0.141622,-0.154396,-0.0115011}
,
{0.027656,0.0522555,0.141536,0.189061,-0.065137,-0.0368564}
,
{-0.0256116,0.0308972,0.167668,-0.0436846,-0.125576,-0.124435}
,
{-0.188175,0.113969,-0.0774279,0.13408,0.196813,0.159843}
,
{0.164134,0.0282179,0.0963554,-0.0243161,-0.132172,0.101553}
,
{-0.0071049,-0.0108729,0.0982825,0.122735,-0.0642562,0.115917}
,
{-0.126455,0.0156786,0.0623902,0.133482,0.294005,0.0212748}
,
{-0.102174,0.0582937,0.135468,-0.0434041,-0.0339629,0.0555392}
,
{0.105565,-0.121768,-0.14178,0.0979722,-0.169785,-0.036939}
,
{-0.101139,-0.0750037,0.0382905,0.000474525,0.367553,0.141256}
,
{-0.00469886,-0.0431475,-0.0687076,-0.142246,0.0916974,-0.00947203}
,
{-0.0221356,-0.0384283,-0.110331,0.199844,-0.0744277,-0.199059}
,
{0.110122,0.0734854,0.0725604,0.0265025,-0.229015,0.0678721}
,
{-0.0317354,-0.05954,-0.082057,-0.0120699,0.0985188,-0.13851}
,
{0.207194,0.106883,-0.0432777,-0.0243923,-0.267201,-0.19251}
,
{0.00380073,0.0533435,-0.0333791,0.0121733,0.00655797,-0.114769}
,
{0.0619441,-0.229782,-0.0193982,0.0677107,0.11505,0.107588}
,
{-0.00429553,-0.0455114,-0.0469382,0.0933229,-0.0809108,-0.105912}
,
{-0.125117,-0.194983,0.0391348,-0.026904,-0.0528173,0.0796183}
,
{-0.0769198,-0.060167,0.11795,0.0726258,-0.026929,0.176018}
,
{0.00912477,0.0198914,0.0711734,-0.0856242,0.0441027,0.229179}
,
{-0.165757,0.088847,-0.170818,-0.0490226,-0.0227982,0.135718}
,
{0.0875648,0.0128862,-0.0493352,-0.153049,0.0141065,-0.0298301}
,
{0.0850921,-0.173976,0.110602,-0.128894,0.147226,0.137415}
,
{-0.062869,-0.0792601,-0.119409,-0.0480169,-0.0223434,0.112273}
,
{-0.0984984,-0.13262,0.116482,0.0530813,-0.0841556,-0.129903}
,
{-0.0391,-0.147624,-0.0188605,0.135184,0.0648804,-0.000502743}
,
{-0.240898,-0.00608742,0.0341951,0.000653546,-0.164766,0.107767}
,
{-0.213625,-0.176209,-0.0184292,0.0167534,0.0350682,-0.0181607}
,
{-0.0307153,0.0552994,0.0212076,-0.109342,0.00395563,0.133435}
,
{0.022398,0.00685361,-0.229569,-0.162583,0.128186,-0.0285908}
,
{0.0939017,-0.0634038,-0.0147226,-0.00889421,-0.127188,0.216357}
,
{-0.159463,-0.127121,-0.0875981,-0.0226343,-0.197634,-0.0500402}
,
{-0.0315234,0.111257,-0.051826,-0.0623795,0.0895876,0.0677301}
,
{0.12636,0.202613,0.113089,0.0877501,-0.0334767,-0.0632601}
,
{0.0567094,0.0184797,-0.0189049,-0.153291,0.0860768,0.091453}
,
{0.0541581,-0.0753096,-0.0461761,-0.00286524,0.162812,0.0803366}
,
{0.239391,0.127806,-0.0632252,0.1629,0.10301,-0.0240502}
,
{-0.203648,0.177652,-0.110321,0.0367813,0.143715,0.146974}
,
{-0.110535,0.0515184,0.00510118,-0.100565,0.0360011,-0.110053}
,
{-0.208561,-0.0957424,-0.0174418,0.0824822,0.0560466,-0.0545462}
,
{0.0370793,0.103305,-0.118643,0.0450921,0.0865793,-0.0941491}
 };
  static const float bias2[1] = { 0.421704 };
  static const float weights2[][1] = { {0.0358076}
,
{0.0540461}
,
{-0.0929262}
,
{0.0288247}
,
{0.0932635}
,
{0.056577}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_59(v, index);
}
static int assign_gen_lepton_prior_10_0_59() {
  global_gen_lepton_prior.at(10,0,59) = &specialized_gen_lepton_prior_10_0_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_59 = assign_gen_lepton_prior_10_0_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_4(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.104826,0.0292317,-0.0541482,-0.170531,0.0467348,-0.0860652 };
  static const float weights1[][6] = { {-0.217268,0.155748,-0.170729,-0.337258,-0.493925,0.14542}
,
{0.0225714,-0.00975012,-0.165512,-0.38645,-0.0579036,-0.138705}
,
{0.0545672,-0.263837,-0.544566,0.0418493,-0.113106,-0.0967646}
,
{0.0449309,-0.26,-0.784814,-0.849509,0.234498,-0.492798}
,
{-0.153877,0.0642247,0.0926552,-0.134445,0.0883109,-0.172953}
,
{-0.0260236,0.0289335,-0.0902616,0.205805,-0.0770525,0.0829319}
,
{0.0475068,-0.180679,0.0402772,0.107825,0.0630803,-0.0633551}
,
{0.165633,0.0647049,-0.177688,0.167715,-0.0608019,0.0935459}
,
{0.336084,0.0925437,-0.0778323,-0.224639,0.0928482,0.177743}
,
{-0.187875,-0.0140323,-0.0144481,-0.181341,-0.0256788,0.186626}
,
{0.128036,-0.0214076,0.107108,0.000255042,0.241783,0.249991}
,
{0.10829,0.0123836,-0.170363,0.141571,-0.0252118,0.0841477}
,
{0.10315,-0.0412624,0.0554262,-0.0968311,0.085721,-0.204838}
,
{0.176018,-0.0784987,0.384773,-0.336886,0.106188,-0.168878}
,
{0.00996688,0.0695127,-0.20559,0.135977,-0.23161,-0.249052}
,
{0.237153,0.0494692,0.00723704,0.095179,-0.160653,-0.035714}
,
{0.212497,-0.106388,-0.0850423,-0.0304564,0.377264,-0.310401}
,
{0.103119,0.0235432,-0.0631279,-0.345949,-0.0210096,-0.108242}
,
{-0.168616,0.175005,-0.0607814,0.0236437,0.0558614,0.5463}
,
{-0.114097,0.0506842,-0.00885721,-0.0787036,0.132182,-0.072008}
,
{0.0162036,-0.0295506,-0.0335435,-0.103776,0.0308268,0.0795558}
,
{0.206389,0.0559032,0.122106,-0.194474,-0.0758838,-0.0229479}
,
{-0.147849,-0.126309,-0.17229,0.122687,-0.046632,0.0237559}
,
{-0.112534,0.0301248,-0.253713,0.0198016,0.0863814,0.0711352}
,
{-0.239604,0.334698,-0.0952744,0.0636163,-0.0473216,0.303569}
,
{-0.149365,0.218239,-0.0698185,-0.0801882,-0.173107,-0.0183368}
,
{-0.262323,0.0337071,-0.207984,-0.0783126,0.0372283,0.0649153}
,
{-0.155414,0.167465,-0.0891128,0.00892826,-0.120778,0.268278}
,
{0.281693,-0.385823,0.74514,0.05399,-0.116122,-0.412851}
,
{-0.015458,0.120004,0.00380566,0.212949,0.0309922,-0.00789958}
,
{-0.182322,-0.0794388,0.0709242,-0.159194,0.0884879,0.0926197}
,
{0.140433,0.185091,0.00777284,-0.00780225,0.000647907,-0.0385632}
,
{-0.0631353,-0.0848051,-0.214375,0.0312336,0.0337546,0.0182279}
,
{0.138976,0.159299,-0.0317634,-0.0449626,-0.0197306,-0.122139}
,
{0.170947,-0.0526234,-0.0703669,0.00409418,-0.0782043,0.0841886}
,
{0.0119671,0.0189357,0.0787901,0.0106102,-0.00341011,0.00688743}
,
{0.0539616,-0.0899992,-0.126964,0.0826461,-0.0524438,-2.56449e-05}
,
{-0.0446575,-0.210817,-0.1041,-0.0764435,0.0138152,0.0331613}
,
{-0.0469091,-0.0208766,0.541605,-0.0885808,-0.0204703,-0.0128992}
,
{-0.00132259,-0.079845,-0.0102616,-0.275201,0.0112964,0.0577094}
,
{-0.0130359,-0.114518,-0.0556268,-0.0240349,-0.0237852,-0.088527}
,
{-0.336466,0.16707,-0.00047442,-0.289378,0.0523515,-0.456256}
,
{-0.119175,-0.0714657,-0.0580033,-0.0762657,0.0597754,0.0549044}
,
{-0.118565,0.243096,-0.308751,0.0774609,0.143634,-0.0370125}
,
{-0.08004,0.302148,-0.0729735,-0.0204371,0.0837831,-0.0773508}
,
{0.0319084,-0.0528325,0.0365489,-0.117447,-0.0184373,-0.0188672}
,
{-0.0782379,-0.0919558,0.235605,-0.755142,0.0558887,0.335677}
,
{-0.129756,-0.0343593,0.0348287,0.00284964,0.0586852,0.0791156}
,
{0.0994682,0.043812,-0.392523,-0.220074,-0.0205317,-0.215504}
,
{-0.0754331,-0.137081,-0.0661916,0.310967,0.0042551,0.022241}
,
{0.0416022,0.0731634,0.0227084,0.0168592,-0.0152519,-0.0398028}
,
{-0.110298,-0.0885646,-0.350706,-0.186891,0.0259867,-0.0572701}
,
{-0.058348,-0.167842,0.10338,-0.0482446,0.00639754,0.0346372}
,
{-0.277388,-0.316218,-0.0946332,-0.0359325,0.0506985,-0.0707404}
,
{-0.70164,0.0452392,-0.0551381,0.00110572,0.112951,-0.127523}
,
{0.0380937,0.00170589,-0.0302199,0.0785551,-0.0115374,0.119658}
,
{0.397362,0.0374507,-0.617578,-0.421329,-0.358036,0.233427}
,
{0.0413487,0.0827882,0.0236893,0.00655277,0.0605906,-0.114851}
,
{0.278943,-0.0628251,0.0984293,0.140694,-0.0412158,-0.0341939}
,
{0.0858836,0.305969,-0.131865,0.0290814,0.100448,0.166966}
,
{-0.0851392,0.0650625,0.0805884,0.0189417,0.151527,0.159322}
,
{0.0584473,-0.446448,0.729934,0.230585,-0.159456,-0.222838}
,
{-0.0334704,-0.161343,0.130567,-0.0679619,-0.0624574,0.0857024}
,
{0.35488,0.168945,0.730021,-0.0430273,-0.646326,0.442355}
,
{-0.428855,0.296566,0.248779,0.364452,-0.268727,0.138361}
,
{-0.194007,0.159704,0.118192,0.024398,-0.00790177,0.0261064}
,
{0.527042,0.20893,0.613045,0.264381,-0.0059396,-0.26113}
,
{0.198993,0.144284,-0.368794,-0.0337052,0.292402,-0.00933273}
,
{-0.329324,-0.106441,1.30539,0.374983,0.0792957,-0.437367}
,
{0.186586,-0.813458,0.313628,0.0372645,0.258958,-0.234505}
,
{0.148181,-0.207747,-0.0955918,0.0619714,0.0561893,-0.0405887}
,
{0.240001,0.200506,-0.259523,-0.000684595,-0.163198,-0.0190997}
,
{-0.193087,-0.364485,0.212133,0.190737,0.128577,0.0372473}
,
{-0.505395,0.470876,-0.22108,-0.0252138,0.255133,0.0810011}
,
{-0.49727,-0.0184919,0.355734,0.139004,0.397408,-0.67406}
,
{0.603719,-0.43323,0.387214,-0.0975387,0.487176,-0.912552}
,
{-0.0763039,0.0335448,-0.0267484,-0.178514,0.113174,-0.00691836}
,
{-1.03242,0.424271,0.263632,-0.655325,-0.658724,0.235249}
,
{0.0761795,0.0507279,0.184605,-0.301903,-0.199945,0.173827}
 };
  static const float bias2[1] = { 0.000598036 };
  static const float weights2[][1] = { {0.0485293}
,
{-0.0207275}
,
{0.111441}
,
{0.306899}
,
{0.102069}
,
{-0.0576144}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_4(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_4(v, index);
}
static int assign_gen_lepton_prior_1_1_4() {
  global_gen_lepton_prior.at(1,1,4) = &specialized_gen_lepton_prior_1_1_4;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_4 = assign_gen_lepton_prior_1_1_4();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_0_5_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0561122,-0.0409076,0.0212977,-0.0544302,-0.0305696,0.0526912 };
  static const float weights1[][6] = { {0.054521,0.0958299,0.176778,-0.152218,-0.0759034,0.219652}
,
{0.139748,-0.0553614,0.0604413,0.0440548,-0.0384484,0.0829764}
,
{0.0591626,-0.000248312,0.0537405,-0.0724055,0.109904,0.120054}
,
{0.152129,-0.0706839,0.150444,-0.095201,-0.0431915,-0.0623243}
,
{-0.115445,0.0269475,0.0992975,0.0702476,0.140435,0.226277}
,
{-0.0884314,-0.158074,0.236527,0.111922,-0.166174,0.0701415}
,
{-0.0648655,0.0274159,-0.0569138,-0.222447,0.023229,0.076718}
,
{0.116311,-0.0732985,-0.24305,0.027953,0.0442841,-0.151453}
,
{-0.0963631,0.0509015,-0.117224,0.0737755,-0.128859,0.0242266}
,
{0.0952836,0.0386248,0.093554,0.169836,-0.0178225,0.0935723}
,
{0.231555,0.195652,-0.118858,-0.0724333,-0.108955,-0.0518493}
,
{0.0254881,-0.126955,-0.0747049,-0.0896375,-0.00595353,-0.0176252}
,
{-0.00809017,0.129969,0.0492969,-0.0771421,-0.00391534,0.10552}
,
{-0.107405,-0.164692,-0.227702,0.0942525,-0.0443277,-0.0649907}
,
{0.0517051,-0.0972627,0.124606,0.129682,0.180198,-0.111154}
,
{0.215451,-0.0446786,0.0846638,-0.0510095,-0.145889,0.0658166}
,
{-0.198577,-0.140525,-0.0970715,0.10438,0.0373238,-0.031282}
,
{0.0573062,0.0478251,-0.0689404,0.215725,-0.232771,-0.0583119}
,
{-0.0183664,-0.170642,-0.104677,0.0899459,0.0139835,0.232404}
,
{-0.123449,-0.165026,-0.0466359,0.122239,-0.161916,-0.0248459}
,
{0.0600293,-0.0732893,0.0511194,-0.146094,-0.0237816,0.0394649}
,
{0.0696641,-0.0122207,-0.145932,-0.115759,-0.130917,0.14818}
,
{-0.133914,-0.243217,-0.000292254,0.0881918,0.000700032,-0.102151}
,
{0.230243,0.0468633,0.143688,-0.110183,-0.0786656,-0.0415542}
,
{-0.156148,-0.17656,0.0964232,-0.00859736,-0.14112,0.210681}
,
{0.0119561,0.104924,-0.0145448,-0.0152407,-0.14479,0.177168}
,
{-0.0413823,0.0360414,0.0322376,0.0774984,0.116342,0.0505793}
,
{0.059217,-0.190376,0.111666,0.010149,-0.000510007,-0.0979413}
,
{0.0716855,0.0611625,-0.182915,-0.0666753,0.0454054,0.0558241}
,
{0.0135541,-0.150151,0.188808,0.00940807,0.0222224,0.080071}
,
{0.0220068,-0.0468754,0.153952,0.00646922,-0.13793,0.0982394}
,
{0.185477,0.191585,-0.0602446,0.0894315,-0.10765,0.0613789}
,
{-0.0197223,-0.0461593,0.194429,0.00683452,-0.140404,-0.0999587}
,
{-0.00601962,-0.222317,-0.0829788,-0.00729236,0.12269,0.0580968}
,
{-0.0476538,-0.0457714,0.00843206,0.028268,-0.0390276,0.0247676}
,
{0.069985,-0.0668084,-0.132313,-0.131711,-0.0465835,-0.258376}
,
{0.0343697,-0.0859444,-0.0239717,0.0774756,-0.0469743,-0.173937}
,
{-0.120471,0.0332264,-0.224858,0.0753644,0.0637787,0.106925}
,
{0.097579,0.207526,-0.00635664,0.114691,-0.0301708,-0.0824357}
,
{0.120658,0.0245977,-0.121176,0.110347,0.00269361,-0.0421053}
,
{-0.0417216,-0.0178245,-0.0208714,0.0442985,-0.0970919,0.163269}
,
{-0.21222,-0.0133208,0.18095,0.166762,-0.124019,0.0947841}
,
{0.098898,-0.0694877,0.0608925,0.037717,0.044973,0.0932797}
,
{-0.206888,0.0119985,0.0709523,0.03673,0.0483935,-0.0378602}
,
{0.105634,0.0233276,0.216849,0.217974,-0.118837,-0.239839}
,
{-0.126004,-0.0399586,-0.107035,-0.1377,0.0810309,0.076539}
,
{0.223692,0.12799,0.161473,0.131529,-0.0154285,0.177307}
,
{-0.0242985,-0.0703393,0.131258,-0.092018,-0.00460301,0.0520004}
,
{0.0994976,0.0139392,0.250863,0.150167,0.139894,0.125756}
,
{-0.066035,-0.000190961,-0.156703,-0.0698531,0.192775,-0.0383755}
,
{-0.153871,0.00659294,0.0995896,0.0301062,0.0105533,-0.0650694}
,
{-0.0461011,-0.0324788,-0.105071,0.179761,-0.0712708,-0.0701016}
,
{-0.217189,0.172427,0.0826273,-0.0488169,-0.0575498,-0.165286}
,
{-0.118986,0.0070043,-0.15137,0.00214831,0.158601,-0.06579}
,
{-0.1123,-0.1079,-0.168036,0.0207615,-0.104824,0.0292189}
,
{0.17391,-0.153763,0.0916233,0.102561,0.0460738,-0.116762}
,
{0.0310124,0.125971,0.000565497,0.215889,0.0486717,0.164088}
,
{-0.0476609,0.100262,-0.135257,-0.145753,-0.0830429,0.0598134}
,
{0.138717,0.0245476,0.0865696,0.0610772,0.024337,-0.0286651}
,
{-0.0574596,0.120885,0.0307968,0.0384115,0.0097385,0.115779}
,
{0.0843048,0.0654523,-0.0648669,-0.0721482,0.0645343,-0.0472169}
,
{0.103847,-0.00387342,0.0745694,-0.00771909,0.0689736,0.023453}
,
{0.077198,-0.0185854,0.0255188,-0.0444072,0.103314,-0.0999996}
,
{-0.00926429,-0.0282638,-0.00347649,-0.0168667,0.148984,0.15619}
,
{-0.1375,0.0369751,-0.121778,-0.0229196,-0.202299,-0.0940598}
,
{0.10922,0.0260078,-0.0167137,0.0511762,0.0375633,0.070246}
,
{0.11961,-0.109724,0.193626,0.130152,0.152604,-0.118521}
,
{-0.0893202,-0.0443523,-0.0237856,-0.0814885,0.0680295,0.00353328}
,
{0.074144,0.14989,0.195119,0.0878575,-0.0754889,0.126137}
,
{0.00131585,-0.0244997,0.0134587,0.0277394,0.0407545,0.150202}
,
{0.234502,0.0839438,0.0749916,0.0580502,-0.0248079,0.0202659}
,
{0.0890856,0.151354,0.055563,0.0690795,-0.15345,-0.190525}
,
{-0.0119642,-0.0508283,0.0402128,-0.123935,0.0598198,0.0586525}
,
{-0.0093018,0.0739807,0.0187372,0.0147549,-0.01709,-0.0267656}
,
{0.164211,0.00851059,-0.0165202,-0.0495101,0.0420572,0.0440199}
,
{-0.0560479,0.0468007,0.21752,-0.046,0.0924148,-0.10833}
,
{0.0459573,-0.157555,-0.13151,0.0521833,0.0658946,0.0722875}
,
{0.0213231,0.129039,0.164554,0.0523329,0.0721911,0.0562923}
,
{0.102078,-0.126903,0.00788171,0.19407,-0.0667321,0.0864765}
 };
  static const float bias2[1] = { -0.0642025 };
  static const float weights2[][1] = { {-0.112116}
,
{-0.00694458}
,
{-0.0429718}
,
{0.0683449}
,
{0.000203505}
,
{-0.0955934}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_0_5_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_0_5_0(v, index);
}
static int assign_gen_lepton_prior_0_5_0() {
  global_gen_lepton_prior.at(0,5,0) = &specialized_gen_lepton_prior_0_5_0;
  return 0;
}
static int initialize_gen_lepton_prior_0_5_0 = assign_gen_lepton_prior_0_5_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_60(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0617547,0.769289,0.362735,-0.0292157,0.316418,0.0297834 };
  static const float weights1[][6] = { {-0.278762,-0.268358,-0.0703344,-0.114648,0.472606,-0.491528}
,
{-0.674744,0.00639297,0.149241,-0.153073,-0.0224145,-0.658669}
,
{-0.672693,-0.163952,0.125026,0.145126,0.104771,-0.578681}
,
{-0.324393,1.3296,0.810913,-0.349618,0.58218,-0.25975}
,
{0.0610965,0.917855,0.408019,-0.182655,0.328394,0.0539417}
,
{0.249088,0.680331,0.241467,-0.0163474,0.268369,0.192293}
,
{0.0496572,0.830321,0.390728,-0.0916912,0.451809,0.0372126}
,
{0.105471,-0.240685,0.177865,0.036948,0.109602,0.115966}
,
{-0.384103,0.0679316,-0.00345228,0.00302891,0.106991,-0.0359847}
,
{-0.0159082,0.0298317,-0.0444366,-0.0714326,0.0155692,-0.15227}
,
{0.0768022,0.0745578,-0.145932,0.0672509,-0.0202132,-0.160253}
,
{0.000535913,-0.127471,0.0850871,0.0610147,-0.051803,0.106591}
,
{-0.033948,-0.0681421,0.222317,0.0434422,-0.0606522,-0.027251}
,
{0.0125077,0.0457533,0.181505,0.00780973,-0.243987,0.0554299}
,
{0.0674219,-0.0660204,0.14959,0.157626,-0.160497,0.14397}
,
{0.148161,0.299254,0.513974,0.0528682,0.265186,-0.0205553}
,
{0.0671844,0.146529,0.34986,-0.0828338,0.27968,0.204147}
,
{-0.572107,0.171066,-0.103494,0.0299708,0.0237455,0.00100078}
,
{-0.220078,-0.0958234,-0.0157783,0.0186376,0.133789,-0.0951824}
,
{-0.0634424,-0.0691889,0.0212556,-0.125935,-0.0526517,0.0197961}
,
{0.0380217,-0.0211114,0.00918398,0.0906831,0.00551843,-0.147725}
,
{-0.190766,-0.0522418,0.0857468,-0.0474403,-0.0181421,0.100716}
,
{-0.0508987,-0.16208,0.164285,0.224808,-0.0439812,0.220801}
,
{-0.0714098,0.0106151,-0.128265,0.0263677,0.059517,-0.0186927}
,
{0.0210072,0.088891,0.12769,-0.355026,-0.206677,-0.00793329}
,
{-0.00825519,-0.0852693,0.0347113,-0.266674,0.00583272,0.0495613}
,
{-0.00691316,-0.346083,-0.0753,-0.522235,0.239213,0.0392445}
,
{0.00822365,-0.0297568,-0.0734715,-0.144071,0.0162517,-0.120767}
,
{-0.279917,0.0407749,-0.101689,-0.430377,-0.0319128,-0.812419}
,
{0.0964077,-0.180224,0.126177,-0.0245424,-0.0419357,0.0848797}
,
{-0.0187991,0.0317504,0.0642924,0.0435399,-0.148422,-0.140889}
,
{0.0785827,0.0202916,0.161729,0.118003,-0.0368943,-0.388087}
,
{-0.250294,0.0193247,0.099783,-0.238507,-0.14391,0.153479}
,
{0.0273579,0.0104364,0.171982,-0.00639101,0.0796983,-0.0574351}
,
{-0.199949,-0.141474,0.0160053,-0.0158985,0.0117433,-0.0136262}
,
{-0.0187654,0.129109,0.00589634,-0.015053,0.00723458,-0.171471}
,
{0.132136,-0.00584719,-0.059537,0.0455802,0.0915128,0.000219911}
,
{0.029133,-0.0130764,0.0650759,-0.0295665,-0.0287566,-0.0166089}
,
{0.134122,-0.124393,-0.0396069,0.376553,0.240794,-0.0564509}
,
{0.0511924,-0.0217758,0.230338,-0.0574982,0.135427,0.0812397}
,
{0.0713721,0.0849635,-0.238419,0.0160441,-0.210198,0.029126}
,
{0.268634,-0.0604634,0.163273,0.102802,-0.00183837,-0.167298}
,
{0.0831102,-0.0388237,-0.032435,0.0348838,0.0653635,0.0699457}
,
{0.0724535,0.0934504,-0.0704009,-0.0743775,-0.0521815,-0.325526}
,
{-0.0998434,-0.0433395,-0.0885114,0.0261999,-0.0438415,0.057682}
,
{-0.0434548,0.000854059,0.0581949,-0.108571,0.0980259,0.00746646}
,
{0.152801,0.085389,0.038759,0.0902913,-0.0788249,-0.0360709}
,
{-0.0703883,-0.0180446,0.012957,0.044429,0.0181356,-0.024633}
,
{0.0968843,-0.00458624,0.0493247,0.00728906,-0.024166,-0.088625}
,
{-0.0621257,-0.1394,-0.0347406,0.0660069,-0.0788381,-0.116839}
,
{-0.0215137,0.0305596,0.228117,0.10693,0.0971814,-0.146622}
,
{-0.120945,0.0224433,-0.157272,0.0384229,0.0904241,-0.180991}
,
{0.0631154,0.0742394,-0.0268289,-0.113259,-0.0817084,0.042605}
,
{0.197608,-0.0640302,-0.0381349,-0.0846299,0.048162,0.26043}
,
{0.113795,0.233309,0.00801743,0.475555,0.00278126,0.31586}
,
{0.106524,0.174509,0.144044,0.363279,-0.203953,0.176303}
,
{-0.171301,-0.0152818,-0.0774768,0.175811,0.129061,0.0674578}
,
{0.0620604,-0.0799179,0.109486,-0.251407,-0.0803479,0.064159}
,
{-0.296324,0.413919,0.0618657,0.672099,-0.561679,-0.0776935}
,
{0.177677,0.0737806,-0.038374,0.0816614,0.11574,-0.160068}
,
{0.108954,-0.0140922,0.041938,-0.22525,-0.0841563,-0.0761107}
,
{0.102508,-0.0687431,0.168751,0.0705327,-0.116582,-0.113808}
,
{-0.0778943,0.137052,-0.104367,0.139765,-0.0147421,-0.129923}
,
{-0.0509011,0.0488838,0.46858,-0.070258,-0.337779,0.202298}
,
{0.0395311,-0.0700346,-0.268307,0.484804,-0.118743,-0.0912196}
,
{0.148333,0.109978,0.0393795,0.196853,0.201661,0.0261329}
,
{-0.0174977,0.0122551,0.0191211,0.305884,0.14251,-0.0317725}
,
{-0.00706945,0.0328782,-0.13335,-0.0620874,0.0157053,0.198013}
,
{0.0694925,-0.0385954,-0.475154,0.0038497,-0.294159,1.02074}
,
{0.019248,0.263578,-0.0417811,0.36696,-0.117151,0.0505642}
,
{-0.0280609,-0.0257864,-0.0345372,0.161019,0.0597286,0.0386392}
,
{0.116366,-0.0418123,0.0383597,0.322154,0.0433202,0.285558}
,
{0.062466,0.0592999,0.0275187,0.159131,0.00188902,-0.0482496}
,
{-0.10457,0.419521,-0.195165,-0.360791,-0.080229,0.0329443}
,
{0.28752,1.03931,0.00875439,0.689277,0.150652,0.0676746}
,
{0.146563,1.06543,-0.00177845,0.764002,0.10391,0.111757}
,
{0.386491,0.970138,-0.038375,0.773392,0.186801,-0.0384808}
,
{0.278733,0.113051,0.121076,-0.332277,-0.0845983,-0.330154}
,
{1.31544,-1.72698,-0.260174,1.06313,-1.00685,-1.61865}
 };
  static const float bias2[1] = { 0.157162 };
  static const float weights2[][1] = { {-0.146785}
,
{0.102294}
,
{0.0604301}
,
{-0.0573426}
,
{0.10563}
,
{0.0463023}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_60(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_60(v, index);
}
static int assign_gen_lepton_prior_10_0_60() {
  global_gen_lepton_prior.at(10,0,60) = &specialized_gen_lepton_prior_10_0_60;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_60 = assign_gen_lepton_prior_10_0_60();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_61(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.36112,-0.165814,-0.192653,0.404721,0.165527,-0.084011 };
  static const float weights1[][6] = { {0.216959,0.40837,-0.118065,-0.093593,-0.429875,-0.13937}
,
{-0.068416,-0.133055,-0.103625,0.143163,-0.0926282,0.0810696}
,
{0.128446,0.0343956,0.214033,0.111348,-0.0915893,-0.22701}
,
{1.4225,0.486394,-1.00043,1.55993,-0.926282,-0.101608}
,
{0.298676,-0.327814,-0.182888,0.478138,0.209073,-0.0985073}
,
{0.31364,-0.199915,0.0593231,0.400431,0.229628,-0.248181}
,
{0.42364,-0.206372,-0.086876,0.453607,0.294828,0.0751584}
,
{0.108107,0.0342303,0.0251056,-0.0479719,-0.0488986,-0.0240363}
,
{-0.159775,-0.222155,0.180631,0.206281,0.170212,0.023729}
,
{0.104149,0.146431,-0.0924964,0.141398,-0.0745915,-0.0230657}
,
{-0.0176543,0.133847,0.0949492,0.0323969,-0.0905253,0.0212469}
,
{0.0502351,-0.142218,0.0366326,-0.249435,-0.212705,0.160834}
,
{-0.0234656,0.0149423,-0.00281011,0.196473,-0.0803322,-0.0547198}
,
{-0.123069,-0.0664962,-0.0551193,-0.0198907,-0.177908,-0.186155}
,
{0.0121135,-0.201799,0.0514704,0.0972083,0.0807532,0.118356}
,
{0.423118,-0.411014,0.117241,0.450024,0.160179,-0.160482}
,
{0.0989467,-0.367254,-0.0652779,0.326174,0.113258,-0.188419}
,
{-0.0210284,0.0665758,0.0408137,0.219207,-0.113151,-0.243331}
,
{0.0930143,-0.0568578,0.00280354,0.136913,-0.187722,0.0513588}
,
{-0.0291977,0.0773952,0.182499,-0.0562267,0.105804,-0.0954363}
,
{0.00227508,-0.0561873,-0.0101444,-0.0802723,0.0352871,-0.10639}
,
{-0.0215283,0.101451,-0.09657,-0.0601011,0.0292295,-0.0907329}
,
{-0.107341,0.157515,-0.0339561,0.0955894,-0.00674542,0.129565}
,
{-0.00118173,-0.182389,0.0635883,0.00351853,0.0153264,0.0019731}
,
{-0.073325,0.107438,-0.055528,-0.0103256,0.20945,-0.0688076}
,
{-0.172467,-0.070303,0.0044452,-0.0768152,-0.0489968,0.117078}
,
{-0.138126,0.0613571,0.0675344,0.076799,0.138662,-0.0533424}
,
{0.17116,-0.0160768,-0.0911875,-0.126831,-0.162344,-0.111733}
,
{0.030983,0.121808,0.118976,0.0697447,-0.130873,-0.198573}
,
{-0.14397,0.0595064,0.0571571,-0.064958,-0.137755,0.122917}
,
{0.0528118,-0.02914,-0.0860456,-0.174051,-0.0212447,-0.120341}
,
{0.0182691,0.395012,0.230581,0.11581,-0.012695,-0.117923}
,
{-0.019493,0.0288814,-0.108277,-0.081328,0.0236609,0.0255737}
,
{-0.0409351,0.120334,0.0617161,-0.00211873,-0.153411,0.0265921}
,
{-0.0163464,-0.0768833,-0.00522557,0.0358993,-0.0367193,-0.10241}
,
{0.0110277,-0.007948,-0.19874,-0.117651,-0.0150597,-0.014557}
,
{0.103851,0.0466777,-0.318827,0.000460053,-0.161095,-0.0548478}
,
{-0.116446,-0.035408,-0.152112,0.0840968,-0.00648284,-0.0884843}
,
{-0.0911128,-0.318638,0.239048,-0.0120952,0.178274,0.0263732}
,
{-0.00416321,-0.0418402,-0.237776,-0.106313,-0.00400461,0.0296861}
,
{-0.0502365,0.114479,0.00765606,0.125348,-0.0772604,-0.0329041}
,
{0.315451,-0.0017552,-0.155762,-0.211022,-0.210607,-0.0340258}
,
{-0.0491342,-0.0166009,0.0839021,-0.0170738,0.0991891,0.0398049}
,
{-0.0548532,-0.330893,-0.0539012,0.0584438,-0.090188,-0.271017}
,
{0.060604,0.139377,0.0495887,-0.115669,-0.174887,-0.0428794}
,
{-0.00864208,-0.123261,-0.1336,-0.0243249,0.226234,0.0447522}
,
{0.13888,-0.0586757,-0.348217,-0.219622,-0.157271,0.103058}
,
{0.0240076,-0.0288851,-0.105527,-0.0258695,-0.0493098,-0.0791815}
,
{-0.0920777,0.092263,0.0127915,-0.0673746,0.15186,0.291729}
,
{0.0566873,-0.050374,0.0997108,0.0423692,0.250872,-0.172979}
,
{0.0300865,0.0629031,-0.0138331,-0.243951,-0.148272,-0.138417}
,
{-0.120351,-0.167884,0.180072,0.318349,-0.0709923,-0.0427253}
,
{-0.0645109,-0.160849,0.0824389,0.0995476,-0.0105282,-0.0204347}
,
{-0.013373,0.174785,-0.405609,0.115225,-0.1814,0.0281753}
,
{-0.137496,0.136832,-0.0500669,0.183843,-0.2535,-0.0990653}
,
{-0.19017,0.0640721,0.0985511,0.308764,-0.170402,-0.232721}
,
{-0.143369,-0.208539,0.0276291,0.436685,0.0188767,-0.0118154}
,
{0.211436,0.0877544,0.732406,-0.814492,0.218314,-0.240535}
,
{0.604631,-0.194671,-0.631806,0.0547238,-0.281987,0.0563339}
,
{0.171707,-0.130362,-0.0373543,-0.357542,-0.101674,0.0407526}
,
{0.339257,0.043189,-0.0143677,-0.0415934,0.161529,0.144565}
,
{0.0681227,0.107446,-0.191576,-0.384953,0.147005,0.0361303}
,
{-0.254011,-0.680054,-0.0221684,-0.0513593,0.0830325,0.383504}
,
{-0.162878,0.177348,0.528175,-0.61511,0.437009,-0.109011}
,
{0.218581,-0.0645254,0.0857613,-0.117995,-0.0351486,-0.0762272}
,
{0.179527,-0.0313771,0.241598,0.00980808,-0.196347,-0.32282}
,
{0.00455025,-0.10944,0.353452,-0.120766,-0.00453861,-0.175973}
,
{0.682682,0.373616,-0.389013,0.26416,0.306503,0.33196}
,
{-0.00185383,0.279004,-1.16192,-0.0563787,0.584405,0.168792}
,
{-0.143336,-0.0791309,0.102451,0.256637,-0.323675,-0.0616111}
,
{0.0166188,-0.0842616,-0.0506813,0.173587,-0.125605,0.03083}
,
{-0.0958258,-0.0970072,-0.155217,0.204646,-0.11253,-0.142508}
,
{0.449994,0.195265,0.238391,0.929872,-0.558302,-0.150254}
,
{0.327977,-0.179085,1.00953,0.315668,-0.23106,0.432646}
,
{1.53125,0.245537,0.344577,-0.288975,-0.224965,-0.207973}
,
{1.45643,0.295949,0.277877,-0.343816,-0.3459,0.0472687}
,
{1.3781,0.2152,0.455866,-0.431556,-0.422996,-0.10867}
,
{0.032432,-0.601496,-0.992997,0.425704,0.956376,-0.0709499}
,
{-0.850412,0.209977,-0.811144,-0.617622,0.94582,-0.11094}
 };
  static const float bias2[1] = { 0.240917 };
  static const float weights2[][1] = { {0.169677}
,
{-0.232599}
,
{-0.0704871}
,
{0.113487}
,
{0.175002}
,
{-0.5512}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_61(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_61(v, index);
}
static int assign_gen_lepton_prior_10_0_61() {
  global_gen_lepton_prior.at(10,0,61) = &specialized_gen_lepton_prior_10_0_61;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_61 = assign_gen_lepton_prior_10_0_61();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_0_62(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0878818,-0.0120167,0.200906,0.0181735,0.102261,0.0243743 };
  static const float weights1[][6] = { {-0.152547,0.278681,0.0512156,-0.359578,0.0393133,-0.133714}
,
{0.130689,0.0112523,0.153566,0.160482,-0.00493511,0.0920692}
,
{-0.0959988,-0.023019,-0.663027,0.0987418,-0.0577509,-0.0515155}
,
{-0.101696,-0.2251,-0.279385,0.0830518,0.0307325,0.0430122}
,
{-0.145301,0.0616016,0.210209,-0.0232185,0.0119295,-0.119775}
,
{-0.0609579,0.184292,0.109885,0.0292587,0.0256848,0.186572}
,
{0.0072758,-0.134126,0.00973628,0.0379056,0.314132,0.0881104}
,
{-0.0878868,-0.258825,-0.177553,0.0215763,-0.162745,0.00829646}
,
{0.158347,-0.152306,-0.00739632,0.0855386,0.0786851,0.0651355}
,
{0.11394,-0.0275956,-0.0252522,0.0544233,0.199222,0.0603076}
,
{-0.0730266,-0.188807,0.0488413,0.0682067,0.148959,-0.102254}
,
{0.167281,-0.197754,0.0145044,0.0643252,-0.0308122,-0.0414849}
,
{-0.0257483,0.123622,0.135996,0.216122,0.109544,-0.171085}
,
{0.169635,-0.00516882,-0.0375879,-0.00772024,0.0208379,-0.00906859}
,
{0.00656111,-0.0763367,0.056481,-0.0249602,0.0160084,-0.0316962}
,
{-0.731543,-0.297057,-0.445887,0.264605,0.518245,0.638819}
,
{-0.481413,-0.281031,-0.318357,0.312558,0.699941,0.462108}
,
{0.0988158,0.0842649,0.0966116,0.0700914,0.200364,-0.222641}
,
{-0.0385459,0.142105,-0.0205692,0.10518,0.0532113,-0.110703}
,
{0.0842926,0.10134,-0.0210634,-0.142076,0.0468301,0.0953706}
,
{0.130481,0.0290977,-0.0328508,0.000686195,0.0392792,0.024346}
,
{0.155045,0.0692225,-0.0134083,0.0221673,0.0365475,0.152029}
,
{-0.0227019,0.073574,0.143259,0.16546,0.0272284,0.0256102}
,
{-0.0358861,-0.0419104,-0.0872922,-0.04551,-0.0195495,-0.0138041}
,
{-0.223181,-0.0370527,-0.19651,0.0588708,0.0186282,-0.148006}
,
{0.0666692,0.0587968,0.0482404,0.123059,-0.243425,-0.147936}
,
{-0.108152,0.26165,-0.0293358,-0.164426,0.123991,0.212134}
,
{-0.0815181,0.14971,-0.07879,0.193105,-0.100164,0.0971272}
,
{-0.191443,-0.115334,-0.00842026,0.0242251,-0.503277,0.625516}
,
{-0.0857699,0.132189,-0.0295204,0.22103,-0.0167625,0.21929}
,
{-0.125849,-0.00294709,-0.0196176,0.0482994,0.0843571,-0.055923}
,
{0.0393912,-0.119405,0.0289119,-0.0805756,0.0581273,-0.0273668}
,
{-0.0752712,0.0148447,-0.143491,-0.00846612,-0.0091627,-0.0824528}
,
{-0.153261,0.0471662,0.0557243,0.0372391,0.19394,-0.0249755}
,
{-0.073911,-0.152706,0.0781041,0.11837,-0.000628672,-0.124667}
,
{0.000414952,0.00293335,0.0580139,-0.0292489,-0.209299,0.188601}
,
{0.0191398,-0.0353261,-0.220015,-0.116334,0.0611226,-0.0157299}
,
{-0.00106077,-0.0759972,-0.144201,-0.0361793,0.0343288,-0.1477}
,
{-0.104161,0.0124362,0.100388,0.0121874,-0.07359,0.116505}
,
{-0.0724923,0.145002,0.0194941,-0.042973,0.0457482,-0.156082}
,
{-0.201788,-0.103618,0.0515012,-0.116846,-0.0625066,0.0221562}
,
{0.0132554,0.221627,-0.474157,-0.0337775,-0.134427,0.351618}
,
{-0.0178675,-0.158,-0.0373584,0.0984688,0.066581,-0.231853}
,
{0.00784974,-0.246554,0.129253,0.0654847,-0.0814937,0.15365}
,
{-0.0515521,-0.0776447,0.119221,0.153744,0.0889273,-0.178932}
,
{-0.0198324,0.145346,0.280781,0.0503272,0.0254157,-0.143586}
,
{0.138189,-0.150151,0.0415214,-0.215348,-0.0094206,0.0446091}
,
{-0.0127836,0.23929,0.294001,-0.0938883,0.164028,-0.0431578}
,
{-0.119421,0.13131,-0.0489283,0.629504,-0.184492,-0.0368445}
,
{-0.0603801,0.175326,-0.325672,0.160264,0.0212403,0.0521243}
,
{0.0880733,0.27658,-0.183805,-0.132489,-0.0376689,0.172895}
,
{0.317595,0.137226,-0.607434,0.428245,-0.0101991,0.0978547}
,
{-0.0394423,0.070854,-0.0429798,0.067391,0.0686551,-0.144766}
,
{-0.0294908,0.244453,0.530107,0.0102272,0.177856,-0.0759822}
,
{0.0261737,0.0509334,0.121672,0.153997,0.015253,0.08884}
,
{-0.0108951,0.0335521,0.0859851,0.27406,-0.0424077,0.0278905}
,
{0.0117549,0.0793159,-0.0772832,-0.015393,-0.236289,-0.0369412}
,
{-0.0272415,0.0385215,-0.0805141,0.185564,0.072316,-0.289019}
,
{-0.199413,-0.349077,0.0466787,0.25708,1.15132,-0.26855}
,
{-0.0272438,-0.109006,-0.0257106,0.0902014,-0.458639,-0.083428}
,
{0.0817998,-0.125502,0.147124,0.0931514,-0.355263,-0.0678255}
,
{0.0745239,-0.0821621,-0.0832331,0.0996677,-0.31745,0.150407}
,
{0.0112011,0.0329723,0.129,-0.208594,-0.271642,0.527932}
,
{0.000403991,-0.26079,-0.0623721,-0.164498,-0.767703,-0.354429}
,
{-0.0563439,0.124127,-0.0305325,0.0712098,0.0140605,0.126509}
,
{0.114598,0.061655,-0.0328275,0.139972,0.175059,0.352264}
,
{0.0760785,0.0469699,0.00361567,0.0776072,-0.252177,0.198161}
,
{-0.0134512,-0.0975135,-0.0299813,0.243773,-0.0680094,-0.356054}
,
{-0.145734,-0.0505068,-0.0640741,-0.121624,-0.225074,0.88409}
,
{-0.0244281,0.164828,-0.0867881,0.182771,-0.202397,-0.17668}
,
{0.140272,-0.00273435,-0.09595,-0.0492036,0.13172,0.00269083}
,
{0.213432,-0.150751,-0.0738192,-0.0727658,-0.00851549,-0.279528}
,
{0.0620242,-0.0587744,-0.0447342,-0.198666,0.101358,0.0996868}
,
{-0.0538575,0.890456,0.0792286,-0.353084,0.354588,-0.0600542}
,
{-0.041735,-0.857867,-0.0872716,0.878679,-0.864185,0.0811172}
,
{-0.219103,-0.730273,0.0229041,0.855044,-0.865768,0.227539}
,
{0.0252631,-1.02328,0.147093,0.81904,-0.848856,-0.0967657}
,
{-0.0750595,-0.344752,-0.255357,0.219512,-0.18938,0.215467}
,
{-0.0381009,0.731474,0.0353683,0.551584,2.0712,-2.00758}
 };
  static const float bias2[1] = { 0.0574549 };
  static const float weights2[][1] = { {-0.151662}
,
{-0.0972118}
,
{-0.452457}
,
{0.192158}
,
{0.255185}
,
{0.148819}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_0_62(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_0_62(v, index);
}
static int assign_gen_lepton_prior_10_0_62() {
  global_gen_lepton_prior.at(10,0,62) = &specialized_gen_lepton_prior_10_0_62;
  return 0;
}
static int initialize_gen_lepton_prior_10_0_62 = assign_gen_lepton_prior_10_0_62();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.419351,-0.113703,0.490196,-0.0478126,0.435111,0.0546861 };
  static const float weights1[][6] = { {-0.964657,-0.429552,-0.639486,-0.350788,-0.416269,-0.00989825}
,
{-0.0393135,-0.202564,0.200334,-0.01311,0.0534908,-0.19666}
,
{-0.255437,0.11244,0.0831749,-0.0712741,0.155903,0.010462}
,
{1.02742,-0.349703,1.53713,-0.0893336,1.26696,0.409383}
,
{0.104298,0.00368937,0.468652,-0.101649,0.248191,0.131296}
,
{0.506304,-0.305685,0.226543,-0.105531,0.275531,0.0740576}
,
{0.490596,-0.0944096,0.516257,-0.0677933,0.581742,-0.157018}
,
{-0.459793,-0.0246571,0.214578,-0.0979908,0.0341176,0.111057}
,
{0.24882,-0.68208,0.721871,0.0916586,0.0780746,0.059982}
,
{0.174979,-0.0508392,0.105821,0.00757885,-0.0982102,-0.0537436}
,
{-0.211845,0.0640686,-0.129634,-0.114477,0.0663567,-0.0835321}
,
{-0.0915072,-0.106276,0.0215423,0.06508,-0.156157,-0.0765844}
,
{0.0290153,0.245764,0.182169,-0.236924,0.131982,-0.0459951}
,
{-0.164787,-0.418058,0.29816,0.0898598,0.08981,0.0633752}
,
{-0.050657,-0.154622,-0.131123,-0.00653624,-0.0382248,0.019182}
,
{0.0470797,-0.256623,0.365815,0.00246804,-0.114963,-0.145876}
,
{0.00208305,-0.243249,0.214077,0.117863,-0.1919,-0.135728}
,
{0.0634426,-0.101453,-0.0377326,-0.0462404,0.302153,-0.000328428}
,
{0.0751555,-0.141289,0.177762,0.183654,-0.110634,-0.216072}
,
{0.210838,-0.0838343,0.141997,-0.103018,-0.0564121,0.00561632}
,
{0.203248,0.0781422,-0.0809721,-0.208225,-0.0175041,0.0622998}
,
{-0.118112,-0.153573,0.0446005,0.0490134,0.124437,-0.105997}
,
{-0.0346328,-0.248863,-0.171805,0.0208371,-0.0521327,-0.189043}
,
{-0.0718999,0.01811,0.119522,0.0324712,0.121587,-0.221369}
,
{0.0208344,-0.0930198,0.0442361,-0.00665991,-0.201347,-0.0313537}
,
{-0.0538372,0.0613698,0.138754,-0.202169,-0.220297,0.0196858}
,
{-0.0392442,-0.0117599,0.00760958,0.106825,0.0212145,-0.236132}
,
{0.0352111,-0.244173,0.0153275,-0.072828,-0.00980866,-0.170867}
,
{0.288557,-0.369709,0.58739,0.488663,0.328743,0.349427}
,
{0.0679218,-0.172785,-0.00770798,0.204867,-0.0275504,0.184918}
,
{0.0525594,0.167812,-0.00154792,0.124886,0.18558,-0.0640533}
,
{-0.0989022,0.00216566,0.0702575,-0.0195374,-0.0892869,0.129521}
,
{-0.0864831,0.0129582,0.0244002,0.113785,0.100687,-0.0949831}
,
{-0.0728904,-0.205624,0.141312,0.115181,0.0587919,-0.112996}
,
{-0.121857,0.0288164,0.0287673,0.0952949,-0.00235204,0.0428081}
,
{-0.180124,-0.204114,0.135654,-0.0651806,0.0226021,-0.159738}
,
{-0.256166,-0.147272,0.110055,0.2253,0.0113769,-0.292347}
,
{-0.0807818,-0.0322216,0.0291974,-0.00643283,0.147972,-0.0647673}
,
{-0.187194,0.000179887,0.133062,-0.0945916,0.0383077,-0.115726}
,
{0.0233925,-0.14675,-0.0702498,0.0297038,0.0970088,-0.156743}
,
{-0.0922381,0.160379,-0.0158752,-0.0535205,0.00554195,0.0323913}
,
{-0.0330102,-0.0791587,0.0608954,0.109803,-0.103247,0.242743}
,
{0.143943,-0.0857808,0.0143134,-0.237182,-0.0033817,-0.0413275}
,
{-0.147631,0.0242874,0.0234372,0.0131985,0.0757103,-0.0253018}
,
{0.00617676,-0.172099,0.0181075,0.196689,0.0551154,0.011065}
,
{-0.184278,-0.116918,-0.106757,-0.0713533,0.00781711,-0.0135278}
,
{0.0200499,0.089119,-0.097678,0.234831,0.0918863,0.0517259}
,
{0.106095,0.0911765,0.105181,-0.193596,-0.0654561,-0.089912}
,
{0.0895878,0.114918,0.0139608,-0.124764,-0.0416874,0.0633821}
,
{0.145175,0.114349,-0.106805,0.0254218,0.080784,-0.296551}
,
{-0.0109516,-0.0497927,0.0370795,0.138433,-0.0939991,-0.0540584}
,
{0.0579736,-0.0506638,0.038051,-0.156918,-0.112265,-0.00133497}
,
{-0.118595,0.0494989,0.0560579,0.11472,-0.0306889,0.0760233}
,
{0.0224787,-0.0502005,-0.0567403,0.0722546,0.0812899,0.0671403}
,
{0.085984,-0.139848,0.0418913,-0.0957198,0.0780645,-0.0857794}
,
{-0.138919,0.08664,-0.0881497,0.0394824,-3.71458e-05,0.0961472}
,
{0.0246373,0.178396,0.0506892,-0.035011,0.0933147,0.0893966}
,
{0.0353651,0.146302,0.241798,-0.237352,-0.00904948,0.0979484}
,
{0.0259791,-0.103347,-0.0274439,-0.0350709,-0.0261848,0.0169985}
,
{0.0417878,-0.138019,0.0010147,0.0173468,0.114475,-0.100822}
,
{0.0230273,0.178149,-0.087414,-0.031652,0.0247777,-0.0446628}
,
{-0.0451223,-0.0464966,0.0687087,0.237742,-0.148224,0.0575866}
,
{-0.0500157,-0.875631,0.146578,0.0081377,-0.0817805,-0.139036}
,
{-0.0155005,0.0135515,0.011765,0.0949658,-0.0711017,-0.0298479}
,
{0.0734152,0.0779541,0.161927,0.199678,0.0891894,-0.228444}
,
{-0.164239,0.018493,-0.118745,0.068998,-0.111714,0.166569}
,
{0.104021,-0.112717,-0.0641119,-0.243854,0.0913609,0.0299216}
,
{-0.129331,0.799802,-0.236603,0.670533,-0.0861163,-0.434175}
,
{0.0196101,0.129297,0.00254705,-0.0398072,-0.000403326,0.0445089}
,
{0.0911142,-0.0529931,0.0072893,-0.0360438,-0.00551739,0.0273172}
,
{0.0326312,-0.0310661,-0.14193,0.0963956,0.207031,-0.0329107}
,
{-0.122737,0.209504,0.12172,0.069143,-0.113013,0.00467439}
,
{0.100245,-0.109823,-0.163705,-0.247055,0.11297,-0.433102}
,
{-0.0374667,-0.169829,0.0105281,0.0206733,-0.0700036,-0.0620915}
,
{-0.0371276,0.211679,-0.0327719,0.417922,-0.578909,0.440758}
,
{0.154719,0.110512,0.0167565,0.456507,-0.292424,0.293435}
,
{0.0514015,0.027265,-0.0635222,0.41812,-0.426498,0.364435}
,
{0.371864,-0.20959,0.359863,0.731331,0.0990628,0.764605}
,
{0.234318,0.512094,0.159284,-0.465845,-0.175968,0.610039}
 };
  static const float bias2[1] = { 0.399369 };
  static const float weights2[][1] = { {0.0289514}
,
{-0.0232581}
,
{0.0338374}
,
{0.016277}
,
{0.0162869}
,
{0.0124733}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_57(v, index);
}
static int assign_gen_lepton_prior_10_1_57() {
  global_gen_lepton_prior.at(10,1,57) = &specialized_gen_lepton_prior_10_1_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_57 = assign_gen_lepton_prior_10_1_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.975229,0.260188,0.655757,-0.0247262,0.337782,-0.455677 };
  static const float weights1[][6] = { {0.912106,-0.585508,-0.845666,0.0497753,-0.401884,-0.35411}
,
{0.256552,0.30593,0.415173,0.448153,0.0974758,-0.356348}
,
{0.359532,0.193475,0.0695349,-0.439028,0.196747,0.75524}
,
{1.7924,0.798073,1.29888,-0.0517903,0.582213,-1.72725}
,
{0.979493,0.333851,0.800306,0.0640936,0.353283,-0.361532}
,
{0.888382,0.394604,0.360045,-0.0378184,0.356058,-0.150377}
,
{0.966397,0.375228,0.700243,-0.164853,0.283931,-0.0277228}
,
{-0.0478606,-0.171896,0.0712482,0.10107,0.150966,-0.297364}
,
{-0.836884,0.0076331,0.850202,-0.169888,0.259671,0.522755}
,
{-0.0164256,0.0436327,-0.010397,-0.0850323,0.00760351,-0.179477}
,
{0.164323,-0.0400513,0.0528268,0.156456,0.031694,-0.0346365}
,
{-0.0440321,0.10482,0.144991,0.065159,0.216224,0.0426689}
,
{0.13518,-0.0411541,0.27407,-0.0195055,-0.167083,-0.210084}
,
{-0.130161,0.227577,0.46709,-0.00987649,0.0644375,-0.059479}
,
{0.132007,0.119841,0.106165,-0.0487635,0.0329498,-0.0516516}
,
{-0.367189,-0.013688,0.352818,-0.0199139,-0.0864229,0.156106}
,
{-0.370432,-0.0425409,0.328186,-0.15307,-0.0208928,0.0389342}
,
{0.179164,0.00110787,0.135569,0.0577271,0.0625374,0.0732371}
,
{0.0125439,0.0856534,0.0451779,-0.158428,-0.0564702,0.0749311}
,
{-0.442229,-0.0103412,0.159119,-0.1387,0.130643,0.0367064}
,
{-0.144226,-0.00671549,0.0378416,-0.117402,-0.163656,-0.298176}
,
{-0.189438,0.0882525,-0.0973511,-0.373536,-0.0574062,-0.275274}
,
{-0.00145787,-0.0386411,0.062005,-0.0288602,0.189872,0.0863607}
,
{-0.0916384,0.233806,-0.0624182,0.10305,0.0921177,-0.106668}
,
{0.0207245,-0.034653,-0.105097,-0.0900648,0.0516053,0.0893048}
,
{0.0334706,-0.0821267,0.0486479,-0.145702,0.128837,0.071673}
,
{-0.0327434,-0.0708675,0.0952493,-0.128788,-0.194666,-0.101976}
,
{0.0490382,-0.0760492,0.2312,-0.17421,-0.0778787,-0.00687724}
,
{-0.122109,0.151351,0.288696,-0.584373,0.284935,-0.0785056}
,
{-0.00887855,-0.165125,-0.0204547,-0.0468157,0.12556,0.0241783}
,
{-0.143805,0.121405,0.148004,0.039708,-0.160118,-0.0186267}
,
{0.0418231,-0.22652,0.235408,-0.0286181,-0.109632,-0.0647563}
,
{-0.00578125,0.244422,-0.124782,0.0980624,0.0283646,0.0978873}
,
{0.060025,0.0603176,-0.126968,0.00257361,0.0828543,-0.0163662}
,
{0.137388,-0.0687351,-0.04278,-0.142617,0.129796,0.0870215}
,
{-0.0810026,-0.226982,-0.0508168,-0.171291,0.342659,0.0210787}
,
{-0.144997,0.142592,-0.0414385,-0.0313377,-0.0186494,-0.102117}
,
{0.0119889,-0.0392594,0.0328943,-0.0208754,0.00177855,0.00484358}
,
{-0.182846,0.0793473,-0.00811472,0.049261,0.0640537,-0.171503}
,
{-0.0570507,-0.0125107,0.181985,-0.00438596,0.0774365,-0.0361666}
,
{-0.0206755,0.0678403,-0.282979,-0.0984525,0.0170941,-0.10548}
,
{0.0446913,-0.0174973,-0.00775841,0.0718007,0.128843,0.0543565}
,
{-0.00556642,0.0135702,-0.00582435,0.013819,-0.0298433,-0.0345229}
,
{0.0352079,-0.0919759,0.0485659,0.279451,0.255363,0.116119}
,
{0.00693638,0.0440356,-0.0142229,0.0935309,-0.235267,-0.0846525}
,
{0.0249229,-0.0257618,0.0511709,-0.0155063,0.146541,0.0222955}
,
{0.0525939,0.00990809,-0.0130791,-0.0869133,-0.0427604,0.450019}
,
{0.0216902,0.0065384,-0.00206724,-0.0103551,0.00844517,-0.0160992}
,
{0.0686988,-0.0292371,-0.0298587,-0.0427605,0.11215,0.084006}
,
{0.180009,0.0493823,-0.0313603,-0.0548903,-0.175597,0.113784}
,
{-0.163691,-0.0787051,0.0176343,-0.0595911,0.167909,0.0106953}
,
{0.0235841,0.047627,0.00359444,0.0355525,-0.144235,0.0548636}
,
{-0.0141316,-0.108427,0.0699433,-0.0156957,-0.0389376,-0.0520303}
,
{0.0423562,-0.276879,0.25851,0.120179,-0.11429,0.0164162}
,
{-0.0191379,-0.12375,0.0709608,0.00697845,0.0509745,0.0231285}
,
{-0.0988969,0.101268,0.0384538,0.0331711,-0.138418,0.055454}
,
{0.140063,-0.0496339,-0.0820031,-0.201968,0.0484056,-0.0491457}
,
{0.00050129,-0.0479917,-0.00130565,-0.0433583,0.0321701,-0.00881026}
,
{-0.0602452,0.0109302,-0.224416,0.0688582,-0.0573998,-0.0428191}
,
{0.136996,-0.0557705,-0.110157,0.158209,-0.0243092,-0.0112045}
,
{-0.147155,0.135523,0.00182405,0.13717,-0.0300517,0.158619}
,
{0.0116464,-0.0624482,0.12559,-0.195509,0.140506,-0.114207}
,
{0.0128374,-6.29342e-05,0.0322173,0.0064322,0.0825866,-0.00116764}
,
{0.0841851,0.0981503,-0.0297911,-0.398014,0.231085,0.212323}
,
{0.0571456,-0.040054,0.112277,0.0941522,-0.0219311,0.0845843}
,
{0.024071,-0.117459,-0.0413456,-0.0194547,0.107445,-0.00300605}
,
{-0.0938075,0.202835,-0.0654937,0.0585404,-0.0770738,-0.0985009}
,
{-0.00861797,-0.040274,-0.00982771,-0.103448,-0.103851,-0.0167728}
,
{0.0264161,-0.167852,-0.0356729,-0.0702774,0.0561803,0.131668}
,
{-0.219108,-0.0643534,0.120176,0.0362379,-0.151971,-0.0491749}
,
{0.178383,0.0784405,-0.118018,0.0808608,0.157619,0.0887358}
,
{0.0773651,0.147843,0.107043,-0.106886,0.0340924,0.0162631}
,
{-0.000259772,-0.058731,0.0113326,-0.0377482,-0.0583683,0.0360794}
,
{-0.0624955,-0.123737,-0.0393913,0.0955662,0.0944171,-0.177792}
,
{-0.131547,0.451065,0.436167,-0.297352,-0.886556,-1.38641}
,
{-0.175453,0.465212,0.494902,-0.476918,-1.14306,-1.31008}
,
{-0.0731217,0.624868,0.446226,-0.199526,-0.85324,-1.30398}
,
{0.0421825,0.0544178,0.0861248,-0.400351,0.102242,0.00779489}
,
{-0.260941,0.118849,-0.0448103,-0.0547068,0.0586333,0.811162}
 };
  static const float bias2[1] = { 0.48016 };
  static const float weights2[][1] = { {-0.112399}
,
{0.0131137}
,
{0.0211524}
,
{-0.0192157}
,
{0.0202922}
,
{0.0339956}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_58(v, index);
}
static int assign_gen_lepton_prior_10_1_58() {
  global_gen_lepton_prior.at(10,1,58) = &specialized_gen_lepton_prior_10_1_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_58 = assign_gen_lepton_prior_10_1_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.411257,-0.416372,-0.361586,0.0339075,-0.050764,-0.163974 };
  static const float weights1[][6] = { {0.398235,-0.111032,-0.226825,-0.172989,-0.0292015,-0.0441357}
,
{-0.058416,-0.648578,0.0655075,-0.0421759,0.379322,0.0492833}
,
{-0.179827,-0.396784,-0.129642,0.484728,0.0349936,-0.183797}
,
{-0.790167,-0.777717,-1.08639,0.715437,0.219533,0.188854}
,
{-0.337779,-0.296448,-0.253268,0.072829,-0.155944,-0.266811}
,
{-0.261792,-0.231276,-0.1823,0.237361,0.0158537,0.0264446}
,
{-0.384875,-0.319447,-0.307306,0.20759,0.0277311,-0.158824}
,
{0.0727907,0.00184507,-0.133865,0.355808,-0.0458412,-0.107729}
,
{0.735877,0.601699,0.484034,-0.363564,0.452781,0.356989}
,
{-0.0230489,0.245499,-0.0441242,-0.139088,-0.227885,-0.116653}
,
{-0.110138,-0.0217809,-0.0814657,0.020757,0.0867479,0.131725}
,
{0.00989268,-0.0514713,0.0597578,0.164239,0.13748,-0.14632}
,
{-0.240051,-0.0315151,-0.100269,0.118719,-0.0974417,0.0943452}
,
{0.0765357,0.260581,0.140796,0.331113,0.532267,0.312666}
,
{0.0169799,0.045649,0.0584462,-0.0564499,0.137667,0.119808}
,
{0.406772,0.046013,0.404966,0.170651,0.17351,0.123508}
,
{0.612873,-0.0243646,0.272648,0.182552,0.0735828,0.0288855}
,
{-0.0424096,0.0478797,0.0239616,-0.157259,-0.0066855,0.264883}
,
{-0.00470568,-0.0515587,-0.0332416,-0.0399548,-0.0115118,0.0941502}
,
{-0.095045,-0.14879,0.0762335,0.0262427,0.194143,0.0453203}
,
{-0.301691,0.0363448,0.125038,0.0944231,-0.0436167,0.0377539}
,
{-0.08869,-0.211962,-0.307057,0.05075,0.119303,-0.0912511}
,
{-0.223624,-0.079726,-0.0120504,0.00648643,0.00643331,-0.157718}
,
{-0.0100275,0.0575771,-0.132975,-0.0875108,0.0766644,0.0677741}
,
{-0.0404167,0.0420761,0.14298,-0.121738,-0.0571959,0.0205346}
,
{-0.104416,0.0443634,0.0473522,-0.0481995,-0.0858553,0.0296476}
,
{0.0284128,0.103776,-0.18169,0.0115743,-0.0176594,0.0154266}
,
{0.102197,-0.089686,0.0504692,0.0222264,0.0572667,-0.103442}
,
{-0.0896671,0.0485567,0.0152232,-0.0606431,0.452028,0.0953255}
,
{-0.0117649,0.0606175,0.214587,0.0449424,0.0867461,0.136956}
,
{0.0132012,-0.0880359,0.0691847,-0.00530451,-0.114051,0.12349}
,
{0.0898248,0.427791,-0.458175,0.256826,-0.0485597,-0.0770764}
,
{-0.00577238,0.155653,-0.025262,-0.0224892,0.142879,-0.129679}
,
{0.137261,-0.0780958,0.193011,0.183107,-0.105866,-0.195429}
,
{0.259979,-0.0114483,-0.111454,0.232761,-0.195287,0.120078}
,
{0.148703,-0.107747,-0.100183,0.0648153,-0.139491,0.156436}
,
{-0.452384,0.00757321,0.0602956,0.215407,-0.0524747,-0.0764655}
,
{-0.0137482,0.0052883,0.060769,0.0232463,-0.0728492,0.0517582}
,
{0.0510254,-0.0699936,0.030468,0.282586,-0.236188,0.186661}
,
{0.0940759,-0.00973229,0.0522942,-0.035273,0.214659,-0.221969}
,
{-0.0469385,0.046905,-0.0264966,-0.132028,0.000858906,0.083654}
,
{0.0905821,-0.287196,0.0843947,-0.108712,-0.00578046,0.0572716}
,
{0.00631991,0.0553383,-0.0316383,0.0306482,0.0128349,-0.0321208}
,
{-0.15378,0.179943,0.00525806,0.190463,-0.00128173,-0.19196}
,
{0.0509176,0.0600067,-0.0996476,-0.137251,0.032232,-0.117218}
,
{-0.0120802,-0.0518868,0.0202618,0.164408,-0.0135824,0.100501}
,
{0.0496608,-0.0441052,0.0470139,-0.063898,0.0354653,-0.0179488}
,
{-0.0241476,-0.0256737,0.00349904,0.00330213,-0.0445177,0.0475353}
,
{0.158831,-0.0263185,0.0184866,-0.0540272,0.0994388,-0.0648977}
,
{-0.0585563,-0.0492136,-0.112338,-0.0426207,-0.114453,-0.150686}
,
{-0.00405046,-0.085096,-0.0768804,0.138928,0.0260903,0.232363}
,
{0.0474013,-0.24306,0.245495,-0.108245,-0.0933227,0.0858469}
,
{0.00837597,-0.0145966,0.0462915,-0.039388,0.0267145,0.00240812}
,
{-0.158938,-0.246211,0.124934,0.0124852,-0.0910549,0.144105}
,
{0.00721238,0.0809519,-0.0660956,0.00557746,-0.144137,0.13632}
,
{0.036624,-0.0286676,-0.0478462,-0.0233339,0.108952,0.0319658}
,
{0.0239913,-0.0615256,0.102082,0.0834474,-0.00798643,-0.198599}
,
{0.0271031,0.174249,0.124075,0.0852699,0.0093961,0.0181591}
,
{0.125627,0.321467,-0.363336,1.02298,-0.0652724,-0.0594146}
,
{0.041425,-0.113067,-0.147523,0.0182127,-0.0168832,-0.147859}
,
{-0.131328,-0.0952583,-0.0454848,0.0862923,0.0752922,0.0578693}
,
{0.0477764,0.159395,0.0892617,0.0344311,-0.0163002,0.102967}
,
{-0.0416393,-0.019,0.175851,-0.211492,0.110124,-0.125017}
,
{-0.0040302,0.0672547,-0.751156,0.67167,-0.0069137,0.319035}
,
{-0.106956,-0.070987,0.0289448,-0.110319,-0.104873,-0.0584086}
,
{-0.0150817,0.0241168,-0.124984,-0.00953731,-0.00167155,0.0349475}
,
{0.127495,0.0858335,-0.003809,0.0946309,0.158872,-0.00242485}
,
{0.100599,-0.304037,0.063232,-0.215697,0.152202,-0.114097}
,
{-0.0118933,-0.142036,0.236727,0.672104,0.212483,-0.0940862}
,
{-0.122042,-0.0765072,-0.0711976,-0.0786806,-0.0133701,0.119399}
,
{0.0990989,-0.101127,-0.076221,-0.0252423,-0.0019093,0.0382019}
,
{0.0760468,0.119691,0.17029,0.0952491,-0.00997194,-0.143002}
,
{0.0557948,0.500271,0.0950585,0.217786,-0.0776752,-0.0640277}
,
{0.240455,-0.258648,0.16723,-0.205844,-0.116286,0.0166608}
,
{-0.313536,-0.89893,-0.00444808,-0.259961,0.892978,0.331846}
,
{-0.0465585,-0.916268,-0.0948811,-0.172068,0.827854,0.277091}
,
{-0.100402,-0.952626,-0.102758,-0.444569,0.919134,0.130182}
,
{0.758643,1.20083,1.34416,0.600876,1.48952,1.20415}
,
{0.801643,0.313827,-0.798034,0.7903,0.0784168,0.110494}
 };
  static const float bias2[1] = { -0.0929319 };
  static const float weights2[][1] = { {0.133614}
,
{0.0582621}
,
{0.037779}
,
{0.0308309}
,
{0.0461483}
,
{0.0428651}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_59(v, index);
}
static int assign_gen_lepton_prior_10_1_59() {
  global_gen_lepton_prior.at(10,1,59) = &specialized_gen_lepton_prior_10_1_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_59 = assign_gen_lepton_prior_10_1_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_60(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.783218,-0.15111,-0.102095,-0.172174,-0.231417,0.0598097 };
  static const float weights1[][6] = { {0.247913,-0.056215,0.0568627,0.0363161,-0.232906,0.210098}
,
{-0.0786707,-0.605269,0.0470473,0.0993275,-0.164893,-0.00222459}
,
{0.187333,-0.229679,-0.173056,0.226699,-0.126929,-0.198746}
,
{0.347778,0.0634607,-0.786695,-0.12668,-0.567344,-0.0530471}
,
{0.97543,-0.325581,0.0200445,-0.229033,-0.421954,0.0789542}
,
{0.864162,-0.27962,-0.189223,-0.0529222,-0.094935,-0.0934277}
,
{0.669917,-0.250901,0.00669678,-0.139477,-0.203815,0.233014}
,
{-0.0743302,0.0129389,-0.0870573,-0.16119,0.0449105,-0.06119}
,
{0.129173,-0.590284,-0.126932,0.60384,0.264909,0.0285389}
,
{0.144303,0.0469299,-0.0266693,-0.173394,-0.00609955,0.0590078}
,
{0.0603073,-0.0465255,-0.0632879,0.0130282,0.0112149,-0.00661892}
,
{0.107881,0.206596,-0.171193,0.176747,-0.0201334,0.12549}
,
{-0.0314804,-0.141623,0.109585,-0.142133,-0.0153009,-0.104801}
,
{-0.122251,0.10829,-0.424485,0.415211,0.187324,-0.139544}
,
{-0.108114,-0.067591,-0.221685,-0.193736,0.0675306,0.085532}
,
{-0.254987,0.133303,0.106867,0.0382417,0.209448,-0.0120058}
,
{-0.319502,-0.0215213,0.140197,0.0728189,0.309305,0.236512}
,
{0.130316,0.00436961,-0.115785,0.0238379,0.0921448,0.447568}
,
{0.007661,0.00129626,-0.249355,-0.136557,0.142633,-0.299567}
,
{-0.14027,-0.0462137,0.0732103,0.131818,-0.018678,-0.253154}
,
{-0.0370934,0.0709212,0.0310178,0.0116888,0.068781,-0.360686}
,
{0.0506571,0.032965,0.095475,0.17499,-0.149516,-0.0699467}
,
{0.0127328,0.0426432,0.0902958,0.218897,-0.190886,0.182015}
,
{-0.0210319,-0.230139,0.105624,0.115881,-0.0935842,0.0219672}
,
{0.110965,0.0590932,-0.0731347,0.0161994,-0.137912,0.10984}
,
{0.144442,0.0524306,0.246932,-0.000444348,-0.211831,0.0898264}
,
{0.0474146,0.0142297,0.062129,-0.127486,-0.0388361,0.0260197}
,
{0.129063,-0.000184877,0.0208636,-0.0820739,-0.0582594,0.104366}
,
{0.271864,0.0929389,0.0917592,0.0167553,0.158299,0.0792542}
,
{0.128639,0.0602036,0.0339818,-0.1182,-0.173799,0.0135014}
,
{-0.0618731,0.0451145,-0.104292,0.103544,0.181504,-0.0798945}
,
{-0.119208,-0.0351553,0.00672043,-0.034063,-0.113472,-0.153609}
,
{0.00822614,-0.0902781,0.0258549,0.152955,-0.132995,-0.153373}
,
{-0.131345,0.202534,0.0688288,-0.190199,-0.102956,0.182352}
,
{-0.0249635,0.132115,0.0470975,-0.0333411,0.142542,0.0121217}
,
{0.0825695,-0.111855,0.0044073,-0.041586,0.0209043,-0.0499259}
,
{-0.101789,-0.00250219,0.0316972,-0.0612048,-0.0595806,0.233715}
,
{-0.0126222,-0.000699183,0.00280922,0.0186262,-0.0530601,-0.0763504}
,
{0.00776768,0.200483,0.0481234,0.137259,-0.164304,0.0438587}
,
{-0.0410218,0.13637,0.0531555,-0.0128245,-0.124804,-0.0171248}
,
{0.0644101,-0.0162223,0.0264305,0.0988911,0.0108951,0.0487552}
,
{0.0215874,0.0367966,0.10915,0.0934136,-0.0671705,-0.0344052}
,
{-0.0139734,-0.0523239,0.0381379,0.0250267,-0.0224552,0.0809766}
,
{0.0863954,0.183114,-0.10815,-0.0225107,0.0182659,-0.353011}
,
{0.000213687,-0.013582,0.109673,0.141474,0.0294581,0.010822}
,
{0.00254689,-0.0597836,-0.037825,-0.0688671,-0.0751982,-0.0640449}
,
{-0.0245651,0.244683,0.276488,0.162256,-0.115365,0.171403}
,
{0.00947535,0.0454224,-0.023284,0.0109283,-0.0314757,0.0727705}
,
{-0.073238,-0.242246,0.0923321,-0.0800588,0.124278,0.118084}
,
{0.0974287,-0.119526,-0.109961,-0.125244,0.0821271,0.312298}
,
{-0.144068,0.0496416,0.0437142,0.0360982,0.0214131,0.0890451}
,
{0.047494,-0.199764,-0.0401006,0.11381,-0.129514,-0.262269}
,
{0.0154819,-0.0115294,0.0388791,0.042149,-0.00920838,0.0427534}
,
{-0.0142299,-0.077579,0.121472,0.0811106,-0.00410795,0.110842}
,
{-0.126592,0.105036,0.108029,0.136039,-0.19662,0.0614627}
,
{0.0158484,-0.0809833,0.00271611,-0.125168,0.0904829,-0.0309434}
,
{-0.120501,-0.011572,-0.148943,0.00111284,0.0831708,0.122799}
,
{0.0714763,-0.019007,0.128413,-0.00445293,-0.0593313,-0.153524}
,
{0.0220639,-0.151659,0.0687403,0.128491,-0.025218,0.220564}
,
{0.165844,0.0655585,-0.196217,-0.02516,-0.0365657,-0.0853303}
,
{0.0647026,-0.232552,0.0641195,0.0470784,-0.118443,-0.0427403}
,
{-0.146829,0.00878326,-0.167106,-0.164787,0.0703543,0.0636238}
,
{-0.00826409,-0.167622,-0.10063,0.00272399,0.0357433,0.182628}
,
{0.069233,-0.210141,0.0146354,-0.0367842,0.185907,0.146876}
,
{-0.0126505,-0.122479,-0.0220718,-0.177749,0.0586714,-0.12135}
,
{0.100865,-0.127039,-0.0536785,0.0125449,-0.0346236,-0.0269514}
,
{0.0737456,-0.140429,-0.01339,-0.0239629,-0.0146668,0.216083}
,
{0.0654736,-0.0119678,-0.151509,0.0758678,0.0280681,0.134562}
,
{0.0326471,-0.0760687,0.119837,-0.0549324,-0.080151,0.0540142}
,
{-0.111669,-0.0150151,-0.0527542,0.0914044,0.146267,-0.0555454}
,
{-0.0153306,0.222638,-0.071223,0.196678,0.0558592,0.0180199}
,
{-0.0223879,-0.159028,0.188541,0.0141926,-0.124954,-0.0257568}
,
{0.0255472,-0.144135,-0.180943,0.0591723,0.0738105,0.152155}
,
{-0.184203,-0.133475,0.122593,-0.189308,-0.231761,-0.0537341}
,
{0.168101,-0.034137,0.0151835,0.149794,0.0150145,0.096395}
,
{0.0827211,0.12778,0.060998,-0.0674148,0.0092149,-0.127581}
,
{-0.0865458,-0.123703,-0.0371857,-0.0768654,-0.0571896,0.170409}
,
{-0.0456612,-0.1095,0.247419,0.0933914,-0.0537978,0.094208}
,
{-0.179035,-0.038756,0.0299186,0.137995,0.0169204,0.178304}
 };
  static const float bias2[1] = { -0.0471635 };
  static const float weights2[][1] = { {-0.155869}
,
{-0.242963}
,
{-0.0650464}
,
{0.0824283}
,
{0.10145}
,
{-0.42679}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_60(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_60(v, index);
}
static int assign_gen_lepton_prior_10_1_60() {
  global_gen_lepton_prior.at(10,1,60) = &specialized_gen_lepton_prior_10_1_60;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_60 = assign_gen_lepton_prior_10_1_60();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_61(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.239068,-0.147556,0.129561,-0.0233281,-0.157571,-0.0145193 };
  static const float weights1[][6] = { {-0.171662,-0.0756679,0.136595,0.246683,0.0992641,-0.00686976}
,
{-0.000143203,-0.0484533,-0.799283,-0.135833,-0.190562,-0.202593}
,
{0.048313,-0.111372,0.383952,0.0191078,-0.10329,-0.0367472}
,
{-0.505912,-0.302434,0.110035,-0.0841584,-0.784359,0.262313}
,
{-0.450412,0.0316901,0.205718,-0.116722,-0.223727,0.0380872}
,
{-0.176055,-0.206038,0.179277,0.157307,0.126852,0.064673}
,
{-0.218712,-0.250739,0.198364,0.0398381,0.186491,0.002521}
,
{-0.11953,0.33212,0.200397,0.14809,-0.0109904,-0.0663067}
,
{0.329079,-0.181007,-0.204574,0.0290208,-0.334407,-0.126672}
,
{0.0483175,0.198601,0.219985,0.130816,-0.00931092,0.192786}
,
{0.195216,0.042745,0.23404,-0.0170685,-0.0559451,-0.00302341}
,
{-0.0455839,0.152361,-0.190362,-0.148148,-0.124492,0.0658451}
,
{-0.0328983,-0.232995,-0.033047,0.0386139,-0.0151359,-0.0155146}
,
{0.238452,-0.00738503,-0.0541351,-0.202542,0.0718945,-0.0147527}
,
{-0.0912445,0.0323961,-0.0960125,-0.148549,-0.0725599,-0.0956382}
,
{0.319374,-0.186216,-0.556048,-0.18695,0.0966814,-0.230942}
,
{0.698246,0.0494146,-0.408076,0.149211,0.021407,-0.0860044}
,
{0.030918,-0.146393,-0.0573091,0.0723342,-0.360568,-0.0443681}
,
{-0.024727,0.0216447,-0.355129,-0.205506,0.00844273,0.0567105}
,
{0.100561,0.0288355,-0.205229,-0.0247068,0.126698,-0.109452}
,
{-0.00403753,0.102942,0.00123625,-0.119639,-0.0912738,-0.0526504}
,
{-0.0424016,0.0460633,0.13512,-0.0222353,-0.115514,-0.0202357}
,
{-0.0327784,-0.0471048,-0.170568,0.180234,-0.0229601,-0.0176025}
,
{-0.0289591,0.0745322,0.0155569,-0.0670929,0.0139145,-0.139398}
,
{-0.202502,-0.14212,-0.00171995,0.186359,0.0366942,-0.0109471}
,
{-0.0200871,-0.0628103,-0.0891474,0.00153142,0.0865983,-0.181007}
,
{-0.0348527,-0.184021,-0.101488,0.156079,0.111675,-0.116243}
,
{-0.0603422,0.00744539,-0.00706274,-0.183172,-0.0707529,0.0642834}
,
{0.0386116,-0.00311428,0.0821275,-0.0825095,-0.0785042,0.0903077}
,
{0.0596782,-0.0229573,0.0469399,-0.234089,0.210896,-0.153884}
,
{-0.0865997,0.0742672,-0.0346088,0.00475499,-0.188353,0.116397}
,
{0.0869706,-0.0305609,0.0582671,0.348734,0.00330328,-0.0318813}
,
{0.131363,-0.308778,-0.0177228,-0.0577084,0.0452264,0.0235958}
,
{-0.115166,-0.104727,-0.0198187,0.14542,-0.0650013,0.0108252}
,
{-0.197515,0.479766,-0.186985,0.02182,-0.0128621,0.011983}
,
{-0.147058,0.296828,-0.289013,-0.0114264,-0.145611,-0.0654606}
,
{-0.127489,0.291039,0.512522,-0.217142,-0.143853,-0.0738371}
,
{0.0568157,-0.147409,0.0599582,0.0614894,0.0492082,-0.171866}
,
{-0.164602,0.161388,0.316517,-0.209988,-0.0913791,-0.0233533}
,
{-0.0333291,0.24327,-0.0357093,-0.27554,0.00231494,-0.0148404}
,
{-0.130682,0.0272006,0.339507,-0.0549281,-0.0392795,-0.277693}
,
{-0.0171614,0.0456059,-0.120303,0.0469926,-0.140403,-0.173599}
,
{-0.0530593,0.133929,0.0991262,0.0125889,0.0228912,-0.128363}
,
{0.0460242,-0.228672,-0.140274,0.00801998,0.0932233,0.0639052}
,
{-0.0118663,0.114326,-0.00305761,-0.0461013,-0.071803,-0.00130933}
,
{-0.00333129,-0.0135959,-0.0925274,-0.00531178,0.145538,-0.172586}
,
{-0.0603677,-0.0293716,0.0429727,0.375734,-0.117657,0.122062}
,
{-0.0277422,0.0708584,0.0798265,-0.115369,-0.029067,-0.070983}
,
{-0.0393892,0.0337567,0.0490571,-0.0105845,-0.292818,0.093662}
,
{-0.0459159,-0.0907763,-0.179925,-0.114425,0.117148,-0.0310674}
,
{0.0401894,0.130014,0.00707746,-0.0981819,-0.0243543,0.147969}
,
{0.00182566,-0.00711667,-0.0637156,-0.120353,0.201377,-0.203582}
,
{0.003485,0.00494556,-0.0361612,-0.0297078,-0.0295176,0.0473262}
,
{0.226946,-0.548658,-0.144424,-0.0448196,0.257221,-0.283914}
,
{0.0692411,0.137895,-0.0538398,0.0117349,-0.0319257,0.124279}
,
{0.0678515,0.00207508,-0.0133803,0.10134,-0.00168731,0.0446661}
,
{-0.0593011,0.0697591,-0.0383132,0.216067,-0.152124,0.0657933}
,
{-0.172865,-0.0330737,0.0843407,0.175892,-0.0221582,-0.072778}
,
{0.0110873,0.10207,-0.0338124,0.212798,0.145135,0.173645}
,
{-0.191773,0.059388,-0.0799218,0.0745363,0.110587,0.0329525}
,
{-0.0508108,0.123932,-0.0931798,0.0381545,0.117649,-0.0468348}
,
{-0.0786967,-0.0157938,0.00235934,-0.109354,-0.137352,0.036662}
,
{0.115423,0.0324344,0.112362,0.0631542,0.152906,-0.0330301}
,
{0.152364,-0.0781538,0.0958069,0.150751,0.0386853,0.00902405}
,
{0.114859,-0.169085,-0.0250642,-0.221759,0.14815,-0.0587513}
,
{-0.0578657,-0.080443,-0.0263945,0.0633999,0.104076,-0.0874086}
,
{-0.0166342,-0.106124,0.0325477,-0.203626,-0.0703256,0.0928106}
,
{0.0727073,0.076087,0.0282342,0.100621,0.103991,0.0895349}
,
{0.113062,-0.179539,-0.139932,-0.0738567,-0.0242029,-0.180176}
,
{0.0437991,0.207835,-0.0357744,-0.0370003,-0.00210483,0.175331}
,
{-0.123918,-0.174383,-0.111116,-0.144673,0.0796229,-0.0437229}
,
{0.121764,-0.134873,-0.0619878,0.0472664,-0.123887,0.0927996}
,
{0.108166,0.128598,0.179428,0.00719707,0.0373139,0.00683577}
,
{-0.0591299,-0.00304327,0.0901993,-0.124507,-0.0477625,-0.126582}
,
{-0.012557,0.0111896,-0.0652738,0.005623,0.0394601,-0.0640926}
,
{0.00578663,-0.24239,-0.0707173,-0.0832107,-0.0612244,-0.0861774}
,
{0.219889,-0.0920573,0.0376688,-0.0896006,0.0529081,0.00151329}
,
{0.0688142,0.0660484,0.0719218,0.0976794,0.219452,-0.00671013}
,
{-0.0421052,0.0681698,-0.0411221,-0.238713,-0.0356122,-0.161879}
 };
  static const float bias2[1] = { -0.218395 };
  static const float weights2[][1] = { {0.157941}
,
{0.0903562}
,
{-0.986201}
,
{-0.389789}
,
{-0.21779}
,
{-0.392757}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_61(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_61(v, index);
}
static int assign_gen_lepton_prior_10_1_61() {
  global_gen_lepton_prior.at(10,1,61) = &specialized_gen_lepton_prior_10_1_61;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_61 = assign_gen_lepton_prior_10_1_61();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_1_62(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.109588,-0.459329,0.113448,-0.0100029,-0.499791,-0.254535 };
  static const float weights1[][6] = { {0.141607,-0.150654,-0.0878042,0.0873061,0.0239441,0.189755}
,
{0.0200386,0.121985,0.141859,0.154575,-0.0105253,-0.0666824}
,
{0.0399049,-0.243255,0.100206,0.0822906,0.0197306,-0.107223}
,
{0.39837,-0.323133,-0.00700538,0.328131,-0.986674,-1.0491}
,
{0.121618,-0.649168,0.142047,0.157891,-0.288014,-0.295156}
,
{-0.00693414,-0.210638,-0.0168384,0.0217661,-0.464008,0.0359022}
,
{0.203126,-0.296011,0.170201,-0.22948,-0.253568,-0.148908}
,
{-0.0992823,-0.205949,0.405977,0.131157,0.0248163,0.114395}
,
{-0.3267,-0.0574223,-0.247823,-0.168759,0.250536,-0.101446}
,
{-0.168596,0.0738256,-0.0178324,-0.179142,0.0980987,-0.0544734}
,
{0.0403716,0.235906,-0.232425,0.0228696,-0.227595,0.0738875}
,
{0.0517485,-0.041149,0.130437,-0.20749,-0.0426818,-0.0259181}
,
{0.304241,-0.132203,0.019261,0.308413,0.0420785,-0.152247}
,
{0.0809004,0.310481,-0.14376,-0.0985729,0.288832,0.0361064}
,
{-0.0205243,0.126333,0.0979902,-0.0863158,0.18494,-0.21565}
,
{-0.491113,-0.123143,0.330136,-0.426524,0.0390983,-0.117882}
,
{-0.179112,-0.169982,0.306411,-0.255481,0.187231,0.0693368}
,
{-0.0216532,0.164112,-0.0259853,0.258755,-0.0828954,-0.0463651}
,
{0.0153059,0.146639,0.118176,0.161443,-0.0062122,0.246904}
,
{-0.128096,0.134529,-0.0460293,0.00278375,-0.0130521,-0.00646554}
,
{0.00534168,-0.0497893,-0.00935173,-0.210982,0.0476033,-0.0160172}
,
{0.00217452,0.0042033,0.0222701,0.092062,-0.0376537,-0.0198082}
,
{0.017649,0.119515,-0.127347,0.138577,-0.0915483,-0.118012}
,
{0.037757,0.0526878,-0.0506572,-0.15809,0.00313333,0.0231294}
,
{-0.00935054,0.0895939,0.0349949,0.107108,-0.178132,0.129898}
,
{-0.0129294,0.0599358,0.064701,-0.0278541,0.187098,0.104908}
,
{0.119303,0.0638114,-0.116169,-0.146825,0.018116,0.0430638}
,
{0.190363,0.0678821,-0.0909236,0.0947297,-0.0203819,-0.0835245}
,
{0.0303918,-0.123757,-0.00946683,-0.0652111,-0.166118,-0.15188}
,
{0.00347348,0.0500767,-0.0311041,0.225082,-0.0441005,-0.105477}
,
{-0.139902,-0.154769,-0.0714724,-0.106498,-0.0233375,-0.0336805}
,
{-0.0643333,-0.009916,0.0470925,0.0303203,-0.0262785,-0.0315023}
,
{-0.0454241,-0.293923,-0.212375,-0.14272,0.138165,-0.109817}
,
{-0.105593,-0.0142037,-0.119992,0.0876845,0.125287,-0.216191}
,
{-0.0955892,0.0839853,0.456556,0.032342,-0.185898,0.00810836}
,
{0.175975,0.201093,0.090085,0.0952552,-0.113714,0.0951205}
,
{-0.0433735,0.591492,-0.0100084,0.370632,-0.244309,-0.00400131}
,
{0.0149703,0.254215,-0.107753,0.112836,-0.0647184,0.02659}
,
{-0.0223034,0.0679055,0.204598,0.136752,-0.0535448,0.24662}
,
{0.00911113,-0.00873615,-0.0429455,-0.0299906,-0.0148759,-0.106494}
,
{0.0557763,-0.0639358,-0.258504,-0.211831,0.118152,-0.126774}
,
{-0.0523422,-0.0401718,-0.221159,-0.0289425,0.054182,-0.172709}
,
{0.133938,0.130767,-0.0303555,0.026732,-0.00903573,0.056284}
,
{0.0806287,0.277796,0.19626,0.0158685,-0.124705,0.223378}
,
{0.0627377,-0.0607247,0.0178384,0.0589295,-0.172595,-0.0140848}
,
{-0.315104,-0.00986148,0.193791,0.164618,0.119521,0.0668044}
,
{0.0360302,0.0956361,-0.581029,0.383106,0.105499,-0.289995}
,
{-0.0997654,-0.0887906,0.0520822,0.0421316,0.0222423,-0.0226674}
,
{0.00500989,-0.252627,0.033155,-0.315217,0.223827,0.13469}
,
{-0.137196,0.254042,-0.0944598,0.248227,-0.114309,0.0323126}
,
{0.142042,0.22785,-0.234439,0.262221,0.000405299,-0.0289332}
,
{-0.116546,0.320398,-0.569939,0.057622,-0.113151,-0.243746}
,
{0.0101041,-0.0333315,0.065364,0.0346828,0.0244008,0.0144557}
,
{0.406109,0.280566,-0.118685,0.423116,-0.0986085,-0.330132}
,
{-0.0532401,-0.154891,-0.112694,-0.0516072,0.14832,-0.123365}
,
{0.15624,0.209977,-0.0590876,-0.140047,-0.0690858,0.114435}
,
{-0.098365,0.049282,-0.0284795,0.160534,0.161517,0.105293}
,
{0.065721,-0.0183614,-0.0299631,0.0845637,0.0391481,0.054389}
,
{-0.0422926,0.0423678,0.172572,-0.0247683,-0.101033,-0.12064}
,
{-0.0567894,0.110829,-0.012913,0.0845086,0.00637203,-0.13377}
,
{-0.0278537,-0.138193,0.00692447,-0.0476291,-0.0179809,-0.0185292}
,
{-0.0519197,-0.0872013,0.065546,0.0338906,-0.0726493,0.179678}
,
{-0.0229852,0.00304652,0.0222098,-0.228855,-0.0341432,-0.00815115}
,
{-0.0803924,-0.0953843,-0.20904,0.195364,-0.0297411,0.0596565}
,
{0.0772483,0.149573,-0.0328533,0.187299,-0.0897353,0.113321}
,
{0.0172086,0.206028,0.0523897,0.174586,-0.00607381,-0.134101}
,
{-0.104863,-0.0207354,-0.057036,0.0181669,0.108267,0.063671}
,
{-0.0023858,-0.100872,0.129004,-0.013246,-0.0294365,-0.0335585}
,
{0.0416853,-0.114943,-0.119331,-0.0888508,0.145265,-0.0422514}
,
{-0.0746659,0.108941,0.0404117,-0.0647564,0.125635,0.0124985}
,
{-0.072589,-0.12451,-0.0888275,0.0453956,-0.157925,0.022172}
,
{-0.0654245,0.0979482,0.0310192,0.122891,0.125791,0.0420479}
,
{0.109126,-0.045544,-0.0909814,0.113824,0.00882296,-0.117474}
,
{-0.0676618,0.0519302,-0.115947,-0.0301374,0.170131,-0.132665}
,
{-0.0511335,0.0972181,0.179777,0.0508196,0.111579,-0.0640029}
,
{-0.167944,0.124854,-0.0638502,0.243306,-0.103463,0.00112187}
,
{0.0580309,-0.0083123,0.0454932,-0.104694,0.0192894,-0.120222}
,
{0.0657274,-0.0172788,-0.131607,0.0982942,0.0233455,-0.0506819}
,
{0.0906109,0.076139,-0.0122238,0.123183,-0.0668499,0.0541755}
 };
  static const float bias2[1] = { -0.274047 };
  static const float weights2[][1] = { {-0.372862}
,
{0.119425}
,
{0.202753}
,
{-1.95123}
,
{0.265865}
,
{-0.246008}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_1_62(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_1_62(v, index);
}
static int assign_gen_lepton_prior_10_1_62() {
  global_gen_lepton_prior.at(10,1,62) = &specialized_gen_lepton_prior_10_1_62;
  return 0;
}
static int initialize_gen_lepton_prior_10_1_62 = assign_gen_lepton_prior_10_1_62();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_5(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0247409,-0.144038,0.00435537,-0.000556307,-0.0724812,0.0306736 };
  static const float weights1[][6] = { {0.0779973,-0.0112052,-0.105366,0.274862,-0.055098,-0.276429}
,
{-0.249652,-0.138295,0.240729,0.173101,-0.25382,0.00409377}
,
{-0.427766,0.0627248,-0.151208,0.103534,-0.788087,0.183662}
,
{-0.109328,0.503714,0.803026,-0.197024,-0.0703015,0.89225}
,
{0.0811639,-0.113705,-0.110584,-0.0184606,-0.0423542,0.161438}
,
{0.0939462,0.0126969,-0.203131,-0.0906539,0.0042265,0.0154669}
,
{-0.135865,-0.300549,0.0677654,0.0623655,0.144349,-0.0388426}
,
{-0.175703,0.261671,-0.0809412,0.137988,-0.071413,-0.0902179}
,
{0.219566,0.608359,0.174982,-0.1957,-0.0105069,0.180846}
,
{-0.0480756,-0.0163984,-0.00651929,0.0451018,-0.133453,-0.0302152}
,
{0.0975666,0.0398672,0.0565285,0.0427037,0.108667,0.14633}
,
{0.0310391,0.0902104,0.0836279,-0.0572506,-0.0678384,-0.149061}
,
{0.0363655,-0.205154,0.00419741,-0.0153771,0.0390418,0.162731}
,
{-0.144729,-0.522573,-0.113909,0.00577321,-0.0689474,0.0890416}
,
{0.0656087,0.11788,-0.0968166,-0.00859466,-0.102209,0.0513767}
,
{-0.0807294,-0.0788044,-0.00179216,-0.049992,0.248122,-0.0106193}
,
{-0.206318,0.00264875,0.166629,-0.187138,-0.194149,0.413066}
,
{0.0893119,-0.145655,-0.00237937,-0.0652564,-0.0551819,0.0145891}
,
{-0.389069,0.139892,-0.20379,-0.0484682,0.11092,-0.0340847}
,
{-0.00519436,-0.268289,0.123292,0.0649581,-0.0473697,0.121873}
,
{0.0295323,-0.0487223,-0.106455,0.134169,0.0441529,0.201276}
,
{-0.182971,0.10839,0.0910643,0.0959218,-0.053344,0.119231}
,
{-0.118847,-0.0455779,-0.1148,-0.0718507,0.00577393,-0.0025103}
,
{-0.0453677,-0.235645,-0.0157768,0.140191,0.137327,0.122713}
,
{-0.00645295,-0.115801,-0.152523,0.202796,0.0130433,-0.185262}
,
{-0.00428162,-0.119931,0.0684154,0.163919,-0.0812636,-0.0705064}
,
{-0.0393475,-0.174843,-0.0915557,0.0610041,-0.0684049,-0.024877}
,
{-0.137618,-0.0489255,0.00622494,0.076732,-0.156079,-0.206528}
,
{-0.0391834,-0.0942575,-0.205838,-0.0129956,0.0573101,-0.0564279}
,
{-0.0789056,0.0054058,-0.0179117,0.0568584,0.00305773,0.0348297}
,
{-0.146601,0.170517,-0.0406632,0.0570934,0.195925,0.0527321}
,
{0.0617387,-0.0597922,0.0657404,0.243386,0.00564827,-0.0097314}
,
{0.00406461,0.0643828,-0.0118304,-0.13985,-0.127738,-0.0437594}
,
{0.104132,-0.189568,0.221791,-0.1497,-0.217948,-0.0946292}
,
{0.0726087,0.0078198,0.0703973,-0.117334,-0.31723,-0.0878402}
,
{-0.158221,-0.0232554,-0.0581121,-0.00325397,-0.135206,0.0595129}
,
{0.255633,-0.167122,0.205708,-0.0298272,-0.265931,-0.131695}
,
{-0.125373,-0.0935265,0.0113057,0.104532,0.0899561,0.101377}
,
{-0.055877,0.205245,0.0220447,0.048879,0.317814,-0.042663}
,
{-0.291198,0.300167,0.0438172,0.0763294,-0.261983,0.117961}
,
{0.158626,0.205774,-0.162817,-0.155368,-0.0344546,-0.0786856}
,
{-0.0672018,0.0857391,-0.165493,-0.133914,0.0214855,-0.147918}
,
{-0.0195728,-0.280021,-0.130408,-0.0393981,0.00475031,0.02881}
,
{-0.330093,0.087516,-0.403947,-0.0402959,0.215766,0.160643}
,
{0.115043,-0.0938821,0.0553316,-0.0228619,0.180411,-0.105998}
,
{-0.0554649,-0.0104593,-0.0259564,0.0841199,0.0288293,0.10078}
,
{-0.0501212,-0.147494,-0.0967727,-0.0678042,-0.0795476,-0.0526999}
,
{0.159871,-0.120367,-0.0725828,-0.0347794,0.0378809,0.00760776}
,
{0.175867,-0.114658,-0.221254,0.0098719,0.0850194,0.0596386}
,
{-0.123983,-0.0720694,0.0428416,0.0452846,0.126208,-0.00667743}
,
{0.0496278,0.174038,0.097106,-0.0286143,-0.0388311,-0.0630557}
,
{0.191595,-0.496422,0.0186562,0.10878,0.192196,0.0639266}
,
{-0.0219681,-0.0657692,-0.127039,0.114002,0.0126954,0.177307}
,
{-0.768773,-0.230161,0.152432,0.051607,-0.191687,0.0209662}
,
{-0.0280583,-0.037604,0.0552909,0.0272927,-0.134207,-0.155705}
,
{0.0800504,0.179615,0.103104,0.158626,0.0808346,0.00171524}
,
{-0.0320671,-0.0778965,0.107648,0.0816917,0.0405072,0.0647011}
,
{-0.0570709,-0.0643101,-0.173186,-0.0488426,0.00129332,-0.106244}
,
{-0.105681,-0.0931974,0.0458613,-0.082359,0.159728,-0.0833095}
,
{-0.0783425,-0.0574527,-0.180745,0.0825741,-0.0406518,-0.0168096}
,
{0.0186149,0.12499,0.0636421,0.102211,-0.0358002,0.0327496}
,
{0.141534,0.0498545,-0.0849284,0.10551,0.181598,-0.0285041}
,
{0.0334338,-0.128401,-0.0757173,0.0930909,-0.00278986,0.0698366}
,
{-0.0323653,-0.0666252,-0.073193,0.0176769,0.142542,-0.0764667}
,
{-0.0321032,0.0753301,-0.0256056,-0.221461,-0.0880102,-0.0339089}
,
{-0.0343723,0.0215832,0.0584797,-0.0253807,-0.0777579,-0.0182871}
,
{0.159027,0.0345036,-0.119233,0.0493438,-0.189127,-0.0253718}
,
{-0.0805289,0.0869507,0.077147,0.257376,0.0963188,-0.00877134}
,
{-0.193208,-0.212104,-0.151708,-0.177138,0.0375997,0.214817}
,
{-0.0857077,-0.0669893,0.0989671,-0.227031,-0.0172552,-0.0165478}
,
{0.00182462,-0.0468238,0.0358602,0.000244989,-0.131013,-0.0365296}
,
{-0.134703,0.0747329,0.00396077,-0.0177024,-0.111769,-0.161584}
,
{-0.107132,-0.0646295,-0.0622824,-0.22981,0.143076,-0.0784808}
,
{-0.11698,0.138102,0.121978,-0.101508,0.0340691,0.148323}
,
{0.0785166,-0.0995115,0.000289527,-0.0791294,-0.0333615,-0.135855}
,
{-0.0754083,-0.243587,0.0936553,0.0358804,-0.0622019,0.152144}
,
{-0.0900223,-0.217597,-0.175237,-0.0774551,0.0720561,-0.186165}
,
{0.0182052,-0.190862,-0.108479,-0.0336571,0.0388315,-0.239908}
,
{-0.232242,0.028841,0.253649,0.0837968,0.342408,0.0179422}
 };
  static const float bias2[1] = { 0.0105514 };
  static const float weights2[][1] = { {0.134601}
,
{0.31661}
,
{0.0461156}
,
{-0.0768889}
,
{0.043407}
,
{0.0792919}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_5(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_5(v, index);
}
static int assign_gen_lepton_prior_1_1_5() {
  global_gen_lepton_prior.at(1,1,5) = &specialized_gen_lepton_prior_1_1_5;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_5 = assign_gen_lepton_prior_1_1_5();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_2_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.155245,-0.00293818,-0.405303,0.0457102,0.177907,0.898173 };
  static const float weights1[][6] = { {-0.735804,-0.863844,-0.828004,-1.22145,-1.26655,1.82614}
,
{0.192527,0.639234,-0.359012,0.461239,0.262789,0.450139}
,
{-0.356613,0.18863,-0.0750904,-0.118663,0.0144705,0.633472}
,
{0.257839,1.12209,0.0169683,0.533379,0.775381,0.881108}
,
{-0.192636,-0.136942,-0.388924,-0.0589979,0.147694,0.701125}
,
{-0.144108,-0.0506363,-0.289991,-0.17282,0.15046,0.800501}
,
{-0.31579,-0.0373835,-0.228258,0.0573561,0.268457,0.781955}
,
{-0.172709,-0.282361,0.922097,-0.46249,-0.25399,-0.00264342}
,
{0.230894,0.497849,0.341314,0.45315,0.0464859,-0.382476}
,
{0.0289777,-0.157839,0.209483,0.100885,0.182256,0.0376049}
,
{0.00202932,0.0887741,-0.106716,-0.136343,-0.171304,-0.148354}
,
{-0.140228,-0.223855,-0.00172462,-0.174426,-0.0184376,-0.146543}
,
{0.039619,-0.00973396,-0.0348565,0.435184,0.187326,0.361062}
,
{0.00741399,0.129837,0.0545243,0.381762,0.101333,-0.392578}
,
{0.0585712,0.0443932,0.0313888,-0.146996,-0.0550661,-0.0540108}
,
{0.304821,0.0706081,-0.0320913,0.138819,0.0598456,-0.381108}
,
{0.0236865,0.307687,0.143358,0.202082,-0.0322489,-0.519725}
,
{-0.0672706,-0.0994153,0.223435,0.163483,0.263014,0.297804}
,
{0.354443,0.139064,-0.0164981,0.292883,0.23718,-0.739867}
,
{0.189497,0.0879999,-0.149406,0.191686,0.105736,-0.319238}
,
{-0.0291835,-0.110093,-0.0723496,0.080976,0.0105483,-0.113094}
,
{-0.202656,-0.183267,0.0486599,0.0656455,0.0420393,-0.210547}
,
{-0.0933752,0.208191,-0.189708,-0.0429281,0.0997967,-0.042695}
,
{0.053086,-0.225807,-0.152913,0.0953814,0.140397,-0.279828}
,
{0.0651694,-0.0763478,0.0160182,-0.040215,0.00769497,-0.0278324}
,
{0.250195,0.000212801,-0.000271096,-0.0614796,0.0633021,0.0206914}
,
{-0.120495,0.0988621,0.106438,0.0514946,-0.17596,0.0336745}
,
{0.0742305,0.0127502,-0.0881761,0.0551184,0.130837,-0.0253333}
,
{0.681071,0.694906,0.395751,0.88147,0.645364,-0.375761}
,
{0.0429656,0.00797657,0.00144536,-0.121532,0.0225475,-0.0021186}
,
{0.0799705,-0.14115,-0.0846769,-0.0998386,0.141779,-0.0569443}
,
{0.032619,-0.288379,0.246734,-0.114226,0.180194,-0.117625}
,
{0.0405893,0.0186658,-0.0218421,-0.0687212,-0.0078588,-0.0603994}
,
{0.0476772,0.0444887,0.0771943,-0.189339,-0.0559454,-0.123491}
,
{-0.212928,0.189911,0.110902,0.0135184,0.213992,-0.011695}
,
{0.0345918,0.0284159,-0.0877407,0.00453686,0.180942,-0.0105174}
,
{0.0473794,-0.284091,0.0683369,0.150443,-0.129473,-0.104824}
,
{-0.0675431,0.110712,-0.0177377,-0.25064,-0.00208701,0.103842}
,
{0.15602,0.0831186,0.0367244,-0.0893426,-0.0553031,-0.0168918}
,
{0.045839,0.147622,-0.0274548,-0.0247788,-0.129765,0.0368091}
,
{-0.028718,-0.00681395,0.0577131,-0.0761261,-0.0165042,-0.0180814}
,
{-0.0925428,0.158036,-0.00611237,0.00331676,-0.0205878,-0.110351}
,
{-0.187589,0.00647679,-0.106487,0.115313,0.104608,-0.0708716}
,
{-0.0121206,0.0172969,0.0227689,-0.0269103,0.109515,0.188493}
,
{0.0806893,0.0453363,-0.103758,0.186413,-0.051565,0.084622}
,
{0.0105492,-0.199983,0.00182494,0.0533079,0.00741938,-0.0423073}
,
{-0.129008,0.187636,-0.0825622,0.0528255,-0.0609701,-0.110311}
,
{-0.00970184,0.0142976,0.144743,-0.226109,0.00382242,0.0342293}
,
{-0.0603156,-0.0616509,-0.0222706,0.00487842,-0.0240107,-0.068244}
,
{0.14563,0.0732243,-0.0334756,-0.129612,-0.106929,0.112844}
,
{-0.12854,0.0342011,-0.105996,-0.0966887,0.116567,-0.0826635}
,
{0.0280256,0.168398,0.0156638,-0.0129532,-0.0828946,-0.161573}
,
{0.0608431,-0.0478136,0.136784,0.145221,0.0925137,-0.0955983}
,
{0.0767068,-0.0916225,-0.0314949,0.116622,-0.128511,0.0514061}
,
{0.00858609,-0.136751,-0.125077,0.0532309,0.111687,0.0145942}
,
{0.023662,0.10384,0.0952093,-0.0505099,-0.161668,-0.0919432}
,
{-0.0675816,0.0649986,0.0383748,-0.0296187,-0.124861,0.0446608}
,
{0.0617611,-0.111588,-0.0355593,-0.042335,-0.128595,0.0994345}
,
{-0.05582,0.00243212,0.0109774,0.00899855,0.00608728,-0.00249622}
,
{0.00694241,-0.0363432,0.0029843,-0.0958569,-0.0185915,0.027097}
,
{-0.0888934,-0.0110221,-0.00893356,0.0240905,-0.0290019,-0.181375}
,
{0.0870226,0.0773472,-0.0156862,0.0808261,-0.102626,0.128017}
,
{0.103659,0.155593,0.321831,0.20758,-0.143367,0.157826}
,
{0.0225343,0.0500327,-0.0395123,-0.0224181,-0.101952,-0.0261989}
,
{-0.0387874,0.151123,0.0702202,0.0657888,-0.0946094,-0.10343}
,
{0.0241406,-0.0451683,-0.110307,-0.144496,-0.0210314,-0.0965435}
,
{0.0206478,-0.0544966,0.0429156,0.0861903,0.0561683,0.166083}
,
{0.134789,0.54237,0.23073,-0.0545464,-0.536393,0.100578}
,
{0.0507346,0.0636392,-0.00795742,-0.00447965,-0.0742443,0.0176827}
,
{-0.0862468,0.0626673,-0.0601242,0.168176,0.24413,0.120451}
,
{0.0879269,-0.0943708,-0.148724,-0.167265,-0.0950707,0.0383538}
,
{-0.033166,-0.013237,0.195318,0.0242493,-0.064954,-0.136775}
,
{-0.0609026,0.255264,-0.0423493,-0.12661,0.278733,-0.0371822}
,
{-0.0500773,-0.0435444,0.0294402,0.0278851,-0.149581,-0.0458155}
,
{0.157315,-0.195768,-0.0752706,0.259174,-0.185539,-0.115599}
,
{0.217233,-0.390625,-0.0642199,0.0453378,-0.220683,0.0823902}
,
{0.395518,-0.310903,0.0260972,0.0337591,-0.113733,-0.0186382}
,
{-0.498965,0.426609,0.0225615,-0.277513,-0.0889901,0.444311}
,
{0.0783837,0.152422,0.080044,0.141526,0.346334,-0.0080119}
 };
  static const float bias2[1] = { 0.286288 };
  static const float weights2[][1] = { {0.0045756}
,
{0.0164612}
,
{0.0398694}
,
{0.0251858}
,
{0.0110781}
,
{-0.0436386}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_57(v, index);
}
static int assign_gen_lepton_prior_10_2_57() {
  global_gen_lepton_prior.at(10,2,57) = &specialized_gen_lepton_prior_10_2_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_57 = assign_gen_lepton_prior_10_2_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_2_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.049108,0.285401,0.0660918,-0.0640787,0.346821,-0.176329 };
  static const float weights1[][6] = { {-0.117478,-0.0542367,-0.0325401,0.403019,0.532996,-0.716275}
,
{-0.438114,0.248418,-0.188177,0.277472,0.213154,-0.151183}
,
{-0.274819,0.0668809,0.0529158,-0.592094,-0.103028,-0.0953952}
,
{0.139224,0.265178,-0.0245883,-0.341046,0.690673,0.278648}
,
{-0.127007,0.361859,-0.0982329,-0.256788,0.373132,-0.252315}
,
{0.254807,0.427455,0.124441,0.0243885,0.27402,-0.0262808}
,
{0.0448895,0.575592,0.304814,-0.09497,0.103568,0.0715848}
,
{-0.185202,-0.207987,0.0712309,0.0780149,0.0740554,0.375115}
,
{0.328989,0.12357,1.44953,0.231947,-0.686823,0.680024}
,
{-0.0690536,0.0460829,-0.0231988,0.131987,0.144673,0.236432}
,
{-0.0996817,-0.0466796,-0.0204044,0.197003,0.0683039,-0.246019}
,
{-0.051219,-0.12449,0.127115,-0.143491,0.104239,-0.0169179}
,
{-0.0473225,0.0569175,-0.174267,-0.0778486,0.154201,-0.0163883}
,
{0.303888,0.336064,0.508327,-0.0345992,-0.1019,-0.0846088}
,
{-0.0644917,-0.00231444,-0.0864365,0.131605,-0.0211543,-0.0758567}
,
{-0.0200492,0.029777,0.457383,0.0150858,-0.25052,-0.0292719}
,
{0.172065,0.126078,0.550952,0.183072,-0.571321,-0.120753}
,
{-0.118487,0.317917,-0.00565126,0.0699055,0.0232703,-0.361521}
,
{-0.0388013,0.0175188,0.0890078,0.032617,-0.1646,0.0135725}
,
{-0.0399292,0.291964,-0.109313,0.0624907,-0.104282,0.116466}
,
{0.0680278,-0.0295324,-0.0303915,-0.189537,-0.141815,-0.105636}
,
{0.0215672,0.0893801,-0.160949,-0.240871,0.2485,0.172216}
,
{0.0586192,0.183006,-0.159284,0.0568349,0.0201573,0.0545149}
,
{-0.230237,0.0740591,0.0632105,0.0477655,-0.0771349,0.0414913}
,
{-0.162831,-0.116204,0.113925,-0.248027,0.130659,-0.00779854}
,
{-0.18063,-0.0656812,-0.146447,-0.132222,0.0305695,0.0461551}
,
{0.116941,0.0821901,-0.161692,0.197405,0.250774,0.146482}
,
{0.165938,-0.373674,0.0841948,-0.202977,0.0882547,0.07486}
,
{0.0390408,0.224649,0.614273,0.00953646,0.245379,0.44179}
,
{-0.188848,-0.21236,0.248442,-0.0404872,-0.108933,-0.0646543}
,
{0.158795,-0.0748331,0.0135628,-0.118569,-0.112595,0.189504}
,
{-0.138207,0.100737,0.0672156,-0.326989,-0.0094734,0.168832}
,
{0.0368322,-0.0904505,0.0292525,-0.0844599,-0.0718942,0.0578515}
,
{0.0416939,0.0182374,-0.186708,0.0484365,-0.0773125,0.0883665}
,
{-0.0500234,-0.184467,-0.0229941,-0.0480187,-0.0741945,0.115154}
,
{0.1178,-0.0712979,0.00940783,-0.0543563,0.0676547,0.363401}
,
{0.036364,0.0843117,-0.00373152,0.00491524,-0.142505,-0.0350605}
,
{-0.0365598,0.0347065,-0.00289554,0.0280444,-0.0104481,-0.0603948}
,
{-0.323513,0.117123,-0.0523569,0.168896,0.642941,0.190012}
,
{-0.129744,0.0295617,0.0853401,-0.0228649,0.103503,-0.0379124}
,
{-0.167949,0.0204044,-0.0481009,0.106581,-0.0592856,0.0010487}
,
{-0.210823,-0.00428454,0.00822562,0.0923279,0.00302689,-0.00101128}
,
{0.00385692,0.0551107,-0.0216971,-0.053873,0.0113629,-0.0598908}
,
{0.148966,-0.000430971,0.0215309,0.0100853,0.164417,0.00566426}
,
{0.0299538,-0.102297,0.0992873,-0.0431673,0.0133336,0.122052}
,
{0.179001,0.146662,-0.198734,0.0498341,0.0728433,-0.0322982}
,
{-0.518277,0.0788208,0.0933502,-0.0189525,0.166238,0.0286194}
,
{-0.0087405,-0.0218583,0.019868,0.00275521,-0.0224558,0.000396082}
,
{-0.10687,0.0317891,0.0251764,0.0196069,-0.270187,-0.15146}
,
{0.144742,-0.101399,0.0167387,-0.201589,-0.0970296,0.0695608}
,
{-0.0543324,0.00572056,0.0443676,0.0895648,-0.0346384,-0.107802}
,
{0.0510149,0.101954,-0.14316,-0.0955239,-0.0300509,0.0935154}
,
{-0.00113301,0.041717,-0.0499702,0.0783892,0.0392175,0.0264039}
,
{0.15036,-0.0527018,-0.0550472,0.112438,-0.0128006,0.0245093}
,
{-0.0126736,0.0334831,-0.0372322,0.271003,0.114671,-0.140261}
,
{-0.0932285,-0.055251,-0.0202897,-0.132055,0.0560501,0.149648}
,
{0.00510354,0.0196702,0.0989507,-0.0908283,-0.125603,0.00867717}
,
{0.0676,-0.0574989,-0.00792761,0.0711515,0.0181132,0.0271306}
,
{-0.217723,-0.0323672,0.0837266,-0.215395,-0.150072,-0.0865018}
,
{-0.107818,-0.0598177,-0.131761,-0.0717522,-0.0829962,-0.12474}
,
{0.147363,-0.0300815,0.0853783,0.00395305,0.0425415,0.0747467}
,
{-0.0108112,0.0412597,0.0502388,0.0318663,-0.0331693,0.0280123}
,
{0.0180608,-0.112495,0.0172772,-0.13169,-0.103593,-0.0312512}
,
{-0.164066,0.271568,0.120777,0.207882,0.347926,0.113176}
,
{-0.136634,-0.116492,-0.0369651,0.0200235,0.0781419,-0.0321929}
,
{0.156736,0.113291,-0.0288915,-0.0613319,0.0531271,0.141019}
,
{0.0760741,0.0984953,0.0548385,0.0181816,-0.00496815,0.0289576}
,
{-0.024446,-0.0702064,0.0210986,0.0196088,-0.0544567,-0.080868}
,
{-0.345611,0.0952807,0.193999,0.0174048,0.240215,-0.214488}
,
{0.0426988,-0.198444,-0.0330867,0.0719834,-0.0118145,-0.0186832}
,
{0.100187,0.125763,0.120267,-0.0622668,0.0121782,-0.0152734}
,
{-0.154015,0.0107059,-0.0987454,0.120461,-0.0326996,-0.0103123}
,
{0.0659401,0.0792912,-0.0308052,0.0266913,0.052199,0.044095}
,
{-0.0201468,0.395384,-0.156401,0.249595,-0.289155,-0.137278}
,
{0.485567,0.791022,0.0339805,-0.247577,-0.122868,-1.33656}
,
{0.629405,0.747663,0.0878472,-0.281106,-0.375687,-1.03866}
,
{0.579968,1.01698,-0.0166166,-0.127784,-0.277961,-1.27287}
,
{-0.191759,-0.0636366,0.00126989,-0.00552499,-0.147751,0.177486}
,
{-0.639049,-0.536967,-0.330826,-1.11443,0.94629,-0.320561}
 };
  static const float bias2[1] = { 0.128293 };
  static const float weights2[][1] = { {0.014013}
,
{0.0219897}
,
{0.0286446}
,
{0.0204483}
,
{-0.0329215}
,
{0.0212877}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_58(v, index);
}
static int assign_gen_lepton_prior_10_2_58() {
  global_gen_lepton_prior.at(10,2,58) = &specialized_gen_lepton_prior_10_2_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_58 = assign_gen_lepton_prior_10_2_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_2_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.138886,0.0576996,-0.467528,-0.264516,-0.405394,-0.0394892 };
  static const float weights1[][6] = { {-0.0842061,-0.0469398,-0.232784,0.077046,-0.135116,0.191817}
,
{-0.400739,-0.320504,0.030086,0.175728,0.271043,-0.30939}
,
{0.0161959,0.0482788,-0.371119,-0.280322,-0.0971229,0.121193}
,
{-0.211218,-0.261975,0.213298,0.163595,-0.587427,-0.364246}
,
{-0.0938125,0.109163,-0.337938,-0.256023,-0.484177,0.109795}
,
{-0.113009,-0.162274,-0.539384,-0.274562,-0.210197,-0.0296079}
,
{0.0497992,0.0325539,-0.466162,-0.254193,-0.201755,-0.19457}
,
{0.0186304,-0.0657613,0.0346219,0.312504,-0.495121,-0.0707319}
,
{0.380309,-0.194699,-0.147618,0.0504911,0.565971,-0.366737}
,
{-0.0413383,-0.0956622,-0.089956,-0.0452014,0.0351381,0.193168}
,
{-0.0129693,-0.0631602,0.00463511,0.00592721,0.0679111,-0.078245}
,
{0.11068,-0.099896,0.127634,-0.204547,-0.0521975,0.0938675}
,
{-0.148044,-0.210775,-0.250227,-0.057095,-0.0570567,0.153263}
,
{0.153037,-0.153824,0.228924,0.351238,0.056899,-0.0697556}
,
{0.142476,0.0418981,-0.000754493,0.0361715,0.0694681,0.0841595}
,
{0.365984,-0.595515,0.208136,0.243666,0.395238,0.0173983}
,
{0.509095,-0.671199,0.0954609,0.259815,0.174965,-0.0779839}
,
{-0.239711,0.0759379,-0.600796,0.00492174,-0.00830786,0.103331}
,
{0.0768616,-0.107161,0.142027,0.0740245,-0.00815961,-0.00746231}
,
{0.0318101,-0.220519,0.0727123,0.153888,0.0306895,0.0137831}
,
{0.00236015,-0.0300227,0.0381546,0.0668789,-0.0524384,0.0448321}
,
{-0.235196,-0.348816,-0.152123,0.030669,-0.050465,-0.0788454}
,
{0.17949,0.0383366,-0.0778488,0.050412,0.00211511,-0.101713}
,
{-0.0995999,0.0183926,-0.139863,0.0250169,0.000215872,0.0220745}
,
{0.130647,-0.00100146,-0.311749,-0.0237603,-0.161911,-0.151814}
,
{-0.139861,0.00138756,0.0137966,-0.0618468,0.0180662,-0.532486}
,
{-0.0142327,0.224986,-0.0864656,-0.0381483,0.236665,0.00343712}
,
{-0.477814,0.0186405,-0.21443,0.0505024,-0.114879,0.199977}
,
{-0.174264,-0.117141,-0.925116,0.0842404,-0.157573,0.989066}
,
{0.0789543,0.196514,-0.0576168,-0.0494739,-0.0756116,0.0249249}
,
{-0.0573331,0.0140886,0.136241,-0.0149763,-0.103589,-0.120059}
,
{-0.112803,0.0844977,0.0205062,0.0576204,0.0079675,0.330719}
,
{-0.0621461,-0.0736661,0.00882602,0.0535265,-0.0202292,0.0601523}
,
{-0.0370754,0.0754266,0.203897,-0.211609,0.00225387,0.112902}
,
{0.138323,-0.0603679,0.103855,0.0182349,-0.141295,-0.120437}
,
{0.0453124,0.0356346,-0.066958,0.14356,-0.178493,-0.0723009}
,
{-0.0793628,-0.276924,0.082346,0.00078884,0.193639,-0.0297596}
,
{-0.0331418,0.0157409,-0.0289217,-0.00997278,0.0258588,-0.0563337}
,
{-0.259325,-0.0366354,-0.0556094,0.160972,-0.208771,0.197669}
,
{-0.107941,0.0270921,-0.131527,0.117214,0.010239,-0.0609302}
,
{-0.0562864,-0.152425,-0.00178127,-0.135581,0.0406546,-0.0508174}
,
{-0.0891066,0.0195235,-0.0299604,0.0614066,0.0996724,-0.221797}
,
{0.0304658,-0.063168,0.0146515,0.0103156,-0.0328224,-0.00624628}
,
{0.0096805,-0.145214,0.171814,0.0965617,-0.195306,0.157232}
,
{-0.0500693,0.029039,-0.200764,-0.0333285,0.163281,-0.132963}
,
{-0.0647382,0.0482855,0.0560159,0.068053,-0.201606,-0.0860464}
,
{0.032283,0.0503432,0.0326545,-0.0194368,-0.0555355,0.00362457}
,
{0.0562485,0.040581,0.0595274,-0.00827188,0.0337409,0.0146679}
,
{-0.0832688,-0.305091,0.0647874,-0.0820071,0.108315,0.511774}
,
{0.0606101,0.0288725,0.0422903,0.0678748,-0.0160769,-0.0722443}
,
{-0.0896607,0.0571916,-0.0451666,-0.0390849,0.0373002,0.0152536}
,
{0.0553347,0.136199,0.0093513,0.0352491,-0.0518976,0.0732333}
,
{0.0242676,0.0704439,0.0370916,-0.00788841,0.0044856,0.0400907}
,
{0.105172,0.0151891,-0.12049,-0.0890636,0.128937,-0.0282354}
,
{-0.11689,-0.129402,0.0555593,-0.0939201,-0.175642,0.150058}
,
{-0.142912,0.191819,0.0464564,0.0493345,-0.0738112,-0.211698}
,
{-0.222294,-0.212664,0.0451215,0.118123,0.110757,0.0286052}
,
{0.743906,-0.000166025,0.559362,0.262816,-0.991282,0.28785}
,
{-0.03124,-0.0674017,-0.709852,0.181803,-0.753386,-0.46038}
,
{-0.0568994,-0.0417335,-0.21159,0.00636708,-0.0511207,0.0570156}
,
{0.099263,0.0425855,0.188274,-0.0898969,-0.0186151,0.188947}
,
{0.0901839,0.0772224,0.0372004,0.0726866,-0.00213185,0.150379}
,
{0.124361,0.242892,-0.117459,0.0762665,-0.0423141,0.646388}
,
{0.892846,-0.489204,-0.174532,-0.526544,0.214284,1.0288}
,
{-0.1983,-0.0674465,-0.187024,-0.00868343,-0.104835,0.104028}
,
{0.00517426,-0.0602511,-0.177145,0.121086,0.0271272,-0.171245}
,
{-0.0800434,0.0373209,0.0541517,-0.11396,-0.0530112,-0.0146137}
,
{-0.471516,0.0615057,0.320844,0.141679,-0.235638,0.349346}
,
{0.0479335,-0.715653,0.538884,-0.625183,0.500877,-1.48099}
,
{0.299003,0.105113,-0.0319859,-0.0729008,0.0614146,0.213082}
,
{0.136099,0.0365138,-0.0554546,0.0634841,-0.0605109,0.162827}
,
{0.130338,0.0224016,-0.173768,-0.0328929,0.0527016,0.244097}
,
{0.396871,-0.179001,0.960352,0.0224164,0.296056,-0.0305576}
,
{0.33558,0.338973,0.315677,0.0697156,0.724692,-0.249462}
,
{-0.297429,-0.320329,-0.299712,-0.33391,0.609669,0.558618}
,
{-0.475476,-0.145413,-0.284563,-0.175362,0.617126,0.487798}
,
{-0.512592,-0.105908,-0.350414,-0.195948,0.637671,0.567296}
,
{-0.303582,-0.000223091,0.00900597,-1.68661,0.113016,-0.785001}
,
{-0.970672,-0.361995,0.691705,-1.15462,-2.31691,-1.98513}
 };
  static const float bias2[1] = { -0.178862 };
  static const float weights2[][1] = { {0.0471758}
,
{-0.50188}
,
{-0.0742739}
,
{0.0732206}
,
{0.06268}
,
{0.0310772}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_59(v, index);
}
static int assign_gen_lepton_prior_10_2_59() {
  global_gen_lepton_prior.at(10,2,59) = &specialized_gen_lepton_prior_10_2_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_59 = assign_gen_lepton_prior_10_2_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_2_60(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.237857,0.402504,-0.163638,-0.311275,0.261633,0.063865 };
  static const float weights1[][6] = { {0.147934,0.11134,-0.0728672,0.12981,-0.127814,0.097091}
,
{0.345218,-0.759763,-0.0772041,-0.11851,0.131893,-0.551388}
,
{0.270523,0.00617869,-0.225133,0.186129,0.246048,0.44475}
,
{0.470379,1.25747,-0.490284,-0.257779,1.12133,-0.609465}
,
{0.19008,0.445732,-0.203975,-0.270149,0.231736,0.0179114}
,
{0.404799,0.288041,-0.0100678,-0.471858,0.243882,0.110707}
,
{0.21618,0.258418,-0.00680042,-0.308968,0.288868,0.0860952}
,
{-0.119554,0.0511911,0.288884,-0.229295,-0.134715,-0.261819}
,
{-0.14688,0.165363,0.124287,0.247826,-0.414683,0.153171}
,
{0.00960371,0.0935437,0.00460987,-0.105332,0.0105952,-0.13092}
,
{0.150478,-0.0494772,-0.138937,0.116207,0.00850137,0.115363}
,
{-0.107597,-0.0145032,-0.235972,-0.121366,0.000344594,-0.0119371}
,
{0.0265093,0.0781407,0.160772,-0.200864,0.210183,-0.12792}
,
{-0.184547,-0.29865,-0.0505662,0.0562503,-0.122536,0.214771}
,
{-0.11657,0.147428,-0.0139002,-0.151198,0.0634893,0.0887007}
,
{-0.24688,-0.258798,0.0380623,0.119069,-0.0844461,-0.0879054}
,
{-0.146896,-0.0660141,-0.0881947,-0.0861184,0.0327128,-0.125419}
,
{0.108845,0.165287,0.096793,-0.0438939,0.305018,0.344775}
,
{0.0213625,-0.0441185,-0.0683577,0.0604059,-0.140881,0.0236212}
,
{0.181453,-0.0963545,0.0984819,0.0497018,-1.94534e-06,0.110481}
,
{0.250186,0.164741,0.228168,0.0717756,-0.156745,0.0843835}
,
{-0.117463,0.0506044,-0.0456344,0.0575822,0.0143982,-0.155261}
,
{-0.102066,-0.190084,0.000904585,-0.0368971,-0.158563,0.00529989}
,
{0.184358,0.0813193,0.236359,-0.0290406,-0.154795,-0.084842}
,
{0.14735,0.0235472,-0.011689,0.0325061,0.17731,-0.0335704}
,
{0.0728736,-0.0407233,-0.0548037,-0.153731,0.147645,0.0891014}
,
{-0.0187368,0.0752872,-0.0627144,-0.0636223,0.0506026,-0.0575395}
,
{0.158868,-0.00579376,-0.104963,-0.0205847,0.145772,0.0469529}
,
{0.0139976,-0.00887785,-0.0213923,-0.0437496,-0.112066,0.144163}
,
{0.188986,-0.0618504,-0.101851,-0.108985,-0.0178743,0.119923}
,
{-0.156393,-0.16061,0.0711389,0.0256471,0.0599112,-0.0216098}
,
{0.0787587,0.0756801,0.0676604,0.0755889,-0.219778,-0.186495}
,
{-0.0033397,-0.0479825,-0.143339,0.160724,0.103135,-0.150132}
,
{-0.0128864,-0.0644876,-0.197855,0.136695,-0.117361,-0.0679309}
,
{-0.045417,-0.156867,-0.000347685,0.00207032,0.127747,-0.252736}
,
{-0.154312,0.0390629,0.150563,-0.152667,0.0744234,-0.139974}
,
{-0.0370993,-0.027981,-0.146179,-0.0239853,-0.275931,0.113893}
,
{0.0324325,-0.0534714,0.0103584,-0.00633142,0.0540768,-0.0111405}
,
{-0.144742,-0.14141,-0.1629,0.0953216,-0.201302,-0.321448}
,
{0.170242,0.139036,0.105736,0.0643788,-0.0272987,0.0164992}
,
{-0.0297502,-0.00803909,0.126444,-0.0620073,0.0797605,-0.13176}
,
{-0.0290172,-0.0284625,-0.144012,0.0685964,-0.131839,0.0937248}
,
{-0.145851,-0.00764641,-0.0952166,-0.0592356,-0.0849512,0.122874}
,
{0.371174,-0.0260736,0.0332778,0.0536469,0.0555217,0.33514}
,
{-0.131003,0.00879199,0.0521633,-0.160443,-0.0903579,0.127254}
,
{0.0646482,0.00844208,-0.139817,0.197745,0.100862,-0.0671432}
,
{0.19064,-0.0722848,0.084963,0.0604057,-0.288512,-0.202005}
,
{0.0578979,0.060629,0.0637671,0.020247,0.0244249,0.0251012}
,
{-0.10816,0.11541,0.179511,-0.0313998,0.255816,-0.153708}
,
{-0.24795,-0.0218985,-0.115337,-0.0478716,-0.102946,-0.118661}
,
{0.144046,-0.00865493,0.0359358,0.0216748,-0.15515,0.176677}
,
{0.057983,-0.105133,-0.0842064,0.0581303,-0.0243207,0.0664141}
,
{0.0908668,0.00344851,0.0860395,-0.000961343,0.0397549,-0.0600178}
,
{0.021842,-0.0856773,-0.222132,0.119585,-0.0452293,0.0291385}
,
{-0.155448,0.128029,0.232529,0.105763,-0.0730253,0.150568}
,
{0.171464,0.0199797,0.0662357,-0.200469,0.185412,0.0202514}
,
{-0.0659766,0.214889,-0.0150759,0.27756,0.177659,0.0416683}
,
{-0.0139984,-0.132984,-0.0410037,0.172245,0.00182154,-0.125067}
,
{-0.0145748,-0.0329269,-0.140222,0.236655,-0.263488,-0.0954233}
,
{0.0393187,0.0159283,-0.00787041,-0.0661159,0.148891,0.011654}
,
{-0.106337,-0.0507584,-0.180781,-0.169538,0.019732,-0.0668532}
,
{-0.154091,0.0556664,0.238431,-0.202316,0.0675357,0.0665831}
,
{-0.22321,0.0908748,-0.0713431,0.0241736,-0.0294023,-0.0706158}
,
{-0.0668154,0.24419,0.0564428,0.208731,-0.0258638,-0.0622711}
,
{0.12746,0.0468199,0.00351868,0.0521416,0.0702964,-0.0877451}
,
{0.178812,0.0654754,0.128322,0.137334,0.114791,-0.0765897}
,
{-0.198308,-0.105728,-0.0442246,0.0266594,-0.000904931,0.162372}
,
{0.153889,-0.0866046,0.0710249,-0.189344,-0.00211424,0.012108}
,
{0.0136576,0.0188383,-0.0202029,-0.223785,-0.048197,-0.0510155}
,
{-0.0230755,0.112622,0.0607316,-0.070231,0.0687106,-0.0520188}
,
{0.0865225,-0.100242,0.0083977,0.206776,-0.0656512,0.111958}
,
{-0.0470631,0.116114,-0.0022813,0.0351963,-0.228912,-0.00974358}
,
{0.0838957,-0.272145,0.160322,0.137042,0.137109,-0.197261}
,
{0.0768363,-0.0255505,0.224257,0.00455147,-0.217385,0.0472445}
,
{0.0709506,0.10977,-0.0953852,-0.0543103,-0.0883278,0.108429}
,
{-0.0959975,-0.135254,-0.0647309,-0.0279126,0.226383,-0.0123335}
,
{0.0154353,-0.164161,-0.153845,-0.121645,0.157986,-0.101782}
,
{-0.0981014,-0.135174,0.0859818,0.0490392,0.0842295,-0.0101061}
,
{0.02979,-0.0748459,0.0821171,0.17798,0.173326,-0.146487}
 };
  static const float bias2[1] = { -0.0948666 };
  static const float weights2[][1] = { {-0.0927852}
,
{-0.106342}
,
{0.120864}
,
{0.171588}
,
{-0.384249}
,
{0.0847227}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_2_60(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_2_60(v, index);
}
static int assign_gen_lepton_prior_10_2_60() {
  global_gen_lepton_prior.at(10,2,60) = &specialized_gen_lepton_prior_10_2_60;
  return 0;
}
static int initialize_gen_lepton_prior_10_2_60 = assign_gen_lepton_prior_10_2_60();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_3_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.377333,-0.106595,-0.0312711,-0.140593,-0.143211,-0.465974 };
  static const float weights1[][6] = { {-0.311802,-0.054266,-0.375678,-0.498432,-0.242734,-0.181259}
,
{-0.547449,0.326857,0.267757,0.0398225,-0.398123,0.174034}
,
{-0.270217,0.0806281,-0.219388,0.0279349,0.0293916,-0.459614}
,
{-0.323829,0.623634,0.506637,-1.30805,0.375046,0.457388}
,
{-0.412512,-0.138601,-0.0784174,-0.130157,-0.0594834,-0.662172}
,
{-0.511166,-0.121847,-0.0775965,-0.0922623,-0.137093,-0.327956}
,
{-0.216985,-0.218344,-0.0584979,0.13709,-0.0475977,-0.300851}
,
{-0.335333,0.00882928,-0.0295143,0.0565902,-0.77839,0.797483}
,
{-0.217839,-0.00663727,0.175588,0.102671,0.239603,0.501968}
,
{-0.104906,0.00244378,-0.0937509,0.0270752,0.0651893,-0.144239}
,
{-0.0945235,0.0144024,-0.0432761,0.240958,0.134141,0.119522}
,
{0.0291301,-0.0361213,-0.0179549,-0.0707612,-0.0720349,-0.0666644}
,
{-0.104506,0.165553,0.285696,-0.170976,0.150301,-0.0497265}
,
{-0.24354,0.06355,0.131641,-0.0495995,0.183077,0.314495}
,
{-0.0473664,0.0981273,-0.114512,-0.142768,-0.0842348,-0.0374907}
,
{-0.235679,0.0598675,-0.0205593,0.115266,0.0625925,0.196115}
,
{-0.170763,0.0359172,-0.14238,0.00831351,0.122826,0.0973795}
,
{-0.103082,-0.136629,0.0157661,0.196883,-0.164736,0.217661}
,
{-0.167432,-0.0478412,-0.209724,0.0701287,0.355682,0.23686}
,
{0.221195,-0.013604,0.0514169,-0.0925915,0.211771,0.0303059}
,
{0.0213957,-0.118632,-0.0473347,0.0420264,0.0736656,0.0447867}
,
{0.14173,-0.000321562,-0.210067,-0.00169103,0.00105687,0.0794928}
,
{-0.0162139,0.0357623,0.213763,0.131492,0.135536,0.0283697}
,
{-0.0942774,0.178169,-0.0664575,0.0268118,0.00566654,0.0824429}
,
{-0.131806,-0.118744,-0.116447,-0.123014,0.014663,-0.0699334}
,
{-0.086712,0.103999,-0.239707,-0.258507,-0.0760415,0.0579006}
,
{0.0739651,-0.0756339,0.211578,0.171389,0.0533039,-0.0377067}
,
{-0.0119491,-0.0483348,0.0778489,0.29013,0.0560395,-0.0171597}
,
{0.228243,0.400627,-0.149052,-0.178888,0.162426,0.180954}
,
{0.195774,0.0965246,0.0596291,0.055946,-0.125457,-0.188819}
,
{-0.00248753,0.159094,-0.0836924,0.0565228,0.210786,0.129222}
,
{-0.0393834,-0.168469,-0.171281,0.242864,-0.160305,0.167628}
,
{0.113096,0.129649,0.0138205,0.0535356,0.00421954,-0.0454897}
,
{-0.0629734,0.158626,0.0883024,0.0159708,-0.102927,-0.178483}
,
{0.0939968,0.028759,0.102956,0.0304749,-0.0200194,0.101518}
,
{-0.147631,-0.0138925,-0.0420799,0.0323246,-0.105344,0.101338}
,
{0.150807,0.0375849,0.268008,-0.161936,-0.110952,0.111046}
,
{-0.0198359,-0.0929565,-0.112018,-0.0540396,0.153908,-0.170764}
,
{-0.0544587,0.0722936,-0.237641,-0.0355051,0.043486,-0.0118407}
,
{-0.00578548,-0.0563155,0.103852,0.0438199,-0.158021,-0.115151}
,
{-0.0388607,0.1229,-0.0634243,0.0515399,0.112454,0.191547}
,
{-0.0836837,-0.257383,0.255806,0.1102,0.0634201,-0.0657988}
,
{0.155854,-0.061919,-0.145528,-0.189147,0.126846,-0.144521}
,
{0.0613969,-0.00569484,-0.100563,-0.0635976,0.0364977,0.00568337}
,
{-0.0644201,-0.0540472,-0.108168,-0.097643,-0.00965201,-0.0173698}
,
{-0.0747428,0.00451137,0.000169614,-0.0310473,-0.0309624,0.11607}
,
{0.00851412,-0.135622,0.151687,0.00228104,0.0536381,-0.038408}
,
{0.0378548,0.0721976,0.102681,0.217632,-0.0342965,-0.0273243}
,
{-0.154541,0.0150214,0.0682742,0.125632,-0.0475307,-0.0270042}
,
{-0.0889659,0.00703622,-0.0737193,0.0194672,0.0319012,-0.0153827}
,
{-0.071029,0.0483294,0.0348656,0.0299315,-0.185523,0.17447}
,
{-0.0502604,-0.0801777,0.263314,0.120143,-0.00757288,-0.00706033}
,
{0.149713,-0.0796381,0.135647,-0.00534968,0.154754,-0.164301}
,
{-0.00101111,-0.0505448,0.154324,-0.0333732,-0.0272794,0.0438693}
,
{-0.0914583,0.0593586,0.043229,-0.0299123,-0.102431,-0.0251168}
,
{-0.0950069,-0.165515,0.00726205,-0.00287164,0.0352235,0.0148232}
,
{0.0737009,-0.0138639,-0.0667151,0.0644161,0.0743412,0.0261999}
,
{0.525837,-0.458403,-0.281468,0.198022,0.120035,0.0511685}
,
{-0.0289582,-0.125639,0.187162,-0.00160901,0.00527673,-0.0105831}
,
{-0.121934,0.0493577,0.0842973,0.147798,0.110962,0.00684651}
,
{0.00509019,-0.0777015,-0.0859927,-0.116473,-0.0108574,0.0745205}
,
{0.080499,-0.070691,-0.023283,0.0165174,-0.103364,-0.0714159}
,
{-0.450168,0.081679,0.0706735,-0.232485,0.0572197,-0.132278}
,
{-0.0297008,0.0382235,-0.0492587,0.00717143,-0.00551677,-0.0249405}
,
{-0.153599,0.0464457,-0.150393,-0.000770299,-0.0625835,-0.000252369}
,
{0.00961302,-0.063117,0.0086686,-0.104818,0.209329,-0.0847235}
,
{-0.0312735,-0.185832,0.0660343,0.0981577,-0.135213,0.0809289}
,
{0.685287,-0.248333,0.249784,-0.279522,0.0833423,0.13859}
,
{0.0901012,0.162844,0.0159641,-0.108031,0.0193474,-0.0204623}
,
{-0.0779116,0.107839,-0.117182,-0.0269586,-0.164323,-0.0220932}
,
{-0.0604412,-0.0636826,0.0733416,0.118578,0.0186914,-0.0111599}
,
{0.237093,0.021978,0.0636703,-0.0401979,0.155538,0.0249825}
,
{0.812719,-0.282875,0.242552,-0.183501,0.0827595,0.0696179}
,
{0.0715161,0.157207,-0.10793,0.00117695,0.00779297,0.029533}
,
{0.0406787,0.0990161,-0.285015,0.358293,0.0261417,-0.318468}
,
{-0.0863378,0.204417,0.00357346,0.535862,0.0195738,-0.0747797}
,
{0.0161878,0.0164175,-0.250738,0.467756,0.070444,-0.0481449}
,
{0.542024,-0.440207,-2.18476,-0.85531,-0.931216,-0.853663}
,
{0.123198,0.301869,0.458454,0.404085,-0.18378,-0.145618}
 };
  static const float bias2[1] = { -0.0570134 };
  static const float weights2[][1] = { {-0.0232925}
,
{0.0150917}
,
{0.0112069}
,
{0.007728}
,
{0.0493206}
,
{0.0415646}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_3_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_3_57(v, index);
}
static int assign_gen_lepton_prior_10_3_57() {
  global_gen_lepton_prior.at(10,3,57) = &specialized_gen_lepton_prior_10_3_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_3_57 = assign_gen_lepton_prior_10_3_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_3_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.809111,-0.362706,0.231407,-0.452244,-0.389943,0.0774541 };
  static const float weights1[][6] = { {0.113395,-0.0796141,0.00639763,-0.0944284,0.124946,0.198829}
,
{0.194999,-0.126414,-0.27944,-0.512486,0.171627,-0.535382}
,
{0.653168,0.0532521,0.0985382,0.226979,0.00536178,-0.109721}
,
{0.138289,0.176465,0.212975,-0.535658,-0.425099,-0.170879}
,
{1.01659,-0.446154,0.231767,-0.395405,-0.503151,0.164769}
,
{0.666028,-0.291252,0.282394,-0.419359,-0.353079,-0.0475339}
,
{0.810596,-0.400268,0.471148,-0.25871,-0.124242,0.0439278}
,
{0.237719,-0.274325,0.0600474,-0.0948597,0.692076,0.0848127}
,
{-0.030122,0.445238,-0.591688,0.22241,0.388377,-0.386456}
,
{0.0906662,-0.0241978,-0.000295726,0.211476,-0.0389777,0.107897}
,
{-0.0303444,0.0359873,-0.0539613,-0.0661964,-0.0384031,0.191426}
,
{0.0140423,0.0741207,0.0952837,0.100707,-0.0622351,0.0604202}
,
{0.25212,-0.0105025,0.0106936,-0.0788397,-0.141829,-0.124195}
,
{0.00850565,0.258369,-0.368962,0.207,0.0870918,-0.142284}
,
{-0.0582127,0.180995,-0.237708,-0.0364784,-0.00137234,-0.0049289}
,
{-0.252877,0.403529,-0.360343,0.363841,0.306096,-0.361441}
,
{1.7624e-06,0.520695,-0.351128,0.337954,0.11343,-0.0139007}
,
{0.136791,0.363681,0.360453,-0.11817,0.114758,0.0844897}
,
{-0.117854,0.0556766,-0.307292,-0.0340559,-0.0244727,-0.250152}
,
{0.130326,0.201285,-0.222935,0.00797428,0.134809,0.116835}
,
{0.0247636,-0.0171366,-0.459997,-0.00900484,-0.0173673,-0.0977532}
,
{0.0484548,-0.0513483,-0.0765813,0.0474277,0.129308,-0.00262092}
,
{0.193775,-0.123473,0.0922499,-0.125629,0.0610538,-0.0416254}
,
{0.134683,0.146319,-0.0927244,-0.175319,-0.0307387,-0.159754}
,
{-0.160653,-0.0955096,-0.0526013,0.0790928,0.195502,0.381607}
,
{0.207743,0.111437,0.280128,-0.012027,0.0249119,0.0106833}
,
{0.254807,-0.104326,0.16168,0.208854,-0.0557493,-0.0228776}
,
{0.174174,-0.231657,0.00829301,0.0685359,-0.0553901,0.0348512}
,
{0.387463,-0.3472,0.193651,-0.934916,0.351296,-0.193022}
,
{0.212954,0.122172,-0.138912,0.032534,0.233315,0.192266}
,
{-0.0255573,-0.0436718,-0.0315122,-0.107986,0.130058,-0.0912073}
,
{0.170181,0.0969608,0.119193,0.0517902,-0.0419765,0.116849}
,
{-0.14206,-0.0687886,-0.0579907,0.116971,0.0240208,0.0751299}
,
{-0.0893705,-0.0570446,-0.142299,-0.0754761,-0.0137884,-0.0057272}
,
{0.00565159,0.0418787,0.00083799,-0.0722609,0.0793545,-0.00122046}
,
{-0.00484408,-0.138996,-0.037763,-0.0213108,0.117294,-0.210973}
,
{0.083637,0.0736653,-0.0338291,-0.180389,0.0358082,0.0486853}
,
{-0.0207934,0.0438968,0.00315005,-0.0930442,-0.054823,-0.0443041}
,
{0.0238073,-0.114326,0.0595901,0.0729067,0.0700699,-0.210548}
,
{0.0171026,0.148796,-0.00620933,0.0321588,0.0479728,-0.0247223}
,
{-0.0545416,-0.194429,-0.062961,0.00686771,-0.0360243,0.0323009}
,
{0.0928584,0.103369,0.0570442,-0.227921,-0.0378123,0.014119}
,
{-0.0194538,0.00441449,-0.00903424,0.0347854,-0.0479057,-0.0597757}
,
{0.195331,0.114733,0.00693394,0.0259569,-0.0485934,0.105669}
,
{0.0621934,-0.0940217,0.116928,0.0394977,0.190562,-0.0675565}
,
{-0.0418825,0.124271,-0.0242568,-0.00183639,-0.219473,0.0621506}
,
{0.0674507,-0.0423194,-0.1585,-0.0248691,0.0603051,0.195866}
,
{-0.000522708,-0.0145368,0.0784194,0.0279669,0.0258718,0.0494953}
,
{0.0156143,-0.0838354,-0.146015,0.21841,0.118925,-0.0476147}
,
{-0.208454,-0.0583966,-0.0328198,-0.0896276,-0.00339657,0.061241}
,
{0.130335,0.0394287,0.0171447,0.0913172,0.00294142,0.0541648}
,
{0.11,0.0422978,0.0149767,-0.00515023,0.0234248,0.0362322}
,
{0.0655516,0.0425575,-0.0915169,-0.142134,0.0045434,0.0297091}
,
{0.0461252,0.0940127,0.103661,-0.419341,-0.0195114,-0.198714}
,
{0.0736892,-0.0702224,0.132939,0.0478755,-0.190704,0.116132}
,
{-0.0522323,0.00051926,-0.0103488,-0.0637383,0.17819,-0.0255057}
,
{0.0097293,0.168076,-0.0258008,-0.0857912,0.07692,0.0173745}
,
{-0.021799,0.0647667,0.0938841,0.0235932,0.025176,0.0223582}
,
{-0.0792883,-0.0268486,-0.0274576,-0.0463045,0.184666,0.272256}
,
{-0.0164909,0.0839925,-0.0680989,0.0496689,0.175785,-0.0333896}
,
{-0.154754,-0.0371294,0.037399,0.0471669,-0.125509,0.126585}
,
{0.0937729,-0.0578935,0.0278162,0.0444257,-0.0631093,-0.0857996}
,
{-0.049159,-0.0934141,-0.096998,-0.0338673,-0.0114271,-0.010019}
,
{0.0356239,0.239338,0.0858153,0.321462,-0.328812,0.180422}
,
{0.0304308,0.181342,-0.070706,0.220165,0.00678675,-0.0146807}
,
{-0.153771,-0.022874,0.0469715,0.0359121,-0.22559,-0.146607}
,
{-0.0296716,-0.192486,0.0125353,-0.129077,0.110075,0.0642789}
,
{-0.171492,0.0066774,0.156484,0.162237,-0.102564,0.0354915}
,
{-0.153662,-0.297688,0.0670317,0.124414,-0.0155434,-0.215197}
,
{-0.0120184,-0.121875,0.0764907,-0.0178897,0.138282,0.0536113}
,
{-0.0115143,-0.0718347,-0.111171,-0.0525416,-0.0680947,-0.122041}
,
{-0.0840379,0.088401,0.0344103,0.00661589,-0.0834913,0.00219226}
,
{0.0255419,0.126693,-0.0959114,-0.103498,-0.0131273,0.0986044}
,
{0.0659082,0.103823,0.310135,0.0951085,-0.0974833,-0.110373}
,
{0.104936,0.364532,-0.287948,0.638325,-0.640357,-0.0188877}
,
{0.080342,0.393254,-0.256032,0.591768,-0.654242,0.125141}
,
{0.227198,0.349347,-0.248218,0.768253,-0.381067,0.167778}
,
{0.108759,0.059476,-0.21324,-0.377806,0.120547,0.262558}
,
{-0.602577,0.0897806,0.578622,0.12379,0.22419,0.375792}
 };
  static const float bias2[1] = { -0.0101116 };
  static const float weights2[][1] = { {-0.0216559}
,
{0.0436903}
,
{-0.0710204}
,
{0.0227441}
,
{0.0401009}
,
{-0.037999}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_3_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_3_58(v, index);
}
static int assign_gen_lepton_prior_10_3_58() {
  global_gen_lepton_prior.at(10,3,58) = &specialized_gen_lepton_prior_10_3_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_3_58 = assign_gen_lepton_prior_10_3_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_6(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.186787,-0.076508,0.126798,-0.0490377,0.0434962,-0.153212 };
  static const float weights1[][6] = { {-0.199746,-0.318609,0.0919199,0.0460341,0.048372,-0.141096}
,
{0.0972414,-0.0632296,0.0271762,-0.171393,0.132871,-0.0229826}
,
{-0.285931,0.153945,-0.0695336,-0.24164,0.171723,-0.058203}
,
{-1.11313,0.321101,-0.100069,1.34556,0.0359537,-0.0972965}
,
{-0.0895786,0.0120278,-0.123479,-0.0229428,-0.0865,-0.199808}
,
{-0.125882,-0.304914,0.0494264,-0.126072,0.0152203,-0.316601}
,
{-0.0273848,-0.17794,0.151272,-0.200036,-0.0878381,-0.220649}
,
{-0.469851,0.0648344,-0.446991,0.261672,-0.0924749,0.215942}
,
{0.0768524,0.425907,0.0125247,0.0140776,0.0140736,0.0683639}
,
{-0.067586,-0.169644,0.0601122,-0.104441,-0.136881,0.0757607}
,
{0.053798,-0.119859,-0.055061,0.141927,-0.0596241,-0.1375}
,
{-0.0808106,-0.049989,-0.0355594,-0.134219,-0.0928829,0.121191}
,
{-0.132172,-0.115974,-0.0899901,0.115968,-0.0167965,0.08744}
,
{0.211022,-0.0348603,0.282903,0.193377,0.116712,0.0208814}
,
{-0.122354,-0.0325686,-0.244437,0.0172354,0.103719,-0.0467718}
,
{-0.111516,0.094035,-0.142671,-0.110891,0.0326391,0.10025}
,
{0.0807855,0.399972,0.0342611,-0.129406,0.0167368,-0.101901}
,
{-0.118289,-0.0486434,0.227167,-0.0241787,0.0200536,0.0863627}
,
{-0.078155,0.0107831,0.253346,0.078067,-0.0644954,-0.287595}
,
{0.0395781,-0.168295,-0.0493268,-0.116658,-0.102504,0.257087}
,
{-0.0441696,-0.0860707,-0.0415392,-0.0415225,0.135916,0.0837417}
,
{-0.000345976,-0.00527889,0.00856177,0.0781441,0.0176794,0.127819}
,
{0.152641,-0.0802267,8.55775e-05,0.147424,-0.0850287,-0.0530441}
,
{-0.040898,-0.00865848,-0.10182,0.0998034,0.0967031,0.0414258}
,
{-0.0188575,-0.203729,-0.040474,0.165305,0.105279,-0.0217954}
,
{-0.268409,-0.059987,0.227459,0.230786,0.069189,-0.0153222}
,
{0.022207,-0.257837,0.180583,0.0396695,-0.137335,-0.141938}
,
{-0.324606,-0.176232,0.100198,-0.167475,0.0694055,-0.074784}
,
{-0.0825469,0.0687194,0.189908,0.0312272,-0.0224312,-0.0681142}
,
{-0.0585905,-0.0790226,0.0654316,-0.0134089,0.0987551,-0.0131841}
,
{-0.198351,-0.384662,-0.14542,-0.0449248,-0.0199361,0.0474041}
,
{0.0353915,-0.0468774,-0.204628,0.114559,0.08661,0.0931517}
,
{0.0596579,-0.0308348,0.0483185,0.0484941,-0.0621683,0.124294}
,
{-0.047275,0.0634144,-0.0123663,0.104351,-0.0364951,0.051596}
,
{0.145453,0.0830546,0.307984,0.0927831,-0.0026914,0.0594385}
,
{0.0451117,-0.0990745,-0.0930925,-0.0168856,0.147575,-0.00424454}
,
{-0.146496,-0.192053,-0.234664,-0.399515,0.0583779,-0.159212}
,
{-0.0178862,-0.191502,-0.0438332,-0.247671,0.0999041,-0.0398139}
,
{-0.38047,0.302834,-0.0347301,0.0393584,-0.136462,-0.0657281}
,
{-0.0197084,-0.126704,-0.0586014,0.000502516,-0.278624,-0.153072}
,
{0.122784,-0.0296197,-0.0983441,0.0492654,-0.167751,-0.0654738}
,
{-0.385236,0.123229,0.169867,0.191777,-0.0669874,0.117597}
,
{0.127884,0.0457333,0.0161838,-0.0383634,0.0847431,-0.0209009}
,
{0.28598,0.0750868,0.022528,-0.452943,-0.189862,-0.18231}
,
{0.0880277,-0.209748,0.0624275,0.169562,0.161446,0.102696}
,
{-0.0762484,-0.00877583,0.00996699,-0.0147174,-0.0407614,0.0408354}
,
{-0.0293515,0.481503,0.342398,0.829694,0.0325012,0.181886}
,
{0.142367,-0.0891904,-0.1011,-0.100941,-0.164865,-0.0653586}
,
{-0.061333,0.124866,0.280231,0.0500477,-0.0730789,0.174088}
,
{-0.0272658,0.170049,0.259068,0.0675266,0.0445549,0.0771529}
,
{-0.0860168,0.0457775,0.0280552,-0.0627739,-0.182835,-0.0942046}
,
{-0.0494503,-0.000674469,0.0553593,0.101586,0.0525667,0.0796576}
,
{-0.0120023,-0.113068,0.14822,-0.0151085,0.0926243,0.0904219}
,
{-0.310895,-0.208561,0.131094,-0.186401,-0.119483,0.0344983}
,
{-0.0996699,0.150085,-0.150672,-0.138658,-0.0827677,-0.0665631}
,
{-0.061616,-0.200444,-0.0325839,-0.0606673,0.077757,-0.0117724}
,
{-0.0844996,0.21483,0.134563,0.0829945,-0.0459293,-0.0784305}
,
{0.00464365,-0.102414,0.161614,0.187531,0.16414,-0.0527277}
,
{0.0198515,-0.00364846,0.112832,0.0102921,-0.000265758,-0.0919221}
,
{0.0938061,0.0253874,-0.158974,0.00451923,-0.118112,-0.0802884}
,
{-0.0533656,-0.0564804,-0.0598418,-0.00680651,0.180433,-0.234874}
,
{-0.0736599,0.0227059,0.175181,-0.156256,0.114603,0.029972}
,
{-0.0272083,-0.01129,-0.255589,0.159114,0.124216,0.0614774}
,
{-0.00252093,-0.132437,0.108395,-0.114506,-0.107605,0.153668}
,
{0.169679,0.11304,-0.0955661,0.0619521,-0.0587335,-0.124066}
,
{-0.0200565,0.0740333,-0.0925419,0.0196687,0.205605,0.107018}
,
{0.234453,0.265712,-0.0713783,-0.0126636,-0.166336,0.170278}
,
{-0.167979,-0.184937,-0.0921487,-0.0224901,-0.160078,-0.10174}
,
{0.0580569,0.0269634,-0.0391556,-0.111325,-0.0451757,-0.0932995}
,
{-0.129949,0.202139,-0.0956199,-0.0577553,0.103205,0.184274}
,
{0.0269328,0.152861,-0.242855,0.252901,0.184048,0.0494146}
,
{-0.304924,-0.0764092,0.122362,-0.132766,-0.0566003,-0.130598}
,
{0.158183,0.0151941,0.0232676,-0.131622,0.142103,0.153151}
,
{-0.138725,-0.230028,-0.126753,0.0726164,-0.0744887,-0.0986634}
,
{0.130676,0.065056,-0.0161559,0.124042,0.000286441,-0.0064814}
,
{0.0302588,0.0530721,-0.172727,0.100331,-0.181699,0.0856639}
,
{0.0603294,-0.0337928,-0.0174677,0.000286043,0.0906836,0.146151}
,
{0.00133535,0.0905789,-0.114437,0.0966291,0.188344,-0.0247108}
,
{0.0679746,0.0262636,0.155496,-0.0203116,-0.0525201,-0.150819}
 };
  static const float bias2[1] = { -0.0705352 };
  static const float weights2[][1] = { {0.36799}
,
{0.385182}
,
{-0.0952806}
,
{-0.0514673}
,
{-0.025081}
,
{0.0557067}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_6(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_6(v, index);
}
static int assign_gen_lepton_prior_1_1_6() {
  global_gen_lepton_prior.at(1,1,6) = &specialized_gen_lepton_prior_1_1_6;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_6 = assign_gen_lepton_prior_1_1_6();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_3_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.201575,-0.302092,-0.459723,-0.67357,-0.248896,-0.0297587 };
  static const float weights1[][6] = { {-0.0340976,0.21813,-0.0655678,0.201525,-0.0529183,0.0272496}
,
{0.170672,0.284227,-0.0696571,0.692014,-0.183963,-0.866283}
,
{-0.654644,-0.629107,-0.10264,-0.356389,-0.143865,-0.807876}
,
{0.128142,0.75668,-1.11009,-2.15341,-0.751849,0.108361}
,
{-0.278427,-0.36827,-0.339619,-0.616268,-0.265243,-0.027103}
,
{-0.356578,-0.275737,-0.453205,-0.47126,-0.206335,-0.100552}
,
{-0.0751691,-0.558398,-0.264845,-0.538623,-0.221385,0.097873}
,
{0.07822,0.0499112,0.260948,0.0163792,-0.532317,0.0592475}
,
{0.196292,-0.34449,0.808019,-0.158934,0.176113,-0.222692}
,
{0.0664505,0.245411,-0.0260742,-0.0734636,-0.0946881,0.0815441}
,
{-0.154688,0.124193,0.0685713,0.00242591,0.00644534,0.0718846}
,
{-0.116829,-0.024725,-0.118839,0.137187,-0.0758663,-0.064187}
,
{0.034376,-0.135805,-0.245061,-0.0922421,-0.124485,-0.133159}
,
{0.22491,0.0577499,0.21834,-0.124244,-0.0807733,-7.83993e-05}
,
{0.221898,0.0483951,-0.111264,0.00539192,0.0755591,-0.0659228}
,
{0.297109,-0.119933,0.432626,0.319682,0.232963,-0.181904}
,
{0.427036,-0.153151,0.424721,0.173428,0.125465,0.00729807}
,
{-0.0926394,-0.247664,0.057368,-0.768944,0.00749744,-0.0385478}
,
{0.012721,-0.0503882,0.0427112,0.0219198,0.0252312,-0.147314}
,
{0.149228,-0.0194208,0.175615,0.0577315,-0.0118076,-0.118586}
,
{-0.0445782,-0.0541978,0.137775,0.0863426,-0.123598,-0.236439}
,
{-0.0370901,-0.14801,-0.0243074,-0.123289,-0.0491175,0.0138178}
,
{0.0177631,0.0299614,0.137693,-0.0379608,-0.126914,0.0593582}
,
{0.0223712,-0.124979,-0.0514526,-0.00346156,0.0361252,-0.174958}
,
{-0.169983,0.0832934,-0.186915,-0.0203876,0.0533068,0.0754413}
,
{-0.228195,-0.171104,-0.0191579,-0.0736215,-0.153373,0.135679}
,
{-0.0585283,0.0658727,-0.17077,0.0735323,-0.0922561,-0.0849369}
,
{0.0792894,-0.109784,-0.223575,0.235855,-0.197893,0.0444991}
,
{-0.0925601,0.032586,-0.0340187,-0.145413,-0.0445381,-0.119591}
,
{0.172755,0.0485886,0.111969,0.131456,0.0406206,0.0450122}
,
{0.0718658,0.121309,-0.172649,-0.0605067,-0.113048,0.0827454}
,
{0.147892,0.0397383,0.048621,-0.0118421,-0.146598,0.181727}
,
{-0.0881557,0.196034,0.0569944,-0.017175,0.00318744,0.0170745}
,
{-0.00428364,-0.00313826,0.151819,0.0175856,0.175884,-0.0744862}
,
{0.00229459,0.0643095,-0.0585301,-0.01793,0.0400094,-0.125632}
,
{0.048219,-0.249281,0.0182515,-0.00358431,-0.00620014,-0.0316977}
,
{-0.0307321,0.139529,0.0458425,0.0178424,0.00870841,-0.068936}
,
{-0.147672,0.0655441,0.0373233,-0.022055,0.0100636,-0.0551201}
,
{-0.0839843,-0.125165,0.146843,0.0456271,-0.0557443,-0.12377}
,
{-0.0104495,0.055132,-0.0129286,0.00958025,0.0695055,-0.085404}
,
{-0.206829,-0.042245,0.0552977,0.0530968,-0.0289736,-0.180336}
,
{-0.139348,-0.173409,0.0480744,0.142743,0.113374,0.113757}
,
{-0.146204,0.025689,0.0475617,-0.00403802,-0.00114106,0.176774}
,
{-0.272868,0.0403146,0.0683968,-0.100094,-0.0231861,0.0601828}
,
{-0.0595657,-0.0242946,0.0828339,-0.0766786,0.0475511,0.0322801}
,
{0.00626469,0.147296,-0.0732027,-0.0741417,-0.107806,0.124588}
,
{0.152753,-0.217841,-0.0172245,0.193542,0.0226803,-0.214358}
,
{0.0279818,0.0142199,-0.0277915,-0.0194861,0.0192042,-0.121117}
,
{0.134602,0.119954,-0.0143878,0.0147639,0.00167784,-0.334779}
,
{0.0221167,0.136791,0.129888,0.0610583,0.0512251,0.0414016}
,
{-0.142894,-0.0734705,-0.0564367,0.0315229,-0.0588303,0.106685}
,
{0.26251,0.0113092,-0.0182689,-0.127969,-0.0473011,-0.083376}
,
{0.117627,-0.0388732,-0.0319329,-0.0120457,-0.00577362,-0.0428808}
,
{0.323294,0.119832,-0.0650452,0.0838078,0.0569883,-0.00923915}
,
{-0.0513059,0.0896768,0.054494,0.143268,-0.0631564,0.0550801}
,
{-0.0473216,-0.149216,-0.0421533,-0.0715419,0.0633262,-0.0401645}
,
{-0.188535,-0.11576,-0.00156871,0.0262354,-0.189989,-0.217227}
,
{-0.00484788,0.0525983,-0.0160578,-0.148113,0.0642859,0.165975}
,
{0.0594656,0.186188,0.0611786,-0.0299388,0.090878,-0.0309741}
,
{0.0889022,0.0192024,0.0108609,-0.00294254,0.0149468,-0.105663}
,
{-0.0053507,-0.0946154,0.000667412,-0.0522654,0.0298248,0.162331}
,
{-0.210086,0.0935217,-0.166027,-0.116428,0.0479215,-0.0330109}
,
{-0.0952238,0.0757874,-0.202655,-0.130604,0.0391701,-0.132898}
,
{0.0491553,-0.0672664,0.10943,-0.128637,-0.099854,-0.137721}
,
{-0.0666496,-0.0536961,0.0163535,0.0469573,-0.126836,0.0435908}
,
{-0.0662343,-0.0321115,-0.0589534,-0.0528816,0.0216009,-0.198944}
,
{0.0700888,-0.00914923,-0.0201799,-0.00671066,0.0923469,-0.0699452}
,
{-0.0591537,0.0970371,-0.161984,-0.126285,0.038666,-0.0988243}
,
{-0.0898986,0.0400315,-0.0668823,-0.00189303,-0.188091,0.0115889}
,
{-0.151669,-0.137026,0.0293285,0.0590793,-0.119669,-0.140298}
,
{0.0559863,-0.224891,0.118138,0.159088,-0.0234367,0.121118}
,
{0.0223508,-0.127025,-0.114668,-0.0918295,0.107655,-0.0865401}
,
{0.173124,0.0162262,0.100977,0.184854,-0.00843013,-0.137659}
,
{0.0512226,0.00778572,-0.149367,-0.223277,-0.00594566,-0.0141793}
,
{0.0560254,0.088019,0.0886814,-0.0194876,0.108585,-0.0786291}
,
{-0.0373938,0.0510616,0.0372114,0.114746,-0.00218325,-0.149072}
,
{-0.084427,-0.149061,-0.0974895,0.191794,0.2431,-0.0481692}
,
{0.0292103,0.0613001,-0.0176909,-0.117523,0.0958687,0.0667271}
,
{-0.134898,0.0666644,-0.00936618,-0.0927881,-0.0282595,0.133055}
 };
  static const float bias2[1] = { -0.326963 };
  static const float weights2[][1] = { {0.0256207}
,
{-0.0450717}
,
{0.0596878}
,
{-0.080827}
,
{0.0875067}
,
{-0.378981}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_3_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_3_59(v, index);
}
static int assign_gen_lepton_prior_10_3_59() {
  global_gen_lepton_prior.at(10,3,59) = &specialized_gen_lepton_prior_10_3_59;
  return 0;
}
static int initialize_gen_lepton_prior_10_3_59 = assign_gen_lepton_prior_10_3_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_4_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.110892,-0.056496,0.00683201,-0.104495,0.0533978,-0.0757897}
,
{-0.0154372,0.17486,0.182523,0.171044,0.0483536,0.12321}
,
{-0.0807887,-0.23838,-0.0332198,-0.120894,-0.19089,0.207525}
,
{0.0190169,0.170619,0.0960418,0.133184,0.222651,-0.0140341}
,
{0.0255219,-0.102253,0.0415753,0.115671,-0.0841843,0.185689}
,
{0.0173438,-0.113881,0.168666,0.0388457,-0.0726999,0.183178}
,
{-0.224171,-0.103144,0.0774944,0.000957551,-0.100617,0.00109648}
,
{-0.223522,-0.133554,-0.113237,-0.148238,0.239868,0.113108}
,
{0.0043835,0.0170886,0.231894,-0.0147908,0.0530946,0.0613051}
,
{-0.041577,-0.110764,-0.0385659,0.0260055,0.0880717,-0.0192411}
,
{0.148532,-0.112922,-0.216146,0.122386,-0.00935748,-0.00896324}
,
{-0.0855968,0.0322113,0.0558579,-0.195008,0.0126831,0.0705906}
,
{0.0590507,0.0979967,0.0607532,0.0964482,-0.0943915,0.0620211}
,
{0.096497,0.0094464,0.20268,-0.00639833,-0.208628,-0.167681}
,
{-0.114221,0.119104,0.154153,-0.00520056,-0.0236627,-0.0278413}
,
{-0.0572468,-0.0533751,-0.00804953,-0.106864,-0.107239,-0.106946}
,
{0.135132,0.143029,-0.0852879,-0.0701908,-0.0209496,0.0619919}
,
{-0.129123,0.119425,0.12259,0.0809156,-0.101936,0.126929}
,
{0.0882341,0.0454615,0.0354167,0.0122861,-0.0936613,-0.0646614}
,
{-0.249527,-0.130811,-0.134036,-0.063374,-0.0654607,-0.02011}
,
{-0.194203,0.208068,0.0599787,-0.0408036,0.191311,0.0856902}
,
{0.248528,-0.103736,-0.053125,-0.209893,-0.0720072,-0.0368054}
,
{-0.0829366,0.000197601,-0.115808,-0.0655148,0.0801761,0.0681783}
,
{-0.0504927,0.0184029,0.0150082,0.0431891,-0.100393,0.0632647}
,
{0.0957565,-0.172913,-0.0180176,-0.0776263,0.241667,-0.0368789}
,
{0.0967929,-0.139882,-0.0895635,-0.0159623,-0.00588672,0.216975}
,
{0.0671845,-0.0182672,0.108695,0.0144799,-0.00270257,0.0331742}
,
{-0.0815476,-0.087931,0.18195,0.0159225,-0.0867877,-0.0346637}
,
{-0.0637297,0.0678162,0.160102,-0.179024,0.014098,-0.169771}
,
{0.0304017,0.022131,-0.0513273,0.188139,-0.00325623,0.224523}
,
{0.0377018,0.029641,0.17974,0.0788163,0.117154,-0.0960997}
,
{-0.023907,0.167984,0.105768,0.0687474,0.101895,0.022877}
,
{0.124702,-0.094375,-0.0718103,0.102035,-0.0219823,-0.173993}
,
{-0.117568,0.20856,-0.0681555,-0.0432263,-0.209311,-0.0417466}
,
{0.0141775,0.0668301,0.104532,-0.0106333,-0.0294335,0.0266467}
,
{0.0192048,-0.0435427,-0.115695,-0.247837,-0.052908,-0.0246707}
,
{-0.159459,0.070172,-0.105782,-0.0565701,-0.00443433,-0.0592753}
,
{0.172429,-0.041456,-0.128156,-0.104829,-0.00253089,-0.156457}
,
{0.210628,-0.0171994,-0.044525,0.175788,0.0940637,-0.0202603}
,
{0.0534184,-0.0590802,0.077973,-0.00405675,-0.175397,0.112541}
,
{0.0656264,0.164577,0.0995051,-0.104913,-0.138866,0.12445}
,
{-0.118558,0.0475752,0.0998892,0.100079,-0.0430365,-0.074114}
,
{-0.103094,0.0516906,-0.0315831,0.129576,-0.0601408,0.222905}
,
{0.00421786,-0.043828,-0.0573691,-0.12868,0.00287152,0.130649}
,
{0.0848725,0.0153564,-0.0296252,-0.0767583,-0.0623754,-0.020078}
,
{-0.219875,0.0782093,0.0731718,0.0611781,0.0160723,0.12458}
,
{0.129081,0.0296092,0.0626641,0.189712,-0.175094,0.0712052}
,
{0.00947715,-0.0411832,-0.00491345,0.164963,-0.0873133,0.0763912}
,
{0.134928,-0.199872,0.235254,-0.236406,0.139657,0.0308028}
,
{-0.0333727,0.0940338,-0.138589,0.0302974,-0.0582106,0.206063}
,
{0.00282299,-0.228408,0.0435846,-0.0380677,-0.0113163,-0.078748}
,
{-0.178209,0.0492281,-0.0912956,-0.0127233,-0.232554,-0.117503}
,
{-0.194924,-0.00962419,-0.0852137,-0.113692,0.188794,-0.086569}
,
{0.0346464,0.226078,-0.172762,-0.111509,-0.03806,0.111058}
,
{0.216149,0.0309545,-0.0290332,0.0501931,0.0837195,-0.0548549}
,
{0.0402979,-0.0821001,-0.0715606,0.122274,-0.180144,0.0145231}
,
{0.0841964,0.0318349,-0.0947491,-0.0641127,-0.0241472,0.0884864}
,
{0.0794816,-0.0500952,0.217005,0.0490205,0.0575608,0.137829}
,
{-0.0119418,0.0793066,-0.0190498,-0.122531,0.126641,-0.107871}
,
{-0.155098,0.12235,0.210105,-0.174078,0.0257344,0.0413697}
,
{-0.0264353,-0.0597677,-0.126855,-0.120669,-0.0335136,-0.150998}
,
{-0.0423821,0.00632539,0.0648274,0.0956236,-0.0218733,-0.0479918}
,
{0.00553442,0.0502155,0.0471819,0.0360611,-0.0793091,0.0436845}
,
{-0.0182523,-0.0318368,-0.0540524,-0.0669164,-0.00687992,-0.0440276}
,
{0.0922912,-0.0530157,-0.144672,-0.10645,0.0410385,0.11855}
,
{-0.117918,0.151059,-0.0935302,-0.175499,0.242791,0.175665}
,
{-0.00342677,-0.185804,-0.246043,-0.146398,-0.0118109,-0.0671308}
,
{-0.063884,0.157965,-0.111726,-0.0591176,0.0731136,0.165986}
,
{-0.0850762,-0.177329,0.0835887,-0.0650774,-0.0310069,0.0874052}
,
{-0.211328,0.114809,0.0460602,-0.0161412,0.0914955,0.000205181}
,
{-0.0358371,-0.138007,-0.0203771,-0.00330913,-0.0701604,0.202383}
,
{0.194018,-0.128243,0.0848356,-0.217079,-0.111571,0.0221767}
,
{0.156786,-0.00800839,0.0092267,-0.242813,0.0333236,0.189962}
,
{-0.0160299,-0.0670367,-0.0778997,0.24728,-0.0936384,-0.127001}
,
{-0.0133423,0.16322,0.188255,-0.0668083,-0.116238,-0.042627}
,
{-0.0397955,-0.0863823,-0.0353537,-0.146405,-0.0228906,-0.132697}
,
{0.0596705,-0.0910657,-0.0296581,-0.170242,-0.0336995,0.245472}
,
{0.0353446,0.206746,0.150914,0.0660872,-0.0312228,0.0155965}
,
{-0.0447658,0.0535992,-0.0810419,-0.0433925,0.0411571,0.0019041}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.0648425}
,
{-0.0340693}
,
{-0.177565}
,
{-0.0897106}
,
{-0.0777996}
,
{-0.0250757}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_4_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_4_57(v, index);
}
static int assign_gen_lepton_prior_10_4_57() {
  global_gen_lepton_prior.at(10,4,57) = &specialized_gen_lepton_prior_10_4_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_4_57 = assign_gen_lepton_prior_10_4_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_4_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.200805,-0.408096,-0.0864393,-0.385196,-0.521548,-0.169499 };
  static const float weights1[][6] = { {0.124971,-0.173668,0.372897,-0.271624,-0.779073,0.172247}
,
{-0.121217,-0.254814,0.105671,-0.193286,0.252441,0.289691}
,
{-0.229149,0.00399376,0.00120704,0.249722,0.159292,0.0626919}
,
{0.964163,-1.15199,-0.6293,-0.126558,-2.21532,-0.694755}
,
{0.344753,-0.377853,-0.261515,-0.453797,-0.621071,-0.252591}
,
{0.213239,-0.351853,0.00885622,-0.416488,-0.34058,0.100793}
,
{0.0938297,-0.489537,0.0277253,-0.336658,-0.301098,-0.132366}
,
{-0.106216,0.381037,-0.104561,-0.541995,-0.0138068,-0.0742427}
,
{0.156152,-0.130413,-0.451498,-0.140973,0.115456,0.0633787}
,
{0.030524,0.209993,0.122019,0.0591464,0.123535,0.163364}
,
{-0.0489756,0.0386135,-0.049312,0.0181234,0.00875286,0.138626}
,
{-0.159503,0.0722267,-0.127221,0.0273143,-0.169369,-0.0438455}
,
{0.200389,-0.142428,-0.109679,-0.168582,-0.281771,-0.273861}
,
{-0.108571,0.187507,0.0368066,0.020847,0.279443,-0.113496}
,
{0.150029,0.0515458,-0.0456771,0.0186538,0.0381269,0.218368}
,
{-0.0600926,0.219678,0.0862797,0.147096,0.67495,-0.119295}
,
{-0.213917,0.28719,0.126712,0.444573,0.554788,-0.0407488}
,
{0.0534667,-0.120583,0.201779,-0.315426,-0.117831,0.0241288}
,
{-0.257026,-0.00163691,0.0454039,0.0045825,0.0666632,-0.212695}
,
{-0.242568,0.0146012,0.0259157,0.034535,0.410643,-0.0277987}
,
{-0.190498,0.0359194,-0.182089,-0.0430106,0.0101965,-0.0863112}
,
{-0.00986674,-0.127235,-0.170617,-0.146437,0.0327436,-0.165729}
,
{-0.0628729,0.0408592,0.0440758,0.0119105,-0.0274339,0.11632}
,
{-0.0449573,0.0857209,-0.229737,0.0639114,-0.089544,-0.102923}
,
{-0.032946,-0.0578397,0.186499,-0.0436691,-0.646708,-0.0216901}
,
{0.227184,0.168563,0.157177,0.0493717,-0.216921,-0.0575778}
,
{-0.271488,0.0288161,0.666926,-0.0482452,-0.214717,0.290592}
,
{-0.220478,-0.205117,0.241984,-0.301682,-0.160804,0.189636}
,
{-0.21568,0.332426,0.0578271,-0.374924,0.0566571,0.208203}
,
{-0.0391854,0.158958,0.0727569,0.0433569,-0.0316046,-0.0254351}
,
{-0.0255432,-0.0651304,-0.0625281,0.0736342,-0.093437,0.21663}
,
{-0.154933,0.129019,0.0531759,0.0135861,-0.0427376,-0.320175}
,
{-0.0662024,-0.0158569,-0.0862688,-0.039194,0.0134209,-0.101489}
,
{-0.0476029,-0.172588,-0.0569486,0.110298,-0.134239,-0.0542522}
,
{-0.00618021,0.188803,-0.046022,0.142294,0.00136589,-0.0348482}
,
{-0.00485415,-0.132231,0.0855136,-0.0834192,-0.100619,-0.0186704}
,
{-0.148135,-0.044769,0.178643,0.0179925,0.157147,-0.167207}
,
{0.0554787,0.00610417,-0.0243994,0.022437,-0.029135,0.0766293}
,
{0.0977198,0.0137398,-0.0158571,-0.0570011,0.0574545,0.182668}
,
{0.152824,0.138394,0.000334825,-0.0486478,-0.052143,0.170814}
,
{0.0177906,-0.120093,0.113058,0.0230447,0.068478,-0.0630643}
,
{-0.0806093,0.0599209,-0.0316657,-0.01195,-0.0448824,-0.106926}
,
{0.102183,-0.0289243,-0.0592872,0.00222063,0.0227876,0.08397}
,
{-0.0105097,0.00263695,0.0202606,-0.0379832,-0.00833002,0.0949138}
,
{0.00932452,-0.0127234,-0.0573646,-0.0320916,-0.0233677,0.0927508}
,
{-0.0139151,-0.0400809,0.00621846,0.0308277,0.05615,-0.0244318}
,
{0.00491024,0.0126232,0.0285896,-0.0392414,0.0305951,-0.0824684}
,
{-0.0475254,0.0235769,0.0174371,0.00746814,-0.0208499,-0.0443264}
,
{-0.0842563,-0.0274245,-0.0735545,-0.0638576,0.0915507,-0.078616}
,
{-0.0449462,0.0406972,-0.0410377,-0.0704232,0.127125,-0.0541542}
,
{0.0205328,0.00511144,0.0199076,0.125005,-0.194438,-0.063895}
,
{-0.0751787,0.0723255,-0.0620124,0.0518944,-0.118515,-0.0403819}
,
{0.145701,0.0286865,0.0668286,0.0260463,-0.0427492,0.17576}
,
{-0.00988331,0.015483,0.119626,0.0105502,0.0414148,0.0126378}
,
{0.104694,-0.0460569,-0.0370608,0.156385,-0.0411271,-0.055085}
,
{-0.103278,0.0290813,-0.141883,-0.0138033,0.10854,0.00907921}
,
{-0.124433,-0.0144844,-0.00155795,-0.157159,-0.0952479,0.0120867}
,
{0.116433,0.0178738,-0.12521,0.0676067,-0.130351,0.0548553}
,
{0.361149,-0.124643,-0.257248,-0.172324,-0.0329576,0.0586348}
,
{0.212785,0.178803,-0.0376213,-0.0663628,-0.0667654,0.130189}
,
{0.0900871,-0.0447388,-0.0515258,-0.00794075,-0.023236,-0.0248741}
,
{0.0726401,-0.0650741,-0.123591,0.0753314,-0.00755705,0.0972356}
,
{0.0421148,-0.0137591,-0.0749631,-0.0497858,-0.0642107,0.0106659}
,
{0.406643,0.358081,-0.504878,0.251072,0.364314,-0.140245}
,
{-0.00428814,0.0353204,0.154302,0.0123486,0.0468585,-0.0441302}
,
{0.180374,0.0358425,-0.0420373,0.0906208,0.0290869,0.154316}
,
{0.172031,-0.0101045,0.172985,-0.101742,0.0608394,0.252296}
,
{-0.0240222,-0.0227574,0.0401671,0.0735318,0.0119859,0.0656374}
,
{0.0443911,0.245204,0.3378,-0.218988,-0.214327,0.140719}
,
{0.0768032,-0.0807786,-0.263074,0.0516887,-0.0892866,0.0450755}
,
{0.26844,-0.0463971,0.156403,-0.188159,-0.17424,0.246014}
,
{-0.00564163,0.0936404,-0.158782,0.14484,0.0289036,0.0529732}
,
{-0.0112704,0.00871435,0.0815078,-0.0623647,0.0209113,-0.113575}
,
{-0.0284841,-0.0487868,0.407293,-0.163007,-0.534439,0.0542541}
,
{0.338047,-0.138852,-0.688644,0.40854,0.802017,-0.337978}
,
{0.325172,-0.353242,-0.709257,0.423199,0.874065,-0.365058}
,
{0.36765,-0.351715,-0.955217,0.386825,0.777742,-0.128653}
,
{-0.301396,-0.013232,0.602961,0.149155,0.0621046,0.0589107}
,
{1.59669,-1.97332,0.238371,-0.275365,0.170492,-1.54931}
 };
  static const float bias2[1] = { -0.125664 };
  static const float weights2[][1] = { {-0.0317878}
,
{0.0531782}
,
{-0.0239036}
,
{0.0484139}
,
{0.0295247}
,
{0.0320245}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_4_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_4_58(v, index);
}
static int assign_gen_lepton_prior_10_4_58() {
  global_gen_lepton_prior.at(10,4,58) = &specialized_gen_lepton_prior_10_4_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_4_58 = assign_gen_lepton_prior_10_4_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_7(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0226956,0.0519176,-0.0206206,0.0464246,-0.135885,-0.0616968 };
  static const float weights1[][6] = { {-0.0387902,0.112461,0.150534,0.0219529,0.0309363,0.070527}
,
{-0.127963,0.320328,-0.302972,-0.0399552,-0.213673,0.112652}
,
{0.232889,-0.0970781,-0.0778726,0.111571,-0.382521,-0.207568}
,
{-0.459859,1.91225,-0.290992,-0.0349706,-0.519449,0.538096}
,
{-0.0697318,-0.0041294,-0.0286431,0.0592391,-0.287769,-0.107946}
,
{0.0123414,-0.0610967,-0.00590947,0.171026,-0.0458617,0.0438663}
,
{0.169571,0.0360654,0.0797963,-0.114126,-0.184632,-0.14442}
,
{0.17019,0.0113203,-0.0841926,-0.014482,-0.201359,0.0178405}
,
{0.154682,0.148206,-0.186279,-0.0837569,-0.438696,0.103627}
,
{-0.138908,-0.0412538,-0.0876236,-0.0189435,-0.0193916,-0.108609}
,
{0.146735,0.145506,-0.224792,0.0150533,-0.0623508,0.0739023}
,
{-0.0951315,0.00494356,-0.313337,0.0411852,0.0141435,0.12863}
,
{-0.156095,-0.0187329,0.0354146,0.0758335,0.050775,0.0810115}
,
{0.0409849,-0.126423,0.155701,0.0872388,0.00516686,-0.114467}
,
{-0.0755713,0.0509357,-0.0528504,0.11051,-0.00518986,0.182268}
,
{-0.0661192,-0.0033881,0.201558,-0.0191295,0.229277,0.0704353}
,
{0.0509829,-0.174641,-0.00654063,0.0774089,0.178416,0.205809}
,
{0.191986,0.0286767,0.424762,0.132249,0.119824,0.0799845}
,
{-0.0895638,-0.137044,-0.114053,0.242692,-0.137158,-0.203211}
,
{-0.0165192,-0.102227,-0.1578,-0.0658412,-0.133422,0.0747764}
,
{0.00280078,-0.0364297,-0.0189668,0.131624,-0.228508,0.0983143}
,
{-0.0879995,0.0864477,0.0471325,-0.201873,0.00958055,-0.0115215}
,
{-0.231341,-0.0798942,-0.0531777,0.102558,-0.0969217,0.147873}
,
{0.0233112,0.0920135,-0.0651265,0.236758,0.126345,0.119972}
,
{-0.153384,-0.0952469,0.144819,0.0063646,-0.170181,0.00110178}
,
{-0.131947,-0.135608,-0.107681,-0.0749872,-0.135307,-0.0608301}
,
{-0.0620309,-0.217693,0.0578863,0.0359248,0.0692206,-0.114504}
,
{-0.0123449,0.0027532,0.138621,0.0806304,0.00390839,-0.0825808}
,
{-0.213947,-0.154856,-0.0544022,-0.034666,-0.0565304,-0.00972672}
,
{0.00858119,0.0982984,-0.187461,0.0670196,0.0271678,-0.0936467}
,
{0.259621,0.0774261,0.107836,-0.0585264,0.223961,-0.0791861}
,
{0.110746,0.159873,0.210933,-0.0325887,-0.0135571,0.16663}
,
{0.312713,0.0196509,-0.0205103,-0.0248928,0.165563,-0.0964659}
,
{-0.0527864,0.0775254,-0.0377273,0.0949966,-0.0613073,0.046622}
,
{0.0775356,-0.158719,-0.196079,-0.0364202,0.0193421,-0.121971}
,
{-0.259951,-0.0773783,0.183137,0.0702092,0.0253601,0.0730198}
,
{0.389805,0.310139,0.0860416,0.215791,-0.27767,0.0149314}
,
{-0.117753,-0.116907,-0.0306927,-0.103192,0.0603202,-0.0466408}
,
{0.323212,0.183869,0.280901,0.334244,0.0370874,0.193098}
,
{-0.0382112,0.141252,0.0935937,0.0390744,0.246913,0.018249}
,
{0.18735,0.0334108,0.0193663,-0.176888,-0.220639,-0.0927389}
,
{0.15803,-0.131608,-0.439144,-0.1731,-0.0675419,-0.137774}
,
{0.0566891,-0.0140001,-0.320469,-0.138561,-0.273581,-0.0793168}
,
{-0.117299,-0.238669,0.0234598,0.085657,-0.305012,-0.0569517}
,
{-0.0788208,-0.123011,0.11346,0.110795,-0.132975,0.0281271}
,
{-0.160384,-0.0868725,0.0526686,-0.259154,0.0520895,-0.118035}
,
{-0.0376686,0.194633,0.0246859,-0.119827,-0.39539,0.0498109}
,
{0.00146962,-0.0571689,-0.0594582,-0.0435578,0.00784919,-0.0660098}
,
{-0.373728,-0.200714,-0.211237,0.00793657,-0.124984,-0.0264269}
,
{-0.00828365,0.0313412,0.00465602,0.0107494,-0.244582,0.0274315}
,
{-0.0762418,0.0136121,-0.187974,0.0332684,-0.109804,0.0574134}
,
{0.236549,0.284867,-0.0236821,0.111306,-0.0696335,0.070191}
,
{0.184123,-0.00673498,0.0842974,0.0143337,0.0481869,0.00284325}
,
{-0.211956,-0.11493,0.143856,-0.0333852,0.33997,-0.0434517}
,
{-0.135366,-0.134607,0.0954942,-0.0709692,0.174424,0.0430014}
,
{-0.0461701,0.0148419,0.176025,-0.0432453,-0.136795,0.0851381}
,
{-0.0316747,-0.0588713,0.046629,-0.00758334,0.0966993,0.0893381}
,
{0.0961345,-0.150731,0.186343,0.210686,-0.0851623,-0.0609883}
,
{-0.0127141,0.06134,-0.17174,0.163891,0.176687,0.0824387}
,
{0.149199,-0.00582468,-0.106305,-0.170227,-0.0258624,0.0748539}
,
{-0.0533894,-0.0786179,-0.250804,-0.225937,0.000877791,0.0945992}
,
{-0.156181,0.0899308,-0.0986697,-0.262047,0.0817593,0.0295561}
,
{0.151079,-0.0779452,0.108718,-0.0138503,-0.0598465,0.0120747}
,
{-0.117766,0.248821,-0.136014,-0.0148172,0.102643,0.0582743}
,
{-0.0920746,-0.147967,-0.186708,0.161439,0.133943,-0.101225}
,
{-0.0998105,0.0336186,0.0375485,-0.0388821,-0.118096,0.0324141}
,
{0.123736,-0.128308,-0.218104,0.108195,0.0556763,0.114077}
,
{-0.117322,0.137152,0.0847292,0.179223,-0.157742,0.01861}
,
{0.0746314,-0.159363,-0.145114,0.211187,-0.0986268,-0.00574873}
,
{0.0382468,0.0634282,0.00455271,-0.040618,-0.101298,0.188461}
,
{-0.0170129,0.105959,-0.0649738,-0.0141652,-0.0508757,-0.080186}
,
{-0.0661179,0.0138746,0.0480478,0.200777,0.00904234,0.113207}
,
{-0.168516,0.0573007,-0.0419967,-0.0413266,-0.271686,-0.114222}
,
{0.00793033,0.000189986,-0.0651985,-0.102884,0.031449,-0.111247}
,
{-0.109828,0.090414,0.010945,-0.230719,0.165728,-0.192539}
,
{-0.17865,-0.125221,0.0469666,0.14055,0.0731146,0.0903745}
,
{-0.099027,0.156765,-0.174067,-0.172083,0.0107067,0.0506935}
,
{-0.203539,-0.169699,0.102656,0.153342,0.0239543,0.0343738}
,
{-0.0938028,0.0464804,0.239276,-0.107223,-0.210117,-0.0422734}
 };
  static const float bias2[1] = { -0.0208902 };
  static const float weights2[][1] = { {0.0791077}
,
{-0.0855701}
,
{-0.681085}
,
{-0.0411577}
,
{0.141288}
,
{0.0835656}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_7(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_7(v, index);
}
static int assign_gen_lepton_prior_1_1_7() {
  global_gen_lepton_prior.at(1,1,7) = &specialized_gen_lepton_prior_1_1_7;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_7 = assign_gen_lepton_prior_1_1_7();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_5_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.853121,-0.347311,-0.148626,-0.691285,0.604786,0.425929 };
  static const float weights1[][6] = { {-0.432208,-0.202573,0.147677,-0.0809376,-0.0196603,0.090934}
,
{-0.59129,0.00808595,-0.00839047,-0.0920909,0.193592,-0.0279865}
,
{-0.368441,-0.384616,-0.0871522,0.286523,0.236163,0.284958}
,
{-2.17832,-0.935802,0.322677,-2.35401,1.13657,-0.253534}
,
{-0.982279,-0.257691,-0.358602,-0.899039,0.594355,0.483784}
,
{-0.882645,-0.219618,-0.131986,-0.641006,0.473533,0.472103}
,
{-0.741028,-0.236421,-0.263375,-0.602378,0.485466,0.238434}
,
{0.416914,-0.116251,0.0758481,-0.536185,-0.124049,0.16943}
,
{-0.42139,-0.361912,-0.082349,-0.583884,0.293046,0.109048}
,
{0.0787768,0.0446431,-0.0470652,-0.0724763,0.235061,0.122591}
,
{0.0526311,0.0898544,-0.0416056,0.0203712,-0.0290615,0.190372}
,
{0.23601,0.0338065,0.0652324,0.0348141,0.0242913,0.0773279}
,
{-0.168437,0.0259406,-0.00821319,-0.223133,-0.0516203,0.115245}
,
{0.158083,-0.126635,0.249261,0.0310181,-0.322498,-0.00340822}
,
{-0.217427,0.0714532,-0.0752452,-0.15737,-0.107643,0.118077}
,
{0.0184243,-0.1013,0.0708935,0.285398,-0.00896635,-0.208898}
,
{0.151088,0.0504732,-0.128577,0.107275,-0.139485,0.104065}
,
{0.0785183,0.107817,0.0274611,-0.351018,-0.176872,-0.202988}
,
{0.258364,0.00704682,0.191474,0.312903,-0.232055,-0.370158}
,
{0.0673527,0.320862,-0.261033,0.217805,-0.0865709,-0.276649}
,
{-0.0390044,0.17772,-0.010409,0.0538349,-0.0375589,-0.133417}
,
{-0.0378989,-0.129273,0.311865,-0.151657,-0.219541,0.263942}
,
{0.086801,0.108186,0.147535,-0.0947181,0.0372335,-0.0415617}
,
{-0.0307528,0.217335,0.0618635,-0.15037,0.234922,-0.0128556}
,
{-0.0226964,-0.236901,-0.234237,-0.044215,-0.0120861,0.126031}
,
{0.147629,0.0490895,-0.135001,-0.205421,0.16312,0.140892}
,
{0.0242505,0.176163,-0.271279,0.160724,0.0391534,0.127561}
,
{-0.217777,0.104399,0.158986,-0.00185592,-0.147089,0.0276896}
,
{-0.410835,0.10796,-0.032771,-0.224831,-0.152646,0.289047}
,
{-0.0995917,0.207797,0.032768,0.0714264,-0.0639149,-0.00918296}
,
{-0.0794643,-0.196377,0.0636485,0.0982521,-0.133015,-0.175461}
,
{0.0762964,-0.0166236,0.135018,-0.085081,-0.0188701,0.106937}
,
{0.147131,0.0518946,-0.234591,-0.107281,-0.0745212,-0.0296064}
,
{0.156257,-0.114833,-0.188525,0.0289868,0.025068,0.132805}
,
{-0.102643,0.0769964,-0.106408,0.0994885,-0.122329,0.0314572}
,
{-0.0231307,0.0744186,0.118168,0.0162024,0.187528,-0.22729}
,
{0.0937391,-0.0463865,-0.062004,-0.0511382,0.00308923,0.124908}
,
{0.0526678,-0.17521,0.0154683,-0.0471656,0.0270324,0.0627545}
,
{-0.0402128,-0.0043606,0.045746,-0.0377952,-0.0742221,-0.149885}
,
{-0.160893,0.0475336,-0.106266,-0.00699835,-0.0875126,0.167708}
,
{0.00989113,0.0676774,0.0830535,0.020087,-0.0484324,-0.165654}
,
{-0.000466867,-0.0589389,-0.00496404,0.0313267,-0.0676319,-0.0406708}
,
{0.144724,-0.0784708,0.0532287,0.00392459,0.135414,-0.000261587}
,
{-0.00695712,-0.0120986,0.107922,-0.0511788,-0.0147303,-0.0619267}
,
{0.0245282,0.0278102,0.0475716,0.06337,-0.154608,0.135936}
,
{0.0382419,-0.0621609,-0.206869,-0.119655,0.0417999,-0.135325}
,
{0.0149243,0.116352,-0.186727,0.0265684,0.0602841,0.0287001}
,
{-0.034907,0.134523,0.0595191,0.0454671,0.228392,0.0710819}
,
{0.00160103,0.0791398,-0.110865,0.0223732,0.114257,-0.0176707}
,
{-0.18696,0.135086,-0.00805885,0.0633901,-0.0818935,0.0189415}
,
{0.133074,-0.173493,-0.0669905,-0.122999,0.19417,-0.0626446}
,
{-0.0186747,0.0207947,0.0405399,0.021615,0.0660851,-0.0410389}
,
{0.0632989,-0.0355703,0.0226274,0.0859829,-0.14285,0.00132413}
,
{0.0188531,-0.152084,0.069406,0.0564805,-0.0569444,0.0225766}
,
{-0.0404042,0.107564,0.123657,0.0128294,0.0171176,0.00574242}
,
{0.00414907,0.151755,0.02608,-0.0534065,0.0233001,0.0628381}
,
{0.0373825,-0.058361,-0.0579243,0.0610874,0.0461955,0.045099}
,
{0.00253093,0.052225,-0.199547,-0.0291621,0.258931,-0.213357}
,
{-0.0144097,0.0747992,-0.0865729,0.000451669,-0.0650138,0.0233525}
,
{0.115364,-0.0128679,0.0408309,0.0946782,-0.0113688,0.0433689}
,
{-0.13235,-0.0452833,0.0268597,-0.0828203,-0.104215,-0.0652263}
,
{0.00747578,-0.00579019,0.0101657,-0.0311838,0.186982,-0.0446177}
,
{-0.11247,0.367154,0.738238,0.239842,-0.169891,0.00161962}
,
{-0.000285996,-0.0144342,0.0645843,-0.00543156,0.0665616,0.000710353}
,
{-0.0341467,-0.178247,0.00152345,0.149654,-0.044921,0.0124141}
,
{-0.0221502,-0.107774,-0.00307673,-0.15895,0.0848535,-0.213632}
,
{0.0407859,0.105584,-0.00564837,0.0123606,0.0697362,-0.0543418}
,
{0.0441819,-0.326391,-0.00966609,0.624394,0.426612,0.157188}
,
{0.00453419,-0.0711839,-0.0927487,-0.030107,-0.090965,-0.104085}
,
{0.0829165,0.13433,-0.0783311,-0.0466105,0.0399028,0.141938}
,
{0.0443322,-0.0485578,0.0272819,0.0750977,-0.0286829,-0.0969716}
,
{-0.119283,0.143216,0.0348456,-0.0460412,-0.0631115,0.161507}
,
{0.0709677,-1.34064,-0.0421755,0.380046,-0.307682,0.810394}
,
{-0.00983023,0.0878222,-0.132966,-0.0306268,-0.101179,0.0402366}
,
{-0.190556,0.135738,-0.110944,0.173371,-0.232928,0.102025}
,
{0.0135871,0.0715674,0.0197291,0.0769753,-0.124011,0.164974}
,
{-0.16514,0.191879,0.00600072,-0.00741274,-0.220834,0.256826}
,
{0.0558294,0.0239873,0.163301,-0.0732872,0.112776,0.0554065}
,
{-0.489837,-0.166506,0.862669,-0.148573,-0.0984303,0.241265}
 };
  static const float bias2[1] = { -0.112904 };
  static const float weights2[][1] = { {0.0805115}
,
{0.0208067}
,
{0.0156412}
,
{0.052707}
,
{-0.019783}
,
{-0.0211886}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_5_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_5_57(v, index);
}
static int assign_gen_lepton_prior_10_5_57() {
  global_gen_lepton_prior.at(10,5,57) = &specialized_gen_lepton_prior_10_5_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_5_57 = assign_gen_lepton_prior_10_5_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_5_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.481346,0.761643,-0.448086,0.334169,-0.305292,-0.394225 };
  static const float weights1[][6] = { {-0.318392,0.335544,0.0986339,0.329841,0.0160891,-0.219843}
,
{-0.382789,-0.205659,-0.507244,-0.14879,0.734466,-0.172644}
,
{0.286458,0.931763,0.0603005,0.202877,-0.209022,-0.422024}
,
{-2.48693,0.839445,-3.87728,1.20751,-0.607811,1.75504}
,
{-0.568479,0.680556,-0.33577,0.23776,-0.462538,-0.157089}
,
{-0.30643,0.816907,-0.185786,0.265229,-0.236535,-0.593855}
,
{-0.25201,0.674163,-0.276392,0.351394,-0.387296,-0.40718}
,
{0.563939,0.269314,0.181029,0.0285922,-0.390237,-0.273237}
,
{-0.0648845,0.190634,0.122413,-0.206648,0.457977,-0.153745}
,
{0.0757598,-0.147222,0.0392757,0.147674,-0.022499,-0.102337}
,
{-0.196999,0.159368,0.164998,0.0749052,0.0587696,-0.199783}
,
{-0.0344476,0.146303,0.0768731,0.0892346,0.0102416,-0.0362956}
,
{0.0606967,0.250988,-0.233466,0.17168,-0.125102,-0.213658}
,
{-0.0249933,-0.0842895,-0.0133688,-0.297744,0.0180262,-0.454265}
,
{-0.0273715,0.214727,0.141642,-0.039597,0.0228658,0.0344391}
,
{0.10431,-0.0459404,0.144019,-0.275589,0.00403571,-0.0872644}
,
{0.274904,-0.233811,0.0423245,-0.229874,0.0786095,-0.234987}
,
{-0.187192,0.299563,0.219492,-0.0606303,0.274264,-0.305098}
,
{0.00953951,-0.0147578,0.00103799,0.121451,0.05971,-0.169852}
,
{0.111716,-0.10795,-0.0433997,0.0438201,0.392321,0.121781}
,
{0.0109037,0.211395,-0.0284102,0.0640765,0.149995,-0.287847}
,
{0.0715781,0.168179,-0.138386,-0.155169,0.0195266,-0.156405}
,
{0.0278814,0.142108,0.0211012,-0.00166475,0.112636,0.0941004}
,
{-0.0234755,0.224685,0.172151,-0.0452599,0.107032,0.0424762}
,
{-0.0749452,0.0229682,-0.256768,0.118066,-0.342337,-0.187252}
,
{-0.0931702,-0.102638,-0.104772,0.116752,-0.0345923,0.0401665}
,
{-0.0112839,0.00271684,-0.215511,-0.0307291,0.112975,0.0110095}
,
{-0.163657,-0.0501263,-0.145405,0.147168,0.0792908,-0.144323}
,
{-0.0932344,0.120993,-0.10632,-0.0251697,-0.0636141,0.00490737}
,
{0.0840824,0.0211243,-0.150041,-0.236908,0.161153,0.160739}
,
{0.169053,0.0469797,0.0291467,-0.0376126,-0.0862158,-0.186791}
,
{0.0914944,0.041716,0.046361,0.028784,-0.00468592,-0.437977}
,
{-0.0140884,-0.00962535,0.0262616,0.0749046,0.0375505,-0.00494787}
,
{-0.238271,0.0409557,0.145146,0.129582,-0.0893646,-0.0268304}
,
{-0.0747485,-0.101551,0.0250957,-0.121297,0.0712903,-0.0423712}
,
{-0.0381662,-0.0228887,0.164128,0.0122779,-0.133796,-0.0855161}
,
{0.0299395,-0.0579852,0.0704367,-0.0061249,-0.0920881,0.0600391}
,
{0.0318878,0.0654216,-0.0554966,-0.078299,-0.0124027,0.0897045}
,
{0.135129,0.248443,-0.0628551,-0.12995,-0.0593451,0.268567}
,
{-0.0134969,0.14811,0.0789181,0.141495,-0.00703883,-0.0425241}
,
{0.0575172,-0.0692356,-0.113917,-0.0315939,0.0752222,0.0629117}
,
{0.04813,-0.163606,-0.348495,0.102235,-0.0914544,0.273591}
,
{-0.0122018,-0.00695258,-0.0132012,0.0832588,0.0429128,0.111798}
,
{-0.101369,-0.0503271,0.255907,-0.179603,-0.112973,0.00955739}
,
{-0.148189,-0.0365569,-0.00780183,-0.044938,0.0658304,-0.0652138}
,
{0.0856315,-0.0262209,0.172089,-0.0283498,-0.0951992,-0.0280307}
,
{-0.0504426,-0.184495,0.162522,0.0542159,-0.145565,0.0882073}
,
{0.0237411,0.00993106,-0.030168,-0.0889678,-0.0569504,-0.0275408}
,
{0.0817818,0.142855,0.029781,-0.246537,-0.106874,0.282561}
,
{0.125696,-0.161694,0.0283841,0.0254723,0.131386,0.108604}
,
{-0.132678,0.0844993,-0.124379,0.0168579,-0.156844,-0.110042}
,
{0.0991117,0.230647,-0.0583813,0.0205819,0.0327625,0.142442}
,
{-0.0242255,-0.0242688,0.0452355,-0.0656378,-0.020485,-0.0283354}
,
{0.00861293,-0.043243,-0.14057,0.14078,0.0420892,0.265274}
,
{-0.0525726,-0.131988,-0.139767,0.246614,-0.146668,0.107687}
,
{-0.12066,0.012126,-0.198519,0.0612561,-0.045952,0.0119127}
,
{0.0811546,0.0856462,0.00655795,0.0640168,-0.0208048,-0.125235}
,
{-0.116645,0.0456871,0.122667,-0.0275048,0.0715982,-0.138114}
,
{0.0355334,0.0553766,0.0348218,-0.205642,0.00411932,-0.228971}
,
{0.0375553,0.0643407,-0.0746202,0.0138401,0.218718,0.12509}
,
{-0.0532774,0.10434,0.0234674,0.00753822,0.00774624,0.200434}
,
{0.0296038,0.28841,0.03087,0.161228,0.120177,0.0686722}
,
{0.10049,-0.0933772,-0.166283,-0.0978602,-0.161762,0.146732}
,
{-0.17767,-0.0337827,-0.0735224,0.0133065,0.136621,-0.0494156}
,
{-0.00929687,0.0243575,0.0156927,-0.0158098,-0.144785,0.132637}
,
{-0.149929,0.234314,0.161075,-0.103158,-0.123781,0.182074}
,
{0.0460529,0.0368262,0.0380505,-0.145223,0.0641376,0.0597751}
,
{0.109942,-0.0236086,0.0441279,-0.068404,0.0279935,-0.0774485}
,
{-0.0259022,-0.0692947,-0.0388206,-0.109414,-0.152842,-0.0744009}
,
{-0.0979799,0.166855,-0.188118,-0.0829217,0.0697909,0.0528444}
,
{0.0411596,0.125529,-0.160896,-0.0445441,0.0922574,-0.133086}
,
{-0.0871256,0.118444,-0.015531,-0.198697,-0.0653745,0.0996592}
,
{0.0644365,-0.0505235,0.0215096,-0.167882,-0.0671247,-0.0159773}
,
{0.115302,0.0406288,0.0430061,-0.0504988,-0.00255015,0.0383055}
,
{-0.0532775,-0.0330469,0.0342078,0.207564,-0.0337092,-0.0257295}
,
{0.0450034,-0.162101,0.0154406,0.0941565,-0.0648222,0.0108493}
,
{-0.0321383,-0.206461,0.232831,-0.0109444,-0.0485762,-0.0326915}
,
{-0.159907,-0.240397,-0.114228,-0.0496535,-0.130811,0.204633}
,
{-0.0612017,0.0916356,0.0400617,0.0144439,-0.237329,0.0749901}
 };
  static const float bias2[1] = { -0.40937 };
  static const float weights2[][1] = { {0.0634096}
,
{-0.0311735}
,
{0.0201607}
,
{-0.0208594}
,
{0.0388178}
,
{0.0319646}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_5_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_5_58(v, index);
}
static int assign_gen_lepton_prior_10_5_58() {
  global_gen_lepton_prior.at(10,5,58) = &specialized_gen_lepton_prior_10_5_58;
  return 0;
}
static int initialize_gen_lepton_prior_10_5_58 = assign_gen_lepton_prior_10_5_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_10_6_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.440392,-0.528345,-0.489724,0.370066,-0.627693,-0.0427478 };
  static const float weights1[][6] = { {-0.0259039,-0.0613038,-0.0464914,-0.0194184,-0.254636,-0.0654698}
,
{0.0251111,0.165804,0.381935,-0.990251,0.382232,0.066769}
,
{-0.0180433,-0.0656178,-0.738198,0.306607,-0.833625,0.0367976}
,
{2.44818,-2.4274,-1.01895,-0.094107,-2.77718,-1.97566}
,
{0.37646,-0.338577,-0.510873,0.390024,-0.600129,0.0140125}
,
{0.0832094,-0.251957,-0.295908,0.250089,-0.305442,0.221142}
,
{0.362463,-0.346046,-0.506117,0.396585,-0.426243,0.0836776}
,
{-0.0528459,-0.326596,0.169405,0.0729351,0.431522,0.224318}
,
{-0.0270064,0.099045,-0.122504,-0.0459046,-0.38326,-0.173704}
,
{0.129115,0.0900477,0.0416488,0.153989,0.0504409,-0.0174716}
,
{-0.0719652,0.03608,-0.0462857,-0.0708653,-0.0326286,-0.102787}
,
{0.151772,-0.0736107,-0.0744877,-0.149393,-0.164913,0.0315347}
,
{0.382654,-0.168329,-0.377906,-0.436722,-0.481616,-0.056697}
,
{-0.039788,0.136088,-0.167753,0.0396858,0.0713819,0.0163618}
,
{-0.12113,-0.0681376,0.00743459,-0.149016,0.0362723,0.239059}
,
{0.0890629,0.0517003,-0.293143,0.0018737,0.126385,-0.144564}
,
{-0.0275759,0.0910766,-0.290224,-0.050485,0.101583,-0.0899215}
,
{0.0548481,-0.067239,-0.522614,0.0754322,-0.252421,-0.105669}
,
{-0.0227492,0.171222,-0.00546764,-0.266883,0.13734,-0.335673}
,
{-0.051576,0.135438,-0.136871,-0.18905,0.16443,-0.028683}
,
{0.0102909,0.0913386,-0.130144,0.0280576,0.0323821,-0.44783}
,
{-0.113218,-0.0611253,-0.0721608,-0.00520898,0.00723674,-0.0737846}
,
{0.0411592,0.0204703,-0.125976,0.0406724,-0.00938173,0.132808}
,
{0.237169,0.09242,-0.277277,0.183511,0.104033,-0.265537}
,
{0.374105,-0.0191321,0.202808,-0.00697801,-0.476868,-0.193273}
,
{0.196855,0.0224282,-0.409848,-0.338622,0.072859,-0.0840219}
,
{-0.191466,-0.460943,-0.023198,0.567984,-0.0111867,0.0297644}
,
{-0.0885041,-0.250717,0.0121458,0.0611221,0.189552,0.0809458}
,
{0.225029,0.0911805,0.208423,0.13582,-0.310426,-0.330484}
,
{0.0237436,-0.0421421,-0.0403445,0.0370277,0.192862,-0.184115}
,
{0.182103,-0.0542829,-0.107286,0.0231958,0.112177,-0.0521769}
,
{0.155531,-0.0426396,-0.150887,0.00322804,0.0674622,0.143306}
,
{-0.0350075,-0.110446,0.00243118,0.151322,-0.0489113,-0.0875928}
,
{0.120019,0.0528274,-0.155283,0.165107,-0.111441,-0.0385561}
,
{-0.0335623,0.067721,0.0108688,-0.163739,-0.0989299,0.007575}
,
{0.0381853,-0.0638163,-0.0498961,0.0662197,0.0135927,0.0508582}
,
{0.0845057,-0.0706587,0.33172,-0.0197014,0.0763362,-0.0960987}
,
{-0.224967,-0.0169813,-0.114774,0.0149486,-0.0111071,-0.0882917}
,
{-0.0106051,-0.0208564,0.165251,-0.16299,-0.0499737,0.112885}
,
{0.145996,0.112724,-0.0410522,0.0715328,-0.0600872,-0.0331136}
,
{-0.0672619,-0.138666,0.0742765,-0.0206235,0.048598,-0.0743149}
,
{0.197631,0.0623417,-0.0737151,-0.0696538,-0.0378297,0.0460154}
,
{0.103732,0.101575,0.0633494,0.0118351,0.00295225,0.16627}
,
{0.0353606,-0.0215158,-0.00894227,-0.213925,-0.00923369,-0.106549}
,
{-0.184244,-0.106709,-0.0440052,0.0293438,-0.0195639,0.117063}
,
{0.12113,-0.0921173,-0.0299638,0.0222258,0.0137315,-0.0318573}
,
{-0.00503096,-0.0207198,0.0963878,-0.117773,-0.0453481,0.017665}
,
{-0.118454,0.126224,-0.132287,-0.107357,0.0282846,-0.130355}
,
{0.0753219,0.0331358,-0.129769,0.00936581,-0.000344116,0.101492}
,
{-0.138105,0.0319604,-0.0340588,0.0889974,0.0410196,0.0871867}
,
{0.16106,-0.0688659,-0.0265553,0.0524803,0.0285246,-0.0905374}
,
{-0.0802682,-0.00934014,0.0858719,0.0885863,0.00198879,-0.0335421}
,
{0.0434978,0.0486192,0.144165,-0.189831,-0.0983315,0.0649552}
,
{0.0831239,0.0549874,-0.00839334,0.121467,0.0141429,0.121283}
,
{-0.034631,-0.152787,0.00333584,0.0298195,-0.10571,-0.0732741}
,
{0.180814,0.262727,0.028266,0.117144,0.035743,-0.0890418}
,
{-0.26434,-0.0956227,-0.0631177,0.0170757,0.0908269,-0.012851}
,
{0.80378,-0.469611,-0.376642,0.346496,-1.24759,-0.583891}
,
{0.309076,-0.0422448,0.0277826,-0.124376,0.0838796,0.0661868}
,
{-0.0481785,-0.0265648,0.06562,0.00678495,-0.112443,0.0908395}
,
{-0.190873,-0.123381,-0.0259022,-0.0994721,-0.0246526,-0.126727}
,
{-0.242028,0.167011,-0.0582908,0.155531,0.0318586,-0.0552907}
,
{-0.316369,0.29699,-0.241154,-0.458293,0.799636,0.590021}
,
{0.160707,0.0596554,0.0623581,0.0421738,0.0692792,-0.00910951}
,
{0.00395672,0.0750943,0.0969447,-0.0645268,0.0327862,-0.0425713}
,
{-0.232014,0.0984245,0.121384,0.0303824,-0.00443145,0.0272673}
,
{0.0287876,-0.217805,0.0849155,-0.124408,-0.0225205,0.0344697}
,
{0.972254,-0.321037,-0.47756,0.167051,-0.98259,-0.755541}
,
{0.192679,0.120256,0.0445505,-0.00905829,0.0172891,0.142411}
,
{-0.00453196,0.050008,-0.109533,0.134106,0.0685445,0.0405864}
,
{0.0909225,-0.0780626,-0.110362,-0.101182,-0.0393235,-0.0448554}
,
{0.170786,0.0653364,-0.108205,0.0889466,0.0111185,-0.0349245}
,
{0.824177,0.075139,-0.167307,0.101243,-1.14586,-0.617431}
,
{0.103123,-0.0808792,0.10322,0.182518,0.0659161,-0.0650112}
,
{0.488551,0.158553,0.232068,0.162923,0.18919,-0.0192069}
,
{0.391622,-0.0149078,0.230735,0.273544,0.0567279,-0.159909}
,
{0.171199,-0.0993764,0.0158853,0.069467,-0.0666197,-0.0574042}
,
{-0.0485113,0.0461872,0.0367935,-0.189262,0.0922119,0.0731806}
,
{0.324765,-0.115361,-0.601862,0.0364436,-0.657922,-0.431527}
 };
  static const float bias2[1] = { -0.995687 };
  static const float weights2[][1] = { {-0.0315868}
,
{0.0860791}
,
{0.0193573}
,
{-0.0208411}
,
{0.0681301}
,
{0.0410226}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_10_6_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_10_6_57(v, index);
}
static int assign_gen_lepton_prior_10_6_57() {
  global_gen_lepton_prior.at(10,6,57) = &specialized_gen_lepton_prior_10_6_57;
  return 0;
}
static int initialize_gen_lepton_prior_10_6_57 = assign_gen_lepton_prior_10_6_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_8(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0600779,0.0346802,0.1346,-0.0150761,0.0822647,-0.0990313 };
  static const float weights1[][6] = { {0.147618,0.087105,-0.039182,-0.0451489,-0.0875544,0.0876102}
,
{0.12874,0.0398975,0.0313586,0.171666,0.0390171,-0.0256253}
,
{0.0459494,-0.0298899,0.209426,-0.122501,-0.0258543,-0.192998}
,
{-0.256159,0.320597,-0.18688,0.0261469,-0.0267635,0.1429}
,
{0.00684859,-0.00557538,0.0324879,-0.00419298,0.069023,0.0435585}
,
{0.0625724,-0.140519,0.412846,-0.198819,0.226359,0.0253845}
,
{-0.285784,-0.0347838,0.256208,0.0906299,-0.0661758,-0.043858}
,
{-0.0790744,-0.118177,-0.138692,-0.0191112,-0.0869436,-0.00581995}
,
{-0.0449816,-0.22772,0.0174869,-0.167511,-0.0245946,0.0935083}
,
{0.00572143,0.0614485,-0.0320497,0.0985819,0.183488,0.143282}
,
{-0.027534,0.139307,-0.0431096,0.110694,-0.000326365,0.0816099}
,
{0.0579469,0.156438,-0.175855,0.183354,0.00204924,-0.246191}
,
{-0.036094,0.0807091,0.0827835,-0.0754608,0.0580004,0.162326}
,
{0.029603,0.0258248,-0.0704939,0.0102139,0.0795793,0.0332898}
,
{-0.053448,0.0146023,0.0140785,-0.205879,0.119638,-0.0852032}
,
{0.0342931,0.156402,-0.16609,-0.0165229,-0.154251,-0.0283631}
,
{0.145224,-0.0696094,-0.0469513,-0.137727,0.0700999,-0.0934615}
,
{0.0478943,-0.0727931,0.095818,-0.0340194,-0.149875,0.329962}
,
{0.0223896,0.0453155,0.166795,-0.0546691,-0.159765,-0.0566603}
,
{0.0944619,-0.0707652,0.0036988,-0.106647,-0.000736091,-0.174393}
,
{0.12184,0.102764,0.0181606,-0.202235,-0.0523938,-0.182696}
,
{0.0661259,0.143122,-0.00254103,-0.122868,0.0354838,-0.0558533}
,
{-0.0699461,0.0411738,0.0838864,0.178676,0.193264,-0.0610898}
,
{0.101931,-0.0367829,0.191559,-0.0632832,-0.0409687,0.13332}
,
{-0.112636,-0.00101952,-0.208882,0.132219,0.00324336,-0.062663}
,
{-0.0412253,-0.0354109,0.001471,0.0797077,0.148705,-0.150359}
,
{-0.0965395,0.0982267,0.0959248,-0.0129173,-0.0685731,0.0466338}
,
{0.0169331,0.0156192,0.191714,0.0274016,0.0194666,-0.0252841}
,
{-0.0520709,-0.0108486,-0.0785362,0.0157602,0.13743,0.166857}
,
{-0.215434,-0.012817,0.109529,-0.0238188,0.00567963,-0.0873889}
,
{0.028178,-0.10626,-0.0103312,-0.00666447,-0.220258,-0.0963505}
,
{-0.172798,0.0129543,0.0577949,-0.0411873,-0.0395119,-0.0749853}
,
{0.010622,0.00509398,-0.0547444,0.0967452,-0.0752019,-0.156305}
,
{-0.077712,0.035397,-0.174695,-0.233088,0.14343,-0.101164}
,
{0.0432469,-0.027775,0.0287882,-0.0929379,-0.318046,-0.413971}
,
{-0.0116012,0.00199898,-2.22757e-05,0.156657,0.049317,-0.0538734}
,
{-0.00269651,0.121541,-0.0703437,-0.0468464,0.0850328,-0.272118}
,
{-0.0555554,0.0303786,-0.158114,0.0302628,-0.0372083,-0.268689}
,
{-0.00871021,-0.181834,-0.23423,-0.0814156,-0.650668,-0.328965}
,
{0.0602445,-0.0336578,0.0235419,-0.0240214,-0.211331,0.361691}
,
{0.0506872,-0.0524749,0.169032,-0.0711092,-1.909e-05,-0.132982}
,
{0.139213,-0.0684221,0.482871,-0.00817462,0.257334,0.0317487}
,
{0.0121155,-0.178692,0.214339,-0.134358,-0.00350153,-0.0847236}
,
{-0.263752,0.084819,-0.421642,0.143595,0.0666166,0.232853}
,
{-0.120965,0.00160227,-0.258498,0.0987566,0.109278,0.165448}
,
{-0.0469036,-0.0382843,-0.138362,0.0285737,-0.0639272,0.063173}
,
{-0.0446486,-0.0600021,-0.104977,0.218838,-0.164329,0.21511}
,
{0.0348987,0.0678432,-0.0628442,0.0332394,-0.0608405,-0.0711416}
,
{-0.0745539,-0.150282,-0.0959961,-0.0552272,0.00869993,-0.379667}
,
{0.0553555,-0.104358,0.0855439,0.450917,-0.229922,-0.0788205}
,
{0.0405831,-0.0207136,0.133156,0.255313,0.0265098,-0.179854}
,
{-0.0980037,-0.00789612,-0.213787,0.039399,-0.164955,0.14856}
,
{-0.0665855,-0.0295052,0.0707716,0.0567367,0.238195,-0.00837534}
,
{0.0207401,0.229016,-0.124683,0.0471284,0.116316,0.0244413}
,
{0.0125475,0.160211,-0.06813,0.157006,0.12191,0.0153544}
,
{-0.0390325,0.247629,0.143685,0.0425276,-0.157144,-0.00319581}
,
{-0.0222253,-0.144728,0.00944844,0.208812,0.0310813,0.0794207}
,
{0.0294178,0.133827,0.198201,-0.0807688,0.107704,-0.142693}
,
{-0.105532,0.10605,-0.137407,0.161128,-0.0417795,-0.0329602}
,
{0.0759308,0.18491,-0.0442657,-0.196392,0.00985591,-0.144137}
,
{0.150952,0.0383313,-0.00175451,0.0591323,-0.215184,0.0120356}
,
{0.0287896,-0.00163752,-0.142284,0.0465345,-0.01346,0.122526}
,
{-0.0666473,-0.104877,-0.0305072,-0.106892,-0.117861,-0.0168213}
,
{0.0549419,0.00558402,-0.131845,0.18229,-0.0363217,-0.0928842}
,
{0.152379,0.14982,0.0885655,0.196956,0.0434499,-0.0756005}
,
{-0.0560217,-0.105574,0.129777,-0.168494,-0.00121178,-0.05786}
,
{-0.00911787,-0.146532,0.13568,0.156665,-0.0180237,0.131357}
,
{-0.157399,0.215075,0.0740747,0.0532205,-0.106501,-0.0169578}
,
{-0.18723,0.184301,0.0335963,-0.0909785,0.0101231,-0.0735913}
,
{-0.0462785,-0.163078,-0.135329,0.140052,0.172808,0.0120937}
,
{-0.0201426,0.0629873,-0.0759745,-0.00723383,-0.0347767,-0.213904}
,
{-0.0919008,-0.0738844,-0.0657448,-0.0223955,-0.0513063,0.174145}
,
{-0.131498,-0.158681,0.102421,0.00174638,-0.0533627,-0.088349}
,
{-0.15816,-0.134365,-0.0839618,-0.0653666,-0.136705,-0.0458079}
,
{-0.205512,-0.144029,-0.00367804,0.160122,-0.00574891,0.196934}
,
{0.00226489,-0.107985,-0.112117,-0.0835357,-0.137855,0.14341}
,
{0.0356168,0.152149,0.171546,0.0215332,-0.0688867,0.0730521}
,
{-0.109448,0.065908,0.137643,-0.141906,0.169182,-0.134041}
,
{-0.126284,-0.0140131,-0.100193,-0.24729,-0.086809,-0.0106947}
 };
  static const float bias2[1] = { -0.0424871 };
  static const float weights2[][1] = { {0.114143}
,
{-0.0559026}
,
{-0.064885}
,
{-0.170879}
,
{0.0950916}
,
{-0.622027}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_8(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_8(v, index);
}
static int assign_gen_lepton_prior_1_1_8() {
  global_gen_lepton_prior.at(1,1,8) = &specialized_gen_lepton_prior_1_1_8;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_8 = assign_gen_lepton_prior_1_1_8();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_9(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0318588,-0.103224,0.0426278,0.305698,0.0407405,-0.0770359 };
  static const float weights1[][6] = { {-0.0933671,0.022244,0.176235,0.117575,-0.0358733,-0.131176}
,
{0.113083,0.611337,0.0604679,-0.122292,0.0795182,-0.35898}
,
{0.00377022,0.641299,0.800464,-0.167422,-0.0534582,-0.234983}
,
{-0.569287,1.0462,0.150722,0.769971,-0.119907,0.708858}
,
{0.00296934,-0.178276,0.142153,0.189929,-0.053413,0.0129958}
,
{0.222296,-0.251989,-0.0409186,0.261477,-0.0171914,-0.0759089}
,
{0.113049,-0.161608,0.172034,0.320202,0.127873,0.0966592}
,
{0.0859495,-0.00631424,-0.0163952,-0.116846,0.0218524,-0.0411256}
,
{-0.119535,0.110424,0.0897176,-0.317898,-0.208733,-0.254422}
,
{-0.0965507,0.00322342,0.0876556,0.140388,-0.0195636,-0.0934734}
,
{-0.0355959,0.0396008,-0.00446576,0.0373572,0.00886364,-0.107133}
,
{0.203748,0.157507,-0.248055,-0.0859101,0.246593,-0.224314}
,
{-0.0105384,-0.0601413,0.24166,0.228561,-0.162688,0.00615467}
,
{0.255442,-0.161922,0.131485,0.2411,-0.280514,0.0149838}
,
{0.102067,0.00911832,-0.108463,0.138218,0.0408299,0.0154457}
,
{0.0109037,0.0329817,0.0987655,-0.0258748,-0.00785735,-0.0223377}
,
{0.243386,-0.270839,0.00772616,-0.142569,-0.142244,-0.0204565}
,
{0.0641926,0.294125,-0.00676312,0.0700903,-0.0863202,-0.0580873}
,
{-0.170627,0.395433,-0.218288,0.553544,0.17845,0.168331}
,
{0.0797639,-0.242194,-0.0730922,-0.0814219,0.0198533,0.0110862}
,
{0.103005,0.0470235,-0.221484,-0.00718682,0.0382246,0.0310202}
,
{0.0803556,0.0674901,-0.0654704,-0.0103152,0.164009,0.0687997}
,
{-0.0182141,0.0785801,0.0120053,-0.00290742,0.105085,0.10445}
,
{0.102421,-0.0700433,-0.0776278,0.0793164,0.0418282,0.0506038}
,
{0.183565,0.143837,0.262562,0.162026,0.289037,0.0284633}
,
{0.00894907,0.216818,0.135226,0.194343,-0.0500817,0.03976}
,
{-0.0331285,0.108297,0.0360666,-0.0571353,-0.0251258,-0.0996436}
,
{-0.156037,-0.0161537,0.0658751,-0.10548,0.113474,0.00541809}
,
{0.0159795,-0.0624223,0.0524176,0.272369,0.00832384,0.0399359}
,
{0.0212261,-0.123981,-0.109634,0.203845,0.0441207,-0.0518087}
,
{0.0786199,0.0721817,0.0883318,-0.170125,0.212107,0.116783}
,
{-0.0783411,0.0305357,-0.0445745,-0.0509589,0.0704419,-0.0929514}
,
{-0.113646,0.152872,-0.039512,0.121888,0.012397,0.663643}
,
{0.0095574,0.101373,0.0861198,-0.152556,0.147084,-0.0960094}
,
{0.0248829,-0.0265536,-0.197981,0.0156488,-0.000465228,-0.111091}
,
{-0.0348156,-0.0451628,-0.0592622,0.0386644,-0.0670768,0.0597454}
,
{-0.0299518,0.0591635,-0.299923,-0.064158,0.0849996,0.0117159}
,
{-0.0184709,0.0199701,-0.0357526,0.00302898,-0.0346196,0.0137668}
,
{0.0778003,0.0314496,-0.0260373,0.121484,0.0133596,0.148376}
,
{-0.0884391,0.0637672,-0.0909806,-0.0230318,-0.046428,0.0689453}
,
{0.0484463,0.0780994,0.0684147,0.0107824,0.00066729,-0.0288355}
,
{-0.102725,0.311823,0.780563,0.0220666,0.0271434,0.373001}
,
{0.0533034,0.111285,0.0295745,-0.0349221,0.0597368,-0.0380101}
,
{0.00638192,0.243693,-0.277566,0.0314637,-0.00333897,0.00505547}
,
{0.141314,0.148055,0.0364468,-0.0319325,0.186019,0.0434854}
,
{-0.00920088,0.0323823,0.00186506,-0.0599504,0.0709364,0.0731284}
,
{0.0347284,-0.163021,0.177522,0.119241,-0.120681,-0.0354703}
,
{-0.02796,0.0297833,0.238637,-0.0356344,-0.0312858,-0.0805337}
,
{0.168193,0.310344,0.308773,0.304138,-0.0147038,0.216312}
,
{-0.0495925,-0.00316964,-0.0444982,-0.0959279,0.0790583,0.0601458}
,
{0.00716047,-0.0113063,-0.195813,-0.0814032,0.0377027,-0.105071}
,
{-0.150619,-0.0874761,0.685085,-0.0568073,0.0202457,0.203543}
,
{-0.0261065,-0.00985707,0.243291,0.00299126,-0.0498342,-0.0154572}
,
{-0.0451929,-0.116459,0.31799,-0.0664738,-0.119373,-0.205125}
,
{-0.0685511,-0.0404833,0.0368632,0.0766438,-0.113631,-0.11388}
,
{0.00233365,0.175853,-0.0323249,-0.06458,0.0690919,-0.0132372}
,
{0.0633847,0.0636094,-0.141191,0.0717532,-0.219067,0.122611}
,
{-0.134865,0.0114337,0.139517,-0.151444,-0.0342312,0.162631}
,
{-0.21609,-0.0400786,-0.0813651,0.0318713,-0.142648,0.0743176}
,
{0.207332,-0.0437077,-0.101015,0.0157918,0.172729,0.223424}
,
{0.120307,0.169783,0.125135,0.0219124,-0.0362914,-0.186649}
,
{-0.0236964,-0.0717142,0.191115,0.238184,0.208775,0.000301536}
,
{-0.163306,0.0679796,-0.094845,-0.0178626,-0.023597,0.0377038}
,
{0.0478503,-0.0793063,-0.0535596,-0.224125,-0.00302631,-0.0799733}
,
{-0.0747384,-0.0967269,0.189097,-0.12834,0.0303797,0.0635717}
,
{0.117656,0.0631433,-0.046915,-0.0208646,0.0130211,0.208632}
,
{0.207657,0.0322257,-0.0427751,-0.0318732,0.0297097,0.132845}
,
{-0.155992,-0.142858,0.127423,-0.232786,-0.138667,-0.0372203}
,
{-0.0559454,-0.0597633,0.048054,-0.0376254,0.047562,-0.0773707}
,
{-0.121206,-0.0167651,0.0181325,0.00300257,-0.0192245,-0.0617271}
,
{0.0704116,-0.118738,0.0131564,-0.0486087,0.0508358,-0.106845}
,
{0.0135242,0.0610943,-0.144513,0.174321,0.143561,-0.173897}
,
{-0.124891,0.0819689,-0.0461874,-0.0633143,-0.126775,0.00623494}
,
{0.150166,-0.131282,0.122246,-0.0946066,0.0302479,-0.062291}
,
{-0.189427,0.0380927,0.0214143,0.0221177,0.0113832,-0.0202939}
,
{0.0433864,0.062829,0.11902,0.0435749,0.0807095,0.158873}
,
{0.0685205,-0.0117449,0.0263593,-0.0124165,0.0314134,-0.0701574}
,
{0.184835,0.00715479,0.151247,0.0568387,-0.101778,0.0688226}
,
{0.100645,0.0556911,-0.148596,0.241252,0.108021,-0.0594271}
 };
  static const float bias2[1] = { -0.0261272 };
  static const float weights2[][1] = { {0.0934891}
,
{-0.194232}
,
{-0.710371}
,
{-0.111397}
,
{-0.0831146}
,
{0.0761904}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_9(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_9(v, index);
}
static int assign_gen_lepton_prior_1_1_9() {
  global_gen_lepton_prior.at(1,1,9) = &specialized_gen_lepton_prior_1_1_9;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_9 = assign_gen_lepton_prior_1_1_9();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_1_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.516768,0.281328,-0.0540775,0.470884,-0.333693,0.405472 };
  static const float weights1[][6] = { {-0.768641,0.0179691,-0.0611023,0.056189,-1.62802,0.156218}
,
{0.157745,1.20889,0.902456,-0.000449433,0.517022,0.562507}
,
{0.272161,-0.0654973,-0.107223,-0.30102,-0.0232455,-0.302117}
,
{1.56072,0.445017,0.408017,1.41787,1.5985,-1.20843}
,
{0.453786,0.192092,0.184409,0.4215,-0.13635,0.182429}
,
{0.458893,0.229167,0.104168,0.0450324,-0.344437,0.649634}
,
{0.498611,0.246934,-0.317,0.420235,-0.752412,0.716085}
,
{-0.114075,0.092906,-0.158135,0.0546752,0.0456907,0.224805}
,
{-0.212114,-0.0168801,-0.369161,-0.237385,-0.300096,0.264334}
,
{0.0931607,0.0125246,-0.245392,-0.104167,0.140067,-0.021653}
,
{-0.0393449,-0.00548953,0.0556153,0.111686,0.0646405,0.053498}
,
{-0.244043,-0.0635157,0.00414883,0.0979725,0.163484,0.036936}
,
{0.015167,-0.0989465,0.184082,-0.143351,-0.67527,0.446635}
,
{0.199593,0.0243301,-0.141441,0.279513,-0.249353,0.141447}
,
{-0.0261611,-0.0330964,-0.15552,0.00827785,-0.0168414,-0.0245467}
,
{-0.340077,-1.06888,-0.138242,-0.218808,-0.551403,-0.549834}
,
{-0.0262488,-0.31321,-0.09675,0.460648,-0.41646,-0.216339}
,
{0.365261,-0.548307,0.183638,-0.217638,0.191909,-0.187134}
,
{0.0303038,0.19899,0.25577,0.214899,0.02748,0.117769}
,
{0.0803186,-0.0382948,-0.13584,-0.120404,0.0731633,-0.249463}
,
{-0.0403404,-0.0886549,-0.0656858,0.00277382,-0.483623,-0.662997}
,
{-0.0630351,0.075539,-0.0493944,0.0807195,0.390572,-0.177228}
,
{0.0296903,0.146613,-0.0640734,0.195818,-0.147906,-0.0129318}
,
{-0.0487286,0.288817,0.0724501,-0.0048109,0.156511,-0.0032746}
,
{0.0539394,0.114576,0.133385,0.0181335,-0.0403789,-0.0157748}
,
{-0.349735,0.171008,0.147039,0.134726,0.265732,0.0787198}
,
{-0.355315,-0.127758,-0.288684,-0.0398249,0.0452062,-0.0868135}
,
{-0.251749,0.0447889,-0.170329,-0.0463827,0.0263363,-0.100468}
,
{-0.260802,0.688504,0.180623,-1.07548,-0.0148935,0.568159}
,
{-0.0634272,0.0492191,0.0446037,0.136382,-0.210027,-0.0108189}
,
{0.119581,-0.166027,-0.162786,-0.011014,0.0256003,-0.163907}
,
{0.0796077,-0.128925,-0.101796,-0.0961592,0.312384,-0.0114356}
,
{0.00923502,0.0250013,-0.0133646,-0.0311138,-0.033653,-0.0419622}
,
{-0.175167,0.0434203,-0.103831,0.204014,0.167061,0.013144}
,
{-0.0697035,0.0908007,-0.00329256,0.106493,-0.116874,0.217452}
,
{-0.046301,0.0497306,-0.0995621,-0.158146,-0.23197,0.110014}
,
{0.247732,-0.172989,-0.175312,-0.378725,0.522298,0.227219}
,
{0.0407084,-0.0231082,0.0790663,0.0876402,-0.00586765,-0.0376755}
,
{-0.143376,0.0117604,0.490799,0.407656,-0.318274,0.180381}
,
{0.0286017,0.194865,-0.00230096,-0.0768128,0.0604622,-0.0757737}
,
{-0.0587576,-0.0414744,-0.146505,-0.0978904,0.0178582,0.116908}
,
{0.10041,0.0452347,-0.0148986,-0.0502754,0.223215,0.176996}
,
{0.00962195,0.0731929,-0.00393792,-0.0634257,0.0387974,0.0353555}
,
{0.112157,-0.475667,-0.24079,-0.199973,-0.337215,-0.364322}
,
{-0.123872,-0.166746,0.0356627,0.0624134,-0.18306,0.00806848}
,
{0.100943,0.0995009,0.118208,0.0923996,0.114978,-0.032381}
,
{0.00213076,0.0042261,-0.152751,-0.155636,0.0478026,0.228209}
,
{-0.0342427,0.0176592,-0.193695,-0.146427,0.000494626,-0.0611897}
,
{0.131306,0.0195606,0.148355,0.276347,-0.0389815,-0.201896}
,
{-0.0695083,-0.116368,0.0445823,-0.0680824,0.177069,-0.0356783}
,
{0.115868,0.0650593,-0.113367,-0.00948493,-0.0964023,-0.0224227}
,
{0.0472664,0.0545715,0.0746322,-0.117583,0.0844543,0.378012}
,
{-0.0264612,-0.0182299,-0.0610692,0.0120012,-0.0412671,-0.0668018}
,
{0.0511558,0.171636,0.259094,0.0153114,0.0700522,0.504653}
,
{0.161672,-0.0106851,0.0380196,-0.071115,0.0715497,0.185658}
,
{0.112479,0.0708593,0.0250956,-0.00223513,-0.147518,-0.0488582}
,
{-0.192079,-0.0725214,0.0375775,0.0864652,0.0453081,-0.0599109}
,
{-0.0242425,0.0217634,0.00907874,-0.00278353,0.00794406,-0.000888061}
,
{0.155296,-0.0395203,0.049653,0.209318,-0.00668153,-0.104094}
,
{0.0349189,-0.0509074,-0.0159095,0.00975341,-0.0323655,-0.0688912}
,
{-0.00904647,-0.00888559,0.0206658,0.158898,0.0160617,0.0119471}
,
{-0.128817,0.0564666,-0.0683337,-0.095122,0.102736,0.0264869}
,
{0.0294028,0.0398632,-0.00080083,0.0707911,0.0587113,-0.0519161}
,
{-0.336168,-0.220677,-0.110528,-0.118387,-0.0439736,0.179434}
,
{0.12498,0.0728931,0.0868059,0.0906842,-0.0662857,0.0242857}
,
{-0.0231224,-0.0249313,-0.0357964,-0.012446,0.0531524,-0.0321705}
,
{-0.107063,-0.048211,-0.0444897,-0.0310338,0.067017,0.0751556}
,
{-0.0424057,-0.0291445,-0.0348701,-0.0173918,-0.0223467,-0.0264969}
,
{0.198687,-0.00503961,0.154681,0.0679394,-0.11173,-0.264809}
,
{0.15928,0.152307,0.0262521,0.000991768,0.0433531,-0.00424873}
,
{-0.0650712,-0.0844258,-0.174966,-0.158525,0.0704167,-0.125263}
,
{-0.104876,-0.134799,0.131804,0.161097,-0.169141,0.104433}
,
{0.0727251,-0.0278718,0.0258174,0.0299696,0.00919011,-8.83115e-05}
,
{-0.167944,0.0769945,0.18692,-0.0322876,-0.0704382,0.162463}
,
{-0.506583,0.0466326,0.347824,0.473024,0.266286,0.254075}
,
{-0.626722,-0.370534,0.216871,0.397717,0.484089,0.470892}
,
{-0.609169,-0.135482,0.219084,0.281865,0.392647,0.3165}
,
{-0.256079,0.0639597,0.10526,0.324229,0.293227,-0.116428}
,
{0.876106,-3.05242,1.73102,-1.33814,0.44993,-4.53712}
 };
  static const float bias2[1] = { 0.00938576 };
  static const float weights2[][1] = { {0.107922}
,
{0.0600703}
,
{-0.088967}
,
{0.0694181}
,
{-0.117834}
,
{0.064841}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_1_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_1_58(v, index);
}
static int assign_gen_lepton_prior_11_1_58() {
  global_gen_lepton_prior.at(11,1,58) = &specialized_gen_lepton_prior_11_1_58;
  return 0;
}
static int initialize_gen_lepton_prior_11_1_58 = assign_gen_lepton_prior_11_1_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_1_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.247079,-0.152492,0.191294,-0.207368,-0.27491,0.082651 };
  static const float weights1[][6] = { {-0.613224,-0.439359,-0.367129,-0.185094,-0.401104,0.201617}
,
{0.270555,-0.0569352,-0.475238,-0.170517,-0.195543,0.279599}
,
{-0.103218,0.204748,0.410727,-1.11856,0.748581,0.0627418}
,
{0.267818,0.372192,0.438565,-0.120071,-0.981189,0.526131}
,
{0.43335,-0.419495,0.301466,-0.00659152,-0.405752,0.262521}
,
{0.187897,-0.0603943,0.183528,-0.238418,-0.209661,-0.0759903}
,
{0.0989826,-0.0849482,0.0788235,-0.256712,-0.164986,-0.0164345}
,
{0.0905014,0.0631183,0.233063,0.016168,0.0364418,0.151442}
,
{0.153493,-0.0932097,-0.0334132,0.271066,-0.453731,-0.107428}
,
{-0.0923273,0.0974803,-0.134048,-0.103339,-0.0704994,-0.00763938}
,
{0.0882835,-0.0505892,-0.0476969,0.0381785,-0.141185,-0.168093}
,
{0.01833,-0.249907,-0.215273,0.0706731,-0.043846,0.0399869}
,
{0.25897,0.132553,-0.14523,-0.166942,0.0402297,-0.02629}
,
{-0.0513485,0.0155986,-0.0095585,0.00191504,-0.366948,0.0530779}
,
{0.1112,0.0676055,-0.158607,0.0223804,-0.0752702,-0.0773123}
,
{-0.370781,0.0331841,0.368594,0.0607603,0.560238,-0.213233}
,
{-0.102552,-0.184279,0.322284,-0.236932,0.157804,0.033254}
,
{-0.18654,-0.23649,-0.280976,-0.135388,-0.0618001,0.0201262}
,
{0.303924,0.107431,0.252563,-0.330306,-0.257058,-0.0061009}
,
{0.00729036,-0.0660222,-0.0679131,0.0211866,0.171152,-0.0483975}
,
{0.15162,-0.106441,-0.11561,0.0805845,0.0107207,-0.205485}
,
{0.0761427,-0.032302,-0.0622926,-0.0394916,0.0758454,-0.0425435}
,
{-0.0459608,-0.0407191,-0.131496,0.0239415,0.21293,-0.08025}
,
{-0.149037,-0.00371519,0.164681,-0.283708,-0.0606708,-0.00172906}
,
{-0.105413,-0.271914,0.0115968,-0.0941958,0.0943665,0.0405881}
,
{0.0299423,-0.217455,-0.0316703,0.0245103,0.0672801,0.0323526}
,
{-0.0645093,-0.0156609,-0.0609863,-0.243449,0.195411,0.0272465}
,
{-0.0715117,-0.281962,-0.0319347,-0.118506,-0.220399,0.0221778}
,
{-0.145421,-0.971736,-0.251584,-0.13166,0.293597,0.0522416}
,
{-0.129794,0.00934509,0.144744,0.0725661,0.213033,-0.197342}
,
{0.189459,-0.125703,-0.0449603,0.123349,-0.128475,0.0863506}
,
{0.31116,-0.258138,-0.180368,0.0377088,0.123316,-0.30417}
,
{0.0849708,0.0247182,-0.125559,0.0576474,-0.0200908,0.0575347}
,
{-0.222198,-0.175358,-0.175902,-0.0203013,0.119304,-0.0583977}
,
{-0.00830357,0.568894,0.0434496,0.0703531,-0.0253495,0.819199}
,
{0.00175711,0.509067,0.0859816,0.00179469,-0.0378598,0.552873}
,
{0.117681,-0.341369,-0.0923495,0.0970718,0.2114,-0.42998}
,
{-0.0342686,-0.103179,0.0278811,-0.00225754,0.0154729,-0.122543}
,
{0.0346626,0.181536,-0.0646667,0.343567,-0.183218,0.356447}
,
{-0.0648037,-0.00170438,0.0568789,0.0508419,0.0586705,0.117998}
,
{0.0758688,-0.0188024,-0.0870856,-0.206508,-0.0146125,-0.157442}
,
{0.0848256,0.0689719,-0.0394159,0.0743001,-0.227135,0.0389214}
,
{0.0141107,0.0114664,-0.0212329,-0.0047619,0.0449411,0.0260952}
,
{-0.0957287,0.142822,0.13994,-0.0630962,-0.281912,0.0748551}
,
{0.0608231,0.0170329,0.205715,0.0246429,0.0922812,0.0895855}
,
{-0.114309,-0.0283883,-0.0812024,-0.138282,-0.071568,-0.138563}
,
{-0.00866651,-0.120392,0.0433625,-0.0390828,-0.170511,-0.246878}
,
{0.00998384,0.0227111,-0.00184915,0.0563469,0.0275216,0.0148008}
,
{-0.0580728,-0.123673,-0.0656389,-0.17252,-0.244364,-0.11423}
,
{0.0145248,0.0439336,-0.0756835,0.0817095,-0.032392,-0.0051348}
,
{0.261808,-0.068184,-0.157035,0.0597893,0.165182,-0.0301792}
,
{0.0652339,0.00682413,-0.0472993,-0.0571477,0.0168211,0.0222631}
,
{0.00498756,0.00290317,-0.00969772,-0.0341122,-0.0437352,-0.00465533}
,
{-0.23178,-0.0810041,0.15596,-0.0111184,-0.108048,-0.116768}
,
{-0.0457359,-0.0947214,0.0374069,-0.149065,-0.0710098,-0.0409152}
,
{0.0531262,0.100729,0.0508399,0.0371844,0.138097,-0.0174552}
,
{-0.0318336,0.0223045,-0.109092,0.118408,-0.0492227,0.0781199}
,
{-0.138339,-1.34838,-0.0698375,-0.0140602,-0.473422,0.0774466}
,
{0.128125,-0.359498,0.181166,-0.0946349,-0.27491,-0.0848683}
,
{0.0993841,0.00813085,-0.125599,0.177583,-0.0632576,-0.0993638}
,
{-0.106727,-0.137251,-0.00393222,-0.173506,0.0325429,0.239013}
,
{0.0759926,0.15467,0.186046,-0.115435,0.0909391,-0.157693}
,
{-0.239592,-0.0232914,-0.0322879,-0.0826962,0.537506,0.187273}
,
{0.0879545,-0.619715,-0.233301,-0.0867555,0.960847,0.149029}
,
{0.224906,-0.0125277,-0.198086,-0.114711,0.19985,-0.022928}
,
{0.25372,-0.0316684,0.155654,0.0581394,0.0404872,0.0843838}
,
{-0.157317,-0.0593889,-0.0355752,-0.0421944,0.0806579,-0.0931431}
,
{-0.318393,-0.418539,-0.184245,0.231248,-0.165524,0.127869}
,
{0.313834,0.10869,0.234357,0.0557605,-0.020006,-0.190278}
,
{-0.12328,-0.0653438,-0.00483823,-0.0480258,-0.103129,-0.117247}
,
{0.0533382,-0.108764,-0.0150784,-0.0477767,0.0532607,0.0126995}
,
{0.0135718,-0.0440256,-0.0903372,0.0350068,0.0288604,0.161982}
,
{-0.279333,0.791207,-0.163019,-0.0271161,-0.0886269,0.126845}
,
{0.032896,-0.140057,-0.196615,0.01504,-0.0511995,0.00603829}
,
{-0.112887,0.800183,0.242906,-0.108239,0.0232262,-0.106078}
,
{-0.0569212,0.732994,0.220466,0.0310223,0.0674947,-0.0649016}
,
{-0.211843,0.897949,0.293706,-0.145443,-0.0312674,-0.209417}
,
{-0.160961,0.136463,-0.523077,-0.0452104,-0.11546,-0.559662}
,
{1.01375,0.0696528,-1.47885,-0.0352436,-2.01203,-0.532753}
 };
  static const float bias2[1] = { -0.0747993 };
  static const float weights2[][1] = { {0.0735874}
,
{-0.244881}
,
{0.0724812}
,
{-0.355954}
,
{-0.0878122}
,
{0.182235}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_1_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_1_59(v, index);
}
static int assign_gen_lepton_prior_11_1_59() {
  global_gen_lepton_prior.at(11,1,59) = &specialized_gen_lepton_prior_11_1_59;
  return 0;
}
static int initialize_gen_lepton_prior_11_1_59 = assign_gen_lepton_prior_11_1_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_1_60(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.149687,0.081059,0.00799161,0.0514783,0.0859745,0.167877 };
  static const float weights1[][6] = { {-0.641965,0.115017,0.542901,0.245459,-0.0618394,0.0763755}
,
{0.0673944,-0.206871,0.537698,0.481431,-0.0951533,0.302584}
,
{0.261164,-0.0848466,0.042659,0.214042,0.19006,-0.0734352}
,
{0.878343,0.557775,0.515089,-0.449068,0.559281,-0.32952}
,
{0.249301,-0.162128,-0.00106216,-0.165989,-0.156842,0.278585}
,
{0.0597696,-0.0718166,-0.116645,0.179988,0.0413406,0.150319}
,
{0.0207268,0.17897,-0.0375181,0.0497295,0.00465527,0.20161}
,
{0.235234,0.192682,-0.166626,-0.348742,0.100236,-0.00840092}
,
{0.131991,-0.0570868,0.19966,-0.36236,0.0645509,-0.0354942}
,
{0.0955223,0.000246983,-0.0809856,-0.081918,-0.0319896,0.0153033}
,
{-0.0616454,-0.125747,0.0280826,-0.222386,-0.0583889,0.00557287}
,
{0.0743524,-0.0493078,0.0383653,-0.00216714,0.0840796,-0.0632318}
,
{0.314474,-0.265979,0.00693535,0.11152,-0.0737621,-0.169383}
,
{-0.00544964,-0.146809,-0.06276,0.048622,-0.0340503,0.136485}
,
{-0.135359,-0.179092,-0.0534337,0.103997,0.105584,-0.183717}
,
{0.155875,-0.342404,0.178709,0.262111,0.278002,-0.326289}
,
{0.0742299,-0.172676,-0.0235016,0.0217256,0.0118382,-0.264106}
,
{-0.0420143,0.0626149,0.206101,-0.079713,0.00247493,0.116795}
,
{0.268989,-0.153118,0.0665154,0.0513841,0.171239,-0.0675829}
,
{-0.0201118,0.0275441,-0.0405572,0.0229535,0.0261681,-0.114607}
,
{-0.22255,-0.127998,-0.201466,-0.217775,0.0691578,-0.00663313}
,
{0.0518514,-0.0608669,-0.00105395,-0.214942,-0.0735029,0.0594759}
,
{0.0789118,0.0183614,0.00891447,-0.0505138,0.0801669,0.129828}
,
{-0.0342888,-0.161916,0.0451253,-0.162398,0.0201871,0.0982082}
,
{-0.42017,0.082713,-0.06575,0.146358,0.187686,-0.0769138}
,
{-0.172593,0.0392903,-0.10424,0.187161,0.0129581,-0.0251852}
,
{0.261632,-0.105041,0.273427,-0.102195,0.0790363,0.0278109}
,
{0.318168,0.128241,0.12049,-0.0746186,0.16637,-0.266025}
,
{-0.331954,0.0997192,-0.404396,0.0849157,0.182132,0.27039}
,
{-0.0503165,-0.0202361,0.110816,-0.0844242,0.0994773,0.0828622}
,
{-0.0592474,-0.0761822,0.203904,-0.0655738,-0.101152,-0.0553351}
,
{0.167684,-0.503341,0.104711,0.14519,0.111994,-0.126099}
,
{0.0146168,0.179759,-0.14691,0.275482,0.0211857,-0.0300238}
,
{0.184535,-0.0166498,0.187864,-0.0222123,-0.168065,-0.0189124}
,
{0.112286,0.0937769,-0.120916,0.148657,0.0310362,0.0140673}
,
{0.148268,0.119782,-0.0284982,0.131488,-0.000678694,-0.100471}
,
{0.0459826,0.288724,0.0146805,0.198467,-0.0237148,-0.269853}
,
{-0.0281707,0.00982989,0.111841,-0.114119,0.00279418,0.0796202}
,
{0.218748,0.130009,0.218078,-0.0942908,-0.0151121,0.0330355}
,
{-0.113673,0.131741,0.0578233,0.244133,0.102856,-0.126994}
,
{0.11772,-0.040671,-0.0618283,0.21087,0.083357,-0.0850366}
,
{0.25523,0.136624,0.0437754,-0.157974,-0.26141,0.103667}
,
{-0.0524228,0.175507,0.0936244,-0.113643,0.0976208,-0.00935858}
,
{-0.0224252,-0.0111526,-0.0618842,-0.161849,0.180772,-0.317252}
,
{0.0431325,-0.237043,-0.130804,-0.162906,0.0118,-0.00776933}
,
{-0.0630518,-0.328696,-0.0598847,-0.0527622,0.0743476,-0.169074}
,
{0.138047,0.134469,0.0879092,0.0863988,-0.0461861,-0.0145622}
,
{0.00467011,0.0331486,0.077182,0.00960882,-0.0505801,0.123894}
,
{-0.147239,0.399832,-0.0106629,0.23011,0.122554,0.0733693}
,
{0.0732587,0.217407,0.146377,0.0439126,-0.10498,0.0352925}
,
{0.0322118,0.172087,-0.223255,0.174458,-0.0809959,0.00608788}
,
{-0.088181,-0.0748818,-0.17308,-0.0598459,-0.158653,0.133517}
,
{0.0248568,-0.0102591,-0.0442419,0.137487,-0.0377083,0.00906161}
,
{0.189238,0.0241987,-0.0935866,-0.28986,-0.208812,0.0353404}
,
{-0.0852433,-0.0851119,0.13267,0.127786,-0.345052,0.153424}
,
{0.0888085,0.155398,0.233722,-0.0648395,-0.334523,0.388234}
,
{-0.217618,-0.168489,0.0339927,0.0685128,-0.154881,0.232095}
,
{-0.456376,-0.095013,0.0321503,-0.107729,0.0085617,-0.104776}
,
{-0.353862,0.065396,-0.00705598,0.114088,-0.100183,-0.0483641}
,
{-0.0672838,-0.0792749,-0.140211,-0.199198,-0.223385,-0.105679}
,
{-0.0947501,-0.332617,0.0458444,-0.107128,0.0015239,-0.0369669}
,
{0.153195,-0.010084,-0.0654148,-0.115169,-0.172374,0.218726}
,
{-0.345477,-0.0867144,-0.0483248,0.12566,-0.22022,0.19113}
,
{0.0583335,-0.332553,0.0055447,0.137191,-0.2021,-0.0180519}
,
{0.0341433,0.0484629,-0.357386,0.242677,0.101618,0.0816595}
,
{-0.141537,-0.357093,-0.202969,-0.0728634,-0.0181161,-0.000346159}
,
{0.19762,-0.317885,-0.282623,0.00372388,0.00457368,0.225627}
,
{-0.0923517,-0.150081,0.201139,-0.110118,-0.261705,0.168315}
,
{0.593392,-0.121062,-0.370064,0.0121769,0.207257,-0.384496}
,
{-0.447687,0.0961193,0.372178,-0.0349495,0.0143624,0.525283}
,
{-0.0955464,0.0539843,0.30024,-0.175087,0.0185337,0.296609}
,
{-0.0262756,-0.0360183,0.263482,-0.143223,-0.0742538,0.154236}
,
{-0.107263,0.107184,0.25085,0.158202,0.126315,-0.0973684}
,
{0.0452873,0.0215718,0.089628,-0.0699586,0.229028,-0.171776}
,
{-0.637967,-0.78812,0.79357,0.472632,-0.471508,-0.299623}
,
{-0.733288,-0.97494,0.675499,0.463313,-0.440132,-0.292957}
,
{-0.910391,-0.692149,0.844341,0.675278,-0.766866,-0.409605}
,
{-0.572651,0.219569,1.11796,-0.364329,-0.0116173,-0.157497}
,
{0.948649,0.389219,-0.373294,-1.17314,0.936985,0.50684}
 };
  static const float bias2[1] = { 0.0527539 };
  static const float weights2[][1] = { {0.0795724}
,
{0.430221}
,
{-0.13277}
,
{-0.395495}
,
{0.0919943}
,
{0.0931175}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_1_60(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_1_60(v, index);
}
static int assign_gen_lepton_prior_11_1_60() {
  global_gen_lepton_prior.at(11,1,60) = &specialized_gen_lepton_prior_11_1_60;
  return 0;
}
static int initialize_gen_lepton_prior_11_1_60 = assign_gen_lepton_prior_11_1_60();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_1_61(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0704143,0.00181754,0.0893973,-0.00968709,-0.115073,-0.076043 };
  static const float weights1[][6] = { {-0.404554,0.329453,-0.149549,0.208019,0.349199,-0.190811}
,
{0.0625607,0.0943586,0.107531,-0.103472,0.278148,0.115655}
,
{0.349209,0.0459848,0.0669122,-0.126978,-0.307188,-0.142332}
,
{1.42365,-0.430909,-0.621743,-0.474235,-1.18894,-0.164744}
,
{0.233879,0.155662,0.0299265,-0.224265,0.0899288,-0.114366}
,
{-0.0367151,-0.0489116,0.0201666,-0.142009,-0.203555,-0.206761}
,
{-0.231886,0.00541464,0.19277,0.115936,0.000266339,-0.0118114}
,
{0.415543,-0.591608,-0.497057,-0.00116715,-0.509056,0.149448}
,
{-0.0995942,0.0172207,-0.0119024,-0.322421,0.363823,-0.0461915}
,
{0.0388998,-0.0460169,0.197425,-0.0136477,0.000478212,0.140659}
,
{0.244034,0.181384,-0.127418,-0.22014,-0.0813718,-0.184565}
,
{-0.206721,-0.0723321,0.0933751,0.09648,-0.187204,-0.0249523}
,
{0.075905,0.0243032,-0.157767,-0.193257,0.0645857,-0.0340538}
,
{0.170804,-0.0380747,-0.00620184,-0.0241949,0.0601172,0.0121678}
,
{0.0400635,0.112116,-0.220101,-0.0902896,0.0758429,0.168739}
,
{-0.227251,-0.0432332,-0.117668,0.123517,-0.111518,0.0380414}
,
{0.0293026,0.0840532,0.0453865,0.203583,-0.184865,-0.221549}
,
{0.332514,0.276753,0.205618,-0.147468,0.0937201,-0.106668}
,
{0.0987345,0.0586815,0.155619,0.0841521,0.0372109,-0.105018}
,
{-0.0296581,0.0410098,0.0593841,0.0403844,0.0616631,0.0533713}
,
{-0.18962,0.0848745,0.195243,0.154164,0.0615742,-0.22846}
,
{0.0063676,-0.0934053,-0.0634832,-0.0344559,-0.101892,0.0657833}
,
{0.0701813,0.149396,0.121896,0.0273655,0.171548,0.0164819}
,
{0.0402804,0.0204051,0.0279938,0.0260775,-0.00861752,-0.0946572}
,
{-0.174766,-0.000414602,-0.131131,0.0496634,-0.757221,-0.0870242}
,
{0.100186,-0.0225297,-0.142813,-0.10055,0.0688225,-0.130823}
,
{-0.0283679,0.121561,-0.249381,0.273729,-0.326997,-0.136576}
,
{-0.118919,-0.0930616,-0.0546118,0.0809212,0.115257,-0.0103144}
,
{-0.0308833,-0.307165,-0.174498,0.404742,1.34655,0.00305373}
,
{0.048093,0.136876,-0.23802,-0.0466164,-0.130862,-0.0886354}
,
{-0.141268,0.0992767,-0.0693308,-0.164414,0.0535932,0.0206444}
,
{-0.0563186,-0.129519,0.212825,0.0393903,-0.0767572,0.318381}
,
{0.0160057,-0.0408132,0.192607,0.0144268,-0.1788,0.0566141}
,
{0.0117976,0.0750799,-0.124724,-0.0842015,0.0464226,0.16226}
,
{0.0967385,0.00119931,-0.228601,-0.0134853,0.0697375,0.00576736}
,
{0.181948,-0.131837,-0.248962,0.0676101,-0.0876502,0.0178225}
,
{-0.116301,0.24311,0.202353,0.301798,0.182105,-0.132095}
,
{-0.00731544,-0.104686,-0.0330166,-0.0693289,-0.105065,0.042789}
,
{-0.0305724,-0.0452458,-0.27142,-0.0808244,0.235308,0.598437}
,
{0.00357554,0.0197776,-0.113341,-0.184989,0.28302,-0.0629505}
,
{0.119051,-0.135609,-0.174765,-0.207198,0.0839782,0.125175}
,
{-0.0506897,0.202331,0.383616,-0.0410859,0.0752831,-0.29639}
,
{-0.00804584,0.0770709,0.0717473,0.0345265,0.132982,-0.0555643}
,
{0.119852,-0.106448,0.196406,-0.428186,-0.215241,-0.133584}
,
{0.159719,-0.0762998,-0.0120128,-0.144592,0.0196744,0.00247018}
,
{-0.152264,0.0128302,0.08234,-0.0497794,-0.0562987,0.158202}
,
{-0.0424205,-0.0594049,-0.460252,-0.0573254,0.250799,-0.051249}
,
{-0.0857983,0.0984628,0.292325,0.0335449,0.0311124,0.231101}
,
{-0.0220123,0.189766,0.184911,-0.178115,0.208278,-0.116907}
,
{-0.0414886,0.00750616,-0.0465087,-0.00923978,0.0417258,-0.0402646}
,
{-0.033223,-0.0217852,0.00988683,0.146329,-0.046731,0.121142}
,
{-0.197456,-0.0285696,0.326569,-0.124799,-0.00538015,-0.189332}
,
{0.0383401,0.0979995,-0.0691723,0.0895985,0.0573091,0.0621083}
,
{-0.116122,0.420253,0.179925,0.452137,0.268278,0.313627}
,
{-0.0937373,-0.00649693,0.0761024,0.18095,-0.275784,0.238979}
,
{-0.0838215,0.229804,0.138303,0.232947,-0.153216,-0.140293}
,
{-0.216319,0.248531,-0.00341495,0.244363,-0.0206505,0.0936554}
,
{0.433885,-0.485742,0.0572601,-0.335514,1.98694,-0.0190701}
,
{-0.408547,0.358892,-0.157584,0.153836,0.231396,-0.0399025}
,
{-0.00614635,-0.00949415,0.0370923,0.0232151,-0.425936,-0.0020207}
,
{-0.234501,0.166263,0.0273051,0.203719,-0.380006,-0.153991}
,
{-0.0824815,0.224324,-0.0602521,0.237152,-0.20635,0.0759436}
,
{0.44902,-0.0493155,-0.20719,0.189749,0.351715,-0.180537}
,
{0.294396,-0.356405,-0.0505053,-0.763443,0.916116,-0.12456}
,
{0.281206,-0.0609295,-0.0402983,-0.238482,0.0765103,0.0428451}
,
{0.102383,-0.0701178,0.0193428,0.0133132,0.204373,0.0170481}
,
{-0.0967195,-0.215491,0.179922,-0.107171,0.248151,-0.0326802}
,
{0.98021,0.853454,-0.0199087,0.568865,0.720342,-0.103167}
,
{0.00886185,0.203256,0.0411278,-0.601029,0.409111,0.0640697}
,
{-0.167186,0.28741,-0.0660803,0.186868,0.362406,-0.0444223}
,
{0.0105275,0.159306,-0.183991,0.0343763,0.317015,-0.010521}
,
{-0.0438555,0.0542377,-0.00750572,0.248221,0.296679,0.0101794}
,
{0.357952,0.755309,0.0605228,0.733712,1.45082,0.0889795}
,
{0.406631,0.323304,-0.0506879,0.67411,-1.43355,0.122236}
,
{-0.194069,0.409159,0.0766258,-0.554847,-0.79065,0.156143}
,
{0.120277,0.60229,-0.0990188,-0.836797,-0.508054,0.104696}
,
{-0.0109464,0.426197,-0.00981736,-0.670979,-0.664303,-0.0588361}
,
{-1.07312,0.105241,0.0157887,-2.66465,-0.425095,0.0456229}
,
{-0.322073,-0.363177,0.132296,0.518344,-1.79397,-0.0846497}
 };
  static const float bias2[1] = { -0.0319314 };
  static const float weights2[][1] = { {0.150436}
,
{-0.200315}
,
{0.0697575}
,
{0.108282}
,
{0.138025}
,
{-0.288586}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_1_61(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_1_61(v, index);
}
static int assign_gen_lepton_prior_11_1_61() {
  global_gen_lepton_prior.at(11,1,61) = &specialized_gen_lepton_prior_11_1_61;
  return 0;
}
static int initialize_gen_lepton_prior_11_1_61 = assign_gen_lepton_prior_11_1_61();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_2_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.16683,0.646267,-0.324952,0.512587,0.404704,0.480612 };
  static const float weights1[][6] = { {0.224467,-0.0801415,-0.875824,0.555949,0.0454395,0.431569}
,
{0.923111,0.592298,-0.0108275,0.768831,0.125708,-0.037518}
,
{-0.00334358,-0.578815,0.150781,-0.344045,0.427069,0.268511}
,
{0.738331,0.346421,-0.720241,-0.453622,-1.45586,1.19262}
,
{0.00433724,0.437022,-0.355296,0.338766,0.121197,0.181259}
,
{-0.222083,0.628207,-0.524228,0.616477,0.476253,0.283734}
,
{-0.372744,0.740561,-0.623715,0.331925,0.657995,0.399533}
,
{-0.530263,0.111743,0.48285,0.256734,-0.257522,0.528628}
,
{-0.228507,0.0824021,0.0771631,0.170399,0.0440409,-0.0340655}
,
{-0.012829,0.100855,0.104836,-0.212918,0.00907208,0.0522268}
,
{0.133669,-0.18035,-0.00728692,-0.105844,0.0397636,0.0921565}
,
{0.0334475,-0.0691561,-0.0721509,0.134168,0.142803,-0.228294}
,
{0.0278524,0.104086,-0.218263,-0.398471,0.0234066,-0.0838021}
,
{-0.0715234,0.163845,-0.0861621,0.055496,0.231257,-0.0837705}
,
{-0.0248967,-0.0382832,0.0795247,-0.199496,0.119187,-0.225576}
,
{0.0531009,-0.0676273,0.32747,-0.270156,0.155783,-0.26627}
,
{0.119111,0.208224,0.123711,0.0631103,0.280298,0.105492}
,
{0.316039,-0.131392,0.104492,-0.00104315,0.0431034,-0.0397472}
,
{0.233977,0.0594193,0.0164283,0.121026,-0.0524445,0.0429093}
,
{-0.243649,-0.39975,0.0964186,0.0647366,0.144904,0.0341736}
,
{-0.103125,0.0806978,0.170502,-0.171845,0.0451688,0.0569987}
,
{0.143839,0.0623148,0.201162,-0.134225,0.157544,0.154203}
,
{0.0898065,0.00933989,0.161183,0.0634377,-0.135865,-0.0340078}
,
{0.213992,-0.0475247,0.190634,-0.14669,0.213897,0.188685}
,
{-0.000858755,-0.0755686,-0.191763,0.0660137,-0.105023,-0.0496228}
,
{-0.233442,-0.122853,0.0683034,-0.0231301,-0.116238,-0.00366165}
,
{0.303395,-0.131244,0.0375597,-0.0949742,0.188764,0.167665}
,
{0.134582,0.218288,-0.0379029,0.0326002,-0.0374902,-0.0400662}
,
{0.709684,0.320775,0.202021,0.249509,-0.230792,0.311049}
,
{-0.0662071,-0.064104,-0.157424,0.143542,0.190976,-0.0216716}
,
{-0.153074,0.00205242,0.0327476,0.198298,-0.100898,-0.0514348}
,
{-0.142658,0.0933943,0.120141,0.170167,0.0165946,0.0620914}
,
{-0.0150813,0.191996,-0.0704939,0.189822,-0.0650127,-0.0567796}
,
{-0.0861114,-0.0626597,0.103475,-0.188288,0.162803,0.123035}
,
{0.0294347,0.0611951,0.0580468,-0.112335,0.0535057,0.208599}
,
{-0.0187833,-0.0107422,0.357178,0.114932,-0.00221653,0.295366}
,
{-0.103372,-0.0159653,-0.353984,-0.0569033,-0.0389806,-0.279677}
,
{0.0336136,-0.0867425,0.414265,0.0351464,-0.00521097,0.267103}
,
{0.00540021,-0.0290715,-0.0993497,0.00542284,0.108272,-0.159084}
,
{-0.187744,0.186892,-0.0322639,-0.0397934,-0.148605,-0.164666}
,
{0.00221355,-0.180094,-0.0130785,0.106602,0.0281288,0.0453017}
,
{0.300414,0.315853,0.0918023,-0.208355,0.167603,0.0630662}
,
{0.0653895,-0.069817,-0.0407243,-0.0489791,0.0374794,0.0225669}
,
{0.0390855,0.0462581,0.141341,0.0119844,0.0602138,0.110634}
,
{-0.0788034,-0.18281,0.156492,0.0694803,0.0752784,-0.021092}
,
{-0.0363501,0.00638497,-0.114555,-0.0366921,-0.0071563,0.000808535}
,
{0.0177833,-0.0946202,-0.125021,0.115337,-0.0287664,-0.0848832}
,
{0.140281,0.122911,0.165071,-0.0274769,0.0311419,0.210832}
,
{0.10772,-0.024159,-0.0159127,-0.0583044,0.0818255,0.0159582}
,
{0.145715,-0.0245902,0.0205384,-0.0569825,0.140845,-0.0744765}
,
{0.109446,0.116933,0.0512122,-0.0467844,0.110217,0.118716}
,
{0.119115,0.0963638,0.0667092,0.260474,0.034099,0.0513346}
,
{-0.051581,0.0960433,-0.0429804,-0.0210451,-0.0971983,-0.042721}
,
{-0.00659186,-0.100303,-0.0551258,0.130429,0.0869769,-0.0724104}
,
{0.0461589,0.0696135,-0.141119,0.13078,0.00405306,-0.000713099}
,
{-0.0514408,-0.0679647,0.0792261,0.0120259,-0.064623,-0.00218561}
,
{-0.0575201,-0.0367095,0.0351691,-0.0886106,0.013303,-0.0327366}
,
{0.395936,0.234236,-0.0218459,0.0651756,0.39542,0.0194977}
,
{0.0778769,0.00411672,-0.0318433,-0.0232449,0.0350564,0.0228591}
,
{-0.0960135,0.0467311,-0.00364119,0.0655757,-0.179752,-0.0333328}
,
{0.00170914,-0.0161158,0.0556218,-0.095164,0.159598,0.0994606}
,
{0.0765866,-0.0520492,-0.00715141,-0.0268595,0.0242334,-0.0219876}
,
{-0.219491,-0.0187593,0.129011,-0.244883,0.0653824,0.159895}
,
{0.0078292,-0.0408065,0.0625732,0.0924045,0.02608,-0.0061328}
,
{0.00494372,-0.0290827,-0.0544268,-0.0511292,0.00771475,-0.0540564}
,
{-0.106257,-0.0516129,0.0890759,-0.114193,-0.174656,0.116235}
,
{0.0474047,0.0440926,-0.0528864,0.101722,0.149609,-0.0777333}
,
{-0.397074,0.342387,0.77692,-0.413529,-0.213156,0.0701592}
,
{0.000194213,0.0115884,0.0217246,0.045459,-0.0822659,0.0332643}
,
{0.0784962,0.0203219,-0.0409172,-0.177449,-0.0574722,-0.00853939}
,
{-0.0511646,-0.142234,0.0434233,0.154874,0.0806117,0.126298}
,
{0.0370618,0.13935,0.0123543,0.0797587,0.00561502,-0.116743}
,
{-0.899062,-0.0104785,-0.114268,-0.00859451,-0.143421,-0.500934}
,
{-0.0467147,0.0362834,-0.0564931,-0.128392,0.0967553,-0.0591191}
,
{-0.0834159,-0.0868071,0.0423287,0.163303,-0.0205852,-0.198677}
,
{-0.178368,0.0480104,-0.175941,0.0515401,-0.278959,-0.243415}
,
{-0.34366,0.0124675,-0.227198,0.197277,-0.186275,-0.0804353}
,
{-0.0363424,-0.0789538,-0.432119,-0.475442,0.70521,0.213462}
,
{0.223779,0.582027,0.102827,0.689973,-0.67716,0.159609}
 };
  static const float bias2[1] = { 0.123517 };
  static const float weights2[][1] = { {-0.0618536}
,
{0.0416016}
,
{-0.0983768}
,
{0.0371952}
,
{0.0518538}
,
{0.10082}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_2_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_2_57(v, index);
}
static int assign_gen_lepton_prior_11_2_57() {
  global_gen_lepton_prior.at(11,2,57) = &specialized_gen_lepton_prior_11_2_57;
  return 0;
}
static int initialize_gen_lepton_prior_11_2_57 = assign_gen_lepton_prior_11_2_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_2_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.00366703,-0.117215,0.609562,0.0594693,0.50037,-0.271257 };
  static const float weights1[][6] = { {0.106203,-1.08758,-0.5414,0.865467,-0.059309,-0.743312}
,
{0.629941,0.55365,0.175224,0.0596673,0.144809,0.00474981}
,
{0.397134,-0.842317,-0.589498,0.127325,0.136278,-0.126669}
,
{-0.518071,-0.61791,1.07279,1.31186,0.566487,-0.179281}
,
{0.0907847,-0.261386,0.776555,0.0837889,0.614005,-0.390897}
,
{0.0792803,-0.000597107,0.492899,0.306135,0.632038,-0.176977}
,
{0.0767619,0.156305,0.422323,0.0286214,0.260065,-0.0917931}
,
{-0.130744,-0.104358,0.789532,-0.364367,-0.161637,0.504083}
,
{-0.436107,0.0114183,0.159773,-0.045702,0.379029,0.0929541}
,
{-0.00179875,-0.02571,-0.0655906,-0.108823,-0.0728077,0.236789}
,
{-0.0787866,-0.0578098,-0.0940156,0.12579,0.213338,0.0805858}
,
{-0.068128,0.073031,-0.0188426,0.107568,-0.130884,0.165277}
,
{-0.16341,0.214542,0.1193,-0.171179,0.0761044,0.036568}
,
{0.187074,-0.352897,0.00278374,-0.0166067,0.417285,-0.0056291}
,
{0.0736514,0.147786,0.0778843,0.243981,0.117375,0.0593576}
,
{0.539222,-0.0105912,-0.210332,0.365091,-0.269227,0.0938726}
,
{0.199753,-0.197591,0.209207,0.0965634,0.0114961,-0.0516011}
,
{0.0476721,-0.111902,-0.262165,1.11075,0.200947,-0.235993}
,
{-0.248147,0.216853,0.0695787,-0.0368784,0.300422,0.163252}
,
{-0.0740453,0.0606194,-0.236949,-0.181857,-0.0656086,-0.0882647}
,
{-0.251755,-0.215746,-0.0138653,-0.127369,0.061015,0.0942615}
,
{0.0951525,0.134746,0.0678577,-0.185563,-0.0171345,0.0225855}
,
{0.149374,0.108148,0.0487548,0.0283627,-0.10052,-0.0402746}
,
{0.118412,-0.0688688,0.00346712,0.188615,0.0937148,0.00849367}
,
{-0.312332,-0.0808393,0.0740076,0.0698167,-0.166846,-0.347792}
,
{0.145601,-0.322086,0.128311,0.17255,-0.0597394,-0.390475}
,
{-0.0885403,-0.00820542,0.20246,0.15064,-0.166672,0.0848409}
,
{-0.0573662,-0.122254,-0.0106633,0.0246624,-0.00068226,-0.237204}
,
{-0.215545,-2.30411,-0.266473,0.133118,0.754164,-0.781216}
,
{-0.0492181,-0.178891,-0.00217181,-0.0326149,-0.136505,0.200348}
,
{0.0634516,0.144756,-0.077401,-0.169712,-0.138411,0.163288}
,
{-0.48278,-0.223508,0.203385,-0.0163585,0.0310119,0.100291}
,
{0.0754111,-0.0103387,0.0872299,0.0104114,0.0221696,0.0749232}
,
{0.0290881,0.0555918,0.0623422,0.0675603,0.115428,0.000411795}
,
{0.00810981,0.0259619,0.445087,0.0484224,0.061635,0.20539}
,
{0.138573,0.0420521,0.441386,-0.0744182,-0.0986065,0.445805}
,
{0.081036,-0.0562507,-0.285438,0.0407847,0.100445,-0.166463}
,
{-0.168187,-0.0166413,-0.124338,-0.0705932,-0.0476718,-0.113394}
,
{-0.0821654,-0.0970273,0.342973,-0.0152675,-0.0489565,0.275436}
,
{-0.158591,0.00349763,0.137711,-0.0640797,0.0155762,0.0181009}
,
{-0.101783,-0.171066,0.0660636,0.0281199,-0.133703,0.0536614}
,
{-0.122738,-0.0751979,-0.333684,-0.0496847,-0.0520515,-0.26143}
,
{0.0640094,-0.0103375,0.00109423,0.0438711,0.00165422,0.0173789}
,
{0.15945,0.313784,-0.0975678,-0.1352,0.145936,-0.0167069}
,
{0.000516219,-0.0689972,-0.0832799,0.102967,0.068202,0.121492}
,
{0.0462524,0.170381,0.0375944,-0.0133511,0.123792,-0.104162}
,
{-0.225768,-0.0816708,-0.0418058,0.0599829,0.02513,-0.0857641}
,
{-0.0222053,0.0153704,-0.0523288,-0.0430954,-0.0243087,-0.0532551}
,
{-0.0317025,-0.0690343,0.109587,0.0656691,-0.043547,-0.0257998}
,
{-0.0678337,0.013769,-0.0709562,-0.0196258,-0.0492965,-0.135559}
,
{0.136296,-0.00209359,-0.0403205,-0.0356867,-0.0393955,0.0609922}
,
{0.262604,0.0219912,-0.0461015,0.100973,0.0796336,0.0238523}
,
{-0.0705774,0.0320981,-0.116336,-0.0262713,0.0483777,-0.0901492}
,
{-0.00765687,0.0161334,-0.0907692,0.0624496,0.106665,-0.0542161}
,
{-0.0654489,-0.0869063,0.033816,-0.13801,-0.0566458,0.163213}
,
{0.0479736,0.235351,-0.0759072,0.165873,0.0630233,0.0400434}
,
{0.077901,-0.0334055,0.0653499,-0.0335206,0.0237638,-0.204005}
,
{0.117276,0.121756,0.0233514,0.00898821,0.0396091,0.0221102}
,
{0.168603,0.075678,-0.107917,0.147428,0.482587,-0.0462072}
,
{0.168941,0.151975,-0.0171048,-0.107244,-0.15965,-0.0652635}
,
{0.106656,-0.0430986,0.0331832,0.0290389,-0.063005,0.0982936}
,
{-0.0239018,0.0179318,-0.0209091,0.0658825,0.193908,0.0341771}
,
{0.0700487,0.0920298,0.0302413,0.0309387,0.0182305,-0.0138552}
,
{0.40755,0.532813,-0.0642783,-0.0341487,0.283703,0.279901}
,
{-0.0605007,-0.050409,0.0994296,0.140552,-0.0169223,0.0815609}
,
{-0.0202706,0.0327731,-0.172265,0.0707995,-0.0465595,0.0231349}
,
{0.0808022,-0.0546769,0.121671,-0.172586,-0.0441204,-0.0190617}
,
{-0.0478431,-0.0222772,-0.0190809,-0.0163503,-0.000679167,0.034737}
,
{-0.217862,-0.0115417,0.0451366,-0.129846,-0.101413,-0.0310945}
,
{-0.114398,0.0729406,0.0707321,-0.0984299,-0.113544,0.00935898}
,
{0.0184805,0.0084993,0.00566493,0.0236318,0.0964738,-0.0944135}
,
{0.0617907,-0.0398873,-0.0859671,0.0418916,0.046007,0.026642}
,
{0.0131255,-0.0622469,0.0040792,-0.000289483,-0.1119,-0.0498419}
,
{-0.202783,0.220192,-0.00528786,-0.0522279,0.382415,-0.0175935}
,
{0.317129,0.0399625,-0.0814378,0.0801398,-0.329201,-0.194387}
,
{0.266607,0.0432053,-0.0303262,0.271451,-0.0839081,-0.156344}
,
{0.352813,-0.0433303,-0.0950977,0.404092,-0.189871,0.043624}
,
{-0.198591,0.0965117,0.0215086,-0.0262424,0.134572,0.102157}
,
{-1.92984,1.1503,-0.455869,0.482607,-0.352962,0.232255}
 };
  static const float bias2[1] = { 0.307887 };
  static const float weights2[][1] = { {0.0388506}
,
{-0.0599174}
,
{0.0898996}
,
{-0.060399}
,
{0.0370695}
,
{-0.125131}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_2_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_2_58(v, index);
}
static int assign_gen_lepton_prior_11_2_58() {
  global_gen_lepton_prior.at(11,2,58) = &specialized_gen_lepton_prior_11_2_58;
  return 0;
}
static int initialize_gen_lepton_prior_11_2_58 = assign_gen_lepton_prior_11_2_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_2_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.192201,-0.00491229,0.170468,0.0729133,-0.0686779,0.459606 };
  static const float weights1[][6] = { {0.528984,0.980916,0.358883,-0.162841,-0.0905206,-0.217473}
,
{-0.0485751,0.842164,0.703208,0.347765,-0.00271004,-0.371484}
,
{0.0109582,0.387607,0.405336,-0.167034,-0.0615696,-0.0423674}
,
{-0.198637,1.18527,0.185744,-0.0998587,-0.492723,0.065832}
,
{-0.28432,0.0346225,0.194216,-0.0690779,-0.183443,0.64168}
,
{0.0900642,-0.26358,-0.107185,0.143534,0.205681,0.719224}
,
{-0.170035,-0.203536,0.185956,0.0494655,0.282992,0.294815}
,
{0.443615,0.0402003,0.0262371,0.00495201,0.126311,0.394576}
,
{0.345105,0.00473293,0.127237,0.245376,0.33273,-0.135907}
,
{0.12531,0.158171,-0.00131699,-0.241759,-0.0820746,-0.0291695}
,
{0.0603563,-0.037636,-0.0922598,0.0260576,-0.0992458,0.115271}
,
{-0.0720518,0.119561,0.113662,-0.0360408,-0.0758409,-0.181431}
,
{0.0839048,0.118776,0.0252061,-0.112089,-0.179182,-0.0468852}
,
{-0.0204498,0.0104468,0.0173451,-0.00658761,-0.202721,0.235315}
,
{-0.155689,0.0320959,-0.0913706,-0.0339875,-0.0161036,-0.0415892}
,
{0.210713,-0.133755,0.145492,-0.0700147,-0.477835,-0.485327}
,
{-0.0291904,0.05033,-0.0187777,0.0664722,-0.359852,0.154828}
,
{-0.281557,0.124083,-0.145294,-0.358159,-0.78944,-0.159949}
,
{-0.0162293,-0.253458,-0.0480714,0.0270534,0.243808,0.166849}
,
{-0.08008,0.0422083,-0.096561,0.0851531,-0.111226,-0.109852}
,
{-0.267954,-0.0912557,-0.107763,0.21799,-0.0984382,-0.132822}
,
{-0.292753,-0.109161,-0.0511063,-0.0997334,-0.182524,0.057519}
,
{0.081009,0.11602,-0.0928371,0.14427,0.0322192,-0.0663059}
,
{-0.0511674,0.148457,0.141263,0.0280789,0.20604,0.0155489}
,
{-0.0085291,-0.0695673,0.02093,-0.1429,-0.302263,-0.10178}
,
{-0.00269376,-0.173799,-0.16054,-0.0512273,-0.129492,0.0718931}
,
{0.0437013,0.103522,-0.0609132,0.191718,-0.000383979,-0.0359803}
,
{0.0904651,0.226942,-0.219126,-0.101668,-0.229926,-0.0706771}
,
{0.184009,0.171964,0.0780281,0.712355,-0.28065,-0.315508}
,
{-0.0444736,0.197788,0.156981,0.00846979,-0.0322398,-0.140882}
,
{-0.10743,0.0257685,0.10953,0.105123,0.238265,0.0456849}
,
{-0.390641,0.126038,-0.288603,0.112461,-0.22054,0.121072}
,
{0.0168397,-0.0501841,0.0450018,-0.0525069,0.0513817,0.0139736}
,
{0.20771,0.0483682,-0.18161,0.0371073,0.106616,0.0492132}
,
{0.302919,0.0839825,-0.0630196,0.20553,0.0780556,0.0482471}
,
{0.26481,-0.0756094,0.0897297,-0.00708657,0.0362817,0.0526551}
,
{-0.603644,0.405197,-0.054589,0.214894,-0.129224,-0.0895595}
,
{-0.0306892,0.0147067,-0.0777817,0.0317133,-0.0708739,0.000997075}
,
{0.505117,0.000529509,-0.130666,0.138564,-0.251698,-0.0416245}
,
{0.124838,0.0598495,-0.086634,-0.000874025,0.144123,0.00623644}
,
{-0.175623,-0.103975,0.0212135,-0.0346789,-0.0213539,0.0553198}
,
{-0.183782,0.0154947,0.248567,0.198489,0.00376728,-0.127718}
,
{0.166936,-0.0593424,0.00699835,-0.0997942,0.10879,0.0645836}
,
{-0.0691496,0.0472453,-0.276681,0.345733,-0.0567485,-0.0497778}
,
{0.0265736,0.0269498,0.0858653,0.0682052,0.161772,0.016189}
,
{0.0894139,-0.00215116,-0.0363298,-0.105132,-0.053629,0.0339705}
,
{-0.324053,0.113273,-0.0295597,0.0661552,-0.0377063,0.0502765}
,
{-0.0241303,0.0300343,-0.0558029,0.0576656,-0.0740617,-0.0281124}
,
{0.0301809,0.136533,0.241936,0.131701,-0.215074,-0.149857}
,
{-0.0403472,-0.0816592,0.00964175,0.157366,-0.0983007,-0.0159818}
,
{-0.140566,0.20466,0.0434401,0.0277028,-0.0190484,-0.0253033}
,
{-0.163315,0.0272851,0.129809,0.194239,-0.195406,-0.168465}
,
{-0.114411,-0.0183227,0.0363952,-0.00932519,-0.0980379,-0.0538774}
,
{0.0733964,-0.115188,0.150329,-0.152179,0.0457561,-0.0811749}
,
{-0.00285625,0.194665,-0.0317414,-0.0224501,-0.0400589,-0.16666}
,
{0.0417612,-0.210342,-0.12997,0.0394897,0.086105,0.113488}
,
{-0.0283763,0.135919,0.0223439,-0.0837459,0.028507,0.138774}
,
{-0.378178,-0.953057,-0.00400659,-0.404299,-0.124488,0.326346}
,
{-0.107849,-0.24442,0.690845,0.398962,-0.0316024,0.263412}
,
{-0.0815151,0.11431,0.110796,0.112274,-0.0819678,-0.0876412}
,
{0.00516095,-0.0917275,0.0797343,0.140982,0.0598389,0.153726}
,
{0.0879008,0.0709958,-0.0344458,-0.00045692,-0.0790827,-0.0905193}
,
{0.00455279,-0.344218,0.0268675,0.200246,-0.163871,-0.538117}
,
{-0.118703,-0.671896,0.579161,0.448602,-0.0327386,0.0514573}
,
{-0.0561423,0.0648095,0.118227,-0.00275753,0.0578602,0.0504409}
,
{0.0983593,0.00771622,0.0687847,-0.0277338,0.0904985,-0.0604173}
,
{-0.0354467,-0.0264626,0.18117,0.02,-0.0623526,-0.0159499}
,
{0.0799454,-0.15166,-0.0724788,-0.418211,-0.142634,-0.137817}
,
{-0.276129,-0.619982,0.359698,0.669394,-0.0985841,0.540461}
,
{-0.218816,0.118448,-0.209052,0.0611115,-0.15307,0.274442}
,
{0.113922,0.0973201,0.0544751,0.0398974,0.036026,0.00127175}
,
{0.0930976,0.0318428,-0.0343443,0.137791,0.136252,-0.0342533}
,
{-0.182088,0.483734,0.884751,-0.295956,-0.0366497,0.550228}
,
{-0.0397287,0.330342,0.856051,-0.030436,0.118205,-0.527071}
,
{0.239729,1.44826,-0.41813,0.219068,0.272985,-0.293825}
,
{0.0910282,1.44766,-0.394689,0.0675022,0.423834,-0.0649669}
,
{0.289928,1.47493,-0.580961,0.176766,0.248577,0.0416369}
,
{1.64397,-0.498596,1.35125,0.560835,-0.10533,0.458036}
,
{-0.079389,0.171911,-0.0882917,-0.000355193,0.11733,-0.205952}
 };
  static const float bias2[1] = { 0.0492024 };
  static const float weights2[][1] = { {0.615102}
,
{-0.140052}
,
{0.0750399}
,
{0.0715785}
,
{-0.0866437}
,
{0.126114}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_2_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_2_59(v, index);
}
static int assign_gen_lepton_prior_11_2_59() {
  global_gen_lepton_prior.at(11,2,59) = &specialized_gen_lepton_prior_11_2_59;
  return 0;
}
static int initialize_gen_lepton_prior_11_2_59 = assign_gen_lepton_prior_11_2_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_10(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0436023,-0.0593209,0.0,0.0761525,-0.0826915,0.160121 };
  static const float weights1[][6] = { {0.0234494,0.0223504,0.116727,-0.151277,-0.0062047,-0.0293265}
,
{-0.190416,0.180754,0.120914,-0.552715,0.123483,0.061628}
,
{0.261192,-0.302098,0.0997775,-0.235143,0.0814059,0.0615872}
,
{0.468305,0.340219,0.222839,0.60365,-0.425184,1.53647}
,
{-0.0669541,-0.0792112,0.211435,-0.0179387,-0.0678869,0.0967532}
,
{-0.0141861,-0.101911,-0.0512331,0.014008,-0.090849,0.151993}
,
{0.163983,-0.167985,-0.0435637,0.169482,-0.0710769,0.11757}
,
{-0.0478251,0.352544,0.161591,-0.433791,-0.12668,-0.0500091}
,
{-0.0579298,0.109783,0.114495,-0.268268,0.119475,0.133149}
,
{-0.0422395,-0.109095,-0.0732462,-0.0633411,0.0920778,0.010155}
,
{-0.045758,0.0559514,-0.1122,0.0486951,0.243658,0.0229914}
,
{-0.0191905,-0.104534,0.0622505,0.0753168,0.113956,-0.181013}
,
{-0.0386565,-0.0151874,0.168204,-0.0662464,-0.076227,-0.0323989}
,
{0.131562,0.172953,-0.17122,-0.0280868,0.162221,0.117083}
,
{0.169957,0.0712851,0.160617,0.109093,0.0255254,-0.0227213}
,
{0.00628333,-0.166309,-0.0202429,0.10674,0.100962,-0.0251336}
,
{0.224886,-0.168157,0.169861,-0.0441723,0.0857394,-0.113883}
,
{-0.0130256,0.146382,-0.110795,0.0952835,0.0139176,0.126665}
,
{-0.274045,-0.465003,-0.159682,-0.0805802,-0.33742,0.465874}
,
{0.00447196,0.117815,-0.199725,-0.132981,-0.012527,0.00404483}
,
{0.039616,-0.00382787,-0.0232192,0.100129,0.0326606,-0.0296353}
,
{-0.062307,0.030041,-0.189902,-0.0764418,-0.0475024,0.0100266}
,
{-0.0341453,0.0741502,-0.145055,-0.0922209,0.0675392,0.182949}
,
{-0.0144472,0.0910573,0.0207261,-0.00989012,-0.0356766,0.0354277}
,
{0.111531,0.0158708,-0.0872432,-0.141974,0.0894115,0.0219204}
,
{-0.0373843,0.119565,-0.011336,-0.164427,-0.0996636,0.137331}
,
{-0.0656285,0.02533,0.0264558,-0.214503,-0.158188,0.0656765}
,
{-0.109718,0.00944418,-0.0401669,-0.175796,-0.0335068,0.0949161}
,
{0.224319,0.174407,0.0132917,-0.008848,-0.144419,0.0718334}
,
{0.099183,-0.0217548,-0.0585427,0.12996,-0.0391625,-0.104604}
,
{-0.122877,0.128401,-0.0429435,0.235571,0.0738255,-0.131049}
,
{-0.109491,-0.229965,-0.0068288,-0.169869,-0.223864,-0.0802276}
,
{0.356902,0.154811,0.0525453,0.152832,-0.45659,0.115629}
,
{-0.00870204,0.00606332,-0.0681406,0.00144127,-0.0407823,-0.0225062}
,
{-0.179726,-0.0248106,0.079097,-0.026283,0.0147448,-0.0977864}
,
{0.0384576,-0.258062,0.0334628,-0.128657,0.154787,-0.0566208}
,
{-0.00333612,-0.0444779,-0.0486076,-0.109096,0.0801881,0.077471}
,
{-0.0171189,0.0490597,0.111527,0.144532,-0.00768993,0.0152597}
,
{0.516581,-0.717043,-0.220176,0.347866,0.119176,-0.145822}
,
{0.0448221,0.201557,-0.0102589,0.315417,0.0525628,0.254161}
,
{-0.192625,-0.0284462,0.0288277,-0.131005,0.0743575,-0.0830425}
,
{-0.0870473,0.0769582,-0.0208432,-0.242327,-0.0247568,-0.168586}
,
{0.0789949,-0.149644,-0.12104,0.227345,0.0402563,-0.0440702}
,
{0.343836,-0.502648,-0.0636249,0.0762592,0.075405,-0.091511}
,
{-0.0727582,0.295339,-0.104687,0.18341,-0.102737,0.157133}
,
{-0.0773534,0.0661338,-0.119538,-0.213317,-0.0447745,-0.0282661}
,
{0.485761,-0.218541,-0.0540111,0.0653872,-0.0303954,0.103964}
,
{-0.0336208,-0.0931959,-0.0115679,-0.0433053,0.0511377,-0.0717588}
,
{-0.103002,-0.13418,-0.0312579,-0.326322,0.0352749,-0.222136}
,
{0.00252521,0.0421796,-0.0284252,0.130409,-0.170714,0.0106272}
,
{0.177717,0.080467,-0.0245495,0.104535,-0.124883,0.182807}
,
{0.0486363,0.0584027,0.0201155,-0.0700342,-0.155514,0.265077}
,
{0.0241503,-0.179038,-0.00623573,0.00740205,0.133469,-0.0768325}
,
{0.149015,0.0565283,-0.17718,0.283632,-0.00406581,0.0431606}
,
{-0.0670778,-0.0747941,0.0946223,-0.0247222,-0.195856,-0.0911565}
,
{-0.257433,0.0802768,0.0335789,0.00774745,-0.127056,-0.141573}
,
{-0.0100818,0.0386169,-0.0372125,-0.220853,-0.175945,-0.296514}
,
{0.0625456,-0.156072,0.0392369,-0.0625558,0.0941659,0.0279018}
,
{-0.131352,0.19066,-0.152193,-0.149721,-0.175587,-0.122096}
,
{-0.0613508,-0.0401518,0.000380115,-0.143353,0.0704594,-0.148744}
,
{0.114937,-0.0440805,-0.0694101,-0.0283305,-0.0922064,0.0367547}
,
{-0.169781,-0.145281,0.0625334,0.0825807,0.016691,0.24961}
,
{0.199742,-0.233407,0.1989,0.0357867,-0.0526132,-0.107196}
,
{0.0740665,-0.105026,0.116736,0.0561966,0.166735,0.137975}
,
{0.101162,0.209854,-0.179119,0.117711,0.0966659,0.0253405}
,
{-0.191417,0.0537581,0.0959955,-0.091733,0.0776768,0.114531}
,
{0.0972959,-0.0438631,-0.0150507,0.0674339,-0.145612,-0.152612}
,
{0.0128416,0.159187,0.030438,-0.15514,0.00311407,0.095826}
,
{-0.0173191,-0.168956,-0.112948,-0.0501883,-0.149847,0.0491867}
,
{0.0789668,0.0837267,-0.156935,-0.15396,0.205558,0.0121177}
,
{0.0358679,-0.0972157,-0.162135,0.178466,0.0213958,0.0962057}
,
{0.108265,-0.12023,0.0496937,-0.0196638,-0.1995,-0.205049}
,
{0.0422976,-0.182213,-0.0282459,-0.118534,0.0687537,-0.0166047}
,
{0.00485635,0.00454359,-0.198278,-0.0318543,0.0444515,0.10858}
,
{-0.0151672,0.0307318,-0.0207486,-0.0390351,-0.117729,0.100516}
,
{0.0985995,-0.000597726,0.17637,-0.200446,0.171832,0.061059}
,
{-0.133569,-0.013769,0.0320486,-0.158986,-0.125202,0.205958}
,
{0.00777825,-0.241533,-0.192894,0.0125354,0.01746,0.0652904}
,
{-0.0596142,-0.0217926,-0.176803,-0.169297,0.112644,0.187971}
 };
  static const float bias2[1] = { 0.062375 };
  static const float weights2[][1] = { {0.124904}
,
{0.0828413}
,
{-0.0273762}
,
{-0.299702}
,
{0.122957}
,
{-0.130379}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_10(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_10(v, index);
}
static int assign_gen_lepton_prior_1_1_10() {
  global_gen_lepton_prior.at(1,1,10) = &specialized_gen_lepton_prior_1_1_10;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_10 = assign_gen_lepton_prior_1_1_10();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_3_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.684188,0.511324,-0.0578497,0.709924,-0.36032,0.440737 };
  static const float weights1[][6] = { {0.0294624,0.287432,0.055033,0.529728,0.22239,-0.3752}
,
{0.534569,0.081181,0.0309352,-0.33918,0.147634,0.496702}
,
{0.306852,0.47676,0.137391,-0.371905,0.719784,-0.435285}
,
{1.23967,1.35019,0.842763,0.57643,0.0488606,-1.01253}
,
{0.536389,0.456692,0.234684,0.724181,-0.182407,0.589919}
,
{0.413759,0.162741,-0.0205245,0.585889,-0.27573,0.645529}
,
{0.851825,0.520026,-0.268745,0.796343,-0.399963,0.361551}
,
{0.373249,0.104587,-0.261072,0.242124,-0.155788,-0.149173}
,
{0.00877423,0.0587748,-0.461564,-0.0549157,-0.150435,-0.277589}
,
{0.10294,-0.0941672,-0.117032,-0.0647658,0.0157213,0.0574566}
,
{0.0803267,-0.233439,0.00266398,-0.0265338,-0.115977,0.220467}
,
{-0.0870156,0.0257573,-0.0174893,0.0282111,-0.00269993,0.195635}
,
{-0.18469,0.0691001,-0.00165646,0.379063,0.201018,0.0108709}
,
{0.0855775,0.241803,-0.0275338,0.188655,-0.0161274,-0.22782}
,
{-0.128828,-0.0429697,-0.0470713,0.181217,0.087447,-0.101325}
,
{-0.189904,0.0552821,0.0725468,0.0908261,0.230548,-0.56612}
,
{0.0997586,0.21118,-0.0488218,0.110663,-0.0466248,-0.255101}
,
{0.357332,-0.28506,0.960138,0.18079,0.266568,0.0676479}
,
{0.00961955,-0.220226,0.239522,0.0453294,-0.134301,-0.0375597}
,
{-0.246204,0.109229,-0.300442,-0.240198,-0.329868,-0.286883}
,
{-0.150982,-0.0232201,-0.197242,-0.0309214,-0.154328,0.173571}
,
{-0.147254,0.0767946,-0.103154,0.0981802,0.154889,0.175462}
,
{0.0734517,-0.135996,-0.0923649,-0.00396957,0.0612554,-0.188456}
,
{0.0339472,-0.0374914,-0.0506863,-0.152452,0.176031,0.00428351}
,
{-0.0662975,0.0822237,-0.0475779,0.121279,0.18153,0.00456118}
,
{0.0703712,0.0708986,-0.0166846,-0.0273457,0.123298,0.0111169}
,
{0.0954605,0.246024,0.0721036,-0.214983,0.124363,-0.0382926}
,
{0.185732,-0.0497548,0.0982262,-0.134225,0.103181,0.1711}
,
{-0.521663,0.118792,0.044666,0.581511,-0.222122,-0.349663}
,
{-0.0290246,0.173793,-0.0301874,-0.00128622,0.101756,0.00722281}
,
{0.0597515,0.0292595,-0.0715456,0.138871,-0.0232741,0.00141641}
,
{0.184395,0.0641157,-0.090723,0.00637964,-0.00654854,0.136243}
,
{-0.195995,0.135513,-0.0769506,0.0900911,-0.0489271,0.00357581}
,
{-0.0643371,0.0402501,-0.194376,-0.141765,0.0216656,0.0457771}
,
{0.124379,0.0241706,-0.149686,0.0579652,-0.0661571,0.0328527}
,
{-0.0168953,-0.134207,-0.116189,0.0602015,-0.223337,-0.23494}
,
{-0.0103191,0.0507253,0.0316335,0.218412,0.00845912,0.0777011}
,
{-0.0412106,0.00582037,0.218793,-0.135929,0.0578705,-0.166944}
,
{0.0631083,0.0207576,0.00572407,-0.0345961,-0.0230356,-0.0788774}
,
{0.127328,0.0826821,-0.0563328,-0.0612878,-0.110751,-0.229135}
,
{0.0296592,-0.0305821,-0.0988359,0.0620953,0.100302,-0.0272294}
,
{-0.0718826,0.0394009,0.0477758,0.0174582,0.059207,0.105334}
,
{-0.265485,-0.0547054,0.123879,-0.0487556,-0.214315,-0.136996}
,
{0.0845967,0.114001,0.00349649,0.00143246,0.0617856,-0.0742392}
,
{0.0760338,-0.0430534,0.00957542,0.102531,-0.053262,0.0371485}
,
{0.134631,-0.0196887,0.191299,-0.0759079,-0.0848795,-0.100879}
,
{-0.0526991,0.0920521,-0.094603,-0.173433,-0.0162907,-0.15124}
,
{-0.169716,-0.115605,-0.113065,0.171237,0.0152961,0.0607596}
,
{-0.0474713,-0.127355,0.0162845,0.0225271,-0.149662,-0.0647905}
,
{0.216232,-0.174632,-0.0770337,-0.0244487,0.0801624,-0.0769298}
,
{-0.00645243,0.189501,0.00402602,-0.0470616,0.00152277,0.0643507}
,
{-0.050037,-0.0154598,0.0744234,0.118578,-0.0952014,-0.0448263}
,
{-0.17579,0.0360021,0.044871,-5.31217e-05,0.0867167,0.254801}
,
{0.0436603,0.0566917,-0.0567492,-0.0648399,0.156849,0.164915}
,
{0.0517137,-0.0465396,-0.063632,-0.134507,0.010201,-0.177381}
,
{-0.151564,-0.106378,0.0132712,0.130368,-0.0936837,0.0507959}
,
{0.122126,-0.0458744,0.0836109,-0.0358443,-0.032389,0.159296}
,
{0.265938,-0.49305,0.178377,0.728983,0.0762107,-0.550609}
,
{0.0107637,0.00980539,7.44724e-05,-0.0465536,0.0301696,0.0274646}
,
{0.125457,0.0792842,0.080737,0.0512798,-0.146992,0.230913}
,
{-0.139007,-0.0814525,-0.00868706,-0.0092031,0.0136791,-0.076123}
,
{0.00759548,-0.197074,-0.00208399,-0.0016335,0.00478216,-0.030036}
,
{0.227837,0.0640739,0.306678,-0.624788,-0.121421,0.421927}
,
{-0.0319239,0.0473125,-0.0443066,0.0540226,0.0141064,-0.15}
,
{-0.0901147,-0.041085,-0.0200457,0.0104798,-0.0189332,0.0453719}
,
{-0.0297515,-0.0991397,0.0160725,0.146725,0.196436,0.0557322}
,
{0.170829,0.230434,0.110225,-0.149635,-0.0810321,0.0663977}
,
{0.0230687,-0.268333,-0.294171,-0.713063,0.0252682,0.157352}
,
{-0.036913,-0.162732,-0.0647683,0.0236709,-0.130332,-0.019335}
,
{-0.181497,0.0148451,-0.154317,0.0548897,-0.0281251,0.00135327}
,
{0.203097,-0.0640577,-0.0303609,-0.0025166,0.0275701,-0.0971385}
,
{-0.0385448,0.201386,0.100552,-0.11871,0.117117,-0.0446635}
,
{-0.00207195,-0.38925,-0.148028,-0.432096,0.0152895,0.204643}
,
{-0.00760487,-0.0566972,-0.0427242,0.0262064,-0.0380456,-0.0824114}
,
{-0.10284,0.102848,-0.0945841,-0.176288,0.184149,-0.145585}
,
{-0.170524,0.240591,-0.102074,0.1653,-0.0863217,0.166266}
,
{-0.173086,0.349314,0.175201,-0.0726407,0.142599,0.0783479}
,
{-0.376499,2.24445,1.30692,-0.652492,-2.26766,-1.4637}
,
{0.19014,-0.179942,-0.0821143,-0.0149678,0.269378,-0.59239}
 };
  static const float bias2[1] = { 0.15213 };
  static const float weights2[][1] = { {0.102357}
,
{0.0491938}
,
{-0.0866219}
,
{0.0448105}
,
{-0.0729897}
,
{0.039172}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_3_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_3_57(v, index);
}
static int assign_gen_lepton_prior_11_3_57() {
  global_gen_lepton_prior.at(11,3,57) = &specialized_gen_lepton_prior_11_3_57;
  return 0;
}
static int initialize_gen_lepton_prior_11_3_57 = assign_gen_lepton_prior_11_3_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_3_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,0.0,0.0,0.0,0.0,0.0 };
  static const float weights1[][6] = { {0.0427469,0.0346227,0.100811,0.112697,-0.0438072,0.0481269}
,
{-0.157961,-0.106712,-0.137297,-0.165687,0.172992,-0.00994753}
,
{-0.128027,0.0328564,-0.135891,-0.0543808,-0.0625166,0.118212}
,
{0.065618,-0.135885,0.0490491,0.122316,0.0371218,0.0116019}
,
{0.142124,0.0026627,0.17493,-0.17118,0.114112,-0.0119186}
,
{0.0167809,0.099799,0.133299,-0.15101,0.0506759,-0.0519234}
,
{0.142118,-0.00152982,-0.0317395,-0.00990549,0.151294,-0.0364634}
,
{0.0410068,-0.110957,-0.0308407,0.0195695,0.157811,-0.0701135}
,
{0.103356,-0.0346162,0.177778,-0.138762,0.0930285,0.142901}
,
{-0.113573,-0.130993,0.0181791,-0.126565,0.157755,-0.00632248}
,
{-0.238235,0.0275864,-0.0576065,0.0242958,0.05168,0.116146}
,
{0.0684013,-0.166837,0.0158692,0.0664799,-0.020688,-0.0266544}
,
{0.0175591,-0.116632,-0.00299286,0.186864,-0.0172879,-0.0642589}
,
{-0.00770586,-0.0152747,-0.0882446,-0.0444861,-0.0115131,0.0596159}
,
{0.0256724,-0.0685838,-0.051719,-0.196632,-0.0942607,0.0423951}
,
{-0.111165,0.0567252,-0.160112,-0.083107,0.0145666,0.200315}
,
{-0.0169966,-0.0709074,0.0350279,-0.0265637,-0.0205757,-0.173572}
,
{0.0931245,-0.0895453,0.0762409,0.119147,0.000697795,-0.208553}
,
{0.125256,0.0733406,0.196588,-0.128842,0.0716857,-0.0621195}
,
{-0.221242,0.0178816,0.204019,0.0764958,0.126265,0.182826}
,
{-0.148255,0.0784174,-0.102865,-0.0367549,-0.241681,-0.0519855}
,
{-0.0214553,-0.0910872,0.119434,0.0146839,0.0662616,0.151184}
,
{0.120776,0.0926757,0.170008,0.0798156,-0.0179886,-0.0836922}
,
{-0.209607,0.00363928,-0.13437,0.21304,0.115441,-0.0095276}
,
{0.00939248,0.174191,-0.179162,-0.000899254,0.0979849,-0.121359}
,
{0.021004,-0.152336,-0.0432384,0.0415683,-0.112286,0.0236604}
,
{0.0261867,0.0790875,-0.0565934,-0.214666,0.197653,0.0847925}
,
{0.170888,-0.020572,0.113986,0.0729403,-0.148511,-0.167422}
,
{-0.105303,-0.176398,0.060131,-0.0100591,0.226694,-0.121766}
,
{0.138933,0.112702,0.203743,0.232218,0.0758444,-0.121653}
,
{-0.134216,-0.035051,0.0972695,0.105206,-0.0971986,0.187725}
,
{-0.101898,-0.22659,0.194576,0.0230813,-0.0986301,0.0673627}
,
{-0.0849246,0.028315,-0.155524,-0.143132,0.0878578,0.193787}
,
{-0.0422914,-0.0405736,-0.0380408,-0.0333806,0.112271,-0.0623539}
,
{-0.157273,-0.137988,0.179431,0.138997,-0.0295764,-0.118836}
,
{-0.0182584,-0.0117943,0.0807297,-0.112081,0.00959684,0.219458}
,
{0.071724,-0.247763,-0.109955,0.0529202,-0.0553143,-0.0569883}
,
{-0.100866,-0.039639,0.13873,0.234473,-0.0613356,-0.0464505}
,
{0.0893803,-0.0659421,0.0270409,0.136921,0.20516,-0.00846973}
,
{0.0412154,-0.0706834,-0.0530832,-0.206888,0.227505,0.0447384}
,
{-0.00217362,0.176587,0.0782888,-0.043954,0.0122806,0.0112893}
,
{-0.0312291,-0.117688,0.0264294,-0.186407,-0.0715148,-0.118851}
,
{0.05946,0.2119,-0.0688744,0.0479135,-0.00922641,-0.0370235}
,
{-0.139133,0.115571,0.0562244,0.0614498,-0.069136,-0.209372}
,
{0.0592029,-0.0679572,0.046231,0.190105,-0.0847517,0.217316}
,
{0.098963,0.129434,0.0741924,-0.224806,0.0906052,0.239618}
,
{-0.0962163,0.137525,0.233079,-0.0716791,0.127544,0.142738}
,
{-0.0483323,-0.0724638,-0.0524857,-0.00381774,0.0485872,0.109821}
,
{-0.00320629,-0.00503748,-0.00487898,0.0401451,-0.0262244,-0.147024}
,
{0.0152534,0.130356,0.041738,-0.0696825,0.224006,-0.205252}
,
{0.139733,-0.185164,0.188005,0.0283912,0.117584,0.026885}
,
{0.0220368,0.155296,-0.0206796,-0.0815187,-0.23334,0.165536}
,
{-0.226441,-0.0175148,0.0673086,-0.167804,-0.0663446,-0.0547992}
,
{0.102438,0.0398078,-0.0357514,0.122872,-0.0304136,0.039584}
,
{-0.00371109,-0.0244368,0.173534,-0.0739316,0.00837065,0.148614}
,
{-0.0560672,0.0822654,-0.0684875,0.0210669,-0.0972141,-0.173933}
,
{-0.0983106,0.0352722,-0.0163401,0.0461122,0.0594656,0.120195}
,
{0.161237,0.000551424,-0.217333,-0.070593,0.138619,-0.116164}
,
{0.0787299,0.117018,0.0497909,-0.0378493,0.108571,0.0209035}
,
{0.109361,0.0916751,-0.188925,-0.189015,-0.109892,-0.0581788}
,
{0.0463542,0.172909,-0.034739,0.0246958,-0.0337106,0.109835}
,
{0.0666166,-0.137089,0.0852707,-0.141909,-0.0946429,0.1211}
,
{0.126188,0.166714,0.0890813,-0.20534,-0.0320775,-0.170999}
,
{0.0315137,-0.209653,-0.0697151,0.131283,-0.000481016,-0.0736976}
,
{0.225141,-0.100448,0.100963,0.0194735,0.230236,0.14319}
,
{-0.164631,-0.0207333,-0.14973,0.124681,0.0654757,-0.0157437}
,
{-0.188096,-0.07409,-0.0891506,-0.0702834,-0.0526906,-0.111447}
,
{-0.167412,-0.0275506,0.129704,0.180903,-0.124635,0.0232019}
,
{-0.11814,-0.241272,0.10438,-0.194054,-0.12732,0.025642}
,
{0.0138488,0.122935,0.0152698,-0.0392877,0.185074,-0.00214322}
,
{0.0539144,-0.00321467,-0.239699,0.0495797,-0.180713,0.18413}
,
{-0.00187337,-0.147447,-0.0474526,0.0169738,-0.142807,0.0307151}
,
{0.066371,0.0247991,-0.0128975,-0.0240693,0.00949895,-0.150311}
,
{-0.0567756,0.0956259,-0.0681436,0.0589831,0.186766,0.00171663}
,
{0.0622279,-0.0665858,0.056239,-0.0547273,-0.180612,-0.00480064}
,
{0.173332,0.0525583,-0.19388,-0.0644701,0.163739,0.12299}
,
{0.0605737,-0.0707829,0.118363,-0.0273062,-0.0131748,-0.0926613}
,
{0.0647929,-0.23251,-0.18555,-0.00411628,0.154171,0.018028}
,
{-0.0640553,-0.205552,0.249132,-0.120373,-0.162974,0.0767423}
 };
  static const float bias2[1] = { 0.0 };
  static const float weights2[][1] = { {-0.127374}
,
{-0.0746521}
,
{-0.084852}
,
{-0.111253}
,
{-0.0774041}
,
{-0.0922344}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_3_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_3_58(v, index);
}
static int assign_gen_lepton_prior_11_3_58() {
  global_gen_lepton_prior.at(11,3,58) = &specialized_gen_lepton_prior_11_3_58;
  return 0;
}
static int initialize_gen_lepton_prior_11_3_58 = assign_gen_lepton_prior_11_3_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_11(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0166026,-0.00518252,0.0,-0.00965803,-0.0174064,0.019384 };
  static const float weights1[][6] = { {0.0798713,-0.0265201,-0.105058,-0.145156,0.128704,-0.172467}
,
{0.0468775,-0.141077,-0.0122564,0.104294,0.138978,-0.0349567}
,
{0.0070572,-0.11845,0.0382794,0.00227674,-0.0520344,-0.0678125}
,
{0.199192,0.109702,0.154242,0.205732,0.0138068,0.109022}
,
{0.158911,0.0909847,-0.0769257,-0.104502,0.0388978,0.0284776}
,
{0.229787,-0.118939,-0.0546199,0.0724979,-0.153018,-0.0957013}
,
{0.0348857,0.152238,0.139332,-0.149372,0.0985911,-0.0996876}
,
{0.0958237,0.0522278,-0.0051741,0.0528841,0.139464,-0.137916}
,
{0.058912,0.00147083,0.110117,-0.0806771,0.087703,0.114848}
,
{0.00286607,-0.164491,0.0419483,0.175968,-0.047615,0.0279849}
,
{0.110821,0.00152393,-0.0652637,0.113981,-0.0544708,-0.115968}
,
{-0.134308,-0.0330159,0.15855,0.0498798,-0.133582,0.0475182}
,
{-0.0405606,-0.169414,0.0522624,0.0177262,-0.0485731,0.110793}
,
{0.0415207,0.0210332,-0.148335,-0.0467895,-0.106938,0.0835599}
,
{-0.00574621,-0.169965,-0.0822736,-0.178754,0.0443525,-0.0223565}
,
{-0.0941398,0.14822,0.0506962,-0.158018,0.0910802,-0.0067219}
,
{0.0655549,-0.112611,-0.10072,0.0689838,0.148821,0.0734544}
,
{0.231484,-0.136201,-0.121146,0.0199826,-0.0728471,0.0778327}
,
{-0.058478,-0.0277505,-0.147367,0.0202056,0.178197,0.109437}
,
{-0.108622,-0.170654,0.00502714,0.0156237,0.184413,0.190895}
,
{-0.0541586,-0.211541,0.0363235,0.0611821,-0.119603,0.17547}
,
{0.00245522,0.139758,-0.0778535,0.0771533,-0.0945174,-0.00768777}
,
{0.105486,-0.181654,-0.130761,0.0488927,0.162302,0.239689}
,
{0.000931873,-0.013801,-0.0585551,-0.0220687,-0.047281,0.119558}
,
{0.226632,-0.108241,0.00987948,-0.0355665,0.131105,0.184782}
,
{-0.125512,-0.00114701,-0.0970939,-0.11186,0.00381503,-0.00443418}
,
{-0.0599655,0.0917657,-0.170278,-0.0197807,0.0693139,-0.0337196}
,
{0.0246237,-0.0010195,-0.144394,0.105347,0.0042089,-0.0560812}
,
{0.0297044,0.0189774,-0.0606201,0.146559,-0.0950925,0.241255}
,
{0.062782,0.111745,0.0262717,0.078357,0.114658,-0.0210491}
,
{0.144054,0.032833,-0.0531237,-0.00137742,0.0362781,-0.106317}
,
{-0.155273,-0.108337,-0.20438,0.0874179,-0.016881,-0.0734681}
,
{-0.0526714,0.0586488,-0.006914,0.0133552,0.0204616,-0.21934}
,
{0.00317669,-0.0148201,-0.0513915,0.0401046,-0.0314121,-0.105435}
,
{-0.174354,0.00643202,-0.104455,-0.0741037,0.0187995,-0.113814}
,
{-0.107876,-0.162959,-0.19641,-0.179248,-0.0044594,-0.102238}
,
{0.0366044,0.0765304,-0.147209,-0.0819121,0.119342,0.0934335}
,
{0.136805,0.0688743,-0.080918,-0.0345754,-0.0783787,0.00518456}
,
{-0.213455,-0.151456,0.233908,0.0105783,-0.0547536,0.201923}
,
{0.0534953,0.0458636,-0.162309,0.187881,-0.0676705,0.105148}
,
{0.158212,0.17228,-0.132482,-0.0503023,-0.0356294,-0.00860504}
,
{-0.0877431,-0.233629,-0.134931,0.220785,-0.10294,0.156363}
,
{-0.168668,-0.0512196,0.205305,0.00335199,0.164244,0.0541668}
,
{0.11777,-0.198088,-0.0233321,-0.0726826,0.0504719,-0.198126}
,
{0.0156663,0.148444,-0.0219221,0.031048,-0.0660486,0.0959344}
,
{0.0865347,-0.138988,-0.0215918,-0.218674,-0.10694,-0.0969455}
,
{0.0467876,-0.123758,-0.158944,-0.135191,-0.0937406,0.184897}
,
{-0.233024,0.0289901,0.0325347,-0.0182767,0.0892278,-0.0490807}
,
{0.0151234,-0.0469787,0.035077,-0.044821,0.0405755,0.163672}
,
{-0.168549,0.128665,0.206843,0.230099,-0.0239451,-0.147998}
,
{-0.0130972,-0.0875284,-0.0753552,0.00530191,-0.128625,-0.0819485}
,
{-0.137394,0.126849,0.0436354,0.186285,0.00665597,0.0856952}
,
{0.0045015,-0.0997449,-0.158985,-0.0331688,0.13318,0.0683391}
,
{-0.0605195,0.185607,-0.0496555,-0.096829,0.114978,0.0317924}
,
{0.212622,-0.0479083,-0.141019,0.0459629,0.0459199,-0.000672138}
,
{0.141349,0.0620147,0.225792,-0.155584,0.144859,-0.0557491}
,
{-0.0317371,0.0138889,-0.243262,0.0293947,0.020749,-0.177251}
,
{0.0590665,-0.136121,-0.206447,0.139967,-0.139183,0.0225087}
,
{-0.148781,0.141178,0.018964,0.0728796,-0.0813901,-0.0239753}
,
{-0.0724423,-0.166621,0.0832172,-0.0877713,0.14441,-0.0392108}
,
{-0.0711734,0.120139,0.0541999,-0.156883,0.0292095,0.130232}
,
{0.25334,0.167972,-0.0179467,0.0610991,-0.0742651,0.0426973}
,
{0.0643425,0.0688004,-0.0299167,-0.0471163,0.15374,0.144287}
,
{0.244471,0.0819792,-0.11147,0.121234,-0.0549366,-0.153202}
,
{0.11948,0.0833583,-0.0683517,-0.0393989,-0.122054,-0.120271}
,
{-0.0269815,-0.0798556,0.247246,-0.0425984,-0.0152273,-0.0278531}
,
{0.054008,0.148682,0.190783,-0.0390012,-0.0528951,0.0948506}
,
{0.0268168,0.204845,-0.219386,0.1543,0.252518,-0.100146}
,
{-0.0704803,0.011932,0.138422,0.0110936,-0.0547175,0.0914748}
,
{-0.0380355,-0.0731868,-0.231514,0.0181259,0.0339814,0.0146318}
,
{0.0643642,0.0353828,0.0349443,0.0932911,-0.0185868,-0.181957}
,
{0.115675,0.134113,-0.020794,0.180781,-0.237655,0.0912724}
,
{0.156531,-0.164094,0.1315,0.175789,0.0285306,0.0504568}
,
{-0.127232,0.1163,-0.128409,-0.168016,-0.0946946,-0.255532}
,
{-0.0175687,-0.0277555,-0.0565451,0.0165762,-0.0466698,-0.138268}
,
{0.00597915,0.233511,0.127054,-0.218445,0.070187,-0.0851412}
,
{-0.0965122,-0.0347426,0.0473407,0.0105555,0.061937,0.113346}
,
{0.0812673,-0.0287831,-0.123148,-0.203529,-0.0182026,0.247503}
,
{0.0791576,-0.0600434,-0.209686,0.0969062,0.078493,0.0562338}
 };
  static const float bias2[1] = { -0.0186598 };
  static const float weights2[][1] = { {-0.0328744}
,
{0.102316}
,
{0.0157658}
,
{-0.00238051}
,
{0.113634}
,
{-0.135628}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_11(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_11(v, index);
}
static int assign_gen_lepton_prior_1_1_11() {
  global_gen_lepton_prior.at(1,1,11) = &specialized_gen_lepton_prior_1_1_11;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_11 = assign_gen_lepton_prior_1_1_11();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_11_4_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.563265,0.040295,0.0868026,0.0582786,0.744897,0.350199 };
  static const float weights1[][6] = { {0.0784191,0.0133492,-0.424462,-0.217024,0.0108421,0.707584}
,
{0.166006,-0.0700455,0.497796,-0.649872,0.254509,0.67159}
,
{-0.857894,-0.293047,-0.238316,-0.546785,0.420807,0.160576}
,
{1.93312,0.804084,0.195277,-0.136577,1.46829,-0.955894}
,
{0.32623,0.0628793,0.33875,-0.0870112,0.596886,0.0759546}
,
{0.518672,0.144855,0.0282835,0.399211,0.607695,0.463647}
,
{0.529846,0.215012,-0.0621319,0.0517532,0.701009,0.753508}
,
{0.386741,-0.186481,-0.305978,-0.282216,0.43077,-0.00203101}
,
{-0.528595,-0.0175384,-0.415481,-0.168059,-0.0328467,0.0509964}
,
{0.175632,-0.116901,0.199206,0.0335702,-0.228139,0.200332}
,
{-0.0715353,-0.0196027,-0.0751592,0.172338,-0.0154005,-0.0889381}
,
{-0.0974837,0.0205018,-0.0648601,0.189342,-0.104315,0.116107}
,
{0.00474681,-0.4772,0.0357994,0.279093,-0.197468,0.185919}
,
{0.189423,0.113048,-0.0886493,0.232505,-0.00766381,0.0454055}
,
{0.0228112,-0.118196,0.0550229,-0.133527,-0.0914018,-0.100462}
,
{-0.0216293,0.15204,0.0912918,0.0371847,-0.0843881,-0.146923}
,
{0.192916,0.115628,-0.0411213,0.249009,0.0821548,-0.0241226}
,
{0.600998,0.900507,0.540182,-0.0262883,0.742515,0.698297}
,
{-0.059863,0.156299,-0.00494525,-0.121962,0.00203139,0.174061}
,
{-0.183925,-0.342342,0.0178597,-0.125667,-0.207205,-0.223022}
,
{-0.00825502,-0.0403575,-0.155746,0.0879415,-0.195411,-0.0947852}
,
{0.00680104,-0.180984,-0.0675345,0.0096703,-0.0821782,-0.25169}
,
{-0.014185,-0.0418547,0.0464574,0.229822,-0.144665,-0.00787749}
,
{0.0435274,0.0856605,-0.083367,-0.0749116,0.027552,0.00682921}
,
{0.158226,-0.155017,0.19081,-0.182837,-0.119923,0.0937803}
,
{0.0950262,0.0444973,0.102264,-0.257537,0.0791283,-0.0639454}
,
{-0.105464,-0.111199,0.324392,0.0485838,0.164278,-0.179208}
,
{0.00359816,-0.0238097,0.132174,0.0634555,0.209771,-0.356403}
,
{-0.246291,0.813264,-0.551728,-0.742008,-0.161815,0.444937}
,
{0.012944,-0.0276193,-0.115267,-0.0037731,0.0949106,0.0671065}
,
{-0.0525756,0.03669,-0.000599783,-0.0761878,-0.132852,-0.0235101}
,
{0.02955,-0.0933535,-0.0194452,0.129155,0.281647,-0.230682}
,
{0.0421311,0.121814,-0.0395228,0.19477,-0.0102435,0.0652231}
,
{0.00215493,0.0536308,-0.110487,0.108087,-0.0187581,0.103896}
,
{-0.0961499,-0.0309748,-0.109246,-0.270711,-0.010735,0.0449345}
,
{0.0475147,-0.0581566,-0.0440953,-0.104804,-0.0892785,0.133437}
,
{-0.0295487,-0.0629836,0.0684603,0.182335,0.208563,0.0019838}
,
{0.017184,0.141199,-0.0537429,0.0127156,0.0557972,0.0365423}
,
{-0.0243418,-0.0803216,-0.0951571,-0.2318,0.0166862,0.046957}
,
{0.042428,0.0126169,-0.129831,-0.057774,0.0578035,-0.0985088}
,
{-0.0418207,0.0946282,0.0681166,0.104303,-0.0639433,-0.0938496}
,
{0.0339936,-0.0554944,0.0521545,0.0225442,-0.102375,0.0630711}
,
{-0.0207943,-0.0241152,0.00233467,-0.0243777,0.037033,0.0874245}
,
{-0.00583599,-0.0294808,0.113778,0.0989755,0.0111671,0.189668}
,
{0.0184423,-0.129939,-0.0259169,-0.0553991,0.0428865,-0.05931}
,
{0.150397,0.115643,-0.0700953,-0.0083282,-0.16814,0.0457053}
,
{-0.00991711,0.11946,0.0494209,0.12344,-0.0323792,0.24346}
,
{-0.160242,-0.054707,0.0111521,-0.112568,0.134331,-0.0166117}
,
{-0.0131395,0.0907901,0.00642433,0.07937,0.0366094,-0.0937583}
,
{0.065077,0.0601738,0.130907,-0.0619503,-0.0590579,-0.0527272}
,
{-0.045815,-0.174933,0.0494165,0.24066,-0.013179,0.0828175}
,
{0.00834022,0.0613208,0.100749,0.109327,0.0656701,0.0975148}
,
{-0.0169037,0.0920085,0.041493,0.0736158,0.0350261,0.127256}
,
{0.0177973,0.0133571,-0.107607,-0.145793,-0.0205792,0.0088778}
,
{0.0836332,0.0695209,-0.0481447,0.0448111,-0.06214,0.0660144}
,
{0.12628,0.00311433,0.0761928,-0.0249127,-0.000561124,0.00120777}
,
{-0.225703,-0.10169,-0.0251517,-0.0406639,0.0537931,-0.124885}
,
{0.262725,0.553279,-0.326739,0.0734333,0.214481,-1.13155}
,
{0.0285723,0.0502878,0.00750871,0.0276965,-0.0291495,0.122087}
,
{-0.0771303,0.269011,-0.143106,0.0497598,0.00596758,0.0369954}
,
{0.0246706,-0.0937135,-0.00245225,0.0409734,-0.153284,-0.090107}
,
{0.0589219,-0.143296,0.131739,-0.0442541,0.140336,0.0972247}
,
{0.473877,-0.367462,-0.546991,0.129912,-1.27378,0.529115}
,
{-0.0198178,0.00265466,-0.00137853,-0.0129387,0.00612788,-0.0199282}
,
{-0.0364228,-0.120644,-0.0789085,-0.0149745,-0.0823263,-0.0444906}
,
{0.00915635,0.100974,0.0601308,-0.131875,-0.0732877,0.175503}
,
{0.0174386,0.00325882,-0.180749,-0.0901995,0.0685835,-0.256695}
,
{-0.243121,-1.00639,0.800589,-0.37836,-0.0928577,0.0256135}
,
{-0.0221792,-0.0142313,-0.138046,-0.0595688,-0.015632,-0.0961599}
,
{-0.123679,0.0064533,0.139156,-0.126513,0.046152,-0.0684358}
,
{0.0562501,0.0946315,-0.0381252,0.175893,0.0892037,0.0720789}
,
{0.0747656,-0.0751581,0.057127,0.165027,-0.0934249,0.143002}
,
{-0.588103,-0.866634,-0.560096,0.516974,-0.727118,0.745801}
,
{0.00514222,0.0264438,0.131222,-0.0155211,0.0544656,0.275025}
,
{0.033139,0.149853,-0.0934737,0.0734509,-0.0637721,-0.0464853}
,
{-0.139083,0.114575,-0.12264,0.255101,-0.00832443,-0.359487}
,
{0.0592123,0.150621,-0.280109,-0.0468741,-0.0793429,-0.343301}
,
{2.54445,-0.429763,-1.79647,0.0970859,0.639353,1.81403}
,
{-0.223557,-0.375284,0.190267,-0.47033,0.378159,-0.000736912}
 };
  static const float bias2[1] = { 0.0898107 };
  static const float weights2[][1] = { {0.12252}
,
{-0.182783}
,
{-0.11098}
,
{0.0678228}
,
{0.136228}
,
{0.0451985}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_11_4_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_11_4_57(v, index);
}
static int assign_gen_lepton_prior_11_4_57() {
  global_gen_lepton_prior.at(11,4,57) = &specialized_gen_lepton_prior_11_4_57;
  return 0;
}
static int initialize_gen_lepton_prior_11_4_57 = assign_gen_lepton_prior_11_4_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_12(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.323843,0.0149082,0.0802398,0.144685,0.0865762,-0.0164392 };
  static const float weights1[][6] = { {0.0528869,-0.14529,-0.150477,0.176083,0.0107036,0.111818}
,
{0.0377092,-0.143904,0.0721891,0.0976697,0.201506,-0.124238}
,
{-0.365626,-0.0276361,0.368383,-0.129029,0.0719147,0.277608}
,
{-0.685514,0.0411342,0.0533312,0.0884044,-0.0177698,-0.0158768}
,
{-0.415423,0.00614514,0.160186,0.290314,-0.0279292,0.0293998}
,
{-0.270265,-0.0191581,0.132244,0.105412,0.187647,-0.188525}
,
{-0.0264995,0.0502629,-0.144876,0.259054,0.120179,0.0295086}
,
{0.028651,0.0571882,0.0864268,-0.38083,-0.137267,0.171014}
,
{0.280076,-0.292288,0.171589,0.10744,-0.0146518,0.0684008}
,
{-0.126366,0.222561,0.0396059,-0.0380271,0.208754,0.21673}
,
{0.127996,0.169463,-0.200615,-0.127585,0.230633,0.0867867}
,
{0.0761589,-0.0816288,-0.0146633,-0.0602464,-0.047883,0.0753193}
,
{-0.14602,-0.0730335,-0.0249944,-0.0423659,-0.0595351,0.128663}
,
{-0.0696271,-0.099242,-0.0699187,0.0672184,-0.0549506,0.17244}
,
{0.245055,-0.000474661,0.107313,-0.0353653,-0.204739,0.100593}
,
{0.115878,-0.0303012,-0.0624127,0.0589693,-0.132816,-0.191133}
,
{-0.128981,0.167125,-0.0700487,-0.132705,0.0985326,-0.22988}
,
{0.0799139,0.165387,0.142401,0.150702,0.122867,0.0821257}
,
{0.286832,-0.104688,0.228747,0.461018,-0.0262997,-0.0950111}
,
{0.0687888,-0.0639993,0.0306476,0.0106244,0.182116,-0.000355945}
,
{0.0125047,0.163241,0.0591206,-0.0147079,-0.0641516,0.0800796}
,
{-0.156454,0.142259,-0.126226,0.167389,-0.0533169,0.155711}
,
{-0.00740041,-0.123093,-0.0880655,-0.135577,0.105755,0.0169832}
,
{-0.0521628,0.0515406,0.0293206,-0.0508104,-0.00594444,-0.0886807}
,
{0.105734,-0.0182131,0.108181,0.0507003,-0.00247274,0.028077}
,
{-0.0107803,-0.0261421,0.102562,-0.0047309,0.0497522,-0.050032}
,
{-0.0449394,-0.0790759,0.0625624,0.0631912,-0.0849084,0.0516806}
,
{-0.0119382,0.0934182,2.44061e-05,-0.0878069,0.0433648,0.0676323}
,
{0.00274716,-0.149811,0.0510149,0.063854,0.0557387,-0.173071}
,
{0.0755285,-0.205867,-0.0716173,-0.0192546,-0.0256166,0.237719}
,
{0.0985804,0.241217,0.0446089,0.0524138,0.0336686,-0.150208}
,
{0.120025,-0.0579227,-0.109545,-0.105882,0.0236917,0.115478}
,
{0.0701736,0.285935,0.0914643,-0.195594,-0.350515,-0.0395172}
,
{-0.0847168,0.0399843,-0.0145451,0.0242336,-0.00991577,-0.013428}
,
{0.036681,-0.186539,-0.177963,0.0814675,0.0800314,-0.0279286}
,
{-0.0200796,0.166447,-0.0927269,0.0942708,-0.104997,0.106128}
,
{0.159847,0.274781,0.192941,0.0615415,0.121871,-0.107601}
,
{-0.00888543,0.0239183,0.0437749,-0.0913728,-0.0251152,-0.0158557}
,
{0.221467,-0.0916013,0.277054,-0.468295,-0.204553,0.070668}
,
{-0.527394,-0.348928,-0.207007,-0.00202027,0.0238216,0.137856}
,
{-0.21747,0.186164,-0.0598445,-0.150175,-0.14057,-0.404403}
,
{0.115641,0.240659,0.0220494,-0.241617,-0.566686,0.102151}
,
{0.261455,0.138505,0.141125,0.0848024,-0.0175122,0.0965247}
,
{0.0306303,0.325523,0.0270243,-0.00246279,-0.384607,0.234146}
,
{-0.285028,-0.172284,-0.41101,0.138054,0.0289517,-0.0765869}
,
{0.162526,-0.0417565,0.145131,-0.134502,-0.0118864,0.0189051}
,
{0.754597,0.0528593,0.039455,-0.189518,-0.569399,0.457518}
,
{-0.145967,0.0392258,-0.109297,-0.114263,-0.167996,-0.0427806}
,
{0.57181,0.201534,-0.0351527,0.154962,-0.212359,0.336814}
,
{-0.132699,0.39184,-0.130469,-0.150205,-0.138775,-0.609001}
,
{0.252578,0.0844162,0.177181,-0.121753,-0.217396,0.220137}
,
{-0.194535,-0.0504677,-0.07468,-0.0170044,-0.0972759,-0.0771425}
,
{-0.0311013,0.112243,-0.0358596,0.0932498,-0.133235,0.126823}
,
{0.273188,0.0720577,0.222391,-0.159258,-0.288757,0.234348}
,
{0.0620957,-0.0340807,-0.0967286,0.0534655,-0.0894033,0.098187}
,
{0.0287769,0.064434,0.0993971,-0.171788,0.0360096,0.0792098}
,
{-0.0118195,-0.126329,0.00449506,-0.102356,0.123397,0.0666185}
,
{0.0581321,0.0233905,-0.110376,0.158374,0.15891,0.127393}
,
{-0.0151476,0.0181951,-0.0110824,0.0688948,-0.0728884,0.000274024}
,
{0.0392223,-0.126728,0.122749,0.122143,0.137841,-0.0597662}
,
{-0.0775604,0.135682,0.126259,0.000434893,0.113665,0.0423359}
,
{-0.0307893,-0.0824478,-0.21865,0.108659,-0.012526,0.095351}
,
{-0.102754,0.0861595,-0.166965,-0.128805,0.0578026,-0.0832289}
,
{0.109392,-0.0415748,0.0621883,-0.0811111,0.0513752,-0.171173}
,
{-0.0258857,0.164331,-0.132217,0.112915,-0.123561,-0.0528033}
,
{-0.0480113,0.0210865,-0.129095,0.0805587,0.160719,-0.0224693}
,
{0.00855228,-0.0954011,-0.118045,-0.0791979,-0.0853742,0.107413}
,
{-0.0897795,-0.104647,0.0113754,-0.0464151,0.122323,-0.0283005}
,
{-0.0986365,-0.0697994,-0.0386898,0.0964945,0.144669,0.0346176}
,
{0.125259,0.133969,-0.134654,-0.057367,-0.0409,0.18412}
,
{-0.10104,-0.105399,0.180077,-0.229116,0.0156312,-0.0322882}
,
{-0.0335772,-0.19287,0.0437908,0.0801045,-0.0754514,-0.106705}
,
{-0.0673592,0.0442256,0.0345549,0.171621,0.00755646,0.10704}
,
{-0.0109354,-0.228427,0.0408771,0.126512,-0.208971,0.0237866}
,
{-0.0674786,0.246349,-0.199377,-0.127848,0.248569,0.108341}
,
{-0.101671,0.0172519,-0.13113,0.078689,0.0582249,0.147063}
,
{0.0221009,0.0899926,0.0224095,-0.0176244,-0.0173661,0.0725236}
,
{-0.202334,-0.145505,-0.012603,-0.0929482,-0.0471353,0.203253}
,
{-0.160218,-0.0483235,-0.0635165,-0.0528214,0.020162,0.115823}
 };
  static const float bias2[1] = { 0.0138182 };
  static const float weights2[][1] = { {0.525881}
,
{0.0678457}
,
{-0.129751}
,
{-0.12813}
,
{0.131409}
,
{0.067009}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_12(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_12(v, index);
}
static int assign_gen_lepton_prior_1_1_12() {
  global_gen_lepton_prior.at(1,1,12) = &specialized_gen_lepton_prior_1_1_12;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_12 = assign_gen_lepton_prior_1_1_12();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_13(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0,-0.00500281,-0.00510969,0.00511273,0.0,-0.00504807 };
  static const float weights1[][6] = { {-0.184993,-0.0461279,0.158924,-0.0201751,0.123678,0.0241844}
,
{0.0245424,-0.0454085,-0.110617,-0.135507,0.0517654,0.125258}
,
{0.24198,-0.0431655,0.028588,0.145216,0.0367373,0.21916}
,
{-0.0968126,-0.0739379,-0.21042,0.00406714,-0.116802,-0.127376}
,
{0.208139,0.178207,0.184787,-0.114551,-0.0887055,0.0987848}
,
{0.193393,0.0520771,0.139686,-0.0975443,-0.0616996,0.12702}
,
{0.101613,-0.0517884,-0.200891,-0.0831369,0.0369051,-0.00522543}
,
{0.183446,0.0143393,-0.0321472,-0.145619,-0.000206026,0.0728413}
,
{-0.0356625,-0.00627149,0.0392287,-0.0252314,0.116052,-0.0343851}
,
{0.0997622,0.135202,-0.172304,0.102813,0.0810758,0.0623154}
,
{-0.0477625,0.182515,-0.0447097,0.143581,0.219778,-0.0189622}
,
{0.0283487,0.00145881,-0.0494697,-0.0280317,0.0696523,-0.0532363}
,
{0.126821,-0.0100047,0.134753,-0.0840081,0.0866528,0.135481}
,
{0.03169,0.0191164,-0.125218,-0.0716091,-0.0388137,0.00431581}
,
{0.179784,0.023167,0.0186846,-0.133449,-0.155298,-0.0770989}
,
{-0.0803577,-0.188175,0.192439,-0.0918086,-0.000286599,0.0334673}
,
{0.145306,-0.0402251,-0.00162377,-0.0758121,0.2286,-0.019452}
,
{0.130674,0.150122,-0.185536,0.0641612,-0.217005,0.009911}
,
{0.103721,-0.139427,-0.013664,-0.0757278,-0.130817,0.0157236}
,
{-0.0957848,0.161752,-0.234178,0.176569,-0.167042,-0.168115}
,
{-0.0719118,0.0695432,0.116385,0.0658236,-0.0520838,0.0681714}
,
{0.0688188,-0.217349,-0.0244277,-3.06909e-05,-0.0711052,-0.113081}
,
{-0.00614338,-0.0778509,0.0532407,0.0600438,-0.0683901,-0.0558258}
,
{0.101638,-0.132262,-0.214183,-0.146137,0.00985149,-0.116129}
,
{0.0414436,-0.0485347,0.0513369,0.00927976,0.208777,-0.0850944}
,
{0.0633519,0.0209862,-0.0136498,0.171385,-0.00143559,0.202971}
,
{-0.1422,-0.0331269,0.124362,0.06473,-0.0152882,0.160973}
,
{-0.163853,0.0191397,-0.0659751,-0.110991,-0.103192,-0.161543}
,
{-0.0224127,-0.0871871,-0.029031,0.0369188,-0.24769,0.0540694}
,
{0.150019,-0.111999,0.113883,0.0608152,-0.0563941,0.176823}
,
{-0.0474986,-0.114721,0.112198,-0.0416205,0.0512362,0.17146}
,
{-0.194487,-0.0448624,0.0113375,-0.00638816,-0.0904184,-0.00171661}
,
{-0.0646295,0.0416577,0.0848574,0.040734,-0.133014,0.0565057}
,
{0.0529046,-0.010877,0.0794408,-0.0868834,-0.0227143,-0.0486459}
,
{0.145671,0.135235,-0.0185169,0.00314007,-0.114482,-0.0194917}
,
{0.184605,-0.0957434,0.0791483,0.12151,0.22905,0.178806}
,
{0.0256493,-0.0476584,-0.101196,-0.109028,-0.0114034,-0.0524213}
,
{0.101122,0.0825916,-0.0884633,-0.100859,-0.0258653,0.012985}
,
{-0.00597158,0.0732486,0.0658343,-0.0991618,-0.230759,-0.086703}
,
{-0.0364022,0.0786289,-0.0386444,-0.0712432,0.062943,-0.130884}
,
{-0.0811927,-0.0761248,-0.0372755,0.0287092,-0.00588471,0.150413}
,
{0.0942594,-0.139861,0.0551812,-0.0912277,-0.132356,-0.0626413}
,
{0.158945,0.119701,-0.0461043,-0.222259,0.00621504,-0.155598}
,
{-0.0895151,-0.0735202,-0.105567,0.0909669,0.00497353,0.0409656}
,
{0.242757,0.0125613,0.0157223,0.0682553,0.120198,-0.0703886}
,
{-0.0040408,0.0128066,-0.197543,-0.194589,-0.0928822,0.0757558}
,
{0.00897759,0.0200888,0.15129,-0.123637,-0.0713388,0.0759483}
,
{-0.109618,-0.0113773,0.240844,0.0319181,0.0467694,0.112672}
,
{-0.000197046,-0.227585,0.0279523,0.202348,-0.143984,-0.0203797}
,
{0.0453529,-0.154275,-0.0819047,0.061436,-0.0803189,0.15287}
,
{0.196837,0.16253,-0.0288578,0.153516,0.0165001,-0.0428326}
,
{0.126435,-0.127401,0.043866,0.0364282,-0.0650649,0.16055}
,
{-0.230137,0.0503872,-0.106394,0.0926571,-0.0394154,-0.0116669}
,
{0.0167418,-0.0462627,0.0783833,-0.1388,0.10021,-0.0417103}
,
{-0.241442,-0.0434635,0.0852503,0.202593,0.0462845,-0.14817}
,
{-0.0235704,-0.0904954,0.240604,0.0510998,-0.0898106,0.0957054}
,
{0.0853558,0.22215,-0.108012,0.117012,-0.0980015,0.120618}
,
{0.219911,-0.0983817,-0.0005175,0.0160796,0.0314429,-0.177101}
,
{-0.0454118,-0.176672,-0.178938,-0.098644,0.0567142,-0.09567}
,
{0.178037,0.0829905,-0.164309,0.00811417,0.0699389,0.0138131}
,
{-0.226972,0.017469,0.207262,0.104414,0.01981,-0.0113708}
,
{-0.0613315,0.00274702,0.105047,-0.0111993,-0.0437248,0.0222735}
,
{-0.0756204,0.0920164,0.0673381,-0.0194318,-0.0135,-0.0151947}
,
{-0.234493,0.11015,0.0449748,0.10804,0.113298,-0.0166742}
,
{0.244668,-0.0893741,-0.0555238,0.0788017,0.00395332,0.0521011}
,
{-0.0672075,-0.00658479,-0.126206,0.0544734,0.023473,0.0318189}
,
{0.0360934,0.168021,-0.0709583,-0.0211489,0.0574244,0.0226077}
,
{-0.0356926,0.136888,-0.0167734,-0.0628059,0.0841913,0.0274002}
,
{0.0302858,0.0444585,-0.00954899,-0.102145,0.0910388,-0.0923751}
,
{0.0608538,0.184704,0.00666705,-0.0714069,0.104174,0.0351597}
,
{-0.0552103,0.0534383,0.18254,-0.138743,0.14149,0.000793775}
,
{-0.0910536,-0.165461,-0.0557177,-0.0103538,-0.0139575,-0.166073}
,
{-0.0700297,-0.0870763,-0.00429048,-0.125995,-0.024532,0.0879207}
,
{-0.212592,-0.00317733,0.00883843,0.0110928,-0.207963,-0.0959771}
,
{0.127452,-0.140603,0.0150778,0.0584422,-0.027976,0.0068679}
,
{-0.0922637,0.00245382,0.193899,-0.0395728,-0.142575,-0.0342851}
,
{0.111723,-0.196988,0.109177,0.0532343,-0.0137258,-0.0782545}
,
{0.0590665,-0.0577425,-0.100496,-0.111839,-0.016767,-0.167098}
,
{-0.024251,-0.102977,0.064747,0.0357175,-0.00337413,0.0632931}
 };
  static const float bias2[1] = { -0.00511554 };
  static const float weights2[][1] = { {-0.144549}
,
{-0.000231436}
,
{0.0829012}
,
{-0.172456}
,
{-0.0411904}
,
{0.00309125}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_13(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_13(v, index);
}
static int assign_gen_lepton_prior_1_1_13() {
  global_gen_lepton_prior.at(1,1,13) = &specialized_gen_lepton_prior_1_1_13;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_13 = assign_gen_lepton_prior_1_1_13();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_0_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.051118,-0.0842909,0.169568,-0.164132,1.03312,-0.164734 };
  static const float weights1[][6] = { {0.0603588,-0.186248,-0.443809,-0.255612,1.09498,-0.310447}
,
{0.0577985,-0.257362,0.831396,-0.0900592,0.56999,0.043284}
,
{-0.385555,0.12675,-0.142271,0.366568,0.480631,-0.192145}
,
{-0.185548,0.0145793,0.972141,-0.551964,1.65784,0.25384}
,
{0.238217,-0.104286,0.115407,-0.357594,0.921855,0.00390062}
,
{0.0943064,-0.0134231,-0.0682277,-0.25517,0.853297,-0.334137}
,
{0.0887239,0.00603416,-0.107767,-0.333032,0.930587,-0.353591}
,
{0.142556,0.0714662,-0.0358324,0.147801,-0.0311608,0.136805}
,
{-0.416325,-0.0627568,0.561523,0.199694,-0.702963,-0.0711462}
,
{0.114363,-0.0219823,-0.0893433,0.00370643,-0.154482,0.0656178}
,
{-0.106152,-0.136733,0.00324605,-0.125167,-0.0285307,0.0416279}
,
{0.228777,-0.233252,0.0800968,-0.0194414,-0.0864153,0.0720997}
,
{0.164052,0.00981969,0.0220944,-0.280236,0.246786,-0.157095}
,
{0.0665719,0.0105289,0.194316,-0.0165183,-0.153245,-0.323494}
,
{0.0366947,-0.040155,-0.13862,0.061939,0.0172415,-0.0365275}
,
{-0.0239872,0.00552092,0.0816831,-0.116886,-0.843497,0.0938946}
,
{0.27294,-0.199446,0.260429,-0.111355,-0.209726,-0.135339}
,
{0.00524495,0.0667109,0.231094,0.233699,0.108145,-0.200696}
,
{-0.0626542,0.0075056,-0.0770534,-0.0743082,-0.126702,0.0400922}
,
{0.0200282,-0.0309719,0.0756222,0.0846295,-0.337015,-0.221496}
,
{0.0221466,0.0849645,-0.00823225,-0.103869,-0.194571,-0.0750384}
,
{0.0902747,-0.17623,0.0299314,-0.0281453,-0.128792,-0.0763646}
,
{0.138485,0.136282,-0.00609951,0.0671443,-0.0111,-0.191031}
,
{-0.0573322,-0.00281203,0.0411226,-0.0255805,-0.168916,0.0265022}
,
{-0.255039,-0.186924,0.0319966,0.0428861,-0.0140947,-0.228383}
,
{-0.167802,0.0314509,0.072364,-0.202583,0.0816785,0.0392072}
,
{-0.311739,0.0143977,-0.0869531,0.180878,-0.0645687,0.027138}
,
{-0.0379728,-0.185343,-0.256131,0.0180695,-0.0262941,-0.0695826}
,
{0.121407,0.0458548,0.22082,0.246882,-0.345869,-0.237642}
,
{0.229819,0.0487256,0.105507,0.187641,0.106368,-0.0471844}
,
{-0.0843025,0.170983,0.157107,0.1825,0.127683,0.01194}
,
{-0.0960466,-0.16293,-0.0126133,-0.139021,-0.127405,-0.149946}
,
{-0.00257528,0.0985695,0.179137,-0.196028,0.115975,-0.242628}
,
{-0.0580412,-0.0616944,-0.109176,0.0711795,0.142166,0.0774811}
,
{0.0383982,0.0490975,-0.142408,-0.0778492,0.110547,-0.0878855}
,
{-0.125693,0.00225871,0.105105,0.18215,0.0769876,0.0940815}
,
{0.201019,-0.0291081,0.0913709,-0.0013993,0.136387,0.0282191}
,
{0.0696775,0.00992573,0.0297033,-0.0443262,-0.118297,0.0408719}
,
{0.052121,0.0217112,-0.0125389,0.1191,-0.000469159,0.0649671}
,
{0.0973844,0.173496,0.0706634,-0.108632,0.131216,-0.0793075}
,
{0.0895691,0.101922,-0.0943309,0.00469311,-0.138144,0.116561}
,
{-0.0848325,-0.0531417,0.168198,-0.0335396,0.095054,-0.0434814}
,
{0.0433,0.0129497,-0.0465193,0.0772246,-0.0353099,0.127601}
,
{0.0599999,-0.0528612,0.00734957,-0.0655559,0.147979,-0.132137}
,
{-0.132699,0.0247059,0.0615113,-0.0345183,-0.036591,-0.0448175}
,
{-0.0287255,-0.0357214,0.0952226,0.0702122,0.0519961,-0.100705}
,
{0.0592802,0.0668511,0.0703836,0.082435,-0.0558468,0.111947}
,
{0.100856,-0.0620812,-0.175156,0.031605,-0.0110241,0.147705}
,
{0.0110349,-0.00025033,0.0159818,0.0172267,-0.0634048,-0.0101511}
,
{0.0470126,0.13809,0.0578126,-0.124427,-0.0119484,0.162707}
,
{-0.0417169,-0.0367497,0.0450925,0.134956,-0.0609017,-0.0626737}
,
{-0.00868425,0.0590702,0.116508,-0.044768,-0.0150398,0.0688253}
,
{0.0584216,-0.0369249,-0.0663659,0.0978616,0.10835,0.00342067}
,
{0.0210191,0.0422347,-0.0104045,0.0454011,-0.0886974,0.0829139}
,
{-0.149962,-0.0994926,-0.0689785,-0.0525327,0.0329502,-0.185738}
,
{0.0581606,-0.0303417,0.0626376,0.135313,0.0494039,-0.00469717}
,
{-0.117273,-0.112357,0.0824713,-0.15604,-0.111844,0.0436191}
,
{-0.374902,0.119933,-0.156534,0.325598,-0.00549551,-0.0791111}
,
{-0.032047,-0.0555709,0.0314584,0.152824,0.02422,-0.0283623}
,
{0.0834573,-0.0528277,-0.13984,0.0976857,0.0604197,0.0229783}
,
{-0.0960777,-0.0188313,0.0869842,0.00947596,-0.0163256,-0.0318983}
,
{0.0286653,0.0183652,-0.112854,-0.116557,-0.0307932,-0.185866}
,
{-0.0499212,0.330634,-0.0791529,-2.75573e-05,0.017686,0.132914}
,
{-0.0912821,-0.0163636,0.0942876,-0.145459,0.00834855,-0.0110173}
,
{0.0731426,0.0791943,-0.108161,0.045306,0.064313,-0.0643926}
,
{-0.145804,-0.220311,0.122557,-0.136921,-0.106177,0.0493453}
,
{0.0268643,0.159716,-0.0111089,-0.0433267,-0.00203173,0.0333619}
,
{0.235231,-0.0681625,-0.403102,-0.00256887,0.0056481,0.0692156}
,
{0.304206,0.0387999,0.0486505,0.1429,0.0320866,-0.0390106}
,
{-0.0390775,-0.0941533,-0.021955,0.18691,-0.0308127,0.109219}
,
{0.153794,0.136314,0.0632182,0.0312427,0.0549707,0.108241}
,
{0.0699559,0.115161,-0.100027,-0.0389505,0.00935817,-0.0769607}
,
{0.408116,-0.151891,-0.894204,-0.437944,-0.192398,0.156424}
,
{-0.0633544,-0.114789,-0.0257285,-0.0140591,-0.00822615,-0.0766219}
,
{-0.0239435,-0.0132945,-0.0941722,0.0915116,0.0111835,-0.0113289}
,
{0.177213,-0.0914531,-0.0291881,0.0414489,-0.102249,0.0309855}
,
{0.0198063,0.0219765,-0.187027,0.0613741,0.0296907,0.0120248}
,
{0.364611,0.114721,-0.260912,-0.645355,0.817895,-0.320303}
,
{-0.124591,-0.401204,0.568169,-0.386605,-0.0933087,0.235257}
 };
  static const float bias2[1] = { 0.429613 };
  static const float weights2[][1] = { {-0.00850234}
,
{0.0147265}
,
{0.0105833}
,
{0.00987219}
,
{-0.0427431}
,
{-0.0128448}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_57(v, index);
}
static int assign_gen_lepton_prior_12_0_57() {
  global_gen_lepton_prior.at(12,0,57) = &specialized_gen_lepton_prior_12_0_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_57 = assign_gen_lepton_prior_12_0_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_0_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.483335,0.187344,0.245093,-0.154936,0.242345,0.456354 };
  static const float weights1[][6] = { {-0.643788,-0.130789,-0.0967606,-0.0226854,0.21845,0.606612}
,
{-0.144524,0.0723788,-0.375924,0.301661,-0.0893185,0.0331074}
,
{0.0360146,0.245872,-0.0354795,-0.27531,0.26476,0.352465}
,
{1.30169,0.466582,0.774372,-0.406649,0.392893,-0.809339}
,
{0.517966,0.178201,0.178701,-0.12747,0.232487,0.430057}
,
{0.474012,0.255877,0.157649,-0.0821558,0.236858,0.599706}
,
{0.337806,-0.0156739,0.269554,-0.139839,0.0280882,0.594486}
,
{-0.1366,-0.0204128,0.20482,-0.00670484,0.0900447,-0.042755}
,
{0.207471,0.145574,-0.045791,-0.084319,-0.758514,-0.530455}
,
{-0.00285413,-0.0780784,0.114227,0.0744662,-0.0183611,-0.152503}
,
{-0.185813,0.142712,-0.209697,0.12482,-0.0217777,0.154024}
,
{0.158357,-0.023854,-0.00255354,0.121996,-0.0751727,-0.119851}
,
{0.225981,-0.0144355,0.149144,-0.160531,0.0160502,0.187304}
,
{0.184534,0.070081,0.42894,-0.0252043,-0.1575,0.0928489}
,
{-0.0929456,-0.016224,-0.0871034,-0.00671286,0.019223,0.0399983}
,
{0.0962426,-0.153153,0.193702,-0.2743,-0.525786,-0.0723379}
,
{0.198445,0.153057,0.17172,-0.220987,-0.26098,0.0526203}
,
{0.542001,0.252538,-0.066874,-0.420211,-0.204213,-0.421658}
,
{-0.328416,0.0652601,-0.170504,0.0546091,-0.0556095,-0.00562643}
,
{0.0149407,0.134995,0.0432689,0.0558859,0.0186836,0.0988535}
,
{-0.0651466,-0.100089,-0.0781445,-0.0359105,-0.145364,-0.0701679}
,
{-0.112809,0.0827598,0.0148756,-0.118846,-0.273093,-0.0472143}
,
{0.0203939,-0.0662276,0.0808401,-0.0559257,-0.171967,0.16143}
,
{0.146603,-0.0336226,-0.137865,0.198367,-0.228611,-0.229238}
,
{0.158659,-0.108858,-0.252871,-0.386772,0.22716,0.186417}
,
{-0.0485309,0.124194,-0.239775,-0.123603,0.280229,0.126045}
,
{-0.377811,-0.187861,0.0733142,0.0102258,0.00936425,-0.052587}
,
{-0.216624,-0.302297,0.0244091,0.00197733,-0.248983,0.107502}
,
{0.098156,-0.124363,0.337985,-0.590772,-0.0458075,-0.416549}
,
{-0.112049,0.019768,0.109161,-0.0311963,0.00519169,0.0933664}
,
{-0.157792,-0.0537163,-0.131007,-0.0247555,0.0419549,0.109778}
,
{-0.15122,0.106122,0.197257,0.00424269,0.102764,0.134728}
,
{-0.0140504,0.0440451,-0.0312886,-0.0299955,-0.0664261,0.065437}
,
{0.0225666,-0.199093,-0.131194,-0.118739,-0.0969515,-0.0464742}
,
{0.133217,-0.193967,-0.0167623,-0.0249709,-0.0253941,-0.0558584}
,
{-0.131564,0.166018,-0.0195946,0.0254194,-0.0276545,0.12715}
,
{0.132399,-0.0956671,-0.111692,-0.239813,-0.0881937,-0.0676203}
,
{0.0412277,-0.0567637,-0.00655879,-0.00995542,0.0272091,-0.0842633}
,
{-0.130141,-0.0990604,-0.0165599,-0.110907,-0.0794,-0.0570431}
,
{0.0397686,-0.0450718,0.0567542,0.157886,-0.00206954,0.0210546}
,
{0.0175664,-0.0728599,-0.0178114,-0.0977134,0.0142303,0.0757749}
,
{0.0549564,0.0635759,-0.0457646,-0.0327092,0.131207,0.29136}
,
{0.0123232,0.0736494,-0.130468,-0.0729686,-0.14479,0.148138}
,
{0.0705137,0.0103108,-0.0832622,0.0327338,-0.104845,0.107283}
,
{-0.013056,0.170317,0.0249758,0.140479,-0.0339374,-0.0384636}
,
{-0.0538599,-0.0369312,-0.0551729,-0.0817021,-0.0443488,-0.0058214}
,
{0.0489624,-0.00297584,0.0398504,0.211687,0.128949,-0.00617612}
,
{-0.0172309,-0.0339631,0.0734108,0.0622488,0.0222816,-0.114393}
,
{0.00952894,0.151978,-0.0301384,6.97753e-05,0.1921,0.132118}
,
{-0.197858,0.0701015,0.126873,-0.0673903,-0.0154014,0.0582242}
,
{0.179043,-0.0542424,-0.0632279,-0.000577134,0.148225,-0.100136}
,
{-0.0147609,0.0106103,0.13544,0.110853,0.131518,-0.103877}
,
{0.0315901,-0.0740721,0.0594355,0.0149332,0.0694905,-0.0142883}
,
{-0.0114162,-0.0536346,0.129747,0.128435,-0.0234283,-0.123963}
,
{-0.129877,0.0891642,0.0537276,0.107962,-0.132261,-0.0709121}
,
{0.086951,-0.223123,0.142291,0.130937,0.173257,-0.0369656}
,
{-0.220657,-0.00048626,-0.0566775,-0.120671,-0.118245,0.0354071}
,
{-0.0629329,0.102711,-0.0212013,-0.0631821,0.0216333,-0.0368125}
,
{0.596249,0.296085,-0.538784,-0.566784,-0.034902,0.141123}
,
{0.0885428,-0.00861344,0.10773,-0.064137,0.0113749,0.14456}
,
{0.176811,0.203994,-0.0368958,-0.00229662,0.130567,-0.14955}
,
{0.0743429,-0.0806753,0.0666053,0.00194585,0.0229049,0.0949061}
,
{-0.000862474,0.0152048,0.106735,0.152374,-0.0317322,0.0530901}
,
{-0.097423,0.325698,0.143989,-0.228202,0.00295924,0.131741}
,
{-0.0307567,-0.203522,0.0314297,-0.125321,0.00412851,-0.0364186}
,
{-0.00561376,-0.0770232,0.073335,-0.036393,0.0254982,0.0510643}
,
{-0.121452,0.0231866,0.068386,-0.108493,-0.05082,0.00639999}
,
{-0.0774589,-0.0227397,0.0728818,-0.120528,-0.00276883,0.0405838}
,
{0.141571,-0.10144,-0.27926,0.00338752,-0.108335,0.071578}
,
{0.140142,0.0217753,-0.128851,-0.0332291,0.0177797,-0.190472}
,
{0.153872,-0.00572616,0.150664,-0.0135178,0.0256731,0.203607}
,
{-0.114319,0.153881,-0.014664,0.194676,0.0588644,-0.0403563}
,
{0.079323,-0.0266878,0.0102238,0.0519277,0.0094092,0.00819286}
,
{0.636406,-0.0557825,0.0900466,-0.0336954,0.20517,-0.200097}
,
{0.575921,0.105548,-0.226955,-0.36387,0.176969,0.234785}
,
{0.506546,0.23973,0.0748983,-0.450421,0.120017,0.094441}
,
{0.614504,0.0895449,0.0345972,-0.326523,-0.197778,0.271137}
,
{0.00883895,-0.0218785,0.152533,0.0445269,0.126013,-0.130628}
,
{0.322501,0.436357,-0.440513,-0.806138,0.0756908,0.198083}
 };
  static const float bias2[1] = { 0.389493 };
  static const float weights2[][1] = { {0.0159406}
,
{0.00987928}
,
{0.0127319}
,
{-0.00803411}
,
{-0.0260801}
,
{-0.00870088}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_58(v, index);
}
static int assign_gen_lepton_prior_12_0_58() {
  global_gen_lepton_prior.at(12,0,58) = &specialized_gen_lepton_prior_12_0_58;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_58 = assign_gen_lepton_prior_12_0_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_0_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0772053,0.136045,0.243557,0.322664,-0.466816,-0.262623 };
  static const float weights1[][6] = { {-0.0110871,0.00769009,0.257962,-0.322479,-0.209255,-0.3997}
,
{-0.199408,-0.0187279,0.581968,0.389951,-0.382827,-0.597826}
,
{0.0580755,0.100324,0.074604,-0.144133,0.17016,-0.219473}
,
{0.900848,0.905311,0.748193,0.591433,-0.329076,-1.27675}
,
{0.0964174,0.189886,0.212774,0.218987,-0.49098,-0.5024}
,
{-0.0847063,0.109144,0.271553,0.356905,-0.425088,-0.261153}
,
{-0.22306,-0.104102,0.0704826,0.355295,-0.298424,-0.175032}
,
{0.0428164,-0.0854781,-0.209983,0.224511,-0.0474231,-0.0816357}
,
{0.423947,0.102635,0.135018,-0.20326,-0.312914,-0.21971}
,
{-0.0067594,-0.116116,0.222792,0.0295044,0.00827639,-0.118769}
,
{0.245934,0.0888199,-0.0511319,-0.0131775,-0.0959733,-0.0372124}
,
{-0.14634,0.0869014,-0.102573,-0.0480964,-0.158268,0.0768059}
,
{-0.191648,-0.142665,-0.0561924,0.307994,-0.288198,-0.198597}
,
{3.78967e-06,0.0835845,0.212768,0.191981,-0.0138684,-0.188877}
,
{-0.045886,-0.0796738,0.0354409,-0.138872,0.193928,-0.00752506}
,
{0.33138,0.325855,0.559251,0.09594,0.361165,0.22061}
,
{0.0337056,0.0790723,0.168317,0.0925298,0.111193,0.286034}
,
{0.318694,0.232136,0.282012,-0.00844442,0.0343834,-0.0870246}
,
{0.0545914,-0.305046,-0.137423,-0.25022,-0.191564,-0.000843774}
,
{0.0764058,-0.104206,0.0644987,0.0924144,-0.0566045,-0.0446154}
,
{0.18562,0.109295,0.00389157,-0.105833,0.120214,0.276713}
,
{-0.00676484,-0.0440061,0.195476,-0.15398,-0.0780498,0.0999731}
,
{-0.163881,0.189473,0.0183535,0.0763183,0.0291089,0.225506}
,
{0.0543049,-0.0125808,-0.0439852,0.046163,-0.0647941,-0.0396779}
,
{-0.0436354,-0.018532,-0.0367796,-0.0860886,-0.367508,-0.328479}
,
{-0.195264,-0.100181,0.0577196,-0.148334,0.122688,0.0749068}
,
{0.13403,-0.0668236,0.0358595,-0.202865,-0.148478,0.213699}
,
{0.0853626,0.202071,-0.13547,-0.270105,-0.395445,-0.00535881}
,
{-0.15824,0.114611,0.640393,0.349788,-0.591677,-0.889803}
,
{0.0410828,0.0100006,-0.0184523,0.194036,-0.0665208,0.00224098}
,
{-0.202456,0.202494,0.00283262,0.0665846,0.0237798,-0.101099}
,
{0.00767841,-0.249092,0.212619,-0.00203983,-0.150695,0.055715}
,
{-0.0341881,0.0568921,0.0426511,-0.00803066,0.049778,-0.0109416}
,
{0.169266,0.123402,0.0089675,-0.160904,-0.180301,0.0478732}
,
{0.0760887,0.028739,-0.0368655,-0.00501224,-0.0432378,0.0638908}
,
{0.0218069,-0.0159384,0.0589645,-0.0575084,0.0240444,0.00383989}
,
{0.138076,-0.257514,-0.0166843,-0.100716,-0.108874,-0.0891291}
,
{0.0152775,0.070512,-0.0764872,-0.0369142,0.0807095,-0.0577555}
,
{-0.115687,0.00284751,-0.0337847,0.137031,-0.116772,-0.0955462}
,
{-0.148803,0.18605,0.0713073,0.0973523,0.101546,-0.300487}
,
{-0.0594766,-0.0859922,-0.0761702,-0.0872974,0.0484541,0.0366146}
,
{-0.170499,-0.0350053,0.253517,0.228005,0.19546,-0.0406362}
,
{-0.00807776,0.0466211,-0.0373747,-0.0381595,0.0205603,-0.0453264}
,
{0.0984166,-0.10527,0.0247347,-0.0160796,0.0791894,0.0530607}
,
{0.115592,-0.0465299,-0.111107,-0.0726807,-0.0448005,0.00780356}
,
{0.059862,-0.0818149,0.108718,0.110189,-0.155163,0.256778}
,
{-0.238739,-0.0355114,0.236271,0.276871,-0.0651823,0.0014448}
,
{-0.131062,0.0210442,0.019074,0.0363725,-0.0238592,-0.0924664}
,
{0.120728,0.0565696,0.0374259,-0.0575111,0.0832393,0.102934}
,
{-0.0356344,0.0449714,0.0966482,-0.14049,-0.0593147,-0.0292019}
,
{0.0298832,-0.0124084,0.00329132,0.0705293,0.117065,0.104005}
,
{-0.0769666,0.122765,-0.0293713,-0.199863,0.145768,-0.304361}
,
{-0.0110833,-0.010255,0.0259897,0.00408356,-0.00137361,0.0104962}
,
{-0.0555063,0.0434889,-0.0583843,0.143214,-0.161814,-0.0834632}
,
{-0.0102454,0.0331277,0.112584,-0.0842089,0.000565238,-0.0491386}
,
{0.0422583,-0.0447839,-0.177483,0.105821,0.0279266,-0.090039}
,
{-0.00298354,-0.106603,0.0657656,0.0252278,0.00184424,-0.053059}
,
{-0.127198,0.0728571,-0.259176,0.593605,0.280586,0.690301}
,
{0.170968,-0.318238,-0.778369,-0.607172,0.601461,-0.521666}
,
{0.188198,0.0251948,-0.0726943,0.356219,0.317627,0.111202}
,
{0.130431,-0.0328982,0.0231809,0.292105,0.179515,-0.0872707}
,
{-0.21884,0.0893218,-0.275204,0.115357,0.330443,-0.092605}
,
{0.480046,-0.204195,0.38971,-0.220237,-0.271705,-0.858384}
,
{0.392168,0.513697,-1.22866,1.13882,0.179749,0.0421041}
,
{0.031554,0.126972,-0.0378636,-0.124529,0.133638,-0.0994816}
,
{-0.0503596,-0.148627,0.0885132,0.144659,0.0996718,-0.0626905}
,
{-0.0485862,0.0120478,0.0707696,0.147447,0.00622447,0.02485}
,
{0.0919676,-0.374836,0.421104,-0.040706,-1.01043,-0.574006}
,
{0.137423,0.0547663,-0.00700662,-0.372312,0.573624,0.126597}
,
{-0.0421364,-0.026891,-0.00712604,-0.0749077,0.0555586,-0.0442252}
,
{0.0722936,-0.0310109,-0.0281785,-0.25332,-0.105279,-0.0209665}
,
{0.0871038,0.028625,0.0184848,-0.0910483,-0.0798416,-0.0788126}
,
{-0.290305,0.154681,0.545265,0.145238,2.6476,-1.25239}
,
{0.413976,-0.193063,0.564709,-0.110826,1.40337,0.513577}
,
{-0.0665359,0.0823138,-0.47314,-0.0939596,-0.512864,-0.367034}
,
{-0.116029,0.0519537,-0.0299913,-0.0303284,-0.364947,-0.598298}
,
{-0.0525651,0.16047,-0.178176,-0.0215557,-0.399687,-0.380455}
,
{-0.115473,1.81835,1.53341,1.91546,-0.0981349,-0.0372727}
,
{0.597136,0.578665,0.9119,-1.87677,0.0704987,1.97176}
 };
  static const float bias2[1] = { 0.0449091 };
  static const float weights2[][1] = { {0.0294129}
,
{0.0423396}
,
{0.0257812}
,
{0.0282951}
,
{-0.0442527}
,
{-0.0308024}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_59(v, index);
}
static int assign_gen_lepton_prior_12_0_59() {
  global_gen_lepton_prior.at(12,0,59) = &specialized_gen_lepton_prior_12_0_59;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_59 = assign_gen_lepton_prior_12_0_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_0_60(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.184938,-0.119293,-0.0482736,-4.08562e-05,0.34485,-0.222389 };
  static const float weights1[][6] = { {0.0999133,-0.068744,0.0562684,-0.0845356,0.0577528,0.0478961}
,
{0.312476,-0.537177,-0.174644,0.498915,-0.134339,0.586953}
,
{0.148219,0.0776281,0.405239,0.00704909,0.308847,0.595592}
,
{-0.497409,-0.765237,0.725732,-0.406555,0.506856,0.00335215}
,
{0.0543363,-0.0905616,-0.0602825,-0.0771142,0.292465,-0.110485}
,
{0.0940165,-0.0159571,0.116786,0.191236,0.223629,-0.230336}
,
{0.113836,0.0647936,-0.280887,0.0436585,0.428332,-0.363971}
,
{0.0403254,0.24444,-0.0841387,-0.0525993,0.130478,0.0195961}
,
{0.0801726,-0.122504,0.314534,0.021545,-0.128411,-0.167731}
,
{-0.0528827,-0.0953736,0.011422,0.0933932,0.00957795,0.0246287}
,
{0.00019679,0.120464,0.214916,-0.0791816,-0.155466,-0.0105352}
,
{-0.135727,0.0172308,0.0675044,0.0259592,-0.0437408,-0.122136}
,
{0.0735259,-0.060346,-0.0397599,0.160813,0.144389,-0.00126909}
,
{-0.352333,0.314772,0.162165,0.0949769,0.0472591,-0.0693628}
,
{0.0915891,0.164279,0.066731,-0.237833,0.178529,-0.196734}
,
{-0.169147,-0.0756194,0.052304,-0.0935405,-0.0758969,-0.150135}
,
{-0.447701,-0.0503077,0.0395848,0.0371418,-0.215361,-0.102253}
,
{-0.0805666,0.011421,0.190897,-0.132656,0.00355904,-0.168392}
,
{0.243048,-0.0704999,-0.0234225,-0.288462,-0.160001,0.0442384}
,
{0.0442078,0.114561,0.0631011,0.0759538,0.0958095,0.17193}
,
{-0.194352,-0.0594924,-0.0950312,0.014404,-0.123539,-0.217485}
,
{-0.142126,0.0361116,-0.00451038,-0.03779,0.0517266,-0.0673965}
,
{0.093253,0.101694,0.0283235,0.0186551,0.224296,0.0102089}
,
{-0.260006,0.0862753,-0.0391842,0.0757993,0.116711,0.0624465}
,
{-0.0207412,-0.0379681,0.182932,0.0972615,-0.157211,0.0539372}
,
{0.168201,-0.236118,-0.0532325,-0.279694,-0.0383387,-0.100899}
,
{0.14249,0.0154086,-0.0900917,-0.000356359,-0.0290499,-0.000205828}
,
{0.0343474,0.0142238,-0.197039,-0.0829059,-0.139252,-0.0433936}
,
{-0.152578,0.0621726,-0.104322,-0.0673786,-0.0372215,0.0735879}
,
{0.113607,-0.203718,0.114794,0.219114,0.112343,-0.155804}
,
{-0.0822381,0.0313593,0.131783,-0.0303187,-0.0516007,-0.0142742}
,
{0.108701,-0.0521159,0.0119471,0.10726,0.0292751,0.0300731}
,
{0.123499,0.0146172,-0.0400972,0.0557022,0.0429153,-0.0192784}
,
{-0.0232251,0.0720628,-0.110236,0.0828489,0.0653658,0.100164}
,
{0.0440781,0.0373943,0.00639156,-0.113963,0.0866076,0.032965}
,
{-0.178387,0.00126046,-0.0346464,0.0425213,-0.114986,-0.0153206}
,
{0.042261,0.0951219,0.0596415,-0.132227,0.000419899,0.0407352}
,
{-0.151539,0.0221726,-0.00904778,0.0573222,0.0605367,-0.00630068}
,
{-0.190327,0.151945,-0.0315694,-0.137002,0.103852,-0.164692}
,
{0.160002,0.032096,0.0554635,-0.0578477,0.0201251,-0.153638}
,
{0.104668,-0.0437802,-0.141425,0.153288,0.00190403,-0.0704158}
,
{0.079418,-0.262259,0.146036,0.330394,-0.000298895,0.161882}
,
{0.0520892,-0.000743484,-0.00117351,0.00140952,-0.00267813,-0.0179475}
,
{0.258575,-0.109256,0.0538011,0.315175,0.201619,0.0343087}
,
{-0.0663455,-0.101886,-0.0814715,-0.0624186,0.0311842,0.0825944}
,
{0.129688,-0.009899,0.0497497,0.0476907,-0.171982,-0.0406685}
,
{-0.299132,0.16256,-0.227389,0.427316,0.364508,-0.176954}
,
{0.10638,-0.0986509,-0.0273987,0.0182555,-0.115952,-0.0192909}
,
{-0.223704,-0.232507,0.0523866,-0.0579143,-0.312818,0.0560082}
,
{-0.11725,-0.0214098,0.155861,0.0717163,0.087518,-0.0295218}
,
{-0.0510485,-0.00454026,-0.0437311,-0.0851502,-0.0917815,0.183416}
,
{0.0279818,0.136496,-0.0133147,0.520194,0.615748,-0.136082}
,
{-0.0135908,0.138267,-0.00566074,0.00464328,0.143463,0.00618436}
,
{-0.038489,0.0224149,-0.175685,0.0623582,-0.00721776,-0.348208}
,
{0.0740972,-0.0356377,-0.115121,-0.0746115,-0.134168,0.133153}
,
{-0.203885,-0.102458,-0.0557982,-0.0909088,-0.083216,-0.0642402}
,
{0.0544231,-0.0221649,-0.0776659,-0.0485863,-0.245373,-0.0581098}
,
{0.140936,-0.136551,-0.0210137,0.0140129,-0.148302,0.132027}
,
{-0.0275203,-0.0546402,0.0209263,0.0808687,-0.186446,-0.0927749}
,
{0.0226158,-0.0446778,0.11527,0.217121,-0.124723,-0.0405925}
,
{-0.141633,0.0920858,0.164399,-0.0757732,0.0795389,-0.201179}
,
{-0.0706307,0.0788569,0.0275369,0.149884,0.0696738,-0.0318167}
,
{0.0115943,0.086528,0.0129776,-0.10151,-0.179249,0.0691255}
,
{0.0543453,-0.0142182,-0.165678,-0.0381294,0.0663527,-0.202919}
,
{-0.0966988,-0.239103,-0.108978,-0.0108467,0.0283483,0.0749031}
,
{-0.116663,-0.127916,-0.20246,-0.181584,0.0807532,-0.0931043}
,
{-0.0674702,-0.0386832,0.195113,-0.22562,-0.179747,0.0329731}
,
{-0.0415871,0.0960703,-0.101512,-0.060599,0.0396243,0.0263711}
,
{0.0767955,-0.11918,0.0230475,0.171348,0.114639,0.0676085}
,
{-0.0285958,-0.0326552,0.0162072,0.0232674,-0.0782425,0.132988}
,
{0.014323,-0.038595,0.00644878,0.10166,-0.175802,-0.154751}
,
{0.077955,-0.0964609,-0.0759147,0.185038,-0.00445586,0.0682846}
,
{-0.0635091,-0.0130309,0.126319,-0.141207,0.0406554,0.172376}
,
{-0.0863426,-0.0424305,-0.117728,0.113561,-0.0223602,-0.124242}
,
{0.00273202,-0.192184,0.0348626,0.221269,-0.154798,-0.155655}
,
{-0.0713908,0.120779,-0.0461174,0.162663,0.14056,-0.0169582}
,
{-0.0098704,-0.0764508,-0.151371,0.066287,-0.128011,-0.0270329}
,
{0.0761799,0.00064234,-0.160447,-0.113275,0.0701212,0.137103}
,
{0.0196868,-0.0966981,-0.0408622,0.187369,-0.0618387,-0.127796}
 };
  static const float bias2[1] = { 0.00114131 };
  static const float weights2[][1] = { {-0.868057}
,
{0.108107}
,
{0.11848}
,
{0.0922176}
,
{-0.105078}
,
{-0.185541}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_0_60(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_0_60(v, index);
}
static int assign_gen_lepton_prior_12_0_60() {
  global_gen_lepton_prior.at(12,0,60) = &specialized_gen_lepton_prior_12_0_60;
  return 0;
}
static int initialize_gen_lepton_prior_12_0_60 = assign_gen_lepton_prior_12_0_60();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_14(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0312586,-0.186792,-0.0141393,0.0,0.0,0.0163309 };
  static const float weights1[][6] = { {-0.146227,0.0842573,-0.00594492,-0.0369941,-0.156126,0.160795}
,
{-0.239491,-0.131945,0.223583,0.193508,0.0166761,-0.0205507}
,
{0.0343772,0.372537,0.0715989,0.10813,-0.11148,-0.0467061}
,
{-0.919441,-0.299167,0.324724,0.181399,0.115186,-0.172192}
,
{-0.0693503,-0.209281,-0.0832775,-0.177975,-0.0809277,-0.0884586}
,
{0.0564423,-0.0503198,0.118314,-0.00494995,0.0247766,-0.101485}
,
{-0.182468,-0.0584705,0.107732,0.0149113,-0.0109804,0.0644116}
,
{-0.0192624,-0.1268,0.380031,-0.13064,-0.109862,0.13671}
,
{-0.0043354,-0.120707,-0.0809819,-0.114128,0.106442,-0.255465}
,
{0.016383,0.00305023,0.208431,0.0567191,0.0416953,0.187155}
,
{0.100858,-0.00348267,-0.0908482,0.123112,-0.0367388,-0.0981942}
,
{0.0911699,0.0269983,0.0181979,-0.0117583,-0.087465,0.0356538}
,
{0.121023,-0.341017,-0.0391668,0.219174,0.0240034,0.0351121}
,
{-0.00266717,0.0202953,-0.0889837,-0.189887,0.127064,-0.0300125}
,
{-0.0464893,-0.00231079,-0.117467,-0.000775952,-0.0310679,-0.0205004}
,
{0.0254021,-0.0482543,0.120891,-0.12924,0.0886487,-0.0309343}
,
{0.15496,-0.0454147,0.0661563,-0.0604573,-0.132765,0.0340977}
,
{-0.11112,-0.348329,0.0379179,0.0650413,-0.196504,-0.00427134}
,
{0.0145256,-0.251255,-0.0192057,-0.0823535,0.0558474,0.0991499}
,
{0.00941765,0.0455888,0.00433119,-0.0211652,-0.132013,0.0367251}
,
{-0.14637,-0.00827005,0.0589601,-0.173927,-0.0721892,-0.00487031}
,
{0.0173886,-0.018752,-0.0333629,0.0380832,-0.170658,0.073782}
,
{0.0831513,0.134296,-0.170824,-0.128334,0.0176123,-0.18958}
,
{0.012955,-0.00763373,0.063178,-0.12828,-0.209256,-0.0824524}
,
{0.160149,-0.0458912,-0.21712,0.0407144,-0.0195486,-0.047775}
,
{-0.0939406,0.174008,-0.0436763,0.126474,0.0544535,0.04179}
,
{-0.158338,-0.171628,-0.0447348,0.0981065,-0.0155343,-0.058803}
,
{0.0036605,0.0182963,0.0747096,-0.107128,-0.0440039,-0.119716}
,
{-0.231536,-0.138195,-0.0868261,-0.0947,-0.102944,-0.0873868}
,
{-0.0858487,-0.00880454,0.00924512,0.12495,0.0232763,-0.00414447}
,
{-0.130704,-0.339463,0.219151,-0.092553,0.130995,-0.111576}
,
{-0.139508,-0.0167425,0.187402,-0.157177,0.162553,0.120429}
,
{0.0156013,-0.0249397,-0.0187633,0.0124691,-0.0853627,0.159344}
,
{0.157861,-0.0376781,0.10235,-0.0547767,-0.0108555,-0.104693}
,
{0.0204377,-0.303178,0.00263751,-0.0433121,0.115494,-0.00415772}
,
{0.0322384,0.0661322,0.265186,0.000956551,0.171626,-0.231385}
,
{-0.231762,-0.130275,-0.436678,-0.0160457,-0.0917779,0.325521}
,
{0.200631,0.448149,-0.130983,0.0770147,0.00382588,-0.130289}
,
{0.546588,-0.237562,-0.285626,0.180484,0.0480772,-0.0791673}
,
{0.370702,-0.260201,-0.099938,-0.00657684,-0.165722,-0.121222}
,
{0.0943091,-0.201166,0.123225,0.125528,0.0357476,-0.217604}
,
{0.0638492,0.238222,-0.502174,-0.14426,0.18396,0.331652}
,
{-0.330509,0.347047,-0.148645,0.0403884,-0.2172,0.30698}
,
{-0.517146,0.0239418,0.0780093,-0.16956,-0.0297939,0.231374}
,
{-0.0230856,0.194041,0.0833138,-0.169399,0.129208,-0.0124282}
,
{-0.116922,0.101551,0.0892757,0.129065,-0.0808307,-0.0226965}
,
{-0.205028,-0.253299,-0.0136486,-0.210754,0.128355,0.0373963}
,
{-0.0131738,-0.0584181,-0.085579,-0.047174,0.0375259,0.0918318}
,
{0.0269478,-0.0582778,0.173806,-0.0209039,-0.0852287,-0.0567336}
,
{0.157702,-0.248399,-0.343274,0.0592978,0.115289,0.288612}
,
{0.192705,-0.206962,-0.118502,-0.0424183,-0.0175951,-0.019276}
,
{0.139712,-0.0283895,-0.489129,0.0359933,-0.0210246,0.311133}
,
{-0.0906946,0.103873,0.353311,0.053992,0.00774111,-0.340112}
,
{-0.188313,-0.187659,-0.180838,-0.0853448,0.0744542,0.267053}
,
{-0.0751063,0.0146322,-0.00991926,0.105179,-0.0119005,0.129607}
,
{0.115835,-0.225947,-0.010928,-0.201103,-0.209744,-0.166997}
,
{-0.0342356,-0.0935271,0.0485957,0.0053168,-0.1209,0.227017}
,
{0.0519903,-0.00181539,-0.0378245,-0.233362,-0.0346611,-0.056542}
,
{0.12931,-0.175809,0.155453,0.0221469,0.130151,-0.0298924}
,
{0.137057,0.235274,-0.216319,-0.136562,-0.21226,0.107506}
,
{0.0740416,-0.0399251,-0.0999202,0.0900985,-0.0938885,-0.0297376}
,
{0.0611179,-0.0293022,0.0517018,0.0799487,-0.218576,0.161627}
,
{-0.0279547,-0.0485056,-0.0204017,0.0316521,0.00911292,-0.100585}
,
{-0.108434,-0.210513,-0.0474236,0.130293,-0.0719327,-0.0254}
,
{0.198498,0.0893953,-0.0830177,0.081146,0.0593925,0.018829}
,
{-0.0070378,-0.0615064,0.0912662,-0.120241,-0.0413536,0.0667254}
,
{-0.161997,0.133631,-0.0100566,0.0346647,0.168402,-0.0745192}
,
{-0.157274,-0.0930636,-0.0198294,-0.0911158,-0.00784354,0.00569575}
,
{0.0811197,-0.07202,0.00406632,-0.0812519,-0.177186,0.159841}
,
{-0.0181121,-0.0305622,0.044882,0.0505959,-0.0404953,0.213003}
,
{0.0811145,0.133845,0.173276,0.109963,-0.069375,-0.099653}
,
{-0.0464101,-0.0206578,0.00144497,-0.0344988,0.162692,0.186206}
,
{0.106231,-0.200511,-0.119717,0.0513715,0.151558,0.0628488}
,
{0.0661053,0.0535901,-0.133828,-0.0964881,0.191404,0.0608123}
,
{-0.0468209,0.0977128,0.0590885,0.00547219,-0.116414,-0.105131}
,
{0.0310757,-0.0543467,-8.55885e-05,0.15613,-0.129569,-0.162281}
,
{-0.101231,-0.00683684,0.119445,-0.141557,-0.00800315,0.0270178}
,
{-0.0247349,0.0464882,0.100123,-0.054623,0.162348,-0.0677256}
,
{-0.104526,-0.0418891,0.0173504,-0.131059,0.0761193,-0.0121045}
 };
  static const float bias2[1] = { -0.166741 };
  static const float weights2[][1] = { {0.16864}
,
{0.902249}
,
{0.0909154}
,
{-0.130231}
,
{-0.0720193}
,
{0.109802}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_14(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_14(v, index);
}
static int assign_gen_lepton_prior_1_1_14() {
  global_gen_lepton_prior.at(1,1,14) = &specialized_gen_lepton_prior_1_1_14;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_14 = assign_gen_lepton_prior_1_1_14();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_0(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.089578,0.0903139,0.626021,0.366089,0.557579,-0.0933558 };
  static const float weights1[][6] = { {0.0173495,-0.063434,0.627563,0.266972,-0.0699953,0.203974}
,
{0.184592,0.310158,0.470041,0.0731129,0.3049,-0.0836086}
,
{0.178476,0.0356876,0.513965,0.164137,0.186675,-0.305596}
,
{0.691098,0.11857,0.932914,0.374903,0.740696,-0.250809}
,
{-0.0248686,0.20449,0.494794,0.506138,0.400615,-0.0710881}
,
{-0.0769631,-0.100671,0.306119,0.484844,0.482726,-0.116913}
,
{-0.0519886,0.00036994,0.434631,0.251733,0.65703,-0.0843173}
,
{-0.0886159,-0.13298,-0.169942,0.0882762,-0.07108,0.0961505}
,
{-0.382774,0.0348063,0.085235,0.209146,0.0751295,0.122393}
,
{0.207235,0.182528,-0.0972152,0.0756451,0.133532,-0.214412}
,
{-0.223932,0.112746,0.00426866,0.0401914,-0.0238445,-0.0966966}
,
{0.0843594,-0.155159,-0.952805,-0.0140881,0.297375,0.0732381}
,
{-0.0601343,-0.052994,-0.0379362,-0.24414,0.0333273,-0.158527}
,
{0.0320592,0.0495751,-0.245809,-0.0706631,0.0918618,-0.0119148}
,
{0.0452245,0.0542903,-0.0363089,-0.00679594,0.0589599,0.0359381}
,
{0.218749,0.045115,0.0743229,0.00487393,-0.235928,0.121035}
,
{0.144662,0.0786451,-0.94204,0.43061,0.742348,-0.0465073}
,
{0.21201,-0.106356,-0.101126,0.135552,-0.21701,-0.0552623}
,
{0.113604,0.0794278,0.747444,-0.0710642,0.00208115,0.153976}
,
{0.109663,-0.210063,-0.935379,0.210614,0.288085,-0.0134154}
,
{0.0656436,0.22603,0.163651,0.134193,-0.195301,0.00270231}
,
{-0.160444,-0.00119676,0.141925,-0.044789,0.0793784,-0.0263117}
,
{-0.0280387,0.200655,0.145882,0.103682,-0.0298833,-0.233281}
,
{-0.162376,-0.0431596,0.0900177,0.0083102,-0.0347939,-0.206448}
,
{0.0131192,0.094811,0.129254,0.205271,0.0605207,0.126447}
,
{0.106839,-0.0341493,0.063533,-0.0106052,0.146153,0.0662793}
,
{0.0348436,-0.18548,0.0363461,0.057424,0.0412898,-0.0756039}
,
{0.0285093,0.171793,0.110416,0.0392062,0.0388076,-0.0800893}
,
{0.348339,0.0561198,0.130809,0.142938,0.203003,-0.177444}
,
{-0.13232,-0.00538578,-0.120041,0.0768629,-0.00765126,-0.120342}
,
{-0.0243615,0.100956,0.144484,0.111059,-0.0150735,0.127265}
,
{0.238878,0.00567989,0.169733,0.0236814,0.0399659,0.0872194}
,
{0.0599401,0.0220673,0.0855307,-0.101353,0.0107873,-0.0331113}
,
{-0.0243859,0.105989,0.0846581,0.146238,-0.212517,0.166982}
,
{-0.119165,-0.115489,-0.0411156,0.00588125,0.0146577,-0.0261738}
,
{0.0270863,-0.0147418,0.0114746,0.0541666,-0.0327053,0.0173609}
,
{0.374677,0.134429,0.0552737,-0.0252812,-0.101347,-0.182842}
,
{0.0547147,0.0201983,0.000957101,0.0815889,-0.0677615,0.159771}
,
{-0.345089,-0.176401,-0.0252008,0.0190374,0.0425787,-0.102938}
,
{-0.174422,0.16124,0.00477045,0.172842,-0.204512,0.0485535}
,
{0.123474,0.0634029,-0.0018326,0.0371665,-0.0506466,0.0593448}
,
{0.197594,-0.0510986,0.0229718,-0.0270296,-0.0299173,-0.0631781}
,
{0.0364719,0.117499,0.00806574,-0.0389784,0.018306,0.0383205}
,
{-0.122446,-0.300905,-0.188355,0.021325,0.0611127,0.269506}
,
{0.0380746,0.152571,0.00874467,-0.0642812,0.0494802,0.0145512}
,
{0.0171305,-0.138737,-0.0143756,-0.0521057,0.104921,0.0214445}
,
{0.275215,0.0300376,0.00340418,-0.0507526,0.0524628,-0.0104466}
,
{0.0424187,-0.107407,-0.00474446,-0.0352635,0.0458772,0.0161137}
,
{-0.145363,-0.142881,0.124536,-0.0752116,0.170538,0.108319}
,
{0.147431,0.237903,0.145456,0.0540672,-0.107286,0.079584}
,
{-0.077794,0.0359782,0.00559773,0.0536931,-0.0760769,0.00462467}
,
{-0.0145379,0.0309625,-0.0849089,0.0808583,-0.0419009,0.0885012}
,
{-0.0661526,-0.000683162,-0.0142421,-0.0514546,0.0468737,-0.0781285}
,
{0.0343087,-0.0317492,-0.0603828,-0.00623801,0.0124905,0.0816924}
,
{0.0339333,0.177681,0.0314782,-0.0613108,0.0585657,-0.0377084}
,
{-0.0177476,0.0515602,0.0123497,0.0344878,-0.00305934,0.0228777}
,
{-0.1186,-0.0578913,0.00343616,0.0344133,0.0146521,-0.0928855}
,
{0.315692,0.255972,-0.0856468,0.0120432,-0.0963061,0.409273}
,
{0.20425,-0.147696,0.0354584,-0.0181112,0.0906572,-0.0414435}
,
{0.0118466,0.0930665,-0.00782973,-0.0840972,0.0268584,-0.0448106}
,
{0.0163264,0.0188864,-0.022661,-0.038073,-0.0138182,0.0656355}
,
{-0.00498736,0.159391,-0.0608756,-0.146482,-0.111466,0.0884786}
,
{-0.12761,0.310765,-0.0340416,-0.208072,-0.127409,-0.0408369}
,
{0.0607423,0.0122156,0.0116473,0.0247995,0.0606298,0.137252}
,
{0.190825,0.122058,0.00111119,-0.02591,-0.0822043,0.0861467}
,
{0.0276959,0.0289461,0.0167194,0.0356367,-0.0274525,0.0197793}
,
{0.0280076,0.0156518,0.0560477,0.0824139,0.0846921,0.0158108}
,
{-0.0363734,-0.0341625,0.00332619,0.025454,0.145429,-0.137113}
,
{-0.0310877,0.11299,0.0643649,0.0510752,0.0814029,0.0201003}
,
{0.0559131,0.0801764,0.00827506,0.00522209,-0.0218749,0.0685949}
,
{-0.105193,-0.00087855,-0.00346566,-0.0132777,0.0402803,-0.0259672}
,
{-0.0523158,-0.200381,0.0148275,-0.0199721,0.0899293,-0.282663}
,
{-0.281008,-0.400168,-0.220983,-0.142095,-0.0445532,0.602214}
,
{-0.0964993,0.00209043,-0.0268406,-0.0558851,0.0636507,0.0273029}
,
{-0.272265,0.18125,-0.0247792,-0.00927552,0.0939228,-0.019357}
,
{0.146168,0.036903,0.0738519,0.113468,0.0423242,0.207103}
,
{-0.282444,-0.807685,-0.43499,-0.278373,-0.090921,-0.155451}
,
{0.667218,0.250769,-0.105317,0.631371,0.783955,-0.420411}
,
{-0.40912,0.388735,-0.0154792,-0.111948,-0.174226,-0.664963}
 };
  static const float bias2[1] = { 0.363574 };
  static const float weights2[][1] = { {0.0167854}
,
{0.0206867}
,
{-0.0930651}
,
{0.0375411}
,
{0.0308949}
,
{-0.0160733}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_0(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_0(v, index);
}
static int assign_gen_lepton_prior_1_0_0() {
  global_gen_lepton_prior.at(1,0,0) = &specialized_gen_lepton_prior_1_0_0;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_0 = assign_gen_lepton_prior_1_0_0();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_1_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0930423,-0.194849,-0.260954,-0.267351,-0.12336,-0.296763 };
  static const float weights1[][6] = { {-0.670107,-0.00306169,-0.101111,-0.0568574,-0.143882,-0.50812}
,
{-0.24508,0.00738814,0.0529446,-0.303618,-0.108506,0.314577}
,
{-0.16784,0.0149066,-0.60047,-0.402417,0.171965,-0.648724}
,
{1.03166,-0.666737,-0.3038,-0.0531967,0.0808327,0.346687}
,
{-0.165543,-0.240434,-0.212725,-0.511001,-0.00292163,-0.532075}
,
{-0.245818,-0.275244,-0.132999,-0.142298,-0.018224,-0.337687}
,
{-0.227019,-0.172544,-0.0379797,-0.138691,-0.217333,-0.455011}
,
{0.0297468,0.02134,0.129037,-0.015951,0.0786985,-0.179338}
,
{1.03384,-0.527244,-0.468222,-0.177493,0.296865,0.750766}
,
{0.137062,0.178872,-0.00616267,0.12337,0.000920417,0.121484}
,
{-0.136345,0.0262342,-0.121537,-0.152454,-0.171557,-0.0650476}
,
{0.227145,-0.0910993,-0.160675,0.0813606,-0.0330451,0.234151}
,
{0.256204,-0.166276,-0.0964761,-0.0335894,-0.0657455,-0.15537}
,
{0.0492286,-0.250872,-0.43288,-0.206479,-0.03462,0.221788}
,
{-0.138126,0.0693173,-0.0253337,-0.0045936,0.00445716,0.0140477}
,
{0.313473,-0.00930602,-0.201019,-0.0515452,0.0331459,0.0542546}
,
{0.183007,-0.220156,-0.256385,-0.225469,-0.0538247,0.139719}
,
{0.348838,-0.150022,-0.258009,-0.439784,0.159723,0.277589}
,
{-0.0274165,-0.124821,-0.0115136,-0.0246744,-0.0518544,-0.0459273}
,
{-0.0267334,-0.0774251,0.0189737,0.0710379,0.104033,-0.0512467}
,
{0.0661534,-0.0989312,-0.0536423,0.0587247,-0.17834,0.123807}
,
{-0.0810987,-0.211467,-0.16024,0.11908,0.0109777,0.0194935}
,
{0.0217327,-0.165412,0.0299237,0.00733318,0.0405992,-0.0211582}
,
{0.129997,-0.0300502,0.127213,-0.21968,0.0719337,-0.226569}
,
{0.0958378,-0.109442,-0.0991695,-0.222722,-0.0657511,-0.314266}
,
{-0.106705,0.0247564,-0.094479,-0.212981,-0.140557,-0.0514063}
,
{-0.207437,-0.117429,-0.0671546,-0.0584517,0.147917,0.268265}
,
{-0.0684504,0.106582,0.00892743,-0.153895,-0.0447095,0.120152}
,
{0.792338,0.315006,-0.623672,0.444988,0.36402,0.551465}
,
{-0.0458562,0.0142747,0.164316,-0.176467,0.0929419,0.101336}
,
{0.0502588,0.0340863,-0.045103,0.100377,-0.00296487,-0.0979007}
,
{0.0592885,-0.0138903,0.203988,-0.153791,-0.000360957,-0.236061}
,
{-0.0290073,-0.219827,-0.0576272,0.0756434,-0.018899,-0.132381}
,
{-0.0127034,-0.000671845,-0.171157,0.00641437,-0.135548,-0.210707}
,
{0.00114068,0.0569219,-0.249294,0.115011,0.0564924,0.0139174}
,
{-0.0958916,-0.0356444,0.0546355,-0.239225,-0.143874,0.139922}
,
{0.00688647,-0.249281,0.142992,0.0430289,0.158449,-0.192788}
,
{0.0865967,-0.0504458,0.134435,0.128844,-0.0246365,-0.0342755}
,
{0.0164101,0.0133564,0.0171675,-0.0851628,-0.0594849,-0.0513531}
,
{-0.207204,0.081892,0.0278635,-0.00758185,-0.186168,0.174806}
,
{0.193608,0.168872,0.101891,-0.115484,0.0216763,0.0885397}
,
{-0.0172119,-0.184061,-0.0134447,0.0303195,0.0173822,0.118773}
,
{0.031588,-0.14622,-0.0875419,0.126873,0.134584,-0.253606}
,
{-0.0345711,0.0517381,-0.0166102,0.0962507,0.0492118,0.0978148}
,
{0.0784967,-0.136627,-0.0867553,-0.057721,0.146053,-0.0217255}
,
{-0.0764483,-0.0204694,0.0297218,-0.00174779,-0.145415,-0.0296342}
,
{0.0312888,0.0914305,0.0468833,-0.0858408,-0.0233953,-0.0641425}
,
{-0.0158481,0.0916241,0.0430326,0.0801016,0.0369603,0.0731513}
,
{0.0301207,-0.0589236,0.0920741,0.000148148,0.0191775,-0.0750424}
,
{0.151291,0.0814225,-0.0500388,-0.0494868,0.0189951,-0.110903}
,
{-0.130927,-0.01654,-0.062326,-0.0756583,-0.06601,0.0712772}
,
{-0.0194162,0.012172,-0.0755753,-0.0399142,-0.0431672,0.0786035}
,
{-0.0712559,-0.154387,-0.047078,0.16689,0.18432,0.00544453}
,
{-0.0136285,-0.038221,-0.0823602,-0.0145969,0.0398654,-0.0377193}
,
{-0.113459,0.104522,-0.0414755,-0.0552769,-0.121166,0.124511}
,
{-0.0549916,-0.219602,-0.165572,-0.108807,0.0500134,-0.120673}
,
{0.169986,-0.0201482,0.170983,0.119024,0.0172007,-0.0238794}
,
{-0.000455249,-0.158348,0.483295,0.0467781,-0.445592,-0.978388}
,
{-0.0445368,-0.013921,-0.113388,-0.0693249,0.152169,-0.0400916}
,
{-0.14525,-0.00247248,-0.0221982,0.0974714,-0.208714,-0.0818775}
,
{-0.125816,0.114025,0.121948,0.152815,0.164599,0.120001}
,
{0.217184,-0.00259263,0.020197,-0.216437,0.0986898,0.0809389}
,
{0.243522,0.0123079,0.259207,-0.325795,0.128645,-0.719543}
,
{0.0246411,0.0940767,0.0116503,-0.0783551,0.0565744,-0.080473}
,
{-0.144999,-0.0881999,-0.0857811,0.0988643,0.0272041,0.0541721}
,
{-0.0309517,-0.0216731,0.15934,-0.118192,-0.0776153,0.0212831}
,
{0.163398,-0.0299228,-0.0751371,0.0505049,0.00302984,-0.0963909}
,
{0.207596,-0.22278,0.155196,0.015233,0.215341,-0.0619549}
,
{0.0371242,-0.022969,-0.0680058,0.00541924,-0.144797,0.0196654}
,
{0.053216,-0.0647704,0.11169,0.0701544,-0.000320957,0.0851743}
,
{0.152014,0.0766557,0.0145056,-0.10785,-0.0220202,-0.00864154}
,
{-0.220665,0.0564734,-0.0436074,-0.0709092,0.0473926,-0.029316}
,
{-0.428841,-0.433435,-0.224424,0.144717,-0.134706,0.244974}
,
{0.071606,-0.168484,-0.00256086,0.11872,-0.138595,-0.00400557}
,
{0.059814,0.0487574,0.215715,0.0992403,-0.027053,0.233342}
,
{-0.119779,0.0902695,0.14997,-0.0514167,0.0732136,0.216116}
,
{-0.0281763,0.183371,0.0641058,0.0909729,-0.0782676,0.0897051}
,
{-0.687069,0.334968,0.819587,-0.0334367,0.048087,-1.0956}
,
{-0.106137,0.320488,0.207553,0.186106,0.0695858,0.204486}
 };
  static const float bias2[1] = { 0.262347 };
  static const float weights2[][1] = { {0.0183778}
,
{-0.00932688}
,
{-0.00795322}
,
{-0.0126858}
,
{0.00984429}
,
{0.012791}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_1_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_1_57(v, index);
}
static int assign_gen_lepton_prior_12_1_57() {
  global_gen_lepton_prior.at(12,1,57) = &specialized_gen_lepton_prior_12_1_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_1_57 = assign_gen_lepton_prior_12_1_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_1_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.295382,-0.0367941,0.36298,0.25202,0.00841372,0.0197092 };
  static const float weights1[][6] = { {-0.248605,0.00934482,-0.454846,0.499257,-0.348391,0.57972}
,
{-0.337496,0.488818,0.059266,0.0649867,-0.348966,-0.480326}
,
{-0.226828,-0.138812,-0.284268,0.121993,-0.0123867,-0.701579}
,
{-0.751627,-0.418318,1.32913,0.397032,1.12257,0.469627}
,
{-0.324287,-0.155794,0.195919,0.165717,0.0878901,-0.0416514}
,
{-0.34097,0.190111,0.151062,0.156457,-0.232647,0.135024}
,
{-0.0108455,0.0873566,0.427659,0.123085,-0.248282,-0.0517241}
,
{0.00169414,0.0642984,-0.120708,0.039777,0.0641068,-0.0565087}
,
{-0.351777,-0.214916,0.960237,0.749018,0.059145,0.412015}
,
{0.00955707,-0.174038,0.0602666,-0.0218471,-0.0686281,0.206075}
,
{-0.0306508,-0.0106795,-0.046149,-0.0246723,0.105253,0.170706}
,
{-0.0501138,0.0466934,-0.244251,0.0926961,-0.00841818,0.0718315}
,
{-0.101065,-0.0856335,-0.0914854,-0.0863152,-0.0897698,0.0323928}
,
{0.0630605,-0.0826547,0.144223,0.398793,0.0458344,-0.122632}
,
{0.0178967,-0.0563401,0.201527,0.0644062,0.0409209,-0.0387333}
,
{-0.0330717,0.104623,0.155159,0.140251,-0.132317,-0.218283}
,
{-0.143338,-0.240185,0.417227,0.266083,-0.285261,-0.0721932}
,
{-0.303152,0.321654,0.467519,0.563563,-0.124879,0.164982}
,
{-0.0867757,-0.0279225,-0.202659,-0.0887399,-0.0440635,0.0324635}
,
{0.120764,-0.0773479,0.267874,0.285605,-0.0639755,-0.237421}
,
{0.0296506,0.0296013,0.10032,0.0385326,-0.0195332,-0.0671578}
,
{-0.0443671,0.0748789,-0.023014,-0.0606202,0.104067,0.0219415}
,
{0.0278936,-0.108619,-0.124967,-0.105371,0.128309,0.0464534}
,
{-0.0429635,-0.0761139,-0.0374226,-0.182785,0.185246,-0.0682929}
,
{-0.0853399,-0.00300619,-0.105224,-0.242553,-0.272659,-0.275078}
,
{-0.0865242,0.181655,-0.225409,0.245865,-0.0531371,0.279321}
,
{-0.146417,-0.0191,0.212936,-0.111028,-0.034291,-0.0852049}
,
{-0.0673059,0.0122712,-0.0351657,-0.233072,-0.00540438,-0.113527}
,
{0.0138605,-0.395725,-0.444276,0.616611,0.128287,1.20121}
,
{-0.226587,0.150422,0.0859905,-0.0309239,-0.0249358,0.0588255}
,
{-0.0355962,0.221925,0.039137,-0.0666932,0.131074,-0.192324}
,
{-0.108073,0.0305932,0.078415,-0.0548871,-0.0300527,-0.13789}
,
{-0.153227,-0.059428,-0.00343915,0.0225925,-0.119113,-0.000999273}
,
{-0.0437033,0.0609101,0.21713,-0.139097,-0.0277174,0.0800938}
,
{-0.00734305,-0.0199375,0.0424814,-0.0639568,0.0257501,0.0882948}
,
{0.166419,0.191895,-0.0236473,0.0566163,0.170989,-0.0772005}
,
{-0.0950868,0.0526615,0.0716586,-0.123719,-0.0183903,0.0796631}
,
{0.0570046,-0.0938718,0.0233665,-0.027994,-0.0302714,-0.0208542}
,
{0.0286783,0.081317,0.0618793,0.0556636,0.0380205,-0.0730444}
,
{-0.137877,-0.0408712,0.175747,0.0546945,0.150392,-0.138175}
,
{-0.0319821,-0.0893047,-0.170255,-0.0179715,-0.266734,0.135417}
,
{0.0806454,-0.0475198,-0.154534,0.143187,-0.0397214,0.155755}
,
{0.128261,-0.0399852,-0.0234046,0.0534688,-0.0191187,-0.0232016}
,
{-0.197432,-0.0697168,0.0373057,-0.273546,-0.0805612,-0.0197706}
,
{0.0207991,0.0455917,-0.124729,-0.0297695,0.131979,-0.0147593}
,
{0.0587414,0.0674002,0.09308,0.071554,-0.0718851,-0.0244252}
,
{-0.0916714,-0.0725755,0.0720119,-0.0662415,-0.0925068,0.157715}
,
{-0.0807083,-0.00830246,0.0148926,-0.0450279,-0.0107619,0.0250248}
,
{0.0924165,0.0795904,-0.0480165,0.190807,0.0771229,-0.0292407}
,
{0.127084,-0.0396221,-0.0240118,-0.0542033,0.152442,0.0156379}
,
{0.0861494,0.214374,0.0118645,0.014021,0.0543843,-0.0164987}
,
{-0.0053916,0.0368707,0.131753,-0.257219,-0.000842474,0.109814}
,
{-0.170436,-0.11472,0.035597,-0.0241902,-0.134945,0.00602582}
,
{0.194082,0.0601247,-0.0328093,0.119288,0.105069,0.0358899}
,
{-0.00771742,0.123273,0.0509542,-0.0822375,-0.0110417,0.113161}
,
{0.0722899,0.0388936,0.1383,0.149276,0.0299226,-0.0208908}
,
{-0.0677969,0.00382403,0.0457588,-0.0160198,-0.0074632,-0.121856}
,
{0.0456097,-0.0346242,-0.053585,-0.0707315,0.0686522,0.0180544}
,
{-0.204774,0.154373,-0.450041,-0.0195115,0.334246,0.466658}
,
{0.0652146,0.180599,0.134908,0.0259967,0.0844217,-0.120722}
,
{0.246328,0.153376,-0.0124784,-0.167345,0.130076,0.108188}
,
{-0.0748106,-0.072854,0.0156848,0.111213,-0.0111243,0.174267}
,
{0.0158064,0.0739516,0.0153489,0.105774,-0.0334678,0.0469038}
,
{-0.601038,0.808769,-0.281892,0.0834313,-0.131486,0.686525}
,
{0.102109,0.0851135,-0.17991,0.0182247,0.120513,0.0504284}
,
{-0.0448147,0.186191,-0.169756,0.00228388,0.02924,-0.0142801}
,
{-0.241338,-0.184966,0.235815,0.0353734,-0.190344,0.108142}
,
{-0.112173,0.0332207,-0.0312286,-0.035179,0.0492852,-0.0754491}
,
{0.163751,0.246468,-0.00285294,0.256115,0.316111,0.187139}
,
{0.0918399,0.0120791,-0.0684964,0.178688,-0.000680422,-0.172001}
,
{0.0322909,-0.0427643,-0.00299409,-0.0144127,-0.0527017,-0.114909}
,
{0.0167345,-0.250847,0.0492799,-0.148855,-0.0170605,0.148942}
,
{0.249313,0.0704575,0.012857,0.0256008,-0.0109281,0.204352}
,
{-0.485029,0.388742,-0.243986,-0.0908221,0.0815577,-0.150514}
,
{-0.053988,-0.0228125,0.107978,-0.0112479,-0.177012,-0.125307}
,
{-0.258961,-0.0492974,-0.0197681,-0.304417,-0.219635,0.166756}
,
{-0.151554,-0.0625253,0.0858692,-0.198675,-0.489463,0.104187}
,
{0.130446,-0.198227,-0.0815769,0.0750579,-0.0143066,0.0501831}
,
{0.119004,0.411543,-0.993417,0.0828088,0.120477,-0.101441}
 };
  static const float bias2[1] = { 0.224962 };
  static const float weights2[][1] = { {-0.0112695}
,
{-0.0157875}
,
{0.0125289}
,
{0.0113707}
,
{0.0228384}
,
{0.0182536}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_1_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_1_58(v, index);
}
static int assign_gen_lepton_prior_12_1_58() {
  global_gen_lepton_prior.at(12,1,58) = &specialized_gen_lepton_prior_12_1_58;
  return 0;
}
static int initialize_gen_lepton_prior_12_1_58 = assign_gen_lepton_prior_12_1_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_1_59(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0688874,-0.0374218,0.0503913,0.103514,-0.222822,0.200629 };
  static const float weights1[][6] = { {0.0528002,-0.317785,-0.0654383,0.13943,-0.0240607,-0.209222}
,
{-0.218968,-0.0261956,0.427319,-0.0118062,-0.572347,0.111423}
,
{-0.132465,-0.162504,-0.150662,-0.544638,-0.0440677,-0.292809}
,
{0.631241,-0.281765,-0.201196,0.121859,-1.53937,1.04027}
,
{0.195203,0.130587,0.0455056,0.187412,-0.349733,0.131523}
,
{0.0414702,-0.137602,0.0472219,0.139949,-0.0952921,-0.0247946}
,
{0.0150907,-0.106878,-0.0356976,0.098814,0.0543497,0.191278}
,
{0.123308,-0.0453782,0.111972,-0.0109385,-0.0787431,-0.103649}
,
{0.635163,0.495338,-0.256376,0.108141,-0.0729037,0.0147166}
,
{-0.166218,0.00398402,-0.0553866,0.0653318,-0.0976391,-0.226563}
,
{0.00935053,-0.104635,-0.1075,-0.030506,0.0985011,-0.165287}
,
{-0.165214,-0.125569,-0.231529,-0.112439,-0.0925652,-0.0957413}
,
{0.124367,-0.315515,0.44465,0.229847,-0.162901,0.25567}
,
{0.083823,0.19893,-0.142782,-0.00574946,-0.127558,0.11579}
,
{-0.0226555,-0.141072,0.0416168,-0.0847153,-0.107545,-0.0353324}
,
{0.448085,0.368437,-0.136297,-0.139139,0.307513,-0.290957}
,
{0.355435,0.252658,-0.15902,0.162736,0.166237,-0.0912764}
,
{0.260689,0.311383,-0.1098,-0.160959,-0.0284072,0.12189}
,
{-0.0888712,-0.101043,-0.338549,-0.00953242,-0.0908677,-0.0743514}
,
{0.0853115,0.139918,-0.44122,-0.191612,-0.109886,-0.186948}
,
{0.09357,-0.0976099,-0.0233522,-0.00438568,-0.0251934,0.005793}
,
{0.0174931,-0.0782268,0.035785,-0.197728,-0.0298602,-0.066191}
,
{0.185829,0.0403758,-0.0361851,0.171485,-0.0164614,-0.128341}
,
{-0.0620136,0.0439051,0.0319535,-0.00193594,-0.260695,-0.157841}
,
{0.21448,0.143934,-0.116958,-0.00586226,0.227482,0.0758922}
,
{0.0360856,-0.0410861,-0.0666106,-0.0127983,0.0118713,0.0877313}
,
{0.189295,0.0693158,-0.00167272,-0.0835693,-0.0643198,-0.580444}
,
{0.0393397,0.0556338,0.00110779,0.391956,0.126666,0.0578403}
,
{0.182531,-0.31428,0.15076,0.625526,-0.0130702,-0.425195}
,
{-0.0109896,0.133335,0.202269,-0.072519,0.177352,0.152303}
,
{-0.159055,-0.109951,-0.0773652,0.12599,0.0930783,-0.102922}
,
{0.0764645,-0.0109916,0.0513886,-0.150824,0.1819,0.0730837}
,
{-0.0286448,0.0498439,0.0159404,-0.00300377,-0.0737335,-0.0512199}
,
{-0.0929807,0.0638616,0.0615451,-0.0383222,-0.0616222,0.0830591}
,
{-0.0894457,-0.140694,0.0286657,-0.0757987,0.107133,0.0261036}
,
{0.0635736,0.120649,0.0877776,0.0287968,-0.161464,-0.0685053}
,
{0.0262654,0.0567785,0.13885,-0.00960433,0.414547,0.312669}
,
{-0.00902242,0.0314158,-0.0294845,-0.0178862,-0.0500961,-0.0411898}
,
{0.0606851,0.0362361,0.0180638,0.128249,0.110243,0.0876328}
,
{0.0379362,0.0201625,-0.0316189,-0.0752534,0.0352113,-0.137369}
,
{0.0172957,-0.0412891,0.0584345,0.0523191,0.0315536,0.152512}
,
{0.191276,-0.225646,0.279426,-0.0339676,0.170526,0.0963205}
,
{0.0124677,-0.035423,0.0063335,-0.0186102,0.0423293,0.0345026}
,
{-0.193745,0.325549,-0.00923116,0.0435995,-0.0258888,-0.0378559}
,
{-0.0540664,-0.0415666,0.0811567,0.0781463,0.00733713,-0.0161101}
,
{-0.0258416,0.110054,-0.0280285,-0.0219059,-0.113072,0.00331195}
,
{-0.0896105,0.141729,0.159673,-0.0770852,0.0254533,0.101699}
,
{-0.0405519,0.0735134,0.0285406,-0.0394434,-0.0517885,-0.0318503}
,
{0.160158,-0.122321,-0.200586,0.0748943,-0.368538,-0.306084}
,
{-0.0474171,-0.0510767,-0.0503333,0.034519,-0.0325506,0.00253696}
,
{0.06635,0.0212443,0.0470004,-0.0511337,0.00168726,-0.0288505}
,
{0.0497718,0.034385,0.30843,0.291195,0.187172,0.154353}
,
{0.0230357,-0.0187996,-0.0210302,0.0417386,0.0660525,0.0358557}
,
{0.0478595,-0.132252,0.247776,0.0137759,0.0182352,0.27356}
,
{0.0240541,0.205703,0.0738805,-0.176418,0.0697263,-0.181219}
,
{-0.0599658,0.0367987,-0.126398,0.0664496,0.0480059,0.0276314}
,
{0.0335156,0.171498,0.109734,0.0242733,0.082434,-0.0825263}
,
{0.621147,-0.22776,0.238545,-0.596109,-0.00948801,-0.280526}
,
{-0.796967,-0.214488,-0.285331,0.0112618,0.0914865,0.836923}
,
{-0.157365,-0.217912,-0.233226,-0.0796071,0.158897,-0.125804}
,
{-0.190469,-0.055452,-0.102446,-0.241746,0.0252933,-0.192139}
,
{-0.284481,2.10487e-05,-0.151021,0.088361,-0.136918,0.120279}
,
{0.17294,0.932592,0.535646,-0.409628,-0.0424204,-0.126072}
,
{-1.45564,-0.654702,-0.434094,0.766361,-0.144085,0.344971}
,
{0.0152366,0.14446,-0.154228,-0.102005,0.178982,-0.103492}
,
{-0.185782,-0.00632996,-0.0509258,-0.116226,0.0652315,0.0516182}
,
{-0.169478,-0.0344488,0.0212476,-0.0248221,0.101858,-0.0286905}
,
{0.248137,-0.402893,-0.508404,-0.443718,-1.4413,0.151036}
,
{-0.214644,-0.800695,-0.285247,0.498291,-0.58162,1.12391}
,
{0.0929672,0.0925905,0.00221724,0.223605,-0.221746,0.114409}
,
{0.0637274,0.0859474,0.0592244,0.0221512,-0.182622,-0.0775055}
,
{-0.0127557,-0.0715855,0.105015,0.0371541,-0.231052,-0.0731062}
,
{-0.330247,-0.388854,0.263453,0.141759,-0.413749,-0.305507}
,
{0.501122,0.280901,-0.255402,-0.000234313,-0.116877,0.206552}
,
{0.0522526,0.151067,-0.229181,0.296243,0.957346,0.497874}
,
{0.248714,0.0253256,-0.118481,0.139471,0.969597,0.784415}
,
{0.310145,-0.114677,-0.269431,0.12508,0.819399,0.741282}
,
{0.0901419,-0.099987,-0.145412,-0.150829,0.0545558,-0.00787517}
,
{0.103064,-0.158709,0.196397,0.182653,0.000633448,-0.243713}
 };
  static const float bias2[1] = { -0.022053 };
  static const float weights2[][1] = { {0.0387405}
,
{0.0273373}
,
{-0.305484}
,
{-0.0933805}
,
{-0.106682}
,
{0.135001}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_1_59(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_1_59(v, index);
}
static int assign_gen_lepton_prior_12_1_59() {
  global_gen_lepton_prior.at(12,1,59) = &specialized_gen_lepton_prior_12_1_59;
  return 0;
}
static int initialize_gen_lepton_prior_12_1_59 = assign_gen_lepton_prior_12_1_59();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_2_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.147047,-0.220928,0.148308,-0.171096,-0.111948,-0.102652 };
  static const float weights1[][6] = { {0.167156,0.487024,-0.136959,-0.0438373,-0.300019,-0.256054}
,
{-0.0223867,0.0432892,0.128365,-0.109983,0.0804845,0.160503}
,
{0.273769,0.0647454,-0.065239,-0.375132,-0.73973,-0.479858}
,
{0.398244,-0.222326,0.345838,-0.633871,-0.220073,0.14549}
,
{-0.277554,-0.219689,0.0292123,-0.255657,0.0865771,-0.0900832}
,
{-0.158339,-0.335814,0.0329778,-0.180998,-0.206242,0.00348169}
,
{-0.19936,-0.275508,-0.0240441,-0.0984603,-0.0254503,-0.224988}
,
{-0.0908893,0.0819451,-0.189862,0.0220106,0.0656424,-0.199355}
,
{0.124739,1.52558,0.357237,-0.611441,-0.0531781,0.120905}
,
{-0.198669,0.0104281,0.0178857,0.0365115,0.0940798,-0.11736}
,
{0.0395399,0.0201154,-0.151635,0.0266628,0.0198919,0.0739492}
,
{0.15383,0.106724,-0.0827918,-0.00977263,-0.0486817,-0.0669298}
,
{0.0161037,-0.0328871,0.0978132,-0.267182,-0.330817,-0.045182}
,
{0.195308,0.26247,0.23007,-0.107118,-0.0358709,-0.19976}
,
{0.155987,-0.000690037,-0.0340073,-0.0503967,0.0745064,-0.172413}
,
{0.322944,0.290226,0.26307,-0.301641,0.0717827,-0.103396}
,
{-0.0755806,0.0918386,0.205018,0.00613824,-0.0795032,0.104473}
,
{-0.0181706,0.468861,0.214526,-0.304216,-0.0815568,-0.0673199}
,
{-0.136355,-0.0932613,-0.201544,0.0531022,-0.133373,-0.00583054}
,
{0.00660169,0.0854929,-0.00893134,-0.283009,-0.0127681,-0.0880874}
,
{0.0488589,0.0083456,-0.152496,-0.341044,-0.134591,-0.0363251}
,
{0.0280028,0.0338854,-0.355548,0.18717,0.193429,0.0241105}
,
{-0.0958472,0.0741584,0.0274738,0.0503192,0.0724187,-0.0847992}
,
{0.168494,-0.00538254,0.0450124,-0.0149775,-0.222951,0.00637903}
,
{0.0838266,0.0445886,-0.262001,0.0659301,0.255328,-0.226051}
,
{0.210714,-0.0586659,-0.266422,0.0158679,-0.128818,-0.102338}
,
{-0.033385,-0.0146133,-0.0300053,-0.175082,-0.348239,-0.0751422}
,
{-0.0841883,0.0506344,-0.267617,0.167392,-0.10233,-0.104815}
,
{-0.265862,0.587707,-0.13739,0.108675,-0.637257,-0.202556}
,
{-0.0221439,0.109176,0.150991,0.0450885,-0.0951126,-0.0624976}
,
{-0.00774425,0.0238809,0.0502823,0.0563776,-0.0587431,-0.0728568}
,
{-0.0536117,0.0157911,-0.015899,0.0792477,0.111273,0.0336994}
,
{0.034029,0.130322,-0.123029,0.0796277,-0.13438,0.143699}
,
{-0.0400277,0.109109,-0.0905022,-0.240731,0.0883743,0.0702624}
,
{-0.094035,0.0731857,-0.162958,0.0862424,-0.0751394,-0.0595449}
,
{0.117836,-0.108353,0.214641,-0.163233,0.0260423,-0.0744281}
,
{-0.00613207,0.0103415,0.00873227,0.128155,-0.0170941,-0.0193189}
,
{-0.124319,0.0209638,-0.0623764,-0.0593061,-0.0672495,0.183675}
,
{0.076842,-0.00658889,-0.00625697,0.0272982,-0.0115917,-0.016912}
,
{-0.05222,-0.110596,0.111925,-0.0878454,-0.2043,-0.0876023}
,
{-0.030945,0.0109567,-0.0304949,0.0962949,0.0465527,0.0831486}
,
{0.0222994,-0.0279202,0.196002,0.258898,-0.145356,0.0505727}
,
{-0.144465,0.110965,0.0224314,0.0839131,0.0143443,0.103604}
,
{0.0643148,-0.000653263,-0.0226305,-0.0550125,0.185661,0.057101}
,
{0.0953144,-0.0631154,0.186063,0.119047,0.100093,0.121721}
,
{0.034104,0.0774883,-0.128511,-0.0989499,0.103959,-0.135663}
,
{-0.0264036,-0.00686058,0.142558,0.124528,-0.0487765,0.098043}
,
{0.00143807,-0.0143587,-0.169927,-0.122907,-0.0566602,-0.0538739}
,
{-0.00515737,-0.00782102,0.0941268,0.0341038,-0.0707903,-0.0407431}
,
{0.0462837,-0.0724024,-0.0794019,0.125501,-0.0178297,0.136751}
,
{0.0234467,-0.0509978,0.0713518,-0.156344,0.0892818,-0.0315212}
,
{0.250518,-0.0553179,0.247307,-0.156162,0.040641,-0.251575}
,
{0.0664202,0.111979,0.00197691,-0.0297591,-0.00526867,-0.175558}
,
{-0.0188766,0.00392227,-0.0342058,0.0293714,-0.0441911,-0.0232534}
,
{-0.208637,-0.146998,-0.13965,-0.0565806,-0.045242,0.0217488}
,
{0.15069,0.0142144,0.0659065,0.0567246,0.0155809,-0.091874}
,
{-0.0820194,0.148486,-0.0876274,-0.0764905,-0.215027,-0.0944918}
,
{-0.17263,0.0469708,0.532842,-0.370028,-0.801615,0.395653}
,
{0.0670281,-0.0104845,-0.000442084,-0.0837608,0.0383336,-0.0291981}
,
{0.00192171,0.00724885,0.110087,-0.121338,0.0719628,0.0502939}
,
{0.090064,-0.0550691,0.0133739,0.00919688,0.0695526,-0.0878175}
,
{-0.032253,0.0457995,-0.0288178,0.0441059,0.000574124,-0.0344571}
,
{0.0964325,-0.246128,-0.409299,0.306136,-0.817921,0.630987}
,
{-0.0823817,0.0108822,0.142968,9.14096e-05,0.181006,0.0536563}
,
{0.007524,0.144855,-0.157244,-0.0216086,-0.0322827,0.116202}
,
{0.0243599,0.0197861,0.0596337,0.0221787,0.102043,-0.201214}
,
{-0.113726,-0.157214,-0.0125721,-0.153097,-0.145628,-0.090076}
,
{0.380395,-0.115469,-0.147534,-0.151997,0.711097,-0.0388321}
,
{-0.0319952,-0.020328,0.0343608,0.0856177,-0.0836808,0.0995317}
,
{0.0954286,0.0527832,-0.193129,0.0503614,0.0580915,-0.0540853}
,
{0.0179769,-0.0218404,0.110913,0.0498952,-0.0380664,0.0110366}
,
{-0.0147498,-0.0234157,0.0967748,0.0149736,0.0256531,0.132335}
,
{0.323503,0.313228,0.241246,0.496147,0.0412779,0.047325}
,
{-0.117953,0.0156006,-0.0988185,0.0422358,-0.0765323,-0.047724}
,
{0.326144,-0.199294,0.0512053,-0.0533606,-0.0348471,0.0113517}
,
{-0.0413101,0.13819,0.103556,0.0512447,-0.0428131,-0.000650612}
,
{0.167031,0.0739618,-0.161678,0.0468202,0.220719,-0.0144159}
,
{-0.327587,0.680083,-0.0409079,0.287503,-0.0959787,0.00962989}
,
{-0.0333306,0.19724,-0.4155,-0.168261,-0.396225,-0.10841}
 };
  static const float bias2[1] = { 0.0709182 };
  static const float weights2[][1] = { {0.00932158}
,
{0.0290924}
,
{0.0123937}
,
{-0.0183142}
,
{-0.015437}
,
{0.0179235}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_2_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_2_57(v, index);
}
static int assign_gen_lepton_prior_12_2_57() {
  global_gen_lepton_prior.at(12,2,57) = &specialized_gen_lepton_prior_12_2_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_2_57 = assign_gen_lepton_prior_12_2_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_2_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.356537,-0.187815,-0.00591528,-0.471824,-0.202973,-0.19132 };
  static const float weights1[][6] = { {0.573196,0.112089,-0.0618046,-0.150448,0.472885,-0.126804}
,
{0.471625,-0.196925,0.16482,0.377224,-0.494351,-0.363963}
,
{-0.640657,-0.172145,0.252929,0.305533,0.518682,-0.665516}
,
{0.360986,-2.02567,0.783652,0.302448,-2.17772,-1.19816}
,
{-0.395124,-0.0839167,0.0314574,-0.375664,-0.0620781,-0.0223676}
,
{-0.588664,-0.120123,-0.238075,-0.195893,-0.244843,0.0242696}
,
{-0.157342,0.103225,-0.180641,-0.611891,-0.0629509,0.0312529}
,
{0.0279747,0.030386,-0.082497,-0.0594772,-0.194946,-0.0708414}
,
{0.970913,0.710823,-0.378088,-0.32366,0.618661,0.0995664}
,
{0.191895,-0.0157086,-0.0081297,0.0217895,0.0759468,-0.0748531}
,
{0.0614388,0.200993,-0.0759667,0.0803788,-0.249445,-0.0272977}
,
{0.0873933,0.124836,-0.00499468,-0.0945323,-0.0888623,-0.150192}
,
{-0.355535,-0.0157801,-0.147893,-0.331297,-0.084255,0.00768271}
,
{0.164494,0.0351219,-0.0388292,-0.281345,0.0278814,-0.00818777}
,
{-0.174249,-0.0479116,0.061388,0.0495147,-0.0447096,0.123741}
,
{0.174827,0.358395,-0.186995,-0.00722978,-0.0104333,0.0426845}
,
{0.0971261,0.0481761,0.018571,-0.081645,0.132135,-0.0451103}
,
{0.316698,0.44578,0.0474722,-0.425707,-0.0367364,-0.438442}
,
{-0.138162,0.00701874,-0.219174,0.0178644,-0.156658,-0.205698}
,
{0.0386828,0.237287,-0.119912,-0.137312,-0.0726821,-0.232572}
,
{-0.113849,0.164023,-0.257886,0.228119,-0.0366536,-0.223635}
,
{-0.0521368,-0.0215402,-0.211293,0.0647541,-0.0765561,-0.326138}
,
{-0.164285,-0.144977,0.129568,0.00762553,-0.144953,-0.070715}
,
{0.0354408,-0.0225979,-0.185802,-0.0417435,0.153063,-0.0341266}
,
{-0.420407,0.441452,0.032454,0.249639,-0.0321086,-0.481365}
,
{-0.717135,-0.383769,-0.234424,0.335975,0.105759,-0.172909}
,
{-0.0769157,0.0933992,-0.340448,-0.0951507,-0.185878,0.459479}
,
{0.0806062,-0.273328,-0.192371,0.0374944,0.287416,0.0168763}
,
{-0.4145,-0.288743,-0.395877,1.30164,-0.4942,0.20026}
,
{-0.0367095,-0.0754739,0.076341,-0.0315047,-0.050516,-0.100545}
,
{-0.011408,0.0670272,0.0555543,0.0848534,-0.00739228,-0.198147}
,
{-0.0269206,0.0601275,-0.069958,0.23015,0.0471552,-0.0627015}
,
{-0.00575405,0.00343946,0.126219,0.0382312,0.0620155,0.126686}
,
{-0.0579623,-0.0563899,-0.112089,0.0122595,-0.0913951,-0.0878754}
,
{0.0947954,-0.0730215,-0.146815,-0.0226065,-0.0416215,-0.0612147}
,
{-0.0452985,0.0323223,-0.0114166,-0.0540435,0.0490239,-0.065367}
,
{0.0210145,0.0135994,0.107585,-0.0976113,-0.153327,0.0686475}
,
{0.00067543,0.000913211,0.0155267,-0.020699,-0.0505393,-0.00188704}
,
{-0.00905268,0.00314478,0.0782822,0.0560252,0.0512059,0.0455994}
,
{0.161769,0.0663618,-0.0345512,-0.0196986,0.0616223,0.037347}
,
{-0.135113,-0.0396028,0.00635978,0.0465037,-0.0627265,-0.0357454}
,
{0.0407862,-0.0493875,-0.055235,-0.0157183,-0.048111,-0.0695712}
,
{-0.035472,0.00489624,0.199298,-0.0415448,-0.0473761,0.170113}
,
{0.0841965,-0.0477197,0.00981142,0.164733,0.162573,0.000155395}
,
{-0.0662243,0.0755507,0.0863449,0.0302931,-0.00238534,-0.137787}
,
{0.0206077,-0.0520669,0.0173633,0.0803836,0.117308,0.220535}
,
{0.0311423,-0.0387521,0.112218,0.0124539,0.0761765,0.0784594}
,
{0.0427423,-0.0213637,0.104169,-0.0395287,-0.0261247,0.0985007}
,
{-0.0140556,0.0662265,-0.00731885,0.0931021,0.0393448,0.049532}
,
{-0.0647556,-0.0496104,-0.0722548,-0.183016,0.147349,-0.0308603}
,
{0.111832,-0.00032782,0.0454486,0.0628618,-0.237608,0.00290587}
,
{0.0605358,-0.0863145,-0.0522368,-0.0665097,0.00817072,-0.0497931}
,
{0.0303939,-0.0273889,-0.0289349,-0.0480616,-0.0139019,-0.0249384}
,
{-0.00631153,-0.0503075,-0.0360087,-0.135694,0.0355894,-0.0558848}
,
{-0.33214,-0.0599163,-0.156202,-0.442113,-0.152569,-0.0704053}
,
{-0.0235771,0.00717437,-0.212119,-0.0998311,-0.0364352,0.0569023}
,
{-0.108133,-0.0435239,-0.0220335,-0.417012,-0.0413692,-0.247957}
,
{0.142585,-0.0225401,-0.130876,-0.1069,-0.228044,-0.16585}
,
{0.240121,0.122353,-0.278929,0.27278,0.0365323,0.145279}
,
{-0.122619,0.086293,-0.159379,0.00285265,0.122576,0.0213332}
,
{-0.0599758,0.0190766,-0.169928,0.121575,-0.0724567,-0.217977}
,
{-0.0328089,-0.0727024,0.200124,0.0995407,-0.080202,-0.103245}
,
{-0.290754,0.0223344,-0.0726309,-0.115932,0.0957306,-0.0696269}
,
{1.34802,0.048009,-0.127434,0.269596,-0.064125,0.0815001}
,
{0.120809,-0.0372736,0.02251,-0.0965117,-0.048265,-0.207488}
,
{0.00568308,-0.139865,-0.0877964,0.167265,0.0570075,-0.0629966}
,
{0.0718032,0.135217,-0.0907492,0.114889,-0.13953,-0.282378}
,
{0.0661236,-0.0302863,0.0238099,0.0766223,0.0287985,0.070392}
,
{-0.575753,0.271644,0.43242,0.168564,-0.130713,-0.798164}
,
{-0.292408,-0.0737851,0.0351314,-0.15186,0.0108479,-0.259689}
,
{-0.0290027,0.0392393,0.087919,-0.156313,0.0652704,0.0256557}
,
{0.000493492,0.02821,-0.000740658,-0.315305,-0.109367,-0.213274}
,
{0.132867,-0.051415,-0.0762217,0.185105,0.060523,-0.298231}
,
{-0.391334,0.0985157,0.0436647,0.289605,0.396863,-0.720148}
,
{0.231253,-0.16834,0.31281,-0.450785,0.757213,0.205734}
,
{0.144343,-0.366436,0.140642,-0.615378,0.778401,0.413143}
,
{0.134858,-0.525622,0.454794,-0.363844,0.858001,0.315352}
,
{-0.0586575,0.0433746,-0.118375,-0.0245047,-0.70552,-0.221189}
,
{1.84711,-2.65874,0.484635,-1.20041,-0.348653,1.26734}
 };
  static const float bias2[1] = { 0.0325821 };
  static const float weights2[][1] = { {0.0366725}
,
{0.0287352}
,
{0.0470845}
,
{-0.0223171}
,
{0.0217173}
,
{-0.0541435}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_2_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_2_58(v, index);
}
static int assign_gen_lepton_prior_12_2_58() {
  global_gen_lepton_prior.at(12,2,58) = &specialized_gen_lepton_prior_12_2_58;
  return 0;
}
static int initialize_gen_lepton_prior_12_2_58 = assign_gen_lepton_prior_12_2_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_3_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.421393,-0.138781,-0.185642,0.0717138,-0.344177,0.00949214 };
  static const float weights1[][6] = { {0.381273,0.0733295,0.211462,0.00537385,-0.423518,-0.29774}
,
{0.0133722,-0.0728117,-0.87172,0.749406,-0.595625,0.228234}
,
{0.428841,-0.575663,0.129651,0.340334,-0.140887,0.156241}
,
{0.501503,-0.870764,-0.803304,0.152572,-0.469126,-0.81037}
,
{-0.454852,-0.136035,-0.374672,0.113445,-0.383372,-0.0194502}
,
{-0.422723,-0.175895,0.00724965,-0.12123,-0.263574,0.121813}
,
{-0.361846,-0.0207943,-0.266992,0.144083,-0.382788,0.083611}
,
{0.361203,-0.120207,-0.297427,0.00412206,-0.0122934,0.030418}
,
{0.607183,-0.0337081,0.742232,-0.18264,-0.100228,-0.130369}
,
{-0.232192,0.019789,-0.0147565,0.169195,-0.0391152,0.158164}
,
{0.105592,0.198128,0.0739586,-0.0490011,0.0529259,0.0814235}
,
{-0.117032,-0.0643766,0.115024,0.159488,0.241422,-0.0530759}
,
{-0.350648,0.0329949,-0.0276561,-0.174353,0.0166481,-0.280641}
,
{0.193314,-0.0975817,0.172457,-0.105037,-0.0430391,-0.155881}
,
{-0.148573,-0.040285,0.0448861,-0.0732581,0.0723703,-0.0908734}
,
{0.504259,0.102174,0.185548,-0.430786,0.0818689,-0.316769}
,
{0.10277,-0.217776,0.107608,-0.207088,-0.274881,-0.179725}
,
{-0.421653,0.00614327,0.142873,0.0698419,-0.167179,0.0308016}
,
{-0.287566,-0.150131,-0.232791,-0.0651471,-0.0818541,-0.226249}
,
{0.0850557,-0.125736,0.0316436,-0.339903,-0.128557,-0.292058}
,
{0.00181782,-0.214987,-0.0341913,-0.272109,-0.33591,-0.088885}
,
{0.0133906,0.137668,-0.150695,-0.119529,-0.12037,-0.241523}
,
{0.0721608,0.193397,-0.225856,0.0404026,0.122776,0.00117962}
,
{0.00825346,-0.0728892,0.00776102,-0.0664654,-0.286478,0.137179}
,
{-0.0636343,0.106608,-0.256616,-0.14517,0.212445,0.212287}
,
{-0.0218344,0.106335,-0.152533,0.0736426,0.0628991,0.252104}
,
{-0.0425924,-0.084069,0.0405934,0.0051632,-0.310894,0.124637}
,
{0.0251667,-0.11189,0.0577798,0.0761121,-0.182316,0.0476608}
,
{1.30827,-0.32387,-0.0296984,0.175029,-0.396552,-0.176034}
,
{-0.187979,-0.024714,-0.0237576,-0.136026,0.147366,0.0885816}
,
{-0.0764565,-0.143533,-0.0350644,-0.0863665,-0.0129522,-0.0339287}
,
{0.0904527,-0.373711,-0.0746527,-0.175143,0.19023,0.0114354}
,
{0.187214,0.22667,-0.228211,-0.242476,0.148287,0.0245172}
,
{0.100465,0.0789236,-0.0724156,-0.00445226,-0.0890574,0.0615419}
,
{-0.0865572,-0.0192446,0.0137081,0.00024249,0.220998,-0.0682339}
,
{0.072424,0.0919774,-0.0611025,-0.112787,-0.223572,-0.124398}
,
{0.113501,-0.0294551,-0.0922237,0.150696,0.209172,0.0894014}
,
{-0.0665948,-0.0184341,0.111558,0.066892,-0.0369828,0.183377}
,
{0.00351996,-0.0871541,0.00156044,-0.0383433,-0.012543,-0.0972}
,
{0.0922775,-0.0253111,0.0108298,0.0466429,-0.0296921,-0.0806831}
,
{-0.0591222,-0.0705972,0.0254147,-0.0745086,0.122486,0.137649}
,
{0.00884009,0.041478,-0.00188305,0.0104152,0.214545,0.0133198}
,
{-0.0163804,-0.0215757,-0.0291394,0.00910971,-0.0592873,-0.0850853}
,
{-0.028833,0.101269,-0.0187291,0.0979484,-0.0426098,-0.0964638}
,
{0.0264344,0.185611,-0.199149,0.0345616,0.0954332,0.0261464}
,
{0.0750795,-0.0126833,0.114642,0.137048,0.080347,0.0467686}
,
{0.00177671,-0.0379247,-0.0255063,-0.172775,-0.012719,-0.113841}
,
{-0.102834,-0.0941437,0.0796993,-0.110964,-0.0293394,0.17196}
,
{0.0190303,-0.0943863,0.00363253,-0.112529,-0.0157868,0.0591832}
,
{0.0369177,0.0299041,0.0130402,-0.0958313,-0.0659847,-0.118082}
,
{0.0690744,-0.127902,0.107217,0.0193611,0.0320771,0.123434}
,
{-0.0224826,0.149929,-0.0127257,0.0902836,0.142893,-0.0893581}
,
{-0.113689,0.0490539,-0.111301,-0.0227844,-0.0998467,-0.17546}
,
{0.0196935,-0.119567,0.0125285,-0.0811604,0.0147036,0.0879612}
,
{0.102299,0.184526,0.0453307,0.20053,0.0145374,0.0894578}
,
{-0.0590134,-0.108032,-0.00403618,-0.0953903,-0.0322262,0.103123}
,
{0.0379099,0.0083619,-0.0305258,-0.113936,-0.0535162,0.0536989}
,
{-1.05869,0.180629,-0.537588,-0.148862,0.810031,-0.0948566}
,
{0.0441122,-0.26652,0.0370734,-0.095637,-0.0774446,-0.166453}
,
{0.145589,-0.213836,0.0246994,-0.0925246,-0.0831349,-0.12994}
,
{-0.0890855,0.0578376,0.0152414,-0.0399188,0.135605,-0.0352555}
,
{-0.116961,0.0554191,-0.043784,0.00981121,-0.164289,0.00472369}
,
{-0.630323,-0.490133,0.516981,-0.163178,-0.125337,-0.376272}
,
{-0.104198,0.11099,-0.0660674,0.0246172,-0.0540097,-0.0799302}
,
{0.0494512,0.127242,0.0612606,0.265598,0.0408029,0.170001}
,
{-0.0744373,-0.162653,0.0659197,0.0224021,-0.117369,0.0152476}
,
{0.135178,0.0209638,-0.02127,0.0155101,0.133698,-0.14222}
,
{-0.317681,-0.106637,-0.367805,0.475377,0.0232715,1.1099}
,
{0.0753805,0.0193318,-0.0381166,0.0553284,-0.0687833,0.143307}
,
{-0.0283461,-0.0652177,-0.108608,-0.147825,0.0509718,0.110763}
,
{0.00433263,-0.0238951,-0.0548152,-0.0285697,0.0274514,-0.0733129}
,
{-0.0989926,0.103323,0.081443,-0.0988836,-0.0624901,-0.0939657}
,
{-0.0318239,-0.546941,-0.451229,0.480775,0.254311,-0.640533}
,
{-0.0672484,0.0704931,0.0100308,0.00406667,0.154091,-0.13196}
,
{0.0893335,-0.134081,-0.0434179,-0.0985653,-0.0765171,-0.091469}
,
{0.108969,-0.264867,0.0105628,-0.0430615,-0.258988,0.0932387}
,
{-0.145926,-0.13051,0.216069,-0.114388,-0.217137,-0.0332426}
,
{-0.0491915,-0.0719796,0.103028,-0.00908394,-0.198448,0.0629078}
,
{0.354182,-0.337763,0.00841349,0.185563,1.04023,0.717339}
 };
  static const float bias2[1] = { 0.21685 };
  static const float weights2[][1] = { {0.031929}
,
{0.0144571}
,
{0.0356746}
,
{-0.0195909}
,
{0.0156262}
,
{-0.0153965}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_3_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_3_57(v, index);
}
static int assign_gen_lepton_prior_12_3_57() {
  global_gen_lepton_prior.at(12,3,57) = &specialized_gen_lepton_prior_12_3_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_3_57 = assign_gen_lepton_prior_12_3_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_3_58(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.203762,-0.166557,-0.669997,-0.404883,-0.0690112,0.522593 };
  static const float weights1[][6] = { {0.0998684,0.0603676,-0.0269457,-0.0430888,-0.0163486,0.0848356}
,
{0.478607,-0.554792,-0.0251734,-0.283449,0.143918,0.0751105}
,
{0.44862,-0.792909,0.586849,0.253161,0.182668,-0.121588}
,
{-1.1621,0.214798,-0.342837,-0.0645601,-0.035557,0.0372473}
,
{-0.352348,-0.254952,-0.609172,-0.489286,-0.0346502,0.491805}
,
{-0.0397701,-0.301819,-0.691492,-0.390331,-0.157344,0.436413}
,
{-0.0446202,-0.302641,-0.702299,-0.481917,-0.200786,0.530972}
,
{0.422811,-0.0758051,-0.113734,0.078407,0.132091,-0.0132064}
,
{0.283004,-0.171484,1.05017,0.234233,-0.200221,-0.0754698}
,
{0.242349,-0.0983185,-0.0226809,-0.248816,0.057617,-0.210088}
,
{0.0116756,-0.0130965,0.199341,-0.0536292,0.0363388,-0.194153}
,
{-0.0482222,-0.0780087,0.0713203,0.091258,-0.0560208,0.0639699}
,
{-0.0144718,0.0726001,-0.316774,-0.136357,-0.0480383,-0.0880709}
,
{0.0171102,-0.453724,-0.0885342,-0.0227996,-0.0460362,0.257928}
,
{-0.173508,-0.0471431,0.0942507,0.113243,0.187329,-0.208119}
,
{0.142556,-0.386283,0.461311,-0.0450798,-0.273476,-0.247612}
,
{0.0639005,-0.401261,0.212106,0.158014,-0.230688,-0.122715}
,
{0.200508,-0.190327,0.609389,-0.166378,-0.0246433,0.288381}
,
{-0.303875,-0.0516846,-0.10452,0.0385764,-0.258455,0.0325533}
,
{0.0707005,-0.344371,0.21666,0.0658182,-0.0239073,-0.0317333}
,
{-0.110909,-0.409461,0.143421,0.0845685,-0.120101,0.0472968}
,
{-0.165616,0.168732,-0.139258,-0.128928,-0.370798,-0.194537}
,
{0.078328,-0.060723,0.10005,-0.039372,-0.0301668,0.138964}
,
{0.219831,-0.077009,0.0173686,0.0470348,0.0119256,0.136499}
,
{-0.173369,-0.1982,-0.175497,-0.161467,-0.134831,0.278323}
,
{0.0407553,-0.18451,-0.228303,-0.176319,-0.160943,0.111646}
,
{-0.395566,-0.109178,-0.216038,-0.516037,0.0693648,0.328759}
,
{0.13248,-0.401235,-0.15822,0.448191,0.028111,0.191875}
,
{-0.606668,-0.224865,0.0206225,-0.317196,0.144257,0.824264}
,
{0.23908,0.0207709,0.165489,-0.00244714,0.000830975,0.0513649}
,
{0.196077,-0.179236,0.0936145,-0.119122,0.00729366,0.116982}
,
{0.112677,-0.0895023,-0.0883578,-0.0949515,0.225156,-0.122925}
,
{0.029434,-0.0422872,0.00100106,-0.100127,-0.00442584,-0.0300812}
,
{-0.173345,0.102773,0.0448648,0.237733,-0.11522,-0.111445}
,
{0.0255769,0.0912205,0.119742,0.0887786,-0.0694559,0.192319}
,
{-0.0151124,0.177941,-0.0751656,0.0145936,-0.00970942,-0.0966818}
,
{0.109152,-0.116493,-0.0971178,-0.0801921,0.14338,-0.170505}
,
{-0.0171178,0.0571262,-0.00239838,-0.002715,0.0126445,-0.00985675}
,
{0.115748,-0.14887,-0.0293292,-0.135938,0.0521518,-0.0559688}
,
{-0.074954,-0.0638561,0.167872,0.0928562,-0.185932,-0.0623062}
,
{0.0784741,-0.0353339,-0.135139,-0.140987,0.0278956,0.127947}
,
{0.0391348,0.101859,0.0425598,-0.0331092,0.0311278,0.0485813}
,
{0.00101341,0.000823573,-0.000259551,-0.000160322,0.0211818,0.0287922}
,
{-0.00967545,0.150802,-0.0161217,0.0234957,-0.0787823,0.00219147}
,
{-0.0305503,-0.0090501,-0.132073,0.0223635,0.0914849,0.0584226}
,
{0.0405087,0.109936,0.124154,0.0012915,0.0251782,-0.070311}
,
{0.0578681,0.189731,-0.00177314,0.153984,-0.122591,0.107129}
,
{0.0290218,0.0567138,-0.00204572,0.0364396,8.35932e-05,0.021742}
,
{-0.0249937,0.226951,-0.0184471,-0.0476473,-0.0417719,-0.106575}
,
{-0.0558328,-0.0889812,0.00350535,-0.105216,-0.101637,0.0181412}
,
{0.0387202,0.0660196,-0.0197288,0.0901618,0.158528,-0.0615662}
,
{0.0281383,0.168993,-0.0217571,-0.177284,0.212597,-0.0773938}
,
{-0.0373591,-0.0399962,-0.00509331,0.0140437,-0.0251515,-0.0407354}
,
{0.0411319,-0.156049,0.0324005,-0.146734,0.102762,0.015352}
,
{0.0058875,0.0438409,-0.0558222,-0.177846,0.0484018,-0.00685108}
,
{-0.166642,-0.120611,0.0675264,-0.108319,-0.063088,0.0326556}
,
{0.0910257,-0.090028,-0.0296223,0.0585373,0.0528654,0.0167552}
,
{0.117309,-0.00443547,0.110644,0.264136,0.0276157,0.376194}
,
{-0.600615,0.250741,0.0910978,0.0175135,-0.0411444,0.00753846}
,
{0.0534614,0.0876557,0.0280652,0.265334,0.0612658,-0.0923536}
,
{0.157961,-0.0655315,-0.0267111,-0.0421538,-0.185808,0.170471}
,
{-0.124698,-0.145956,-0.0501093,0.14999,0.00318619,0.0812123}
,
{0.183033,0.0269449,-0.101482,0.155189,-0.0420914,0.217657}
,
{-0.898385,-0.725909,0.122754,-0.486388,0.026519,0.886156}
,
{-0.101969,0.0681414,0.0205468,-0.330948,-0.0671922,-0.185483}
,
{-0.19799,0.103267,0.116003,-0.322768,0.0347685,-0.0749379}
,
{0.0648307,-0.0635668,-0.0967716,-0.191237,0.108032,-0.260084}
,
{0.0226226,-0.0580015,-0.00134074,0.0324936,0.114013,0.224832}
,
{-0.571531,0.448594,-0.0260824,-0.0507908,0.0479427,0.687958}
,
{0.211086,-0.227398,0.0620581,-0.000814019,-0.12261,0.036456}
,
{-0.0576895,-0.133868,-0.116601,0.0354776,-0.00354166,0.160995}
,
{-0.0395753,-0.151186,-0.0261954,0.090852,-0.0512951,-0.0145268}
,
{0.112472,-0.283419,0.0666629,-0.158484,-0.0762009,0.201993}
,
{0.485537,-0.0633033,-0.0559441,0.391002,0.179157,-0.604364}
,
{-0.553689,0.341904,-0.0660919,-0.854091,0.167669,0.407732}
,
{-0.730243,0.548728,-0.182298,-0.490739,-0.0857927,0.502134}
,
{-0.651773,0.636221,-0.158544,-0.555302,0.0650483,0.397964}
,
{0.02471,0.724637,-0.0209888,-0.108707,0.00868257,0.213823}
,
{-1.66046,2.52685,0.0945078,-2.07512,0.0876577,2.44773}
 };
  static const float bias2[1] = { 0.072746 };
  static const float weights2[][1] = { {0.0239509}
,
{-0.0289995}
,
{0.0424562}
,
{0.0197353}
,
{0.224229}
,
{-0.0417879}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_3_58(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_3_58(v, index);
}
static int assign_gen_lepton_prior_12_3_58() {
  global_gen_lepton_prior.at(12,3,58) = &specialized_gen_lepton_prior_12_3_58;
  return 0;
}
static int initialize_gen_lepton_prior_12_3_58 = assign_gen_lepton_prior_12_3_58();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_12_4_57(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.221764,-0.150134,0.614027,-0.0643816,0.130909,-0.119891 };
  static const float weights1[][6] = { {-0.055453,-0.409995,-0.0643934,0.190419,-0.364509,-0.332154}
,
{0.108332,-0.033554,-0.771805,-0.0890416,0.141922,0.206426}
,
{0.0336509,0.0947027,-0.247086,-0.023771,0.546422,-0.188245}
,
{0.0749077,-0.386808,1.8942,0.0753802,0.650208,-0.84176}
,
{-0.0137465,0.0516501,0.631767,-0.0733567,0.195161,-0.0238127}
,
{-0.291515,-0.275097,0.647069,-0.17927,0.259139,-0.142314}
,
{-0.368257,-0.18432,0.37334,-0.111722,-0.0214096,-0.12979}
,
{0.354975,-0.0715691,-0.0330751,-0.0632341,-0.028649,-0.309444}
,
{-0.388654,-0.0404601,0.490262,-0.281282,-0.0550059,-0.000768823}
,
{-0.242231,-0.13687,0.0822104,-7.1614e-05,-0.131489,-0.11472}
,
{0.206517,0.0322211,0.0646396,-0.0767193,0.063447,0.0595994}
,
{0.084477,0.0250994,-0.0570624,-0.142788,-0.117525,-0.0575547}
,
{0.131092,-0.105312,-0.206651,-0.101551,-0.0759175,0.0525794}
,
{-0.0210896,-0.147732,-0.123186,-0.191086,0.0717352,0.0346369}
,
{0.235807,-0.0433205,-0.082875,-0.0799626,-0.0661798,-0.132854}
,
{0.115533,-0.106965,-0.155462,-0.181103,0.0418736,0.140843}
,
{0.169296,-0.334119,0.214606,-0.128978,0.0107334,0.138787}
,
{-0.130126,-0.162924,0.427471,-0.0258165,0.0810529,-0.137107}
,
{-0.268494,-0.0102404,0.139714,0.00764395,-0.0095989,-0.187346}
,
{0.153902,-0.0958588,-0.096074,-0.0714688,-0.00795338,0.0801375}
,
{0.0873813,-0.050102,-0.0468806,-0.0446916,0.0230351,0.0331069}
,
{0.00415005,-0.126092,-0.0802416,-0.128985,0.0141985,0.0413356}
,
{-0.136983,-0.0599511,0.0444041,0.0587738,0.2212,-0.226953}
,
{0.0877562,-0.115701,0.116679,-0.058296,-0.170201,0.0317305}
,
{0.0421167,-0.274109,0.0535138,0.0760335,-0.24943,-0.0815537}
,
{0.0257277,0.0534664,0.012547,-0.0887491,-0.0538705,-0.0533872}
,
{0.321817,-0.194126,-0.0354189,0.0329192,0.0123152,-0.0872523}
,
{-0.116419,-0.00265048,0.136033,-0.234375,-0.108503,-0.101953}
,
{-1.04155,-0.265666,0.717749,0.237564,-0.179382,-0.324828}
,
{0.240918,-0.0757397,-0.0316867,0.16578,0.205585,0.00521523}
,
{0.0229797,-0.178235,0.166281,0.234707,-0.125615,0.0671065}
,
{0.0202142,0.110238,0.00698138,0.0976925,0.0850569,-0.0422976}
,
{-0.0847302,0.0408158,-0.00222119,-0.124259,-0.152945,-0.0602782}
,
{0.0462604,-0.123214,-0.072184,-0.0292722,0.0766527,0.0402894}
,
{-0.000522826,-0.152911,0.24,-0.166699,-0.0944323,0.178883}
,
{0.10146,-0.124686,0.0209381,-0.18397,-0.0350017,0.0166699}
,
{0.00218323,0.0901158,-0.0853081,0.0716919,0.0944569,-0.0576086}
,
{-0.0720654,-0.121539,-0.0557677,0.0185805,-0.0539804,-0.0824831}
,
{-0.0129592,0.12465,-0.0416569,0.0927237,0.153397,-0.00349018}
,
{-0.0506099,0.0951159,-0.145361,0.201312,0.104743,-0.107052}
,
{-0.108833,0.178295,-0.100136,-0.13435,-0.132093,0.0755057}
,
{-0.11056,-0.0217088,-0.421539,-0.064343,0.262682,-0.0838195}
,
{0.0689967,-0.0358071,-0.000338609,0.129923,0.0643273,-0.0510398}
,
{-0.0534759,0.032903,-0.161286,0.0117026,0.105589,-0.0272757}
,
{-0.0531359,0.0147397,0.130903,0.068513,0.0832192,-0.052793}
,
{0.103334,0.132065,-0.0137621,0.0391797,0.054951,0.114302}
,
{-0.0655285,0.0246902,-0.190556,-0.000883079,-0.0105204,-0.078356}
,
{0.0175508,0.115997,0.0906389,0.12218,0.0710766,0.00112928}
,
{0.00658347,-0.0928862,-0.000528667,-0.0863941,-0.0217901,-0.0053949}
,
{-0.0378003,0.0671858,0.0530199,0.0348951,0.0650107,0.0188965}
,
{-0.0706377,-0.0956188,-0.0547811,0.0623655,-0.0549068,-0.098829}
,
{0.0280349,-0.091553,0.0197282,-0.0750234,0.0782682,0.073387}
,
{0.103962,0.121755,-0.00694758,-0.0190164,0.0683221,0.0767952}
,
{0.0357027,-0.0344824,0.104117,-0.0145655,-0.0800792,0.0142444}
,
{-0.034704,0.0865033,0.0228345,0.1637,0.21394,0.0884057}
,
{-0.0190637,0.11254,0.0250499,0.0324006,0.0178042,0.0343819}
,
{-0.0171761,-0.0363993,-0.171479,0.0861209,0.241721,-0.0580228}
,
{0.956478,0.54145,-1.20312,-0.177203,0.104972,0.600371}
,
{0.0677924,0.109381,0.091063,0.102141,0.0985891,-0.0588761}
,
{-0.0722431,0.0436564,0.108128,-0.050985,0.165013,-0.0676147}
,
{0.0829807,-0.129216,0.112651,-0.0151139,-0.110143,0.178363}
,
{0.0631443,0.0425688,-0.0164391,0.0572791,0.21653,0.146474}
,
{-0.0985132,-0.479166,0.470654,0.788664,-0.517722,-0.474098}
,
{-0.101545,0.16656,-0.158036,0.135885,0.114224,0.248717}
,
{0.140565,0.070422,-0.0136392,-0.0131499,-0.0510925,0.114588}
,
{-0.230291,-0.0118533,0.241521,0.0956033,-0.00939343,0.143339}
,
{0.0878816,-0.0366042,0.0740932,-0.0537424,0.123037,-0.161981}
,
{-0.15022,-0.136805,0.393213,0.311368,-0.157033,-0.56385}
,
{0.0325587,-0.0526965,-0.310722,-0.0829894,0.28593,-0.15976}
,
{0.0829959,-0.0316814,-0.102727,0.0668023,0.00276983,-0.00138038}
,
{-0.231935,0.058371,0.0571605,0.13012,-0.306596,0.0620216}
,
{0.174438,0.105287,-0.189605,0.0172252,0.0322195,0.0427483}
,
{0.46012,-0.0221841,0.324379,-0.232711,-0.26018,-0.141959}
,
{-0.137007,-0.0219024,-0.0367612,0.0170755,0.374438,-0.0191741}
,
{-0.0924267,0.0665348,0.0390016,0.0240421,-0.162927,0.1432}
,
{0.00411141,-0.0407592,-0.19325,-0.197639,-0.114344,0.0940982}
,
{-0.171079,0.191854,0.0625981,0.110303,0.07255,-0.00813605}
,
{0.128054,-0.141338,0.116912,0.0155274,0.0289094,-0.106118}
,
{0.106245,0.112012,-0.111298,-0.0258009,-0.63491,0.198053}
 };
  static const float bias2[1] = { 0.0815839 };
  static const float weights2[][1] = { {0.0513763}
,
{0.102049}
,
{-0.0176203}
,
{-0.109875}
,
{-0.0143668}
,
{0.0592976}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_12_4_57(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_12_4_57(v, index);
}
static int assign_gen_lepton_prior_12_4_57() {
  global_gen_lepton_prior.at(12,4,57) = &specialized_gen_lepton_prior_12_4_57;
  return 0;
}
static int initialize_gen_lepton_prior_12_4_57 = assign_gen_lepton_prior_12_4_57();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_17(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0852327,0.0,-0.0810001,0.0646496,0.216159,0.0915143 };
  static const float weights1[][6] = { {0.105022,-0.111832,0.133506,-0.0817691,-0.149953,0.0100564}
,
{0.225125,-0.111486,0.2649,0.145849,0.193887,-0.154789}
,
{-0.155764,-0.0466371,0.0894055,-0.150647,0.0285309,-0.0720601}
,
{-0.0179724,0.00890312,-0.00610715,0.0475633,0.176319,0.444748}
,
{0.113894,-0.114273,0.00228452,-0.0262356,-0.0166629,0.231256}
,
{-0.23155,-0.00844484,0.123389,0.140214,0.00300927,0.25707}
,
{-0.030207,-0.13363,0.113241,0.0862419,0.25338,0.0534101}
,
{-0.00671446,0.0378865,0.0121629,-0.0546239,-0.0665592,-0.133431}
,
{-0.0477777,-0.0571413,0.0886856,0.130962,0.0765999,-0.0850425}
,
{0.0538365,-0.226977,0.139054,0.0358132,-0.169523,-0.0916939}
,
{-0.136543,0.187176,0.0248947,-0.190259,0.0827316,-0.0523136}
,
{0.125024,-0.0839448,-0.0225592,-0.109534,0.0823172,0.0212695}
,
{0.106658,-0.133796,0.0477643,-0.194603,0.0981632,0.00757197}
,
{0.106987,-0.0431436,0.181792,0.177543,0.233429,0.0347403}
,
{0.140515,-0.0524578,-0.119666,-0.19206,0.176151,0.220276}
,
{0.217425,0.0570853,-0.0758576,-0.0527518,0.17946,0.0811574}
,
{0.0334424,-0.00511268,0.11431,0.102565,-0.0248776,-0.0655354}
,
{0.050607,0.121618,-0.0125741,0.0496208,-0.0278533,0.0450856}
,
{0.0481628,-0.230057,-0.111181,0.182564,0.175877,0.0209711}
,
{0.0174732,-0.0941644,0.0891708,0.157318,-0.133721,-0.0462978}
,
{-0.0190068,-0.0780786,0.0618734,-0.030119,-0.00196027,0.0738387}
,
{0.0423169,-0.136301,-0.0609345,-0.0386427,-0.030652,0.0251237}
,
{0.131586,-0.113909,-0.0346333,0.0348336,0.0878474,0.202957}
,
{0.0239989,-0.0626094,-0.0111997,-0.106744,0.0131661,0.167989}
,
{-0.0926561,-0.127794,0.172182,0.00227692,-0.045487,-0.133634}
,
{-0.0191316,0.0178444,0.0523778,0.0900976,0.0164848,0.0967769}
,
{0.0732307,0.100322,0.110161,0.0819468,-0.118599,-0.0872036}
,
{-0.110674,-0.110381,-0.0288093,-0.0617328,0.10764,0.0519387}
,
{-0.201321,-0.156706,0.0898666,-0.0805986,0.00511742,-0.221384}
,
{0.0136317,-0.0871705,-0.122983,-0.158525,0.130418,0.0937188}
,
{-0.0469774,0.0448942,0.14021,-0.00156074,0.0408433,0.02483}
,
{-0.12702,0.00503335,-0.0969818,-0.175473,-0.0954997,-0.0270388}
,
{-0.0724231,0.136118,-0.0748369,-0.020012,-0.0606619,0.00832211}
,
{-0.111652,0.191039,0.0628442,-0.0209143,0.143151,-0.0225514}
,
{0.12505,0.057732,0.0975973,0.106589,0.139221,-0.124716}
,
{-0.204289,-0.0172835,0.0651107,-0.220393,-0.0153209,0.0837795}
,
{-0.099848,-0.100863,-0.118389,0.269526,-0.340048,0.000624097}
,
{-0.100176,-0.0595218,-0.0797253,0.0137277,0.0239255,-0.0801963}
,
{0.0544272,-0.236223,-0.120324,-0.0247987,0.0581936,-0.0667543}
,
{0.0822096,0.180932,-0.220754,-0.425929,0.00555127,0.24792}
,
{-0.0227155,-0.0756111,0.0514533,-0.174891,0.116158,0.0858913}
,
{-0.0928795,0.147264,-0.097343,-0.209122,-0.247077,0.209458}
,
{-0.239013,-0.0342181,0.0659743,-0.329341,0.0503082,0.17217}
,
{-0.0358296,-0.00461734,0.139942,-0.0812273,0.284254,-0.0991578}
,
{0.0464377,-0.0345643,-0.0300255,-0.329797,0.183316,0.0357707}
,
{0.0264499,0.155248,-0.125286,0.0981528,-0.0475905,-0.0352155}
,
{-0.150382,0.179587,-0.175048,-0.3219,-0.0204562,0.277127}
,
{0.126794,0.101178,0.167965,0.0619553,0.132985,0.0424348}
,
{0.432865,-0.0465022,0.350192,1.00185,-0.0954894,-0.184368}
,
{0.129364,-0.047135,0.0520117,0.0759388,0.0169451,-0.0223703}
,
{0.0819921,0.0998649,-0.00821288,0.157466,0.0218196,-0.143026}
,
{-0.0123587,0.0591835,-0.128993,0.14281,-0.386878,0.131079}
,
{-0.0129344,0.160525,0.0631709,0.029974,0.0341573,0.102007}
,
{0.00239503,0.162547,-0.0332452,-0.00397363,0.18345,-0.0528128}
,
{0.0748613,0.0369872,0.234242,0.00572663,0.163982,0.0951955}
,
{-0.0249765,-0.117906,-0.0434833,0.220096,0.0200088,0.176553}
,
{0.0746602,-0.00489734,-0.0647735,0.235071,0.223965,-0.238517}
,
{0.0475362,0.102953,-0.10976,-0.125627,-0.176035,0.175804}
,
{-0.112692,-0.104087,-0.0481957,-0.0719066,0.0648261,-0.0961772}
,
{-0.0631446,0.0497032,-0.078175,-0.156948,-0.0507483,0.0860473}
,
{0.157576,0.210641,-0.0397144,-0.145844,-0.0510189,-0.0489047}
,
{-0.0913063,0.0602153,-0.109122,0.205195,0.151452,-0.117227}
,
{0.0772109,0.0135878,0.0815033,-0.106917,0.0874867,0.0738929}
,
{-0.0217597,0.0729699,-0.0460113,0.15232,0.171342,0.109117}
,
{-0.0607407,0.206667,-0.125487,-0.0612411,-0.0208283,-0.054874}
,
{-0.221369,0.0634021,0.0223388,0.0451704,0.0520389,-0.0679918}
,
{0.0346202,0.1912,0.221848,0.203959,-0.192535,0.233147}
,
{0.0618804,-0.147942,0.152672,-0.144774,-0.13407,0.0836422}
,
{0.0745008,-0.0335138,-0.116062,0.0198768,-0.0863303,-0.115634}
,
{0.0185024,0.119322,0.0799465,0.0287115,-0.0267513,0.206997}
,
{-0.00894087,0.10363,0.11334,0.111954,-0.0368366,0.0448855}
,
{0.0534445,0.21563,0.163067,-0.0752273,-0.0363182,0.0185275}
,
{0.118034,-0.10848,0.103836,0.0311189,-0.108795,-0.169127}
,
{0.0160468,0.105997,0.160178,-0.105937,0.042816,-0.0288564}
,
{0.0899615,-0.0484321,-0.108062,-0.0607657,0.0464737,-0.17978}
,
{0.0186336,0.130137,-0.0507201,0.119741,0.0108502,0.0922302}
,
{0.0710235,0.102124,0.0650799,0.1934,0.0915087,-0.0456622}
,
{0.0112115,0.12842,0.15748,-0.0321995,-0.0640729,-0.0664754}
,
{-0.0720446,0.121017,-0.0421428,-0.0582965,0.133563,-0.0567666}
 };
  static const float bias2[1] = { -0.0725691 };
  static const float weights2[][1] = { {0.0780766}
,
{0.117735}
,
{0.100952}
,
{-0.102628}
,
{-0.29793}
,
{-0.0590186}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_17(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_17(v, index);
}
static int assign_gen_lepton_prior_1_1_17() {
  global_gen_lepton_prior.at(1,1,17) = &specialized_gen_lepton_prior_1_1_17;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_17 = assign_gen_lepton_prior_1_1_17();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_14_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.184349,0.0549466,0.0563365,-0.0493326,0.0779258,-0.0699901 };
  static const float weights1[][6] = { {0.0426597,-0.0496199,-0.0885882,0.211293,0.0540614,-0.0118919}
,
{0.0221004,-0.096045,-0.17895,0.020975,0.0787373,-0.251831}
,
{0.121196,0.0864431,0.175083,-0.18289,0.174786,-0.123887}
,
{0.456542,0.231567,-0.0755593,0.182722,0.037426,0.0221874}
,
{0.111087,0.195149,-0.0503165,-0.142144,-0.0736839,-0.0345858}
,
{0.0184057,0.0346182,0.0889479,0.189629,0.236064,-0.242062}
,
{0.289966,0.0179578,0.106078,-0.234702,0.083299,-0.102221}
,
{0.084602,-0.0858582,0.134451,-0.165664,0.125421,-0.0804861}
,
{0.0628636,0.0314187,-0.00202288,-0.062117,0.216405,-0.187019}
,
{0.158611,-0.0381676,-0.0621669,-0.111566,-0.0309952,-0.12131}
,
{0.0810946,0.029413,0.126108,0.0491193,0.240338,-0.0463054}
,
{-0.114737,0.17473,0.201753,0.0320662,-0.0864713,0.160754}
,
{0.15293,-0.0347255,0.0415043,0.0710295,-0.116534,0.0465247}
,
{0.27221,0.119628,0.115863,-0.0939987,-0.0248326,-0.0497632}
,
{0.0563062,-0.00133928,-0.0436224,0.0991305,0.0380018,0.0597858}
,
{0.0219154,0.0956015,0.187105,0.180645,-0.149647,-0.110447}
,
{0.0235271,0.0797956,0.0467702,-0.0917254,0.0268798,-0.0919652}
,
{0.0991819,0.216675,-0.0404388,-0.0894472,0.0446596,-0.160878}
,
{0.224246,-0.0880876,0.0215634,-0.230385,0.0801229,-0.0062449}
,
{0.106643,0.198806,0.162154,0.020476,-0.126583,-0.195685}
,
{-0.0669998,0.203602,-0.0694041,0.105441,0.219759,-0.227288}
,
{0.102215,0.131179,-0.0133165,0.0443078,0.220609,-0.205711}
,
{-0.0357131,0.124972,-0.0326862,-0.000454688,-0.0254415,0.0335827}
,
{-0.149696,-0.0280861,-0.0339524,-0.0915415,-0.0208571,-0.0260993}
,
{0.0397426,0.125703,-0.166762,0.123297,0.106984,0.0421565}
,
{0.0399342,0.214725,0.17565,-0.235309,0.135873,0.0915442}
,
{0.0772609,0.0605955,0.167113,-0.147565,0.00666613,-0.143333}
,
{-0.0203055,0.181555,-0.0919658,-0.0616605,0.0585758,-0.221818}
,
{0.111847,0.0377727,-0.0845204,0.195062,0.0206701,0.0253141}
,
{0.113428,-0.0481337,0.113944,-0.0847537,0.123253,0.00382632}
,
{-0.188656,0.0183034,-0.120322,-0.00652152,0.136405,0.0550061}
,
{0.042577,-0.0962206,-0.0769374,0.00782219,-0.0335611,-0.10887}
,
{0.0372461,-0.0785647,0.016626,-0.20598,0.0680916,0.11228}
,
{0.0312861,0.129335,0.150995,-0.0498531,0.0485735,0.0732369}
,
{-0.15323,0.0999305,-0.0835797,0.124944,0.159934,0.00456904}
,
{-0.268633,-0.115788,0.0068953,0.08344,0.0294389,0.0429459}
,
{0.0508726,-0.0328227,-0.211828,0.0418844,0.0654715,-0.139615}
,
{0.206752,0.0615181,-0.0133497,0.0151504,0.0472541,-0.0470637}
,
{-0.0229755,-0.0330351,0.0327977,0.125394,-0.114064,-0.0532196}
,
{-0.0240886,-0.0590553,0.125531,0.114903,0.0441532,-0.138206}
,
{0.00654823,0.158543,0.00487809,0.0472448,0.0314008,-0.00375545}
,
{-0.0752857,0.0696164,0.179925,0.0550085,-0.0599291,-0.0499647}
,
{0.0214391,0.0648853,-0.132668,-0.0894657,0.153704,0.0903884}
,
{-0.0869974,0.151422,0.0948378,0.177733,-0.125435,-0.00160256}
,
{-0.147665,0.0364876,-0.0994934,-0.118622,-0.0500375,0.0626488}
,
{-0.114275,-0.107423,-0.0599359,-0.138287,-0.0149651,-0.0560844}
,
{0.17641,-0.000417663,0.0598937,0.0723579,0.117008,0.204961}
,
{0.0859683,-0.0799432,-0.0565017,0.0245052,-0.0442585,-0.109101}
,
{-0.0186029,0.0852664,0.068627,0.0256484,0.00757655,0.0599497}
,
{-0.0211982,0.041439,0.0206166,0.0604911,-0.0575027,-0.0209817}
,
{0.119531,-0.085695,0.114392,-0.00452692,0.0754571,0.110822}
,
{-0.0633431,0.0726556,-0.100693,-0.0458411,-0.0853009,-0.0981828}
,
{-0.0546786,-0.247749,-0.045945,-0.0280079,0.105568,0.0659996}
,
{-0.263563,0.15566,0.0183712,-0.124317,0.0949887,-0.00992601}
,
{0.0629535,-0.0143059,0.209481,0.0176172,-0.0181807,0.150931}
,
{-0.0942828,0.0135252,-0.0206786,-0.00376753,-0.0411893,-0.0645675}
,
{-0.0357858,-0.106376,0.123884,0.0357908,-0.0357575,-0.000215467}
,
{-0.109045,-0.179778,-0.0330842,-0.0199809,0.0843309,-0.0131927}
,
{0.0749543,-0.154285,0.0635118,0.123516,0.0289212,0.0435111}
,
{0.176531,0.00838272,0.0680357,-0.0527203,-0.0777324,-0.168716}
,
{-0.0131384,0.1561,-0.0810185,-0.205285,-0.0764453,-0.148546}
,
{0.0559858,0.0233639,0.02507,-0.0186673,0.022455,-0.0360811}
,
{-0.0907152,-0.179513,0.029697,0.00296984,-0.165549,-0.0243134}
,
{-0.130473,0.181,-0.0333091,0.00708722,-0.122703,-0.239935}
,
{0.269293,0.0167799,0.0768371,0.170038,-0.0740492,-0.0141434}
,
{-0.143515,-0.122942,0.0329301,-0.104096,-0.23171,0.018063}
,
{0.247133,0.201734,0.00884294,0.184117,0.0974546,-0.0854865}
,
{0.115944,0.053183,0.0687446,0.0243793,0.0458135,0.103267}
,
{0.126643,-0.0866546,0.0197791,0.0493691,-0.00843285,0.0152692}
,
{0.0572085,0.101229,0.00101711,-0.00815819,-0.0781122,0.0622706}
,
{-0.0340039,-0.176071,0.092252,-0.21581,-0.0999661,0.169141}
,
{0.078668,0.0974983,-0.00133567,0.21078,-0.0760234,0.0988776}
,
{-0.0356951,0.0255436,-0.125802,0.0861789,0.220302,0.117236}
,
{0.105865,-0.0274497,-0.0815662,0.0444149,0.106061,0.0417251}
,
{-0.207814,-0.0395926,-0.0992661,0.197717,0.0300978,0.0647264}
,
{0.221909,0.107915,0.0220167,-0.0284432,-0.038017,0.250103}
,
{0.0771445,0.0490497,-0.0380534,-0.0270744,-0.0572489,-0.069464}
,
{-0.100017,-0.0133221,-0.0740911,0.07916,0.0888136,0.181197}
,
{-0.268358,0.1547,0.0175951,0.230593,-0.0604156,0.0402905}
 };
  static const float bias2[1] = { 0.906528 };
  static const float weights2[][1] = { {0.0765344}
,
{0.219356}
,
{0.104793}
,
{-0.0706539}
,
{0.247546}
,
{-0.037866}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_0_49(v, index);
}
static int assign_gen_lepton_prior_14_0_49() {
  global_gen_lepton_prior.at(14,0,49) = &specialized_gen_lepton_prior_14_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_0_49 = assign_gen_lepton_prior_14_0_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_14_1_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0705789,0.0415474,-0.0586745,0.0583372,0.0652018,0.00502538 };
  static const float weights1[][6] = { {0.0555677,0.156886,-0.0256201,0.110353,0.0303459,0.0631364}
,
{0.142124,0.20402,0.048328,-0.0516029,-0.0302739,0.106366}
,
{0.0680765,0.166467,-0.085442,-0.0411007,0.153094,0.0231792}
,
{0.0705626,-0.00134456,-0.103962,0.0217766,0.201187,-0.00691572}
,
{0.116943,0.118326,-0.0099372,0.0421591,-0.127292,0.110707}
,
{0.0171788,-0.0580967,-0.263151,0.129219,0.123239,-0.0208603}
,
{0.215812,0.190779,0.149324,0.121396,-0.11646,0.124828}
,
{0.040302,0.107103,-0.10549,0.147622,0.0620735,-0.168328}
,
{0.111541,0.11558,-0.034698,0.14166,0.121576,-0.255379}
,
{-0.234218,-0.172252,0.216112,-0.178349,0.0808013,0.16915}
,
{0.180394,0.00503434,-0.230248,0.0522153,0.152893,-0.138724}
,
{-0.0134589,0.0761365,0.113556,-0.166996,0.0792536,-0.0279063}
,
{0.122504,-0.116695,-0.169828,0.170452,0.175855,-0.116716}
,
{0.309094,0.14927,-0.257692,0.109167,0.108268,0.0130933}
,
{0.037748,-0.200673,-0.0994875,-0.068448,0.0137985,0.223026}
,
{0.211646,0.202324,0.0599612,0.083093,0.109594,-0.132201}
,
{0.00594167,0.031431,-0.255123,0.123282,0.300111,-0.014879}
,
{0.0449394,-0.0733914,0.0385848,0.162359,0.14144,0.0781563}
,
{0.31482,0.215136,-0.190457,0.0655126,0.078733,-0.0286492}
,
{0.0829056,-0.044336,-0.151626,0.0925321,-0.00232223,-0.132275}
,
{-0.0319645,0.0296322,0.145953,0.283419,0.212781,-0.13511}
,
{0.0922069,0.0192139,-0.148591,0.106512,0.186082,-0.0500808}
,
{-0.0376968,0.0408552,0.15519,0.0285127,0.0548312,0.0686355}
,
{0.1953,0.0878551,-0.106197,0.170756,0.17274,-0.043743}
,
{-0.0104534,0.0747213,-0.0937624,-0.0466567,-0.0772784,-0.151234}
,
{0.175819,-0.0834585,-0.0556239,-0.0214146,-0.111473,0.208322}
,
{-0.0784871,0.226083,0.0232182,-0.16394,-0.0541404,-0.133525}
,
{0.15774,0.120972,-0.0411495,0.113542,0.0241341,0.180546}
,
{0.0910366,0.0510288,0.0430419,0.228802,0.141906,0.0488991}
,
{0.0704611,0.155846,0.0241377,0.174836,-0.18811,0.0554266}
,
{-0.0822616,0.216218,0.0666539,0.230729,-0.0821285,0.0310989}
,
{0.0692898,-0.0969017,-0.16165,-0.0371434,0.00252972,-0.0278808}
,
{0.0177915,-0.111639,-0.0307289,0.14412,0.0294533,-0.110051}
,
{0.169012,-0.0519455,-0.0788938,-0.178366,-0.145656,-0.0449139}
,
{-0.121178,-0.208869,-0.031506,0.00674343,0.204042,-0.028244}
,
{-0.207181,0.111795,0.169065,0.103016,-0.0190564,0.028082}
,
{0.0518877,0.0857023,0.100317,0.0840823,-0.0270849,-0.0476922}
,
{-0.0650296,0.120739,0.0423153,-0.133962,0.218844,0.0690585}
,
{0.172796,0.105898,0.0612797,0.0231016,-0.167229,-0.0523511}
,
{0.0502246,0.00961015,0.0693206,-0.132024,-0.0461967,0.183332}
,
{-0.0765201,-0.100287,0.000249025,-0.081082,-0.0838238,-0.112151}
,
{0.0969493,0.0332798,-0.0439856,-0.11939,-0.0269233,-0.0254258}
,
{0.0443463,0.0641966,-0.0987327,-0.0383047,-0.0425772,-0.0729385}
,
{0.141359,-0.0450944,0.0396599,-0.146273,0.00265443,0.142139}
,
{0.09941,-0.191463,0.00515697,0.146784,-0.0190762,-0.0350056}
,
{0.124639,-0.116012,-0.0716731,-0.00259604,-0.0296826,0.0448904}
,
{-0.00652251,-0.00113883,0.152622,0.0638817,-0.0207309,0.117592}
,
{0.06879,0.0608181,-0.113979,-0.0589233,0.0122571,0.125327}
,
{0.039837,0.195897,-0.105362,0.0832395,-0.0673377,-0.131975}
,
{-0.0825645,-0.0716997,-0.0308075,-0.0752226,0.0844743,-0.0672747}
,
{-0.0722876,0.0889801,-0.189342,-0.0474952,0.0111596,-0.0264425}
,
{0.181838,-0.0853643,-0.0691464,-0.179825,-0.107518,-0.0620794}
,
{-0.0938494,-0.0247649,0.010776,-0.040055,0.169293,0.145273}
,
{-0.0519326,0.000161536,0.190409,-0.089578,0.0384818,-0.113032}
,
{-0.146252,0.0277968,0.130827,0.0799294,-0.0675309,0.227198}
,
{-0.244581,0.0565861,0.0174641,0.0457249,0.145437,0.13836}
,
{0.0717979,-0.201188,-0.147698,-0.0636408,0.00625793,-0.0919567}
,
{0.0970296,0.0135727,-0.0531763,-0.0766558,0.172871,0.00126296}
,
{0.0680745,-0.0674212,0.182913,0.108893,0.148243,-0.0826717}
,
{-0.155279,0.170902,0.146893,0.060847,0.0185439,-0.0832148}
,
{-0.191295,0.201878,-0.0106987,-0.227797,-0.124798,-0.0680976}
,
{-0.0339051,0.169873,0.0966671,-0.114565,0.142962,0.175092}
,
{0.0101641,-0.00154595,0.232772,-0.0566856,-0.100427,0.149441}
,
{-0.036936,0.0172398,-0.102419,-0.102311,-0.0342317,-0.126376}
,
{-0.00712209,0.161012,0.0532329,-0.0978759,0.0535152,-0.088183}
,
{0.122154,-0.0456383,-0.105632,0.17755,-0.163322,-0.166149}
,
{-0.0266009,-0.0902914,-0.0645236,0.163192,-0.0587046,-0.0877871}
,
{-0.109195,0.087596,-0.0175518,-0.0342336,0.045134,-0.194986}
,
{-0.0226493,-0.0981253,-0.187057,0.221002,0.050048,-0.12014}
,
{-0.00968744,-0.0084075,0.0629952,-0.0548934,-0.125337,0.0259888}
,
{-0.213821,-0.159646,-0.154145,0.108333,-0.0890967,-0.0384718}
,
{-0.156493,-0.0791666,-0.18892,0.0479561,-0.168252,0.0217466}
,
{-0.00192821,0.0239101,0.069807,-0.0720996,-0.0441553,0.00136894}
,
{-0.115582,0.0172066,0.0118015,0.249251,0.161055,-0.0635199}
,
{0.0514397,0.0464344,0.118352,0.0195845,0.140674,0.0465097}
,
{-0.0601343,-0.0350983,0.0458317,0.0308899,0.0783677,-0.0413835}
,
{0.12922,-0.0201719,0.0280319,-0.268326,-0.248453,0.160425}
,
{0.171902,-0.0191447,-0.216932,-0.0587621,-0.111895,0.141057}
,
{-0.026159,-0.025623,0.0994518,-0.0753503,-0.133281,-0.0546785}
 };
  static const float bias2[1] = { 0.555431 };
  static const float weights2[][1] = { {0.0849951}
,
{0.232402}
,
{-0.0624155}
,
{0.0658951}
,
{0.168412}
,
{-0.0178554}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_1_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_1_49(v, index);
}
static int assign_gen_lepton_prior_14_1_49() {
  global_gen_lepton_prior.at(14,1,49) = &specialized_gen_lepton_prior_14_1_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_1_49 = assign_gen_lepton_prior_14_1_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_14_2_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0562957,-0.0998501,-0.181178,-0.0641943,-0.0898117,0.0293799 };
  static const float weights1[][6] = { {0.0918794,-0.204192,-0.206188,-0.0545199,0.152344,-0.0118015}
,
{0.0310725,0.0797597,-0.360602,-0.0076119,-0.0625062,0.095134}
,
{0.154497,-0.0724062,-0.0110233,-0.276691,0.032146,0.0673813}
,
{0.218665,0.113188,0.0365327,-0.206261,0.273744,-0.151056}
,
{0.111855,-0.260252,-0.104837,0.0395814,-0.11564,0.062239}
,
{-0.131377,-0.063525,-0.0555355,-0.0145374,-0.28305,0.110511}
,
{0.105278,0.0208427,-0.412183,-0.26809,-0.0609761,-0.161051}
,
{-0.0410379,-0.0383873,-0.10929,-0.168076,0.261664,0.239573}
,
{0.0817661,-0.095963,-0.152526,-0.145034,0.111454,0.132616}
,
{0.0892263,-0.0313402,0.134476,0.148342,0.146349,0.20235}
,
{0.242764,-0.217052,-0.115009,0.126072,-0.0953047,0.220815}
,
{-0.0693587,0.102194,0.0698215,-0.0248361,-0.195483,0.231531}
,
{0.0622401,-0.140123,-0.213904,-0.178849,0.0532692,0.0869775}
,
{0.184351,-0.29053,-0.0490473,0.0223079,0.0494601,0.131782}
,
{0.129767,-0.0484533,0.184648,-0.163025,0.0763727,0.229237}
,
{0.0384375,-0.104562,-0.136817,0.0138471,-0.0657565,-0.110117}
,
{0.109744,-0.107283,-0.234887,-0.00730582,-0.17069,0.172405}
,
{-0.0351438,-0.271594,-0.0863841,-0.251079,-0.080489,-0.144577}
,
{0.334723,0.0914563,-0.0580472,0.0090787,-0.0649224,0.268519}
,
{0.234527,-0.0634497,-0.185645,0.0941008,0.0298196,-0.0582783}
,
{0.0712345,-0.162564,-0.0589555,0.0136717,0.0617362,-0.0831244}
,
{0.0946763,-0.192938,-0.117222,0.11117,-0.146574,0.213356}
,
{-0.0576716,-0.0736976,-0.220876,0.00404228,0.136592,0.00789171}
,
{0.198199,0.144772,-0.265153,-0.0821861,-0.304668,-0.21638}
,
{-0.185678,-0.0444995,-0.082958,-0.0272252,0.177784,0.0900113}
,
{0.112113,0.00392194,0.0307926,0.0309888,0.16121,0.0517254}
,
{0.0270163,-0.0727335,0.140691,0.0121558,0.396108,-0.0537792}
,
{-0.0456964,0.0971414,-0.0104521,0.1509,0.139316,0.095638}
,
{0.334194,-0.0473002,0.20082,-0.133198,0.14092,0.0314017}
,
{0.0172765,0.0906584,0.222899,-0.130132,0.0737864,-0.178791}
,
{0.0797443,-0.0910826,-0.0937813,0.0485434,0.0159909,-0.0233336}
,
{0.046542,-0.0779262,-0.069949,-0.00175274,-0.172224,-0.121593}
,
{-0.133288,-0.0798004,0.0531915,-0.219785,-0.00347859,-0.172881}
,
{-0.0868111,-0.1103,-0.0258056,-0.160883,-0.0890619,-0.0305002}
,
{0.168303,0.0594861,-0.189757,0.142026,0.107506,-0.0830725}
,
{-0.143737,-0.0357529,-0.157422,-0.0476469,0.0983775,-0.0397282}
,
{0.189358,0.0599915,-0.0186722,-0.0163608,-0.0965225,-0.137993}
,
{-0.0733041,-0.0334137,0.0821699,-0.0641812,0.103493,0.0437679}
,
{0.0443148,0.133949,0.129924,-0.0554721,0.216618,-0.120955}
,
{0.186467,-0.0901788,0.0641461,-0.0597683,-0.150258,0.0758207}
,
{0.104745,0.0590285,0.137267,0.08992,0.0866448,-0.0323495}
,
{0.0206851,0.0115464,0.127039,-0.078625,0.0638417,0.0241801}
,
{0.0282732,0.142868,0.0201623,0.0891771,-0.244395,-0.168255}
,
{0.187546,0.18254,-0.0646604,-0.0375902,-0.0605417,0.077128}
,
{-0.145956,0.0881567,0.215923,0.204424,-0.230619,0.010586}
,
{0.108444,0.00315032,-0.0933272,0.0139098,-0.0131659,-0.0169061}
,
{0.0756332,-0.174464,-0.0788357,0.0514164,-0.0830974,-0.103256}
,
{0.172513,0.140035,-0.163876,0.0746151,0.0761395,0.016743}
,
{-0.0451852,-0.0843985,-0.0876019,-0.0815656,-0.0840214,-0.228406}
,
{-0.188389,0.0924361,0.037171,-0.131904,-0.0344091,-0.205442}
,
{0.0773988,-0.019429,-0.0743339,-0.131537,0.113293,-0.115897}
,
{-0.09899,0.0247598,0.10072,0.210554,-0.114333,0.117154}
,
{0.134661,0.0298752,0.0275092,0.0382561,0.0651184,-0.104986}
,
{0.0116106,0.0805518,-0.0334509,0.078081,-0.0624632,-0.0848039}
,
{-0.0966891,0.0683899,-0.0749287,-0.0480414,-0.11339,0.0746775}
,
{0.0436831,-0.15308,0.0243833,0.191933,-0.143369,-0.206285}
,
{0.0420017,-0.0897019,-0.0424658,-0.0813814,-0.0233527,0.0987697}
,
{-0.0220792,0.0122702,0.18216,0.0973168,0.0760339,-0.142051}
,
{0.0746097,0.103077,0.0615643,0.198333,0.00104854,0.0497512}
,
{0.0311902,-0.0224877,0.160402,0.144752,0.103688,-0.114802}
,
{0.0540636,0.104594,0.110786,-0.111449,-0.132838,-0.0905284}
,
{-0.0822693,-0.00680801,0.22336,0.151012,0.152533,-0.0946948}
,
{0.180573,0.115224,-0.174125,0.150995,0.201771,-0.228295}
,
{-0.00680257,-0.0579712,0.0592993,0.0386107,0.0662818,0.0162916}
,
{-0.0929164,0.137565,0.181871,-0.0450116,-0.0311493,0.11053}
,
{0.0259251,-0.0110847,0.162597,0.0331063,0.135902,-0.0656945}
,
{0.00802293,-0.0490977,0.136466,-0.204971,-0.0137076,0.0494705}
,
{-0.228299,0.0820178,0.00337551,-0.0382383,0.201092,-0.0317076}
,
{0.0579426,-0.183322,-0.0926234,-0.172418,-0.0670465,-0.12161}
,
{0.0312628,-0.0947747,-0.187748,0.0681739,0.205105,-0.199}
,
{-0.0154176,0.0563729,0.0658875,-0.0353257,0.304938,-0.0367167}
,
{-0.0155277,-0.0531745,-0.0918203,-0.160174,0.076936,-0.16469}
,
{-0.12776,-0.175419,0.143417,0.187628,0.0849109,-0.00276069}
,
{-0.138348,0.139492,-0.104607,0.0651304,-0.112665,-0.234767}
,
{-0.166148,-0.17133,0.0355059,-0.0206024,-0.0273751,-0.119805}
,
{0.0397751,0.194204,0.00231067,0.233114,-0.0693019,0.0625432}
,
{0.00817361,0.089334,-0.266318,-0.081367,0.0357536,0.0160572}
,
{0.0512949,0.0372106,-0.0176659,-0.0693016,-0.0285964,0.0135727}
,
{-0.0669196,0.103293,-0.15906,0.123983,0.0728463,-0.0909976}
 };
  static const float bias2[1] = { 0.00981611 };
  static const float weights2[][1] = { {0.177592}
,
{-0.0408829}
,
{0.03549}
,
{-0.0005991}
,
{0.0667796}
,
{0.196324}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_2_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_2_49(v, index);
}
static int assign_gen_lepton_prior_14_2_49() {
  global_gen_lepton_prior.at(14,2,49) = &specialized_gen_lepton_prior_14_2_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_2_49 = assign_gen_lepton_prior_14_2_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_14_3_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.708591,-0.317594,-0.263477,-0.922079,-0.3187,-0.088807 };
  static const float weights1[][6] = { {-0.43362,-0.314457,0.0532083,-0.228478,-0.222325,0.176422}
,
{-0.352043,-0.101498,-0.254213,-0.306751,-0.224592,0.176669}
,
{-0.625007,-0.227578,-0.403942,-1.18733,-0.410737,-0.571467}
,
{0.147878,-0.054837,0.00660789,0.221165,-0.74776,2.38384}
,
{-0.607155,-0.510379,-0.0499225,-1.08855,-0.22792,-0.271311}
,
{-0.587507,-0.210845,-0.0810326,-0.802104,-0.154714,-0.202552}
,
{-0.612657,-0.333704,-0.309526,-0.808563,-0.0800577,-0.0256855}
,
{-0.335626,0.0732693,-0.535141,0.282071,-0.10117,0.70265}
,
{-0.593835,0.0168592,-0.51747,0.966474,-0.368921,1.10394}
,
{-0.0858348,-0.000771278,0.178604,-1.54926,-0.0880189,0.638796}
,
{-0.487063,-0.155716,-0.217861,1.54609,-0.292097,1.72284}
,
{0.171384,0.109429,-0.0918651,0.106297,0.0176834,-0.240002}
,
{-0.691244,-0.112522,-0.28446,-0.215581,-0.142362,0.324134}
,
{-0.439456,-0.297772,-0.49395,0.575271,-0.123816,0.899472}
,
{0.00356535,0.178926,-0.00111022,-0.0343979,-0.0670699,-0.0221}
,
{-0.0503864,-0.00553042,-0.0256072,-0.026985,-0.0133744,0.0174078}
,
{-0.617588,-0.358457,-0.32388,-0.848798,-0.443308,-0.0541156}
,
{-0.630853,-0.255623,-0.374978,-0.541874,-0.250704,-0.0507779}
,
{-0.560884,-0.221292,-0.410709,-0.140831,-0.459376,0.000655767}
,
{-0.38479,-0.136426,-0.444116,-0.762115,-0.333851,0.481228}
,
{-0.6138,-0.168262,-0.24008,-0.492022,-0.0810002,0.436332}
,
{-0.417046,0.00420181,-0.313305,-0.309421,-0.038427,0.296759}
,
{0.0547452,0.0182804,-0.154757,-0.0130199,0.18824,0.0586167}
,
{-0.414404,0.0578405,-0.413516,-0.18139,-0.242071,0.280813}
,
{-0.344773,-0.0777484,0.0509723,-0.513526,-0.293363,0.0322245}
,
{-0.221654,-0.284219,-0.0610531,-0.0476121,-0.293763,0.17851}
,
{-0.193477,-0.162238,0.0951336,-0.0662538,-0.172884,-0.00303756}
,
{-0.269278,-0.093904,-0.230766,0.500095,-0.00114872,0.367985}
,
{-0.143821,-0.0630831,-0.0375771,1.19703,-0.143198,0.567368}
,
{0.23587,0.037233,0.0805815,-0.138409,0.156929,0.0287282}
,
{0.0768867,0.194287,-0.0908533,-0.198063,0.0530859,0.00252839}
,
{0.155696,0.0392482,-0.00866484,0.0207618,-0.135351,-0.0463764}
,
{-0.0620215,0.106887,0.110147,0.0175153,0.0173693,-0.114756}
,
{-0.0560217,0.113873,-0.0384965,0.0388922,0.176176,0.0287934}
,
{-0.119017,-0.192846,0.0939669,-0.0817696,0.0667595,0.012439}
,
{0.0815129,0.11548,0.0311641,0.129036,0.00436848,0.0349162}
,
{0.155366,0.0563931,0.0296775,0.0210806,-0.0444769,0.00175487}
,
{-0.140979,0.0729457,-0.13568,-0.0399498,0.0212594,-0.033969}
,
{-0.137295,0.000996783,-0.0245513,0.0154483,0.0442923,0.00192204}
,
{-0.0474879,0.0561149,0.0259415,-0.0615764,0.0779565,-0.109799}
,
{0.121992,0.0860823,-0.226928,0.038269,0.111644,0.104139}
,
{-0.288821,-0.0631787,-0.106702,-0.00971017,-0.17848,0.0306986}
,
{0.124117,-0.104209,0.230639,0.023091,-0.124442,0.0153804}
,
{-0.0692546,0.0943884,0.0768345,0.00663454,0.138672,0.00374899}
,
{-0.0352636,0.0336843,0.160731,0.0234516,0.0122447,0.14329}
,
{-0.0611062,0.123816,0.00829662,-0.0597427,-0.0534518,0.0600754}
,
{-0.0744537,-0.0584946,-0.0238842,0.0208435,-0.0158821,-0.0120043}
,
{0.161109,-0.102293,-0.148449,0.0306566,-0.0174344,-0.206315}
,
{-0.0499732,-0.0615466,-0.0492725,0.0589035,0.144128,-0.030137}
,
{-0.0573785,-0.061337,-0.211967,-0.0387101,0.0248924,0.0256864}
,
{-0.0258052,-0.0398294,0.0360005,-0.0743944,0.0716161,-0.136101}
,
{-0.138548,0.0430162,-0.0186687,-0.0140642,-0.0874519,-0.00449355}
,
{-0.0459861,0.0803163,0.130621,0.106044,-0.182428,0.106164}
,
{-0.0396155,-0.0561675,-0.0724228,-0.00102856,-0.0790443,-0.00556339}
,
{0.0538188,0.0340697,0.219447,0.166863,-0.0778747,0.0717362}
,
{-0.0201482,-0.0409255,-0.0283639,0.016002,-0.101789,-0.216598}
,
{0.171918,0.0509754,-0.0247876,-0.0210343,0.0920591,0.0131166}
,
{0.197199,0.0878123,0.201508,0.0139287,0.148558,0.127988}
,
{-0.101505,0.149408,0.0991645,-0.201097,0.0488921,0.00231299}
,
{-0.0819902,0.135607,0.111316,0.0832122,-0.0747317,0.0813159}
,
{-0.0789964,-0.142159,0.281558,-0.162904,0.00468211,-0.174898}
,
{0.181916,0.148059,0.00195505,0.125118,-0.048358,0.13385}
,
{0.0557171,0.0840329,0.161318,-0.048436,0.101668,-0.0371281}
,
{0.183656,-0.06199,0.105268,0.03481,0.135611,-0.0142808}
,
{-0.0585438,0.0483137,0.0409948,-0.04301,0.0515431,0.132947}
,
{0.00599713,0.0195871,0.0868004,0.0251607,0.180074,-0.131142}
,
{0.136746,0.052867,-0.0472861,0.186906,-0.0566067,0.0578139}
,
{0.100084,0.0705426,0.0864083,-0.0905096,-0.122814,0.0609983}
,
{0.00290503,0.0206131,0.214908,-0.0688371,0.136609,-0.0989107}
,
{-0.0480948,0.0078012,-0.000177987,0.0656527,0.0959418,-0.0923022}
,
{0.0285328,0.250105,0.118198,-0.15471,-0.0406296,-0.129981}
,
{0.10253,0.133241,0.133802,0.108046,-0.112134,-0.0276349}
,
{0.105961,-0.167377,0.272648,7.71973e-05,0.0614954,0.137397}
,
{0.0497753,0.0228389,0.126892,-0.0161749,0.0611152,0.115662}
,
{0.167415,0.236435,0.0765112,-0.0419562,-0.153558,0.00674488}
,
{-0.0374204,-0.0224026,0.100549,0.036691,0.103453,0.000655281}
,
{0.0930874,0.0615695,0.116548,-0.113252,0.0434415,0.0884691}
,
{0.143004,0.0566718,0.129456,-0.00589576,0.0961175,-0.114152}
,
{-0.0238319,0.0478887,0.102199,0.12463,0.24767,0.0381489}
 };
  static const float bias2[1] = { 0.101438 };
  static const float weights2[][1] = { {0.00311772}
,
{-0.00384665}
,
{-0.0927364}
,
{0.0146053}
,
{0.000275564}
,
{0.0104944}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_3_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_3_49(v, index);
}
static int assign_gen_lepton_prior_14_3_49() {
  global_gen_lepton_prior.at(14,3,49) = &specialized_gen_lepton_prior_14_3_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_3_49 = assign_gen_lepton_prior_14_3_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_14_4_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.516453,0.447555,-0.929415,-0.914316,-0.00598893,-0.682572 };
  static const float weights1[][6] = { {0.223206,-0.0427204,-0.148599,-0.34184,-0.0893892,-0.334934}
,
{0.47839,0.314407,-0.783214,-0.431077,0.211249,-0.588202}
,
{0.375145,0.215549,-0.629037,-0.619356,0.0961147,-0.425633}
,
{0.530524,0.461701,-0.64695,-0.911224,0.280653,-0.14237}
,
{0.53343,0.427412,-0.832619,-0.89344,0.128152,-0.636106}
,
{0.387801,0.399617,-0.81128,-0.826874,-0.0179295,-0.62353}
,
{0.307184,0.36914,-0.919144,-0.696301,-0.0938728,-0.851516}
,
{-1.02954,-1.16138,0.612404,0.72261,-0.894618,1.23022}
,
{-0.166017,-0.00642095,-0.548655,-0.248105,-0.330054,-0.237121}
,
{0.14949,0.105781,-0.0160179,-0.0295275,0.103478,-0.120291}
,
{-0.88847,-1.07636,0.648542,0.595141,-0.936523,1.14612}
,
{0.038767,0.198557,-0.127173,0.114306,0.02984,0.0535827}
,
{0.420516,0.122963,-0.672424,-0.629589,-0.119456,-0.181568}
,
{0.0351584,-0.0707474,-0.49095,-0.165688,-0.504482,-0.119377}
,
{-0.0150086,0.058079,-0.211686,0.236848,-0.0296293,0.0413752}
,
{0.146312,-0.0821859,-0.0495603,-0.151806,0.10403,0.0834857}
,
{0.453885,0.361025,-0.987903,-1.11995,0.0465489,-0.638033}
,
{0.522703,0.304472,-0.751089,-0.874495,0.0422613,-0.396499}
,
{0.336081,0.33648,-0.886868,-0.582867,-0.185246,-0.690469}
,
{-0.132872,-0.304565,-0.350528,-0.18071,-0.247583,0.0377858}
,
{-0.156675,-0.221629,-0.466079,-0.100091,-0.109373,-0.107632}
,
{-0.127542,-0.363508,-0.175141,-0.26231,-0.573012,0.0234245}
,
{0.122823,0.158372,-0.117049,-0.13818,0.0516598,0.0779028}
,
{-0.0766552,0.0262069,-0.368588,-0.156537,-0.358946,0.262541}
,
{-0.0414979,0.170988,-0.278899,-0.178184,0.275484,-0.0169856}
,
{0.0926294,0.0441686,-0.207985,-0.397229,0.0286908,-0.00644633}
,
{0.0338664,0.137434,0.01484,-0.238264,0.173066,0.0383409}
,
{0.143724,0.156118,-0.163015,-0.346363,0.202587,-0.147008}
,
{-0.0720852,0.167119,0.237022,0.0389471,0.0773381,-0.222355}
,
{0.0474359,0.0153824,0.0275481,0.164392,0.0497839,0.125569}
,
{-0.0905379,-0.147504,-0.0438839,-0.0775456,0.148868,0.0990978}
,
{0.121286,0.0876687,0.0962495,0.0639582,0.0762516,-0.0199747}
,
{0.00448554,-0.0250463,0.0921214,-0.0603549,0.230438,0.111993}
,
{-0.022475,-0.100493,0.106456,0.0108308,0.137989,-0.0280335}
,
{0.0394108,0.0300514,-0.204182,-0.064162,0.0479427,-0.0262992}
,
{-0.176102,-0.160241,-0.0341611,-0.0629977,0.0081732,0.0374135}
,
{0.082829,0.117416,0.112013,0.151906,0.0233663,-0.045481}
,
{-0.0141224,0.0336308,0.0010812,0.114622,-0.0926629,-0.0173605}
,
{0.121,0.0949769,-0.16739,0.239071,-0.160499,0.0214146}
,
{-0.0615218,0.00936514,0.152104,-0.0599671,-0.0213116,0.113721}
,
{-0.173117,-0.00882759,-0.047308,0.0677685,-0.0594401,0.0733386}
,
{-0.120635,0.02706,0.131434,-0.13114,0.111963,0.166389}
,
{-0.102385,0.00357579,-0.213484,-0.108804,0.058915,-0.161681}
,
{-0.0419112,0.0244155,-0.154889,0.0627007,0.0667624,-0.0346425}
,
{0.151369,-0.241328,-0.0135392,-0.0504567,-0.093167,-0.0844982}
,
{-0.112405,0.00715274,0.0998594,-0.0925579,0.0499192,0.0985694}
,
{0.0341084,0.133141,0.242936,0.036237,-0.0885002,0.119011}
,
{-0.150709,0.0826263,-0.0558299,-0.0724822,-0.041937,-0.0776189}
,
{0.0914973,-0.00970322,-0.150711,0.113798,-0.0889179,-0.00229454}
,
{-0.0673047,-0.0719173,-0.119797,-0.0830107,-0.0754542,-0.148112}
,
{0.0456342,0.0351908,0.185512,-0.154554,-0.0151564,0.107801}
,
{-0.0730571,0.045738,-0.0621834,-0.182412,-0.305874,0.0640076}
,
{0.131745,-0.138648,0.0622817,0.120086,0.107741,0.0763669}
,
{0.17379,0.184506,0.127384,0.133445,-0.108788,0.0322497}
,
{-0.172864,-0.0601201,-0.0408882,0.137259,-0.199727,-0.182584}
,
{-0.145453,0.122764,-0.00566337,0.0107572,-0.243268,0.00162077}
,
{-0.00939889,0.132218,0.073645,0.166455,-0.204777,0.0483293}
,
{-0.105649,0.0352752,0.0616024,0.00714047,-0.267799,-0.142387}
,
{0.227504,0.178724,0.0447431,-0.170053,-0.109877,-0.0120761}
,
{-0.295349,0.131215,-0.068853,0.00630528,0.0462665,-0.0131404}
,
{-0.158178,-0.0684969,0.111976,0.056607,-0.0677481,0.0722008}
,
{-0.0323304,0.203659,-0.224628,-0.190752,-0.125338,-0.231677}
,
{-0.201744,0.0592675,-0.0582401,-0.164647,-0.0613391,-0.0206095}
,
{0.0617935,0.0451916,0.0969667,0.0980966,-0.294502,0.0304195}
,
{0.115866,0.28902,0.0178153,0.0947333,0.183471,0.0820577}
,
{-0.104138,0.121885,-0.00551507,-0.150158,-0.0381299,-0.11446}
,
{-0.107395,-0.023085,0.0758583,-0.0834523,0.177636,0.0261709}
,
{-0.117894,0.224261,-0.001111,-0.0855191,0.0808825,0.146941}
,
{-0.00152015,0.257233,0.0498237,0.185814,-0.201716,-0.00386641}
,
{0.00981052,-0.0689552,-0.0770831,0.00675362,-0.0854108,-0.0102512}
,
{-0.131564,0.324793,0.0444972,0.0700089,-0.091075,0.208605}
,
{-0.212582,0.145245,0.189424,0.0209949,-0.117058,0.149641}
,
{-0.260946,0.327005,0.090261,0.00916722,-0.0550965,0.192997}
,
{-0.330671,0.194282,0.152933,-0.0347291,-0.0347008,-0.145971}
,
{0.0323987,-0.18019,0.00711616,-0.0423254,0.0142642,0.395673}
,
{0.0435748,-0.139545,0.134396,0.114965,0.0183265,-0.0135296}
,
{0.0359417,-0.0947177,0.0904441,0.228325,-0.0933386,0.141633}
,
{-0.0266572,-0.0751392,0.0915659,-0.149339,0.0759562,0.104542}
,
{-0.00203873,0.00349391,0.103131,-0.0129746,0.0402297,0.304203}
 };
  static const float bias2[1] = { 0.212059 };
  static const float weights2[][1] = { {-0.126241}
,
{-0.10823}
,
{0.0798084}
,
{0.152171}
,
{-0.0347925}
,
{0.0149972}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_14_4_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_14_4_49(v, index);
}
static int assign_gen_lepton_prior_14_4_49() {
  global_gen_lepton_prior.at(14,4,49) = &specialized_gen_lepton_prior_14_4_49;
  return 0;
}
static int initialize_gen_lepton_prior_14_4_49 = assign_gen_lepton_prior_14_4_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_18(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0609425,0.0,-0.138239,0.102501,0.0,-0.158328 };
  static const float weights1[][6] = { {0.180382,-0.0210625,0.11894,-0.056341,0.00750382,-0.11244}
,
{0.491854,-0.152593,0.473706,-0.113187,0.115098,0.408117}
,
{-0.0209922,-0.101248,0.00157024,0.2602,-0.024626,0.186259}
,
{-0.13344,0.0590496,-0.0423703,0.215537,-0.0708028,-0.0234925}
,
{0.0555279,0.113811,-0.258634,0.253188,0.219452,0.023884}
,
{-0.0349667,-0.121805,-0.14925,0.0128659,0.0405989,-0.183059}
,
{-0.271146,-0.156122,0.0510174,0.0446665,-0.112882,-0.240746}
,
{-0.599286,-0.0105893,-0.0794488,-0.253028,0.0059916,0.0231547}
,
{-0.58256,0.0535354,-0.209774,0.177489,0.0098142,0.0257557}
,
{0.139394,0.0130971,-0.0473481,-0.0463938,0.0682403,-0.000351351}
,
{0.04829,0.21845,0.0262703,-0.138819,-0.0682805,-0.159935}
,
{0.068557,-0.0943459,0.156578,-0.105331,0.0307947,-0.0292089}
,
{0.0107697,0.0598443,0.0663573,-0.171929,-0.153253,0.0143499}
,
{0.0809551,-0.010034,-0.0904832,-0.0463376,0.0666486,0.137515}
,
{-0.111924,-0.108245,0.198811,-0.0650292,-0.0730465,-0.148399}
,
{-0.112189,-0.0915464,-0.0875998,-0.16517,-0.15546,-0.0560075}
,
{-0.121506,-0.114665,-0.0096582,0.0529654,-0.0425161,0.0746236}
,
{-0.179171,0.10345,-0.101439,0.0619843,0.0438101,-0.150042}
,
{0.172622,0.0511704,-0.422853,-0.460192,0.053201,-0.176523}
,
{0.073813,-0.0829917,0.123986,0.189038,-0.0895243,0.0273668}
,
{0.0375705,-0.226622,0.0661452,-0.0239722,-0.11259,0.128632}
,
{0.0736387,0.0801808,0.0384851,-0.0111476,0.0775414,-0.0520647}
,
{-0.00634993,-0.160124,-0.189397,0.0279544,-0.0596326,0.0162926}
,
{-0.20057,-0.0650149,-0.059665,-0.166623,-0.0897264,0.098558}
,
{0.068576,-0.0437991,0.0717871,0.0816867,-0.0133467,0.0720797}
,
{-0.133062,-0.0760325,0.029524,-0.0507154,-0.0555933,-0.0789723}
,
{-0.0322846,-0.16858,0.0509831,0.112352,-0.127992,-0.130602}
,
{0.13422,-0.0752208,-0.000920919,-0.145656,-0.116238,0.00418325}
,
{0.178304,-0.0573883,0.0917689,0.218737,0.0928054,-0.224936}
,
{0.00895831,0.114884,-0.00260615,-0.0383807,0.0563225,-0.164889}
,
{-0.0274719,0.145153,-0.00349884,0.201605,-0.0548091,0.00150824}
,
{0.082388,0.0812462,0.179172,0.0743401,0.15009,0.0320268}
,
{0.00467166,0.153836,-0.0655241,0.0674477,0.0174113,-0.0544059}
,
{1.87985e-05,-0.142675,0.0655848,-0.0371195,0.0793369,-0.0731273}
,
{-0.315959,0.0814977,-0.120079,-0.136484,0.00251735,-0.0216825}
,
{0.00847766,0.247555,0.111747,-0.0517039,0.0920309,0.000795014}
,
{-0.342205,0.00879808,-0.119597,-0.17486,-0.0476763,-0.050494}
,
{0.00132869,0.0484184,-0.0564068,0.185385,-0.109531,0.180222}
,
{0.192754,0.000135426,-0.00930101,0.269214,-0.105759,0.0820954}
,
{-0.149004,-0.0330389,-0.157531,0.132512,-0.0430941,0.0329991}
,
{0.264578,-0.0965661,0.0970178,0.0734577,-0.0671508,-0.118776}
,
{0.0972736,0.116066,0.0491442,0.14365,-0.103843,-0.0933148}
,
{-0.158233,0.142167,-0.170518,-0.0499637,0.00283294,-0.290991}
,
{0.386364,-0.133202,0.180874,0.287601,0.0366152,0.420591}
,
{-0.0646751,0.19722,-0.0334696,0.223134,0.0857804,-0.188918}
,
{-0.125852,0.0969547,-0.0605313,-0.0264324,0.0101266,-0.0598831}
,
{-0.631795,0.0856741,-0.382737,0.174183,-0.0661331,-0.372058}
,
{0.0748432,0.00495024,0.0865427,-0.190779,0.108592,0.220084}
,
{0.177163,-0.129762,0.20112,-0.0102829,0.0684822,0.0517752}
,
{0.294725,0.026675,0.211559,0.440222,-0.0476512,0.299003}
,
{0.0195252,0.00801835,0.0428425,-0.196694,0.0037056,-0.24753}
,
{-0.332303,-0.0660506,0.0969697,0.232302,-0.152485,-0.18297}
,
{-0.0133913,-0.170036,0.0184278,0.0426485,-0.144858,0.143671}
,
{0.283602,0.154688,-0.0778906,0.265474,0.0295497,-0.278313}
,
{-0.0760956,-0.131399,0.0678004,0.00150044,-0.0645126,0.137861}
,
{0.106434,-0.0528856,0.211914,-0.205303,0.123424,0.0460042}
,
{0.118146,-0.233054,-0.0406937,0.0919895,0.00843112,-0.0164252}
,
{-0.0561942,-0.101273,0.0744621,0.037593,-0.0464202,0.126682}
,
{0.0669275,-0.15924,-0.124801,-0.0595673,-0.100625,-0.111484}
,
{0.0702986,-0.0393663,-0.0606029,0.0346942,0.204095,0.217519}
,
{0.136061,0.190891,0.0602375,-0.146789,0.225512,-0.105154}
,
{0.177381,-0.00764354,0.00431121,0.0950195,-0.16598,0.00827971}
,
{0.127501,0.208739,0.156704,-0.181166,0.148363,0.195968}
,
{-0.0750805,0.249519,0.0507078,-0.08932,0.0708736,0.159708}
,
{-0.0393334,-0.122653,-0.121028,0.0523176,0.105311,0.0738245}
,
{-0.0204886,0.0355587,0.0185551,-0.137491,0.00432513,-0.178942}
,
{0.0744334,-0.0543511,-0.0978274,0.120915,0.154215,-0.0569177}
,
{0.12031,0.0331662,0.0497104,-0.0831037,-0.0137049,-0.0481871}
,
{0.1415,-0.160363,-0.168558,0.0952447,0.164022,0.16862}
,
{-0.0348983,-0.00494399,-0.108091,-0.0940254,-0.0723159,0.186903}
,
{-0.0398414,-0.204262,0.158552,-0.00110055,-0.177636,0.0222091}
,
{-0.0436721,0.00332769,-0.0228492,-0.0855937,0.105679,-0.10089}
,
{0.0383979,-0.211327,0.02737,-0.218968,0.0788662,0.0601159}
,
{0.0375502,-0.079031,-0.132981,-0.00746898,0.0845845,0.169691}
,
{-0.0980572,0.109981,-0.0257863,-0.0946028,0.169908,-0.0356772}
,
{0.0356652,-0.0226402,-0.0526217,-0.118333,-0.1283,0.158417}
,
{0.0659627,-0.146741,-0.045469,0.0259786,0.234127,-0.0315125}
,
{-0.112262,0.156545,-0.00845349,-0.014667,-0.0732558,-0.0428765}
,
{-0.191627,-0.0033145,-0.00522515,-0.00361095,0.136005,0.0657597}
 };
  static const float bias2[1] = { -0.115234 };
  static const float weights2[][1] = { {-0.101848}
,
{-0.0405674}
,
{0.0924733}
,
{0.199027}
,
{-0.236467}
,
{0.0156968}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_18(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_18(v, index);
}
static int assign_gen_lepton_prior_1_1_18() {
  global_gen_lepton_prior.at(1,1,18) = &specialized_gen_lepton_prior_1_1_18;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_18 = assign_gen_lepton_prior_1_1_18();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_15_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.82298,-0.748379,-0.315142,-0.385995,-0.379126,-0.23106 };
  static const float weights1[][6] = { {-0.78452,-0.37401,-0.21737,-0.572963,-0.368503,-0.214796}
,
{-0.561744,-0.568986,-0.198177,-0.421634,-0.187756,-0.248853}
,
{-0.563549,-0.424614,0.139548,-0.378713,-0.177447,-0.421098}
,
{-0.359601,-0.251663,-0.41186,-0.00498526,-0.125152,-0.485813}
,
{-0.933595,-0.54894,-0.103434,-0.351287,-0.421722,-0.280371}
,
{-0.828182,-0.584069,-0.396716,-0.299935,-0.133778,-0.112611}
,
{-0.706677,-0.81428,-0.377354,-0.180239,-0.320701,-0.204966}
,
{-0.329774,-0.596177,-0.110645,-0.263214,-0.323232,0.105229}
,
{-0.465049,-0.548796,-0.116165,-0.278603,-0.294205,0.0451141}
,
{-0.00287604,-0.10859,0.322421,0.391133,0.215331,1.0647}
,
{-0.542583,-0.687065,0.00761475,-0.101098,-0.0817842,0.306662}
,
{-0.0463257,-0.12426,-0.0464854,0.0349329,0.103052,-0.0507229}
,
{-0.617571,-0.370317,-0.356757,-0.317718,-0.39618,-0.466914}
,
{-0.679478,-0.535012,-0.13161,-0.247285,-0.149645,0.15162}
,
{-0.0206515,-0.118124,-0.134149,-0.00332845,0.0643116,-0.0782818}
,
{0.0791756,0.164553,-0.090487,-0.0470126,-0.107426,-0.19357}
,
{-0.874393,-0.624938,-0.468683,-0.393111,-0.415068,-0.249319}
,
{-0.654573,-0.65575,-0.251977,-0.417446,-0.0384383,-0.296163}
,
{-0.753221,-0.647338,-0.129643,-0.34771,-0.174349,-0.153374}
,
{-0.739999,-0.542937,-0.258028,0.0170029,-0.0806712,-0.0884255}
,
{-0.700709,-0.466711,-0.368181,-0.34988,-0.137336,-0.241404}
,
{-0.629887,-0.387627,-0.061073,-0.210924,-0.19525,0.190553}
,
{0.014823,-0.0581408,-0.0504312,-0.0732545,-0.0588244,-0.0503664}
,
{-0.530133,-0.487403,0.0030643,-0.212779,-0.348219,0.137594}
,
{-0.400452,-0.284248,-0.0854962,-0.233074,-0.0316756,-0.130878}
,
{-0.470158,-0.3883,-0.248393,-0.218202,-0.0418208,-0.321761}
,
{-0.42411,-0.24853,-0.140275,-0.352798,-0.19827,0.0429543}
,
{-0.457854,-0.258017,-0.123899,-0.370897,-0.174597,-0.0771161}
,
{-0.322077,-0.384287,0.0351408,-0.363918,-0.203386,-0.240622}
,
{0.183412,0.0797579,-0.0141342,-0.207151,0.00454953,-0.162308}
,
{-0.0450155,0.0257083,-0.0286574,0.137792,-0.0566255,-0.0267416}
,
{-0.0489139,-0.126218,-0.102332,0.0587989,-0.104258,-0.11313}
,
{-0.0488247,0.158929,0.0718235,0.225924,0.114087,0.123037}
,
{0.106839,0.13168,-0.14829,-0.0321581,-0.133227,-0.0108275}
,
{0.0316273,-0.069745,-0.00745959,-0.0799974,-0.0431193,0.070599}
,
{0.0149822,0.022894,-0.100949,0.154517,0.169552,-0.00693793}
,
{0.0568214,0.0111172,0.0753168,0.118166,-0.0211299,0.0190998}
,
{-0.0465586,0.0405267,-0.0182959,-0.0679768,-0.136251,-0.0368923}
,
{-0.023111,-0.0548992,-0.049514,0.055074,-0.0297249,0.0473659}
,
{0.0765501,-0.197974,-0.139017,0.0473524,0.00572277,0.0129963}
,
{-0.0798535,0.205863,0.08385,-0.201854,0.0460041,-0.0703945}
,
{0.0645663,0.0311482,0.092466,-0.199647,-0.124744,0.0153405}
,
{0.0875519,0.112318,0.0334589,0.117446,-0.0659589,-0.0121908}
,
{0.0404362,0.146173,-0.009064,-0.121267,-0.025686,-0.0471075}
,
{-0.116515,0.0894436,0.0357867,-0.0402087,-0.124796,-0.10788}
,
{0.0972545,-0.247541,0.139389,0.0432848,0.198983,0.234008}
,
{-0.0093628,0.0899948,-0.104439,0.021329,-0.10597,0.00107813}
,
{-0.0397972,0.0851229,-0.0592204,0.0376876,-0.0139825,-0.0843173}
,
{0.0377375,0.00287822,-0.0412789,0.144425,0.0361953,-0.00350211}
,
{-0.137742,-0.0480115,-0.134791,0.0122515,-0.0252097,0.0285773}
,
{0.0313706,-0.109124,0.129621,-0.0156462,-0.040113,-0.0396726}
,
{-0.109466,-0.089528,-0.00537725,-0.0960597,-0.0359512,-0.0453056}
,
{0.0654313,0.0998357,0.00291043,-0.0277942,0.0209911,0.00243188}
,
{0.00327266,-0.0882652,-0.076742,0.0265612,-0.0535078,0.0176822}
,
{0.0635287,0.0345351,-0.147651,0.0813457,-0.00619623,-0.0806849}
,
{0.0855957,0.0535412,0.0866137,-0.184877,0.228113,-0.101253}
,
{-0.105621,-0.0248717,-0.0194931,0.0720256,-0.0346594,0.0948629}
,
{0.0575264,-0.0296099,0.126656,-0.0535978,-0.0734608,-0.00337722}
,
{-0.0386877,-0.0135369,0.0685675,0.123297,-0.106928,0.105632}
,
{-0.0689306,-0.0318618,0.0462222,0.0329875,-0.252151,0.152216}
,
{0.0522644,-0.108482,-0.0328298,0.0188,0.0980619,-0.135046}
,
{0.0127997,0.0403362,0.0109099,0.0456717,0.226762,0.0115955}
,
{-0.0213362,0.164453,-0.0776522,-0.127745,-0.0296175,-0.204797}
,
{-0.0492756,-0.0911891,0.00250026,-0.112238,-0.0544757,0.0832293}
,
{-0.017967,0.0780452,0.122905,0.134299,0.109151,0.10902}
,
{-0.153812,-0.125748,-0.133163,0.0336087,-0.0922503,-0.0927822}
,
{0.0225019,-0.0262308,-0.0336394,0.0342943,0.147255,-0.06471}
,
{-0.00745032,-0.0822335,-0.0913555,-0.0252164,-0.0896002,0.195114}
,
{0.0758,0.14501,0.0447088,-0.228476,-0.0806412,-0.147845}
,
{0.0203965,0.148742,-0.0873531,-0.011447,0.0706797,0.103937}
,
{0.107375,-0.0491649,0.130908,-0.0422027,-0.0204052,0.0372022}
,
{0.0315591,0.133386,-0.000984349,0.180743,0.0130899,0.0731357}
,
{0.08374,-0.154579,-0.0131932,0.083578,-0.122363,-0.0287358}
,
{-0.143823,-0.0611384,0.0230489,-0.0430617,0.0685555,-0.0994183}
,
{0.149042,-0.0481864,-0.102968,-0.172961,0.0964535,-0.0262196}
,
{-0.0266302,0.0699877,0.0226281,-0.0696619,0.00708324,-0.176611}
,
{-0.0541633,0.160752,0.162041,0.1397,-0.0556845,0.0533035}
,
{0.0237833,-0.092612,0.268675,0.138756,-0.0650535,0.106657}
,
{0.031882,-0.0558971,0.0766222,0.044707,0.147776,-0.0632598}
 };
  static const float bias2[1] = { 0.489125 };
  static const float weights2[][1] = { {0.00669003}
,
{0.0202671}
,
{-0.000746822}
,
{0.00811084}
,
{0.00100419}
,
{-0.00833775}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_15_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_15_0_49(v, index);
}
static int assign_gen_lepton_prior_15_0_49() {
  global_gen_lepton_prior.at(15,0,49) = &specialized_gen_lepton_prior_15_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_15_0_49 = assign_gen_lepton_prior_15_0_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_16_0_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.228974,-0.437517,-0.694636,-0.70104,-0.416327,-0.500867 };
  static const float weights1[][6] = { {-0.121508,-0.134475,-0.400787,-0.505408,-0.0627298,-0.555147}
,
{0.0468853,-0.332771,-0.647436,-0.562222,-0.376713,-0.323114}
,
{-0.27169,-0.461688,-0.394489,-0.538364,-0.0749488,-0.153856}
,
{-0.137221,-0.109701,-0.0850198,-0.275995,-0.18327,-0.138085}
,
{-0.236357,-0.594022,-0.883831,-0.564247,-0.464393,-0.537448}
,
{-0.295261,-0.387819,-0.653169,-0.756465,-0.398408,-0.486354}
,
{0.0221362,-0.504277,-0.723487,-0.400892,-0.372801,-0.472182}
,
{-0.0746254,-0.347048,-0.586143,-0.417508,-0.325504,-0.508563}
,
{-0.264084,-0.52754,-0.869563,-0.557193,-0.594228,-0.500187}
,
{0.118795,-0.00803496,0.000346639,0.23369,0.169297,0.0191782}
,
{-0.0672693,-0.35106,-0.522128,-0.422421,-0.244825,-0.398426}
,
{-0.0959278,0.0207502,-0.0608301,0.0415551,0.106431,-0.0265677}
,
{-0.389099,-0.339096,-0.405965,-0.677745,-0.438627,-0.497149}
,
{-0.0669927,-0.393076,-0.690975,-0.43675,-0.587818,-0.353082}
,
{-0.017979,-0.0194476,-0.125284,0.0693391,0.213508,-0.212397}
,
{-0.0265063,0.0196445,-0.155345,-0.0604488,0.00412938,-0.00292301}
,
{-0.232548,-0.608597,-0.642783,-0.707385,-0.544196,-0.332937}
,
{-0.199662,-0.428268,-0.513456,-0.39444,-0.335849,-0.520847}
,
{-0.125365,-0.214535,-0.30586,-0.460482,-0.383661,-0.252206}
,
{-0.309094,-0.234447,-0.411946,-0.576442,-0.195717,-0.36677}
,
{-0.298213,-0.323835,-0.630134,-0.484574,-0.389775,-0.300768}
,
{-0.0960254,-0.48946,-0.687637,-0.351958,-0.313544,-0.295973}
,
{0.116956,-0.0486849,-0.0781413,-0.0934989,0.0269878,0.0987664}
,
{-0.265167,-0.512733,-0.495298,-0.493163,-0.199477,-0.327398}
,
{0.0295733,-0.290354,-0.218166,-0.398875,-0.309041,-0.212124}
,
{-0.0823659,-0.236091,-0.288285,-0.329831,-0.355496,-0.548444}
,
{-0.0421962,-0.32874,-0.472668,-0.319671,-0.221133,-0.373557}
,
{0.158888,-0.330706,-0.587519,-0.32527,-0.327745,-0.170484}
,
{0.43577,0.0642513,-0.610195,-0.16985,-0.280321,-0.320871}
,
{0.0501139,0.121236,-0.193637,0.110682,0.177992,0.0329616}
,
{0.176411,-0.0180677,-0.205974,-0.098105,0.220849,0.00268255}
,
{-0.0414217,0.0521582,0.0822166,0.0787391,-0.0511104,0.0393761}
,
{-0.153899,-0.0761212,0.0385818,-0.0710654,-0.0795521,0.0164185}
,
{-0.103411,-0.0497272,-0.120019,-0.0385802,0.0133403,0.0131662}
,
{0.0911003,-0.0417895,0.117942,-0.0654804,0.154901,0.0418009}
,
{0.0201417,0.167134,-0.105583,-0.0439771,-0.0871019,-0.120104}
,
{0.0862774,0.0636273,-0.0491171,-0.125439,-0.123511,0.127816}
,
{-0.16344,-0.106278,-0.0275731,0.0943582,-0.0655866,0.0783785}
,
{0.0654963,0.0527665,0.0715955,0.0697993,-0.0665671,-0.0364734}
,
{0.208002,0.0579435,0.022071,-0.0529917,-0.142337,0.0328417}
,
{-0.19763,-0.0586543,0.0869557,-0.18222,-0.0129763,-0.0142835}
,
{0.0682025,0.0823148,-0.124956,-0.133942,-0.00724097,0.0226072}
,
{0.053468,0.0568775,-0.170537,0.154168,0.0800408,0.0827261}
,
{-0.104336,0.189736,0.0488409,0.0385722,-0.0539422,0.0997149}
,
{0.0898035,-0.156954,0.0167727,0.0452372,-0.0336517,-0.0652378}
,
{0.0663917,0.187276,-0.0392849,-0.0583515,0.157288,-0.112695}
,
{0.162911,0.146989,-0.0851362,-0.0865181,0.103223,0.0519461}
,
{-0.131744,-0.0715291,0.0819896,0.068101,-0.0644842,0.0691982}
,
{0.0649454,-0.0804364,-0.0316151,0.00487315,-0.0249548,0.0233628}
,
{0.0400886,0.0152286,-0.147819,0.0991814,-0.0191587,-0.0719983}
,
{0.10574,-0.0184435,0.0584426,-0.0839408,0.155454,0.0452485}
,
{0.0896297,-0.0110175,0.0365418,0.0894643,0.0261016,-0.0545133}
,
{-0.187618,-3.99494e-05,0.117873,0.0322005,-0.124025,0.0189988}
,
{-0.0668804,-0.0670655,-0.0295187,-0.0458071,0.0393829,-0.0756403}
,
{-0.111728,-0.00611339,-0.0577108,-0.062036,0.0490809,0.0124746}
,
{0.0179426,0.0901005,0.156139,-0.0810747,0.0393629,0.0892024}
,
{-0.131964,-0.124431,-0.100057,0.248449,-0.123152,-0.0994516}
,
{0.186558,0.0453187,-0.0405603,-0.0228767,0.0054948,0.0834235}
,
{-0.0469476,-0.0149947,-0.0369876,-0.0167588,-0.0285242,0.0350425}
,
{-0.219123,-0.0266283,0.0130844,-0.163979,-0.113779,0.0472032}
,
{0.235222,0.0312064,0.143632,0.0764753,0.00569325,-0.0671678}
,
{0.00938997,0.00219346,0.130919,-0.0521718,0.122688,-0.0992735}
,
{-0.0143818,-0.0918896,0.0602926,0.0378125,-0.00523273,0.112148}
,
{0.0929712,0.144194,-0.121994,0.269896,0.0630057,0.1754}
,
{0.0525371,0.154424,0.0094171,-0.0945943,-0.0970127,0.0388989}
,
{-0.00702668,-0.115254,0.0873974,0.0778956,0.112782,-0.0277387}
,
{-0.0401161,-0.0289413,0.0519127,0.00503149,0.0923907,-0.134755}
,
{0.154101,0.0569275,0.0854757,0.0964078,-0.0150966,0.0812936}
,
{0.0838751,-0.0637346,-0.0395024,-0.163279,-0.00925686,-0.0535304}
,
{-0.149768,0.0593148,0.000208123,0.156065,0.197967,0.0792719}
,
{0.135273,-0.0532223,0.109342,0.206866,0.080163,0.0644809}
,
{-0.145508,0.241933,-0.169522,0.11833,0.0771006,-0.0204346}
,
{0.135549,-0.182068,0.241726,-0.161209,0.0056991,0.199498}
,
{-0.0254202,0.113443,0.00726987,0.0736732,-0.0759217,-0.0161622}
,
{0.046358,0.118415,0.385268,0.240776,0.103198,-0.0254288}
,
{-0.0020321,-0.0365677,0.148447,-0.000713499,0.23154,0.300439}
,
{-0.0254945,0.107585,0.292703,0.0883239,0.133321,0.0230134}
,
{-0.0666705,0.279849,0.0715992,-0.114206,0.00050022,0.0776792}
,
{0.123389,0.0496117,0.165102,0.168536,0.102938,0.291833}
 };
  static const float bias2[1] = { 0.448301 };
  static const float weights2[][1] = { {0.00272845}
,
{-0.00809325}
,
{-0.0622014}
,
{0.028557}
,
{0.00532832}
,
{-0.00266905}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_16_0_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_16_0_49(v, index);
}
static int assign_gen_lepton_prior_16_0_49() {
  global_gen_lepton_prior.at(16,0,49) = &specialized_gen_lepton_prior_16_0_49;
  return 0;
}
static int initialize_gen_lepton_prior_16_0_49 = assign_gen_lepton_prior_16_0_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_16_1_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.174654,-0.31718,-0.20117,-0.162564,-0.555916,-0.244186 };
  static const float weights1[][6] = { {-0.15571,0.0665552,-0.0426692,-0.139863,-0.486203,-0.0543813}
,
{-0.174828,-0.0518981,-0.190219,-0.154948,-0.405971,-0.112018}
,
{-0.101535,-0.0645091,0.092047,0.0395367,-0.420632,-0.251273}
,
{-0.0664467,-0.0306184,-0.0758837,-0.207431,-0.0955117,-0.042573}
,
{-0.0195865,-0.401489,-0.167484,-0.366638,-0.649796,-0.468709}
,
{-0.365392,-0.381433,-0.184321,0.053635,-0.729389,-0.399525}
,
{-0.0196143,-0.316993,-0.182949,-0.104015,-0.651638,-0.331172}
,
{-0.110987,-0.258402,0.000545349,-0.196767,-0.691101,-0.213639}
,
{-0.279877,-0.516235,-0.192234,-0.249314,-0.638993,-0.115948}
,
{0.0140636,0.219073,0.165216,-0.161434,0.358308,0.183945}
,
{-0.0263763,-0.202675,-0.020401,-0.101963,-0.529885,-0.38492}
,
{0.0165833,0.161619,-0.163404,0.0717862,0.113285,0.0690668}
,
{-0.350849,-0.327272,-0.225667,-0.117626,-0.547118,-0.316735}
,
{-0.0657251,-0.408141,-0.250184,-0.227839,-0.509052,-0.30265}
,
{-0.0246547,-0.0750893,-0.122772,-0.0852855,0.182876,0.107353}
,
{-0.156957,0.209399,0.138238,-0.0813801,0.0510087,-0.0514893}
,
{-0.0929681,-0.319113,-0.432925,-0.148401,-0.593716,-0.0647026}
,
{-0.241347,-0.185018,-0.204955,-0.378033,-0.555937,-0.0638101}
,
{-0.0586011,-0.0916357,0.021986,0.011056,-0.571378,-0.225458}
,
{-0.115619,-0.165144,-0.312396,-0.076115,-0.570291,-0.295797}
,
{-0.218296,-0.310882,-0.13634,-0.186898,-0.566566,-0.298499}
,
{-0.218018,-0.21235,-0.0924881,-0.104198,-0.305174,-0.259617}
,
{-0.0445425,-0.0790755,-0.0875821,-0.175969,-0.200261,-0.0645817}
,
{-0.180344,-0.242845,-0.0393659,-0.209489,-0.539963,-0.222306}
,
{0.139645,-0.0707028,-0.243419,-0.112727,-0.17423,0.125498}
,
{-0.0269851,0.134132,-0.306398,-0.109263,-0.180425,-0.194204}
,
{0.0760245,-0.239809,-0.0786978,0.0686478,-0.178548,-0.100103}
,
{0.0195949,-0.189662,0.112409,0.160972,-0.443012,-0.0951575}
,
{-0.0563913,0.0180396,0.125648,-0.130931,-0.306957,0.0196111}
,
{-0.00126893,-0.176014,-0.14707,0.127116,0.106564,0.0978385}
,
{0.105508,0.0333369,0.135636,0.0567689,0.134879,-0.0769421}
,
{-0.184358,0.0587502,0.125185,-0.113219,-0.223646,-0.209839}
,
{-0.0293473,0.0332625,-0.134964,-0.0177219,-0.087211,0.0221812}
,
{-0.0821739,-0.0130452,0.0396182,0.0161626,-0.0144317,-0.0424483}
,
{0.0309862,0.163614,0.109728,-0.0365795,0.130076,0.131836}
,
{0.172187,0.122453,0.119685,0.185991,-0.0212082,0.18113}
,
{-0.0887272,0.020032,0.1164,0.109516,-0.114491,0.0141951}
,
{0.0682484,-0.134908,-0.0516481,-0.0825546,-0.0247051,0.00270934}
,
{-0.00397122,0.00561285,0.028022,-0.0216708,0.0690628,-0.0677023}
,
{-0.0960756,-0.101029,-0.0344691,0.0533538,-0.0192427,0.0235569}
,
{0.0285557,-0.0789358,-0.126559,0.126719,0.00591594,-0.199584}
,
{0.120798,-0.084442,-0.0374895,0.193267,-0.0547982,0.00575452}
,
{-0.182257,-0.0774714,-0.0605784,-0.147268,-0.00656375,0.113327}
,
{-0.0703418,0.00728258,-0.0907912,-0.0372853,0.0425176,-0.0349154}
,
{0.000111212,-0.221403,0.130039,-0.0978116,0.00384817,0.0383519}
,
{-0.186258,0.22535,-0.0545315,0.0119315,0.0591347,-0.130555}
,
{-0.0260495,-0.0925928,-0.0223351,0.0918712,-0.0949728,0.0959321}
,
{0.145603,0.0524718,-0.0999267,-0.041529,-0.0630624,-0.0660439}
,
{-0.0533095,-0.0453056,0.140237,0.193802,0.168535,0.113987}
,
{0.0773386,0.128834,0.155141,-0.0620441,-0.0617797,0.17728}
,
{0.0293862,0.041479,-0.0866088,-0.00849553,0.0848462,-0.00449995}
,
{0.0714063,-0.00984993,0.0851373,0.0560431,-0.138652,-0.0683621}
,
{-0.0900244,-0.110412,0.00823239,0.0517541,-0.101413,-0.221332}
,
{0.10292,-0.0723001,-0.182213,-0.0706343,-0.0419908,-0.238032}
,
{0.0732163,0.0319147,-0.0399032,0.0023742,0.106348,0.140854}
,
{-0.0436652,0.0189399,-0.00349458,0.0444047,0.0541008,0.0252485}
,
{0.0904846,0.155191,-0.0260618,0.0605364,0.0823595,0.144369}
,
{0.171688,-0.104081,0.0914941,0.210442,-0.0464058,0.0361605}
,
{-0.0188031,0.138163,-0.0638663,-0.0406489,-0.0911733,-0.0430898}
,
{0.0411819,0.121391,0.132718,0.132256,0.0515999,0.129696}
,
{-0.0113555,-0.0735458,0.0822397,-0.130121,-0.0657694,-0.114816}
,
{0.286498,-0.0211862,-0.0098262,0.0133174,0.157109,0.178247}
,
{-0.123558,0.0669249,0.133519,-0.0115397,-0.00454044,-0.0800177}
,
{-0.0850232,0.183807,-0.0961771,-0.135011,0.147521,0.0516583}
,
{0.00729754,0.153533,0.0617614,0.0407254,0.0881827,0.0462134}
,
{-0.100535,0.229116,0.0228036,0.113005,0.0487632,0.0966553}
,
{0.0162689,-0.159895,-0.0217545,-0.0933957,-0.136225,-0.00117016}
,
{0.0624686,-0.132618,0.176762,0.0295402,0.217322,0.0789804}
,
{0.102246,-0.0732512,0.00320147,-0.0596625,-0.0149884,0.0597507}
,
{0.0488993,-0.0842241,-0.0458888,-0.0437581,-0.0991133,-0.120067}
,
{-0.0753331,-0.0419611,-0.0496004,0.0263584,-0.0827899,-0.00753567}
,
{-0.112295,-0.0165743,-0.0290022,0.157695,-0.14381,-0.187291}
,
{-0.137806,-0.0596547,-0.130288,0.0183629,0.137096,-0.00509173}
,
{0.058627,0.0100461,0.0206857,-0.0730654,-0.0273304,-0.16551}
,
{0.115533,0.16215,0.207362,0.139782,0.264028,-0.126515}
,
{0.114165,0.119039,0.0362829,0.110542,-0.0287035,-0.097935}
,
{0.00270511,0.0326674,0.136311,-0.105925,0.0889262,-0.206696}
,
{-0.0925227,0.177949,-0.152057,0.00692017,0.0479085,-0.0930552}
,
{0.229149,0.0754921,-0.0198205,0.067433,0.00162628,0.136402}
 };
  static const float bias2[1] = { 0.415132 };
  static const float weights2[][1] = { {0.00153497}
,
{-0.00429887}
,
{0.00215042}
,
{-0.00212103}
,
{-0.0855341}
,
{-0.000834113}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_16_1_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_16_1_49(v, index);
}
static int assign_gen_lepton_prior_16_1_49() {
  global_gen_lepton_prior.at(16,1,49) = &specialized_gen_lepton_prior_16_1_49;
  return 0;
}
static int initialize_gen_lepton_prior_16_1_49 = assign_gen_lepton_prior_16_1_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_16_2_49(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.00684034,-0.209621,-0.0281121,-0.0640994,-0.122946,-0.0695567 };
  static const float weights1[][6] = { {0.154009,-0.0707787,-0.0427096,0.126751,0.0129655,-0.150003}
,
{0.0133554,0.11762,-0.2384,-0.14424,-0.0924189,0.544099}
,
{0.144861,-0.331302,0.0386807,-0.157377,-0.158127,-0.352644}
,
{0.0023488,-0.00328299,-0.398561,-0.0571573,0.187942,1.00879}
,
{-0.0879415,-0.113858,0.0728936,-0.273797,-0.19971,-0.136371}
,
{-0.0106099,-0.232384,-0.109835,-0.293281,0.0835539,-0.249242}
,
{-0.0539516,-0.50592,-0.0620848,-0.165083,-0.185863,-0.145483}
,
{-0.251684,0.151656,-0.171392,-0.258689,-0.139187,0.610479}
,
{0.0839999,-0.157893,-0.119488,-0.25306,-0.281802,0.587688}
,
{-0.149077,0.211055,0.250184,-0.116714,-0.0853904,-0.0192049}
,
{0.00661008,-0.520551,-0.0904381,-0.152817,-0.0933817,0.990235}
,
{-0.103493,0.0137943,-0.103918,-0.185816,-0.0618436,0.0824681}
,
{0.0487334,-0.209163,0.20082,-0.130532,0.0319373,-0.345531}
,
{-0.0315906,-0.38661,-0.0173083,-0.0719022,-0.127213,-0.0206054}
,
{0.176926,-0.032293,-0.0762739,0.00350025,0.0339103,0.0718633}
,
{-0.0023846,0.043484,0.153755,-0.185568,0.0514171,-0.0537742}
,
{0.0859362,-0.375065,-0.223908,-0.108021,-0.108279,0.0811824}
,
{-0.230443,0.123481,-0.129483,-0.109066,-0.18636,0.0313087}
,
{-0.107082,0.193379,-0.226926,-0.128064,0.148723,-0.241389}
,
{-0.067536,-0.300822,-0.124553,0.0681893,-0.349102,0.279948}
,
{-0.206376,-0.0085468,-0.265936,0.016145,-0.351383,0.333748}
,
{-0.0561789,-0.415304,0.221449,0.00859379,-0.242874,0.054877}
,
{-0.143676,-0.0742387,0.131409,-0.0397796,0.22226,-0.235968}
,
{-0.165515,-0.374404,-0.11322,-0.239538,-0.179476,0.0131382}
,
{-0.0927595,-0.115051,-0.107086,-0.225411,0.0360982,-0.167956}
,
{-0.00422413,0.103666,0.129169,-0.07963,0.140786,-0.531155}
,
{0.0519957,0.0626579,-0.134734,0.104016,0.016651,0.421469}
,
{-0.0379919,0.17124,-0.116253,0.116701,0.0640925,0.0116936}
,
{-0.197987,-0.0381811,0.0658383,0.196131,-0.0876247,-0.0738211}
,
{-0.177131,0.0474391,-0.0344381,0.0978166,-0.24983,-0.0487019}
,
{-0.0579029,0.0213946,0.22864,0.101995,-0.075446,0.104009}
,
{0.21533,0.221717,0.0263634,0.0914544,-0.0222278,-0.00182434}
,
{-0.219567,0.0159763,0.000301433,-0.0861375,0.0335535,0.12457}
,
{0.0883375,0.0145944,0.20822,-0.00405021,-0.228668,-0.0142942}
,
{0.0886107,0.156326,0.17071,-0.0567999,0.107161,0.0658419}
,
{0.160767,0.0288862,0.190805,0.147281,0.0511611,-0.018649}
,
{0.054878,0.0805071,-0.173215,-0.126712,-0.177658,0.0110829}
,
{-0.0332094,0.0530514,0.0258992,0.146414,0.00922252,-0.0412706}
,
{-0.0895313,0.178696,0.18601,-0.111616,0.146798,0.0246636}
,
{0.214701,0.03686,0.0336965,0.0699029,0.18896,-0.245865}
,
{0.0458417,0.100465,0.189526,0.145308,0.0727997,0.12038}
,
{0.0540707,-0.0459353,-0.314761,-0.0365714,-0.0909121,0.0264906}
,
{0.0806731,0.0936558,0.116375,0.0348427,0.190444,0.133289}
,
{-0.219277,-0.0315691,0.0304444,-0.1534,-0.163736,-0.0285277}
,
{0.0685613,0.0239499,0.00439676,-0.0261939,0.00797339,0.00518881}
,
{0.246007,0.163235,-0.0627059,0.206151,0.126144,0.050332}
,
{0.00629119,0.0708986,-0.0951409,0.0517427,-0.12927,0.00167896}
,
{0.0847243,-0.0141588,0.127391,0.0300643,0.135626,-0.0676061}
,
{-0.0619274,-0.0734532,0.0867269,-0.0191782,-0.00301756,0.0231314}
,
{0.0305289,0.145862,0.00101478,0.306707,0.294707,0.00615908}
,
{0.0644594,0.153347,0.150617,0.136134,-0.123815,-0.118236}
,
{0.00508277,-0.0318212,0.395047,0.193459,-0.0503656,0.00732304}
,
{0.206119,-0.0645731,-0.105103,-0.0929546,0.126861,0.117421}
,
{-0.0838982,-0.0569942,-0.0203784,-0.125262,0.0140717,0.0064858}
,
{-0.0258436,0.0492742,0.174429,-0.0677071,-0.150325,0.0268094}
,
{0.0261776,0.0464159,-0.0252619,-0.0696842,0.118925,-0.057592}
,
{-0.147417,-0.0227509,-0.00581266,0.0607713,-0.13144,-0.0704742}
,
{0.0166926,0.0324463,-0.0180574,0.0045835,-0.0505085,-0.184781}
,
{0.0326859,-0.166526,0.141997,0.0420013,-0.00773346,0.235775}
,
{-0.0285231,-0.135582,-0.236831,0.222547,0.182858,-0.0167322}
,
{-0.141504,0.00397978,0.0678895,0.012159,0.220125,-0.0257595}
,
{-0.191551,0.105899,-0.234956,0.0655245,-0.0270803,0.0167879}
,
{-0.104329,-0.0445451,-0.122326,0.108654,-0.0277289,0.146154}
,
{-0.224699,0.113363,-0.0721208,0.0588135,-0.0855206,-0.0451264}
,
{-0.0542968,0.0922007,0.0811778,0.17077,0.0139723,-0.12052}
,
{0.0844547,0.0104641,-0.0269548,0.0772752,-0.167304,0.143109}
,
{-0.0619512,-0.0322227,0.038046,-0.00728776,0.0551895,-0.123921}
,
{-0.097768,0.180387,-0.150082,0.0779545,-0.114978,-0.0022833}
,
{-0.0644377,-0.0239691,-0.0818029,0.185636,0.185838,0.11966}
,
{-0.0304652,0.23672,0.102582,0.049153,-0.0672459,0.0618867}
,
{-0.0319685,-0.118567,0.096362,-0.00047121,-0.0509909,-0.101749}
,
{-0.178377,-0.180054,-0.0704065,0.224565,0.170536,0.0870752}
,
{0.0869034,0.113813,-0.208741,0.108909,-0.104931,-0.0797142}
,
{-0.160006,-0.0246698,-0.134862,-0.0202422,-0.214319,0.125644}
,
{0.150323,-0.0542149,0.00617132,0.0190253,-0.00510986,0.0490893}
,
{0.124648,0.188166,-0.0183336,0.0875454,0.137206,-0.011195}
,
{0.0454323,0.126595,-0.154095,-0.104373,-0.0425773,-0.0403895}
,
{0.14112,0.00634946,-0.0253508,0.0353775,-0.0978938,-0.107452}
,
{0.10712,-0.0374352,0.108015,0.0678432,-0.265678,0.0222289}
 };
  static const float bias2[1] = { 0.14377 };
  static const float weights2[][1] = { {-0.133104}
,
{0.0702096}
,
{-0.0605549}
,
{-0.103444}
,
{-0.231837}
,
{0.0125535}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_16_2_49(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_16_2_49(v, index);
}
static int assign_gen_lepton_prior_16_2_49() {
  global_gen_lepton_prior.at(16,2,49) = &specialized_gen_lepton_prior_16_2_49;
  return 0;
}
static int initialize_gen_lepton_prior_16_2_49 = assign_gen_lepton_prior_16_2_49();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_1_19(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.020784,-0.0815338,-0.0317291,0.094619,-0.0781477,0.171227 };
  static const float weights1[][6] = { {-0.00117421,0.0756884,-0.199833,-0.0820792,0.116708,-0.0665593}
,
{0.141018,0.287107,-0.0777807,-0.0887411,-0.0115971,-0.0630816}
,
{0.369703,-0.154305,0.146474,0.159986,-0.0785565,-0.0519245}
,
{-0.644221,-0.38287,-0.176552,-0.357809,0.2054,0.140928}
,
{-0.0732179,-0.271854,-0.117139,0.0570437,0.115562,0.140643}
,
{0.197439,0.0512094,-0.0181217,0.173773,-0.0172832,0.0704242}
,
{0.128687,-0.0270647,0.156449,0.0552934,0.0800138,0.230467}
,
{-0.137586,0.160325,-0.0185298,0.0852812,-0.0497837,-0.0525392}
,
{-0.452535,0.122768,0.0617403,0.00939742,0.0705968,-0.103446}
,
{-0.103391,-0.0840403,0.0231648,-0.0944466,-0.0112296,-0.10741}
,
{0.0411152,0.143184,-0.0251692,-0.145239,0.0053208,0.207326}
,
{-0.00666016,-0.0549389,0.0647483,0.000480262,0.105312,-0.124482}
,
{-0.0257957,-0.0962916,-0.119177,0.058173,0.0125906,-0.0944406}
,
{0.37184,0.121347,0.195253,-0.130361,-0.0560861,0.0238879}
,
{-0.177614,-0.00228471,-0.0289669,0.169179,-0.0496446,0.0209833}
,
{0.126289,0.158457,0.157355,-0.0748274,-0.00826877,0.125602}
,
{-0.147969,-0.157431,-0.201214,0.0846709,0.0761318,-0.171098}
,
{0.222836,0.0272264,0.164007,0.16674,-0.0736218,0.0254374}
,
{0.0287753,-0.0832093,0.0703923,-0.0983545,-0.205887,0.0927762}
,
{-0.156752,0.0772656,-0.0277883,0.230413,0.201528,0.166889}
,
{0.0545104,0.0478427,0.163264,0.0328128,0.0429168,0.224913}
,
{0.0201651,0.122723,-0.0962147,0.164031,-0.0985589,-0.254134}
,
{0.0427484,0.0843508,0.0364906,-0.0500476,-0.00782479,-0.0718016}
,
{-0.0790313,-0.0413249,0.082572,0.154107,0.0120584,0.0646979}
,
{-0.121126,-0.0669585,-0.0551964,-0.10601,0.0481544,0.00524389}
,
{0.067178,0.081343,0.0531746,-0.0163238,0.0245507,0.101895}
,
{0.199889,-0.0583026,0.00686258,-0.103646,-0.0343997,0.145527}
,
{0.0486773,-0.0206479,0.168263,-0.0167668,-0.104716,-0.181438}
,
{0.0678366,-0.088868,0.138433,0.00146923,0.0499054,0.0464383}
,
{-0.129257,0.247479,0.183935,-0.172288,-0.155981,-0.107349}
,
{-0.00226452,0.344391,-0.274492,-0.118439,-0.0319815,-0.184335}
,
{0.183279,-0.0749254,-0.029224,-0.045429,0.249918,-0.120676}
,
{-0.112658,0.205956,-0.127517,0.050502,0.0713739,-0.0298606}
,
{-0.066032,0.0359989,0.0831218,0.103591,-0.0228517,0.0299466}
,
{-0.405183,-0.0476656,-0.147507,0.0497061,0.0213544,-0.174662}
,
{-0.0402727,0.0158241,0.0488084,0.116618,-0.186951,-0.21191}
,
{0.0730057,-0.0561923,0.0206793,0.0428463,0.0679448,0.0207074}
,
{-0.26186,0.0785639,0.0237657,0.182912,0.0347348,0.0528914}
,
{-0.427832,-0.266066,0.0281586,-0.148275,0.0512678,0.128657}
,
{-0.480846,-0.160903,-0.0416284,-0.0535303,-0.197386,-0.212246}
,
{0.156606,-0.122607,-0.0749581,0.100271,-0.144431,-0.473597}
,
{0.746141,0.39935,-0.255683,-0.288786,0.214571,0.141362}
,
{-0.144118,0.0166429,-0.168594,-0.00593455,-0.127044,-0.259159}
,
{0.125204,-0.0955615,0.172393,0.0898199,-0.206799,-0.0437256}
,
{0.0652048,-0.0605493,-0.123278,-0.0828533,-0.0545166,-0.291448}
,
{0.236819,0.0939032,-0.157199,0.0572053,0.187074,0.0293868}
,
{0.16979,0.0997993,-0.168695,0.139098,0.209414,-0.0890806}
,
{-0.0784541,0.0401277,0.00877438,-0.0853839,-0.0886547,0.00731965}
,
{0.422321,-0.0420819,0.212516,-0.165633,-0.0309321,0.112559}
,
{0.0411608,-0.262106,0.158555,0.274402,-0.147387,-0.296257}
,
{0.319866,-0.00219869,-0.0966614,0.221439,0.0858358,-0.178068}
,
{0.149362,0.202842,0.038044,-0.168929,-0.0550799,0.250925}
,
{-0.233897,-0.105142,0.127505,0.0866704,-0.000715873,0.0871346}
,
{0.193677,-0.162963,-0.00706144,0.0696254,-0.0166923,-0.387785}
,
{0.170963,-0.161088,-0.088466,0.0318186,-0.0838741,-0.131125}
,
{-0.0402931,-0.0646786,-0.050363,0.0872856,-0.0960023,0.134294}
,
{-0.216339,0.039992,0.0456042,0.14304,-0.108982,0.153953}
,
{-0.120232,-0.0168282,-0.101098,0.0716899,0.202765,0.116999}
,
{0.0766275,-0.00969074,0.268358,0.210071,-0.0371538,-0.0702021}
,
{-0.1672,0.098468,-0.112913,0.166139,-0.0214328,0.0804703}
,
{-0.0444361,0.04495,0.131755,-0.0514017,-0.179114,0.189571}
,
{0.0174843,-0.115727,-0.114781,0.237654,-0.00941452,-0.0965563}
,
{0.00207962,-0.0947229,0.0420496,-0.00732612,-0.0686289,-0.114896}
,
{0.093105,0.0642148,-0.0257871,0.187043,0.0383706,0.0952604}
,
{-0.0485123,-0.142149,-0.147598,0.0432747,-0.141654,0.218241}
,
{-0.0501861,0.118111,-0.00273489,0.106499,0.0043415,-0.127693}
,
{0.0635906,0.122632,0.0134554,0.0391783,0.076001,0.0558149}
,
{0.0745046,-0.0646019,-0.0148751,0.151926,-0.181905,0.103598}
,
{0.00786184,0.122499,0.006535,0.0657655,0.00439686,0.0288367}
,
{0.104462,-0.0603678,-0.0147691,-0.080141,0.011416,-0.115468}
,
{-0.00858109,0.147371,0.0723618,-0.103135,0.014523,0.0055042}
,
{-0.0149083,0.0650538,0.0366927,-0.0821746,0.0979996,-0.2567}
,
{0.00454254,-0.0479842,-0.0540206,-0.248366,0.0414839,0.0522948}
,
{-0.0609445,-0.176118,-0.197431,-0.0200617,0.0515941,-0.0894786}
,
{0.0745052,0.19067,0.217429,-0.106639,-0.229581,-0.0754079}
,
{-0.0474715,-0.0833598,0.0248163,0.0852059,-0.0147004,0.0223479}
,
{0.0521538,0.0351036,0.185226,-0.0623196,0.189403,-0.0836335}
,
{0.125447,-0.230491,0.117518,0.173528,-0.160002,-0.0482502}
,
{0.143432,-0.0270146,-0.0433528,-0.113179,-0.0301183,0.135574}
 };
  static const float bias2[1] = { -0.100714 };
  static const float weights2[][1] = { {-0.157011}
,
{0.0855543}
,
{0.195236}
,
{-0.0560948}
,
{0.173279}
,
{-0.12703}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_1_19(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_1_19(v, index);
}
static int assign_gen_lepton_prior_1_1_19() {
  global_gen_lepton_prior.at(1,1,19) = &specialized_gen_lepton_prior_1_1_19;
  return 0;
}
static int initialize_gen_lepton_prior_1_1_19 = assign_gen_lepton_prior_1_1_19();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_1(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.243451,-0.0997662,0.605902,-0.153224,-0.0270393,0.346271 };
  static const float weights1[][6] = { {0.131976,-0.0340126,0.319012,-0.198207,-0.280332,0.244337}
,
{-0.09124,0.131486,0.0131221,-0.0286839,-0.0636353,-0.0533227}
,
{-0.0960581,-0.0620406,-0.229545,0.151483,-0.0193739,0.0725698}
,
{0.651437,0.26837,0.540862,-1.07184,0.173746,-0.0685202}
,
{0.342158,-0.217755,0.692325,-0.0835313,-0.0172157,0.301011}
,
{0.439459,-0.0588388,0.547397,0.0600578,-0.0404665,0.238831}
,
{0.118181,-0.126072,0.610542,-0.281059,-0.0328894,0.465083}
,
{-0.0658048,-0.00466037,0.0380416,-0.0959746,-0.18033,0.0261671}
,
{-0.0995329,-0.0236076,0.105471,-0.243123,0.0975183,-0.0512332}
,
{0.0762908,0.135725,0.15546,0.194116,-0.0543357,-0.0176467}
,
{0.0967196,0.129048,0.0290452,0.082834,-0.0127137,0.0988621}
,
{-0.359986,-0.00756197,-0.097022,0.0415643,-0.155094,-0.00291313}
,
{0.137912,0.01009,-0.021618,-0.0884915,0.000657861,0.0640001}
,
{0.0368987,0.0503667,0.176331,-0.311075,-0.0426497,-0.082786}
,
{-0.05932,-0.0414869,-0.16778,-0.107767,-0.0356725,-0.0268241}
,
{-0.0278046,-0.209611,0.0708103,0.170471,-0.159941,-0.0591577}
,
{-0.751309,-0.344909,0.33749,0.376347,-0.0978196,0.382173}
,
{-0.162607,0.17434,-0.0155652,-0.260557,0.119765,-0.035269}
,
{0.45203,-0.0508205,0.0195764,-0.502149,0.200466,0.0666486}
,
{-0.258483,0.0386066,-0.204161,0.121011,0.0985505,0.171418}
,
{0.0836715,0.101394,0.0401228,-0.114481,-0.0660592,-0.0444908}
,
{0.053248,0.0838645,0.0210546,-0.222837,0.035086,0.00118573}
,
{-0.194611,-0.00840211,0.120357,0.117492,-0.0131679,-0.119564}
,
{0.0921991,-0.0385147,0.0990571,-0.168293,-0.0896029,-0.0552462}
,
{0.126742,0.142717,0.139626,0.033889,0.00640344,0.14248}
,
{0.073852,-0.0523126,-0.0618026,0.0555346,-0.0082989,0.103444}
,
{0.0559464,0.046676,-0.0842697,0.135413,-0.0751887,0.0807056}
,
{0.00982812,0.134285,0.0529309,0.0636043,-0.145373,0.00440224}
,
{0.106379,-0.00985263,0.298082,-0.459773,0.465573,0.0325555}
,
{0.176372,0.0150255,-0.188205,0.230345,-0.204403,-0.127364}
,
{0.0485728,-0.035153,0.0418891,-0.0266748,-0.0978911,-0.0238558}
,
{-0.0639302,-0.03644,0.0742524,-0.0623576,-0.109798,0.0276806}
,
{-0.0555513,0.0403974,-0.0736107,0.0017766,-0.112004,0.0502566}
,
{-0.207464,0.125584,-0.166525,0.035408,-0.184077,-0.0409906}
,
{0.0292705,0.0759355,-0.146207,0.0221123,-0.0406739,0.115312}
,
{-0.0398114,0.0440686,0.107181,-0.0275424,0.090976,-0.0573356}
,
{0.358569,-0.0069858,-0.0572123,-0.0640712,0.225129,0.0424986}
,
{-0.0607974,0.0210946,-0.0764013,-0.0534012,-0.0473407,0.0480227}
,
{-0.234603,0.0756246,-0.225219,0.166175,0.0217573,0.136238}
,
{0.115484,0.0156558,-0.0340091,0.337967,0.000392285,0.0162685}
,
{0.0181818,-0.0676837,0.0694179,-0.109438,-0.110293,-0.0412181}
,
{-0.0705615,0.0382686,0.0319526,0.130749,0.220813,-0.0466486}
,
{-0.0526519,0.00108538,0.0209397,-0.223322,0.137567,-0.0226208}
,
{-0.065584,-0.0797215,0.0196604,-0.368221,-0.437073,0.000937846}
,
{-0.0450976,0.00386954,0.122183,-0.0476363,0.126096,-0.0852485}
,
{-0.033882,-0.0303974,0.028804,-0.138061,0.014126,-0.0302146}
,
{0.0431256,-0.0826088,0.122322,0.151671,-0.285373,-0.0633148}
,
{0.0306212,-0.0890899,-0.109329,-0.0688514,-0.0247395,0.0361604}
,
{0.0361062,0.00964601,-0.141052,-0.274801,-0.0239321,0.0715186}
,
{0.0328359,0.17511,-0.148766,0.0394517,0.133498,0.125365}
,
{0.0510578,-0.0202681,-0.0289857,0.0775506,-0.0710072,0.0193799}
,
{-0.096076,0.134206,-0.0199224,0.263519,-0.0577159,0.0158386}
,
{-0.0170398,-0.00664982,0.0461777,-0.0418017,0.0267004,-0.02157}
,
{0.214974,-0.102119,-0.129343,0.0356651,-0.0994549,0.0752907}
,
{0.0548549,-0.0200524,0.0476331,0.0482552,0.228962,-0.00592518}
,
{-0.0225415,-0.152362,0.0526517,-0.0219006,-0.00852918,-0.106282}
,
{0.0196199,-0.0804708,0.238364,-0.193598,-0.388558,-0.0732107}
,
{0.0474414,0.0596586,0.419192,0.0737677,0.0654153,0.0974296}
,
{0.0914966,-0.21991,-0.0263856,0.166529,-0.0535514,0.0141556}
,
{-0.0672863,0.043023,-0.0636851,-0.0927673,0.0882026,-0.0281551}
,
{-0.0478457,-0.0411051,-0.0120186,-0.0510274,0.0384324,-0.0395531}
,
{0.00687522,-0.199598,0.121445,-0.034922,-0.268355,0.0491478}
,
{-0.0684399,-0.0880861,-0.18948,-0.523017,-0.184102,-0.0512736}
,
{-0.0966521,0.262155,0.123258,0.0385452,0.0808993,-0.158649}
,
{0.0531393,0.0106527,0.0942248,0.0935069,0.0159339,-0.0140677}
,
{-0.0417785,-0.013596,0.055645,-0.0360459,0.119192,-0.0948798}
,
{-0.229916,0.22105,0.0948428,-0.137783,-0.205037,-0.195526}
,
{0.111726,0.26136,-0.114978,0.391234,0.345449,-0.184693}
,
{-0.0666657,0.0988873,-0.117374,0.020566,-0.263234,0.0330984}
,
{0.0521102,0.0549981,0.105505,-0.126729,0.156278,0.119171}
,
{0.0435176,-0.0588238,-0.0349378,-0.0608638,-0.147302,0.103677}
,
{-0.0959639,-0.0831622,-0.0348734,-0.0457172,-0.155093,-0.146731}
,
{0.257399,-0.139477,0.18542,0.226223,0.337011,-0.0518258}
,
{-0.00688083,0.0634262,0.0382387,-0.100007,-0.194548,0.0910148}
,
{0.178241,0.0420115,-0.130202,0.999487,0.180042,-0.0862408}
,
{-0.120782,-0.0112278,-0.14944,-0.0272937,0.115948,-0.200081}
,
{0.856085,0.903677,-0.971785,-0.71266,-0.460993,-0.878861}
,
{0.000526709,0.198925,-0.115001,-0.0745418,-0.153806,-0.137112}
,
{0.0150542,-0.216889,0.273375,-0.524228,0.726212,0.0841998}
 };
  static const float bias2[1] = { 0.385101 };
  static const float weights2[][1] = { {-0.161441}
,
{-0.0450763}
,
{0.0545683}
,
{0.0670538}
,
{0.0363799}
,
{0.0928537}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_1(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_1(v, index);
}
static int assign_gen_lepton_prior_1_0_1() {
  global_gen_lepton_prior.at(1,0,1) = &specialized_gen_lepton_prior_1_0_1;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_1 = assign_gen_lepton_prior_1_0_1();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_2(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { 0.0813139,0.315844,0.463878,0.34136,-0.124167,0.381958 };
  static const float weights1[][6] = { {0.403417,0.214977,0.620364,0.588049,0.206765,0.513196}
,
{-0.309086,0.0676886,0.0702461,0.0390961,-0.0305859,-0.338787}
,
{0.528642,-0.352862,0.0651511,0.148656,-0.110954,0.162521}
,
{-0.516102,0.436107,0.606483,0.607366,0.558422,0.391594}
,
{0.0264032,0.43119,0.433702,0.303027,-0.161936,0.314748}
,
{0.109702,0.257724,0.411967,0.259539,0.0564043,0.265551}
,
{0.161047,0.255791,0.433642,0.370839,0.0726093,0.373968}
,
{-0.175973,-0.102014,-0.0758166,0.15672,-0.163563,0.0065344}
,
{0.0676595,-0.205084,0.122115,0.0476212,-0.111649,0.120444}
,
{-0.121929,-0.232887,-0.0589399,0.00648579,0.167414,0.0527042}
,
{-0.0892565,-0.0192966,0.228324,-0.0901467,-0.0664457,-0.0188627}
,
{0.0406935,-0.0999303,-0.136735,0.00515044,-0.0698094,-0.049718}
,
{-0.363684,0.0146495,0.0765267,-0.0613992,-0.0978332,-0.054912}
,
{0.112878,0.269622,0.37907,0.435916,-0.314642,0.0832293}
,
{-0.0223651,-0.162581,0.0594295,0.0602923,0.0533754,0.130411}
,
{-0.070675,-0.0723939,-0.1742,-0.00214842,-0.0273738,-0.168677}
,
{-0.118458,0.274382,0.281874,0.373823,-0.148425,0.416949}
,
{0.0528954,-0.0649753,0.0491869,0.0385681,-0.130492,-0.241952}
,
{-0.246156,-0.048497,0.0237023,0.0829549,-0.120827,0.158414}
,
{0.0908689,-0.0183711,0.11376,0.0633576,-0.0396621,-0.0119599}
,
{0.0534451,0.170905,0.0196667,-0.184448,-0.209036,-0.173127}
,
{-0.217703,-0.120296,0.0540928,-0.016246,-0.317859,0.0259064}
,
{0.0392157,-0.0183654,0.0133388,0.0128295,-0.206782,0.0929071}
,
{-0.117358,0.099884,-0.116837,0.0373173,0.145797,0.0876883}
,
{0.156762,0.0909268,0.29119,0.221605,0.209675,0.259007}
,
{0.0941238,0.269666,0.0076416,0.153588,0.0607149,-0.0986697}
,
{0.142072,-0.0143099,-0.179033,-0.0127703,0.189376,-0.114564}
,
{0.0101461,0.0467898,-0.193558,-0.025976,0.378475,0.192376}
,
{0.576261,0.16156,0.325358,0.359098,-0.150414,0.123431}
,
{0.242103,-0.0897101,-0.148086,0.160628,-0.170036,0.0158379}
,
{-0.194862,0.210935,-0.119027,0.0316352,-0.091218,0.135036}
,
{-0.220634,-0.176209,0.108096,-0.125989,-0.0677153,-0.00864178}
,
{-0.0594792,0.0857481,-0.0440559,0.00190572,0.174371,0.0783903}
,
{-0.0707817,-0.206676,-0.00719027,-0.15758,-0.0864731,0.0445565}
,
{-0.153218,0.025981,0.100891,-0.10887,-0.178727,-0.141099}
,
{0.00946675,0.0552097,-0.130881,0.132315,-0.139712,0.067151}
,
{0.284574,0.265988,-0.22242,0.023399,-0.00982902,0.281141}
,
{-0.029623,-0.055123,0.017785,0.0343649,0.147603,-0.0521903}
,
{0.170721,-0.0705425,0.00843126,0.0557896,-0.035666,-0.214446}
,
{0.113017,0.0145106,0.0332437,-0.121519,0.163539,0.208671}
,
{-0.0675584,-0.0342162,-0.0311898,0.0550335,0.015184,0.0425018}
,
{0.0517684,-0.116776,0.0684536,-0.0685751,0.387628,0.0606372}
,
{-0.06984,-0.00925097,0.00340871,0.0389981,-0.0339364,-0.093217}
,
{-0.0913645,-0.0273318,0.0193138,-0.0197511,0.0622617,0.0242019}
,
{-0.104637,-0.0447221,0.00640064,0.0270368,-0.154584,0.0674269}
,
{0.0243971,-0.0352248,0.0346735,-0.0348748,-0.0480547,0.00196363}
,
{0.173352,-0.113734,-0.000707726,0.14633,-0.0880487,-0.0267598}
,
{0.0747549,0.0420715,-0.00430501,-0.0179386,-0.107774,-0.062846}
,
{-0.0241069,-0.0227844,0.0163818,-0.0167599,0.133067,0.00331699}
,
{0.10931,0.113844,0.0166202,-0.10845,-0.131442,0.016871}
,
{0.0903972,0.0337454,-0.00271578,-0.0239299,0.0465896,-0.0184717}
,
{-0.0148489,-0.126756,-0.0589729,0.14742,-0.16899,0.140864}
,
{-0.0495319,-0.00891229,0.0240208,0.00169274,-0.102459,-0.0833537}
,
{-0.282112,0.0838821,0.0549356,-0.0748268,0.117724,-0.130883}
,
{0.0481246,-0.0713777,0.0764038,-0.226154,-0.216707,0.0486602}
,
{0.0633362,-0.0241301,0.0255052,-0.119827,0.186528,-0.140919}
,
{0.0496748,0.162806,0.0945008,0.214703,0.0930711,0.24434}
,
{0.153267,0.0877515,0.247769,-0.114781,0.0591189,-0.0511053}
,
{-0.0252882,-0.255667,-0.0495424,0.15349,0.0564796,0.0225522}
,
{0.0246492,0.234144,0.144674,0.177189,0.0875293,0.0959112}
,
{0.115315,-0.0874844,0.143714,-0.119879,0.08237,-0.0760736}
,
{-0.193615,0.0814621,0.181926,-0.0310021,0.0959809,0.109801}
,
{0.0963109,0.264091,-0.269716,0.394296,-0.00180838,0.142796}
,
{-0.217823,-0.342043,-0.499922,-0.467231,-0.0674073,-0.33323}
,
{0.126971,0.0561826,-0.248729,0.0152145,0.146571,-0.0127918}
,
{0.00904477,0.116513,-0.273241,-0.0722979,0.0946043,0.104022}
,
{0.373387,0.285835,0.360254,0.292417,0.131324,0.563303}
,
{0.00862456,0.00484535,-0.0555395,0.140168,0.167681,0.269169}
,
{-0.0631958,0.0715369,-0.0470081,0.291687,0.0944226,0.170603}
,
{-0.112932,-0.117494,-0.161639,-0.402862,0.12637,-0.259673}
,
{0.206551,-0.00429288,0.0856801,0.188493,-0.227573,0.0863501}
,
{0.119559,0.193707,0.0106464,-0.0122323,-0.0814145,0.120024}
,
{0.0907963,0.160809,0.273054,0.0170709,-0.0702212,-0.0827314}
,
{-0.134042,-0.282254,0.235126,-0.318414,-0.0529066,-0.0714736}
,
{0.0885096,-0.024558,0.11709,0.111749,0.123806,-0.127699}
,
{-0.0234792,-0.218796,-0.206308,-0.0240858,0.426455,-0.233613}
,
{0.533636,0.365391,0.36108,0.288202,-0.0306697,0.496141}
,
{-0.091204,-0.0841629,0.381104,0.235681,0.160748,0.374222}
,
{0.0652129,0.0162397,0.165605,0.000749826,-0.0912543,-0.059684}
 };
  static const float bias2[1] = { 0.316667 };
  static const float weights2[][1] = { {0.0573498}
,
{0.0374542}
,
{0.0768424}
,
{0.0510083}
,
{0.146965}
,
{0.0205857}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_2(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_2(v, index);
}
static int assign_gen_lepton_prior_1_0_2() {
  global_gen_lepton_prior.at(1,0,2) = &specialized_gen_lepton_prior_1_0_2;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_2 = assign_gen_lepton_prior_1_0_2();
#include "nn_framework.hh"

template<typename T> float gen_lepton_prior_1_0_3(const T & vals_in, int index) {
  static_assert(T::size0 >= 79,
     "array must be sized to hold at least 79");
  static const float bias1[6] = { -0.0806447,-0.0742435,0.0564575,0.16649,0.161316,0.00699735 };
  static const float weights1[][6] = { {0.1705,-0.174048,0.131938,-0.436644,-0.226901,0.0408654}
,
{-0.0191544,-0.0659575,0.148885,-0.0573206,0.137025,0.0859737}
,
{-0.18468,-0.377316,0.0947857,0.204022,-0.0685714,0.0521424}
,
{0.00557176,0.155094,0.152047,0.344182,0.219993,0.000341061}
,
{-0.00872959,0.0754776,0.219713,0.138492,0.233891,-0.00600375}
,
{-0.0879231,-0.232134,0.0578074,0.306113,0.0549815,0.11363}
,
{-0.143948,-0.0107003,0.00770418,0.00280278,0.129413,-0.179363}
,
{-0.0926938,-0.109196,0.0360856,0.147872,-0.0201204,-0.444943}
,
{-0.230258,-0.041182,-0.120039,-0.0807024,0.0167719,-0.0314535}
,
{-0.0427314,0.119323,-0.136442,0.125333,0.0148777,0.0446604}
,
{0.0799032,-0.0328299,-0.0766727,0.0354036,0.121411,-0.00346016}
,
{-0.159012,-0.157752,0.0154624,-0.133481,0.0588181,-0.268369}
,
{-0.224374,-0.121969,0.196907,0.0142999,0.176792,0.56327}
,
{-0.317157,-0.0334262,0.172262,0.141235,0.022379,-0.0879209}
,
{0.00836269,0.0613915,0.15375,0.182401,-0.0143495,-0.177818}
,
{-0.0650949,0.210996,-0.0352367,-0.160892,0.217469,0.045134}
,
{-0.0869708,-0.283155,-0.445854,0.439763,0.537107,-0.424023}
,
{-0.239061,-0.0975403,0.0771782,0.106443,-0.0265125,-0.106855}
,
{0.210694,0.0697529,0.0509337,-0.00236818,0.00124955,0.042866}
,
{-0.286034,0.116941,-0.0260061,0.00805372,-0.0024034,-0.374529}
,
{0.0249435,0.108891,0.0832321,0.0155963,0.0523627,-0.113773}
,
{-0.0564782,-0.123426,0.0341122,-0.0329114,0.0252226,0.251864}
,
{0.0700983,0.0741207,-0.0515027,0.15671,0.056831,0.0386888}
,
{-0.155669,-0.101952,0.0929062,0.0895251,0.0175693,0.032855}
,
{-0.189515,-0.0793326,0.132904,0.1008,0.184949,0.0889401}
,
{-0.0873616,-0.010673,-0.0376048,-0.222831,0.203666,0.106256}
,
{-0.0328111,-0.146857,-0.0634149,0.069222,0.0518932,0.129801}
,
{0.125421,-0.120369,0.0722621,-0.00823793,0.151383,-0.0191194}
,
{-0.143385,-0.412897,-0.0348248,-0.162662,0.208586,-0.0589428}
,
{0.12633,0.0907564,-0.0788944,-0.0781413,0.170008,0.213377}
,
{-0.178852,-0.0717708,-0.236634,0.0531002,-0.127615,-0.00655995}
,
{0.141884,0.0133171,0.0660271,-0.237846,0.0270836,0.054772}
,
{0.0998216,-0.00598588,-0.0162168,-0.115565,0.102715,0.122107}
,
{-0.15488,-0.0194896,-0.184695,-0.031772,-0.074702,-0.0851262}
,
{0.0390835,0.00130544,0.0222236,-0.0843658,0.119248,-0.0367007}
,
{-0.0397082,-0.0351264,0.0499326,0.128576,-0.0854309,-0.0362095}
,
{-0.300022,0.0491146,0.0316759,-0.000750622,0.0312296,-0.196999}
,
{0.027798,0.0452571,-0.0377965,-0.0882626,0.053433,-0.0320394}
,
{-0.276624,0.231589,-0.137265,0.00735193,-0.156724,-0.103681}
,
{0.173466,0.0908373,0.0126213,0.0802024,-0.048319,0.0571673}
,
{-0.138262,0.046422,0.00138964,-0.0360081,0.0471311,-0.106617}
,
{-0.105353,0.0583231,0.0140596,0.21757,-0.209476,-0.109088}
,
{-0.00801392,0.0921213,-0.0442941,-0.0276783,-0.011127,-0.0155155}
,
{0.041925,-0.0108167,0.137153,0.105315,0.0981039,-0.015458}
,
{-0.243062,-0.00815005,-0.00869857,-0.0954332,0.0980134,-0.154741}
,
{-0.050593,-0.0668574,-0.0127617,0.0466965,-0.0710047,0.0775885}
,
{0.204682,-0.226632,0.117233,0.0919485,0.028565,0.158759}
,
{-0.0925691,0.0444504,0.030545,0.0799291,-0.0550891,-0.00723886}
,
{-0.0529705,-0.127334,0.0436252,0.207057,-0.130111,-0.0441179}
,
{0.216112,0.136629,0.0624011,0.128812,-0.0557258,0.0796844}
,
{-0.000612929,0.00298542,-0.0676142,-0.120443,0.0547386,0.0383554}
,
{-0.0720401,-0.0275247,0.094075,-0.0691251,0.163175,0.0263921}
,
{-0.083843,-0.061243,-0.0155367,-0.0251886,0.00860412,0.0367183}
,
{-0.309822,0.02231,-0.0029728,-0.0197528,0.0404856,0.0538038}
,
{0.177767,0.122242,2.43318e-05,-0.0934955,-0.150858,-0.106575}
,
{-0.102203,-0.0187162,-0.0960093,0.0191653,-0.25874,-0.0784644}
,
{0.0841216,-0.37595,0.153867,0.400789,-0.0882433,0.0275609}
,
{0.35677,0.174953,0.160948,0.101174,0.0463389,0.014272}
,
{-0.602413,0.00520835,-0.0253011,-0.0665427,0.0288076,-0.1538}
,
{0.173768,0.231637,0.0038383,-0.209276,0.0760606,0.00240238}
,
{-0.00704482,-0.137954,0.134817,0.280689,0.0342647,0.0362279}
,
{0.0236211,-0.138088,-0.110907,0.0979661,0.189923,0.141701}
,
{0.72486,0.31736,0.296742,0.217635,0.00591014,-0.101673}
,
{-0.972967,-0.0298848,-0.195962,1.33403,-0.194837,0.428302}
,
{0.180128,0.0819775,0.138727,0.256641,-0.0213187,0.0356383}
,
{-0.190522,-0.0750728,0.00385382,0.195373,-0.12194,0.0158884}
,
{0.216094,-0.238995,-0.317518,0.396791,-0.171132,0.395889}
,
{-0.273546,-0.634257,0.149036,0.719246,-0.0914228,-0.0178993}
,
{-0.205125,0.0425897,-0.171199,-0.213064,0.167063,0.342333}
,
{0.240937,0.151499,-0.0522176,-0.136125,-0.0396856,-0.0205454}
,
{0.0751597,-0.211094,-0.0417735,0.026043,-0.14047,-0.0475362}
,
{-0.421963,0.00174777,-0.0619887,0.373988,-0.0479183,0.0461873}
,
{-0.61927,0.493881,0.160698,-0.525991,-0.252387,-0.0640858}
,
{0.884912,-0.295332,-0.371571,0.23663,0.0650441,0.173734}
,
{-0.477077,-0.430584,0.110644,-1.27677,-0.253213,0.0637964}
,
{0.0948918,0.151243,0.0608144,-0.190677,0.381601,0.213877}
,
{-0.188418,0.175874,0.214509,-0.317107,-0.477874,0.101767}
,
{0.0423447,0.0271311,-0.10207,0.0479267,0.051438,-0.0408732}
,
{0.115036,0.104662,0.0479874,-0.0955494,-0.113103,-0.0483599}
 };
  static const float bias2[1] = { 0.229943 };
  static const float weights2[][1] = { {-0.472584}
,
{-0.0951279}
,
{-0.0900656}
,
{0.0778457}
,
{0.0720606}
,
{-0.127682}
 };
  always_assert(index < 1);
  float tmp[6];
  for (unsigned int i = 0; i < 6; i++) {
    float sum = 0.f;
    for (unsigned int j = 0; j < 79; j++) {
      sum += weights1[j][i] * vals_in[j];
    }
    sum += bias1[i];
    tmp[i] = sum > 0.f ? sum : 0.f; // RELU
  }
  float sum = 0.f;
  for (unsigned int j = 0; j < 6; j++) {
    sum += weights2[j][index] * tmp[j];
  }
  sum += bias2[index];
  return sum;
}
float specialized_gen_lepton_prior_1_0_3(const Sirikata::Array1d<int16_t, 79> &v,
                                int index) {
  return gen_lepton_prior_1_0_3(v, index);
}
static int assign_gen_lepton_prior_1_0_3() {
  global_gen_lepton_prior.at(1,0,3) = &specialized_gen_lepton_prior_1_0_3;
  return 0;
}
static int initialize_gen_lepton_prior_1_0_3 = assign_gen_lepton_prior_1_0_3();
